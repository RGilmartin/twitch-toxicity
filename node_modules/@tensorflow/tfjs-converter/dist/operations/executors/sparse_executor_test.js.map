{"version":3,"file":"sparse_executor_test.js","sourceRoot":"","sources":["../../../src/operations/executors/sparse_executor_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AACH,OAAO,EAAS,SAAS,EAAC,MAAM,uBAAuB,CAAC;AACxD,iDAAiD;AACjD,OAAO,KAAK,KAAK,MAAM,kDAAkD,CAAC;AAE1E,OAAO,EAAC,gBAAgB,EAAC,MAAM,kCAAkC,CAAC;AAClE,OAAO,KAAK,MAAM,MAAM,mBAAmB,CAAC;AAG5C,OAAO,EAAC,SAAS,EAAC,MAAM,mBAAmB,CAAC;AAC5C,OAAO,EAAC,gBAAgB,EAAE,aAAa,EAAC,MAAM,eAAe,CAAC;AAE9D,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,IAAI,IAAU,CAAC;IACf,MAAM,YAAY,GAAG,CAAC,KAAK,CAAC,QAAQ,CAChC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IACrE,MAAM,UAAU,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IACxD,MAAM,QAAQ,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IACpD,MAAM,OAAO,GAAG,IAAI,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAEjD,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,GAAG;YACL,IAAI,EAAE,MAAM;YACZ,EAAE,EAAE,EAAE;YACN,QAAQ,EAAE,QAAQ;YAClB,UAAU,EAAE,CAAC,cAAc,EAAE,YAAY,EAAE,UAAU,CAAC;YACtD,MAAM,EAAE,EAAE;YACV,WAAW,EAAE;gBACX,YAAY,EAAE,gBAAgB,CAAC,CAAC,CAAC;gBACjC,UAAU,EAAE,gBAAgB,CAAC,CAAC,CAAC;gBAC/B,QAAQ,EAAE,gBAAgB,CAAC,CAAC,CAAC;aAC9B;YACD,UAAU,EAAE,EAAE;YACd,QAAQ,EAAE,EAAE;SACb,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;YAC7B,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;gBACtD,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;gBACvD,IAAI,CAAC,EAAE,GAAG,eAAe,CAAC;gBAC1B,MAAM,MAAM,GACR,SAAS,CAAC,IAAI,EAAE,EAAC,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAC,EAAE,OAAO,CACrD,CAAC;gBAEb,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC;qBAC7B,oBAAoB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvE,SAAS,CAAC,iBAAiB,CACvB,MAAM,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC5D,SAAS,CAAC,iBAAiB,CAAC,MAAM,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;gBAC/B,IAAI,CAAC,EAAE,GAAG,eAAe,CAAC;gBAE1B,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;YACxD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor, test_util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {ExecutionContext} from '../../executor/execution_context';\nimport * as sparse from '../op_list/sparse';\nimport {Node} from '../types';\n\nimport {executeOp} from './sparse_executor';\nimport {createTensorAttr, validateParam} from './test_helper';\n\ndescribe('sparse', () => {\n  let node: Node;\n  const inputIndices = [tfOps.tensor2d(\n      [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 2, 3], [5, 3], 'int32')];\n  const inputShape = [tfOps.tensor1d([2, 3, 6], 'int32')];\n  const newShape = [tfOps.tensor1d([9, -1], 'int32')];\n  const context = new ExecutionContext({}, {}, {});\n\n  beforeEach(() => {\n    node = {\n      name: 'test',\n      op: '',\n      category: 'sparse',\n      inputNames: ['inputIndices', 'inputShape', 'newShape'],\n      inputs: [],\n      inputParams: {\n        inputIndices: createTensorAttr(0),\n        inputShape: createTensorAttr(1),\n        newShape: createTensorAttr(2)\n      },\n      attrParams: {},\n      children: []\n    };\n  });\n\n  describe('executeOp', () => {\n    describe('SparseReshape', () => {\n      it('should call tfOps.sparse.sparseReshape', async () => {\n        spyOn(tfOps.sparse, 'sparseReshape').and.callThrough();\n        node.op = 'SparseReshape';\n        const result =\n            executeOp(node, {inputIndices, inputShape, newShape}, context) as\n            Tensor[];\n\n        expect(tfOps.sparse.sparseReshape)\n            .toHaveBeenCalledWith(inputIndices[0], inputShape[0], newShape[0]);\n        test_util.expectArraysClose(\n            await result[0].data(), [0, 0, 0, 1, 1, 2, 4, 2, 8, 1]);\n        test_util.expectArraysClose(await result[1].data(), [9, 4]);\n      });\n\n      it('should match json def', () => {\n        node.op = 'SparseReshape';\n\n        expect(validateParam(node, sparse.json)).toBeTruthy();\n      });\n    });\n  });\n});\n"]}