{"version":3,"file":"Reshape_test.js","sourceRoot":"","sources":["../../src/kernels/Reshape_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAC5C,OAAO,EAAS,SAAS,EAAC,MAAM,uBAAuB,CAAC;AAExD,MAAM,EAAC,iBAAiB,EAAE,iBAAiB,EAAC,GAAG,SAAS,CAAC;AACzD,iDAAiD;AACjD,OAAO,EAAC,iBAAiB,EAAE,QAAQ,EAAC,MAAM,yCAAyC,CAAC;AAEpF,iBAAiB,CAAC,UAAU,EAAE,QAAQ,EAAE,GAAG,EAAE;IAC3C,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC1C,MAAM,aAAa,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QAEvD,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACpC,MAAM,GAAG;QACL,0DAA0D;QAC1D,EAAE,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,SAAS,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAW,CAAC;QAErE,iBAAiB,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAClD,iBAAiB,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAErC,MAAM,eAAe,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QACzD,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;QAEnD,CAAC,CAAC,OAAO,EAAE,CAAC;QACZ,GAAG,CAAC,OAAO,EAAE,CAAC;QAEd,MAAM,mBAAmB,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QAC7D,MAAM,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAChE,MAAM,aAAa,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QAEvD,uBAAuB;QACvB,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAEpC,2BAA2B;QAC3B,MAAM,GAAG;QACL,0DAA0D;QAC1D,EAAE,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,SAAS,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAW,CAAC;QAErE,iBAAiB,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAErC,2BAA2B;QAC3B,MAAM,IAAI;QACN,0DAA0D;QAC1D,EAAE,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,SAAS,EAAE,EAAC,CAAC,EAAE,GAAG,EAAC,EAAE,EAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAW,CAAC;QAC1E,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAEtC,MAAM,gBAAgB,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QAC1D,MAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;QAEpD,GAAG,CAAC,OAAO,EAAE,CAAC;QAEd,MAAM,eAAe,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QACzD,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;QAEnD,CAAC,CAAC,OAAO,EAAE,CAAC;QACZ,IAAI,CAAC,OAAO,EAAE,CAAC;QAEf,MAAM,mBAAmB,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QAC7D,wCAAwC;QACxC,MAAM,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {Tensor, test_util} from '@tensorflow/tfjs-core';\n\nconst {expectArraysClose, expectArraysEqual} = test_util;\n// tslint:disable-next-line: no-imports-from-dist\nimport {describeWithFlags, ALL_ENVS} from '@tensorflow/tfjs-core/dist/jasmine_util';\n\ndescribeWithFlags('Reshape.', ALL_ENVS, () => {\n  it('does not have memory leak.', async () => {\n    const beforeDataIds = tf.engine().backend.numDataIds();\n\n    const x = tf.tensor1d([1, 1, 1, 1]);\n    const res =\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        tf.engine().runKernel('Reshape', {x}, {shape: [2, 2]}) as Tensor;\n\n    expectArraysClose(await res.data(), [1, 1, 1, 1]);\n    expectArraysEqual(res.shape, [2, 2]);\n\n    const afterResDataIds = tf.engine().backend.numDataIds();\n    expect(afterResDataIds).toEqual(beforeDataIds + 1);\n\n    x.dispose();\n    res.dispose();\n\n    const afterDisposeDataIds = tf.engine().backend.numDataIds();\n    expect(afterDisposeDataIds).toEqual(beforeDataIds);\n  });\n\n  it('does not have memory leak calling reshape twice.', async () => {\n    const beforeDataIds = tf.engine().backend.numDataIds();\n\n    // Adding 1 new dataId.\n    const x = tf.tensor1d([1, 1, 1, 1]);\n\n    // Does not add new dataId;\n    const res =\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        tf.engine().runKernel('Reshape', {x}, {shape: [2, 2]}) as Tensor;\n\n    expectArraysEqual(res.shape, [2, 2]);\n\n    // Does not add new dataId.\n    const res2 =\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        tf.engine().runKernel('Reshape', {x: res}, {shape: [1, 4]}) as Tensor;\n    expectArraysEqual(res2.shape, [1, 4]);\n\n    const afterRes2DataIds = tf.engine().backend.numDataIds();\n    expect(afterRes2DataIds).toEqual(beforeDataIds + 1);\n\n    res.dispose();\n\n    const afterResDataIds = tf.engine().backend.numDataIds();\n    expect(afterResDataIds).toEqual(beforeDataIds + 1);\n\n    x.dispose();\n    res2.dispose();\n\n    const afterDisposeDataIds = tf.engine().backend.numDataIds();\n    // Should be able to dispose the dataId.\n    expect(afterDisposeDataIds).toEqual(beforeDataIds);\n  });\n});\n"]}