/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class e{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class t{refCount(e){return n("refCount")}incRef(e){return n("incRef")}timerAvailable(){return!0}time(e){return n("time")}read(e){return n("read")}readSync(e){return n("readSync")}numDataIds(){return n("numDataIds")}disposeData(e,t){return n("disposeData")}write(e,t,s){return n("write")}move(e,t,s,r,a){return n("move")}memory(){return n("memory")}floatPrecision(){return n("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return n("dispose")}}function n(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function s(e){let t=e.length,n=0,s=0;for(;t>0;)s=Math.random()*t|0,t--,n=e[t],e[t]=e[s],e[s]=n}function r(e,t,n){return Math.max(e,Math.min(t,n))}function a(e){return e%2==0?e:e+1}function i(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function o(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function l(e,t,n=""){o(p(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function u(e){o(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function c(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||C(e)&&!n)for(let s=0;s<e.length;++s)c(e[s],t,n);else t.push(e);return t}function h(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function p(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function d(e){return e%1==0}function f(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function m(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function g(e,t=(e=>0),n){return new Promise(((s,r)=>{let a=0;const i=()=>{if(e())return void s();a++;const o=t(a);null!=n&&a>=n?r():setTimeout(i,o)};i()}))}function y(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function b(e,t){const n=t.length;return o((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),o(e.every((e=>d(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function x(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:b(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function w(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function k(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function v(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function N(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function I(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function C(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function $(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function S(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function T(e){return"string"==typeof e||e instanceof String}function E(e){return"boolean"==typeof e}function A(e){return"number"==typeof e}function R(e){return Array.isArray(e)?R(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":A(e)?"float32":T(e)?"string":E(e)?"bool":"float32"}function F(e){return!!(e&&e.constructor&&e.call&&e.apply)}function D(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function _(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function O(e,t,n,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<a;t++)r[t]=O(e+t*o,i,n,s)}return r}function M(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return O(0,e,t,n)}function L(e,t){const n=z(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function z(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function B(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return M(e,new Float32Array(n));if("int32"===t)return M(e,new Int32Array(n));if("bool"===t)return M(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function P(e){e.forEach((t=>{o(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function W(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function V(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function U(e){return e&&e.then&&"function"==typeof e.then}class G{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=H,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(U(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if("tfjsflags"in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function H(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function j(){return K}let q,K=null;function X(){if(null==q){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}q=e}return q}function Y(e,t){const n=function(){const e=X();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const J="Abs",Z="Acos",Q="Acosh",ee="Add",te="AddN",ne="All",se="Any",re="ArgMax",ae="ArgMin",ie="Asin",oe="Asinh",le="Atan",ue="Atanh",ce="Atan2",he="AvgPool",pe="AvgPoolGrad",de="AvgPool3D",fe="AvgPool3DGrad",me="BatchMatMul",ge="BatchToSpaceND",ye="Bincount",be="BroadcastTo",xe="Cast",we="Ceil",ke="ClipByValue",ve="Complex",Ne="ComplexAbs",Ie="Concat",Ce="Conv2D",$e="Conv2DBackpropFilter",Se="Conv2DBackpropInput",Te="Conv3D",Ee="Conv3DBackpropFilterV2",Ae="Conv3DBackpropInputV2",Re="Cos",Fe="Cosh",De="Cumsum",_e="CropAndResize",Oe="DenseBincount",Me="DepthToSpace",Le="DepthwiseConv2dNative",ze="DepthwiseConv2dNativeBackpropFilter",Be="DepthwiseConv2dNativeBackpropInput",Pe="Diag",We="Dilation2D",Ve="Dilation2DBackpropInput",Ue="Dilation2DBackpropFilter",Ge="RealDiv",He="Einsum",je="Elu",qe="EluGrad",Ke="Erf",Xe="Equal",Ye="Exp",Je="ExpandDims",Ze="Expm1",Qe="FFT",et="Fill",tt="FlipLeftRight",nt="Floor",st="FloorDiv",rt="FusedBatchNorm",at="GatherV2",it="GatherNd",ot="Greater",lt="GreaterEqual",ut="Identity",ct="IFFT",ht="Imag",pt="IsFinite",dt="IsInf",ft="IsNan",mt="LeakyRelu",gt="Less",yt="LessEqual",bt="LinSpace",xt="Log",wt="Log1p",kt="LogicalAnd",vt="LogicalNot",Nt="LogicalOr",It="LogSoftmax",Ct="LRN",$t="LRNGrad",St="Max",Tt="Maximum",Et="MaxPool",At="MaxPoolGrad",Rt="MaxPool3D",Ft="MaxPool3DGrad",Dt="MaxPoolWithArgmax",_t="Mean",Ot="Min",Mt="Minimum",Lt="MirrorPad",zt="Mod",Bt="Multinomial",Pt="Multiply",Wt="Neg",Vt="NotEqual",Ut="NonMaxSuppressionV3",Gt="NonMaxSuppressionV4",Ht="NonMaxSuppressionV5",jt="OnesLike",qt="OneHot",Kt="Pack",Xt="PadV2",Yt="Pool",Jt="Pow",Zt="Prelu",Qt="Prod",en="Range",tn="Real",nn="Reciprocal",sn="Relu",rn="Reshape",an="ResizeNearestNeighbor",on="ResizeNearestNeighborGrad",ln="ResizeBilinear",un="ResizeBilinearGrad",cn="Relu6",hn="Reverse",pn="Round",dn="Rsqrt",fn="ScatterNd",mn="Select",gn="Selu",yn="Slice",bn="Sin",xn="Sinh",wn="Sign",kn="Sigmoid",vn="Softplus",Nn="Sqrt",In="Sum",Cn="SpaceToBatchND",$n="SplitV",Sn="Softmax",Tn="SparseFillEmptyRows",En="SparseReshape",An="SparseToDense",Rn="SquaredDifference",Fn="Square",Dn="StridedSlice",_n="Sub",On="Tan",Mn="Tanh",Ln="Tile",zn="TopK",Bn="Transform",Pn="Transpose",Wn="Unique",Vn="Unpack",Un="UnsortedSegmentSum",Gn="ZerosLike",Hn="Step",jn="FromPixels",qn="RotateWithOffset",Kn="_FusedMatMul",Xn="FusedConv2D",Yn="FusedDepthwiseConv2D",Jn=Y("kernelRegistry",(()=>new Map)),Zn=Y("gradRegistry",(()=>new Map));function Qn(e,t){const n=os(e,t);return Jn.get(n)}function es(e){return Zn.get(e)}function ts(e){const t=Jn.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function ns(e){const{kernelName:t,backendName:n}=e,s=os(t,n);Jn.has(s)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),Jn.set(s,e)}function ss(e){const{kernelName:t}=e;Zn.has(t)&&j().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),Zn.set(t,e)}function rs(e,t){const n=os(e,t);if(!Jn.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);Jn.delete(n)}function as(e){if(!Zn.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);Zn.delete(e)}function is(e,t){ts(e).forEach((e=>{ns(Object.assign({},e,{backendName:t}))}))}function os(e,t){return`${t}_${e}`}function ls(e,t){return"string"===t?ps(e):us([e],t)}function us(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=c(e)),j().getBool("DEBUG")&&v(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function cs(){return j().platform.now()}function hs(e,t){return j().platform.fetch(e,t)}function ps(e,t="utf-8"){return t=t||"utf-8",j().platform.encode(e,t)}function ds(e,t="utf-8"){return t=t||"utf-8",j().platform.decode(e,t)}var fs=Object.freeze({__proto__:null,createScalarValue:ls,toTypedArray:us,now:cs,fetch:hs,encodeString:ps,decodeString:ds,shuffle:s,shuffleCombo:function(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n,s,r=e.length,a=0;for(;r>0;)a=Math.random()*r|0,r--,n=e[r],s=t[r],e[r]=e[a],t[r]=t[a],e[a]=n,t[a]=s},clamp:r,nearestLargerEven:a,sum:i,randUniform:function(e,t){const n=Math.random();return t*n+(1-n)*e},distSquared:function(e,t){let n=0;for(let s=0;s<e.length;s++){const r=Number(e[s])-Number(t[s]);n+=r*r}return n},assert:o,assertShapesMatch:l,assertNonNull:u,flatten:c,sizeFromShape:h,isScalarShape:function(e){return 0===e.length},arraysEqual:p,isInt:d,tanh:function(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}},sizeToSquarishShape:f,createShuffledIndices:function(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return s(t),t},rightPad:m,repeatedTry:g,inferFromImplicitShape:y,parseAxisParam:b,squeezeShape:x,getTypedArrayFromDType:w,getArrayFromDType:k,checkConversionForErrors:v,isValidDtype:N,hasEncodingLoss:I,isTypedArray:C,bytesPerElement:$,bytesFromStringArray:S,isString:T,isBoolean:E,isNumber:A,inferDtype:R,isFunction:F,nearestDivisor:D,computeStrides:_,toNestedArray:M,makeOnesTypedArray:L,makeZerosTypedArray:z,makeZerosNestedTypedArray:B,assertNonNegativeIntegerDimensions:P,locToIndex:W,indexToLoc:V,isPromise:U});class ms{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new ys)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let a;const i=cs();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();a=Promise.resolve({kernelMs:cs()-i})}if(j().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{gs(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function gs(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class ys{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?m(`${s}ms`,9):s.error,o=m(e,25),l=t.rank,u=t.size,c=m(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;h+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function bs(e,t,n,s){const r=_(t),a=function(e,t,n,s){const r=h(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?vs(e):e;if(o>1)for(let e=0;e<r/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],xs(l[t+e],0,n).length)}return i}(e,t,n,r),i=t.length,o=ks(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function xs(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:T(e)?`'${e}'`:"bool"===n?ws(e):parseFloat(e.toFixed(7)).toString(),m(s,t)}function ws(e){return 0===e?"false":"true"}function ks(e,t,n,s,r,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l){if("complex64"===n){return[xs(vs(e)[0],0,n)]}return"bool"===n?[ws(e[0])]:[e[0].toString()]}if(1===l){if(o>20){const t=3*i;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(s=vs(s),a=vs(a)),["["+s.map(((e,t)=>xs(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>xs(e,r[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?vs(e):Array.from(e)).map(((e,t)=>xs(e,r[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const s=t*h,a=s+h;p.push(...ks(e.slice(s,a),u,n,c,r,!1))}p.push("...");for(let t=o-3;t<o;t++){const s=t*h,a=s+h;p.push(...ks(e.slice(s,a),u,n,c,r,t===o-1))}}else for(let t=0;t<o;t++){const s=t*h,a=s+h;p.push(...ks(e.slice(s,a),u,n,c,r,t===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function vs(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Ns{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=h(e),null!=n){const e=n.length;o(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||k(t,this.size),this.strides=_(e)}set(e,...t){0===t.length&&(t=[0]),o(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Is().makeTensor(this.values,this.shape,this.dtype)}}let Is=null,Cs=null,$s=null;class Ss{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=h(e),this.strides=_(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Cs.buffer(this.shape,this.dtype,e)}bufferSync(){return Cs.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return M(this.shape,e,"complex64"===this.dtype)}arraySync(){return M(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Is().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>ds(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=Is().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>ds(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Is().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Is().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Cs.print(this,e)}clone(){return this.throwIfDisposed(),Cs.clone(this)}toString(e=!1){return bs(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Cs.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Is().makeVariable(this,e,t,n)}}function Ts(){return Y("Tensor",(()=>Ss))}Object.defineProperty(Ss,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Ts();class Es extends Ss{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!p(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Is().disposeTensor(this),this.dataId=e.dataId,Is().incRef(this,null)}dispose(){Is().disposeVariable(this),this.isDisposedInternal=!0}}var As,Rs,Fs,Ds,_s;Object.defineProperty(Es,Symbol.hasInstance,{value:e=>e instanceof Ss&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(As||(As={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(Rs||(Rs={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Fs||(Fs={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Ds||(Ds={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(_s||(_s={}));const Os={float32:Ds,int32:Rs,bool:Fs,complex64:_s};function Ms(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Os[e][t]}function Ls(e){return Ms(e,"int32")}function zs(e,t){if(e.dtype===t.dtype)return[e,t];const n=Ms(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Bs(e,t){o(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function Ps(e,t){return t.some((t=>t.id===e.id))}function Ws(e){const t=[];return Vs(e,t,new Set),t}function Vs(e,t,n){if(null==e)return;if(e instanceof Ss)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),Vs(s,t,n))}}var Us=Object.freeze({__proto__:null,makeTypesMatch:zs,assertTypesMatch:Bs,isTensorInList:Ps,getTensorsInContainer:Ws});function Gs(e){return null!=e.kernelName}class Hs{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class js{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Hs}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new ms(this.backendInstance),!0}setupRegisteredKernels(){ts(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){ts(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const n=this.registryFactory[e];if(null==n)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const s=n.factory();if(!s||s instanceof t||"function"!=typeof s.then)return this.registry[e]=s,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,n=s.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=n,{success:n,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return js.nextTensorId++}nextVariableId(){return js.nextVariableId++}clone(e){const t=Ks.runKernel("Identity",{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return Ks.runKernel("Cast",t,n)}})),[],{}),t}runKernel(e,t,n){if(!(null!=Qn(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let i,l;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=Gs(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Gs(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const u=Qn(t,this.backendName);o(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();l=u.kernelFunc({inputs:r,attrs:a,backend:this.backend});const i=Array.isArray(l)?l:[l];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const o=i.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:s}=e;return this.makeTensorFromDataId(t,n,s)}));if(s){const e=this.getTensorsForGradient(t,r,o);n=this.saveTensorsForBackwardMode(e)}return o}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();l=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(l)?l:[l];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:c,attrs:h}=e,p=Gs(e)?null:e.backwardsFunc;let d;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(u,c,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs):t=i()})),s&&this.addTapeNode(u,c,t,p,n,h),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map((e=>null!=c[e]?c[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(l)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=es(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(o(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>r[t]));return a.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&T(e[0])&&(r=e.map((e=>ps(e))));const a=s.write(r,t,n),i=new Ss(t,n,a,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=S(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r=new Ss(t,n=n||"float32",e,this.nextTensorId());return this.trackTensor(r,s),r}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new Es(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*$(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Es||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*$(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=es(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=z(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Ws(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(o(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));o(r instanceof Ss,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach((e=>s[e.id]=!0)),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=L(h(e),"float32");return Ks.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!p(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),Xs);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){return o(F(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;o(t.every((e=>e instanceof Ss)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};t.forEach(((e,t)=>{s[t]=e}));return this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),o(n.value instanceof Ss,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),o(F(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];o(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),o(a.every((e=>e instanceof Ss)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=cs(),n=await this.backend.time(e);return n.wallMs=cs()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Hs;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function qs(){const e=X();if(null==e._tfengine){const t=new G(e);e._tfengine=new js(t)}var t;return t=e._tfengine.ENV,K=t,Is=()=>e._tfengine,e._tfengine}js.nextTensorId=0,js.nextVariableId=0;const Ks=qs();function Xs(e,t){const n={a:e,b:t};return Ks.runKernel(ee,n)}function Ys(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Js(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var Zs=Object.freeze({__proto__:null,isMobile:Ys,isBrowser:Js});const Qs=j();function er(e,t){let n=e;if(C(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||C(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&j().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&tr(e,s,[]),s}function tr(e,t,n){if(n=n||[],!Array.isArray(e)&&!C(e))return void o(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));o(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),o(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)tr(e[t],s,n.concat(t))}function nr(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function sr(e,t,n,s="numeric"){if(e instanceof Ss)return nr(s,e.dtype,t,n),e;let r=R(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),nr(s,r,t,n),null==e||!C(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=er(e,r);C(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?us(e,r):c(e,[],!0);return Ks.makeTensor(i,a,r)}function rr(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>sr(e,`${t}[${r}]`,n,s)))}Qs.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Qs.registerFlag("IS_BROWSER",(()=>Js())),Qs.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),Qs.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Qs.registerFlag("PROD",(()=>!1)),Qs.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Qs.getBool("DEBUG"))),Qs.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Qs.registerFlag("IS_TEST",(()=>!1)),Qs.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),Qs.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1));const ar="__op";function ir(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const r=(...e)=>{Ks.startScope(n);try{const t=s(...e);return U(t)&&console.error("Cannot return a Promise inside of tidy."),Ks.endScope(t),t}catch(e){throw Ks.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const or=ir({complex_:function(e,t){const n=sr(e,"real","complex"),s=sr(t,"imag","complex");l(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return Ks.runKernel("Complex",r)}});function lr(e,t,n,s){if(null==s&&(s=R(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!C(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){P(t);const e=h(t),s=h(n);o(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==h(t.slice(e));o(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return C(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?us(e,s):c(e,[],!0),Ks.makeTensor(e,t,s)}function ur(e,t,n){return lr(e,t,er(e,n),n)}const cr={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function hr(e,t){const n=[],s=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:dr(await Promise.all(s)),specs:n}}function pr(e,t){const n={};let s,r=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=h(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=cr[n.dtype],c=e.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=xr()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}r+=l*o}else if("string"===i){const t=h(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+4))[0];r+=4;const n=new Uint8Array(e.slice(r,r+t));u.push(n),r+=t}}else{const s=cr[i],a=e.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const r=ur(e,o,"float32"),i=ur(s,o,"float32");n[t]=or(r,i),r.dispose(),i.dispose()}}r+=l*s}"complex64"!==i&&(n[t]=ur(u,o,i))}return n}function dr(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const fr="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function mr(e){return fr?Buffer.byteLength(e):new Blob([e]).size}function gr(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function yr(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function br(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:mr(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:mr(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function xr(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[r]=o}return new Float32Array(r)}}class wr{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==wr.instance&&(wr.instance=new wr),wr.instance}static registerSaveRouter(e){wr.getInstance().saveRouters.push(e)}static registerLoadRouter(e){wr.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return wr.getHandlers(e,"save")}static getLoadHandlers(e,t){return wr.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?wr.getInstance().loadRouters:wr.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const kr=e=>wr.getSaveHandlers(e),vr=(e,t)=>wr.getLoadHandlers(e,t);function Nr(){if(!j().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Ir(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class Cr{constructor(e){if(this.indexedDB=Nr(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open("tensorflowjs",1);s.onupgradeneeded=()=>Ir(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction("models_store","readonly"),s=t.objectStore("models_store").get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=br(t),a=r.transaction("model_info_store","readwrite");let i=a.objectStore("model_info_store");const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=r.transaction("models_store","readwrite");const o=l.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=a.objectStore("model_info_store");const t=i.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(o.error)),t.onerror=e=>(r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}Cr.URL_SCHEME="indexeddb://";const $r=e=>{return j().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Cr.URL_SCHEME)?(t=e.slice(Cr.URL_SCHEME.length),new Cr(t)):null;var t};wr.registerSaveRouter($r),wr.registerLoadRouter($r);class Sr{constructor(){this.indexedDB=Nr()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>Ir(n),n.onsuccess=()=>{const s=n.result,r=s.transaction("model_info_store","readonly"),a=r.objectStore("model_info_store").getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(Cr.URL_SCHEME)?t.slice(Cr.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open("tensorflowjs",1);s.onupgradeneeded=()=>Ir(s),s.onsuccess=()=>{const r=s.result,a=r.transaction("model_info_store","readwrite"),i=a.objectStore("model_info_store"),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction("models_store","readwrite");const s=l.objectStore("models_store").delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}}const Tr="tensorflowjs_models",Er="info",Ar="model_topology",Rr="weight_specs",Fr="weight_data",Dr="model_metadata";function _r(e){return{info:[Tr,e,Er].join("/"),topology:[Tr,e,Ar].join("/"),weightSpecs:[Tr,e,Rr].join("/"),weightData:[Tr,e,Fr].join("/"),modelMetadata:[Tr,e,Dr].join("/")}}function Or(e){const t=e.split("/");if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}class Mr{constructor(e){if(!j().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=_r(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=br(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(fr)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:s}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(fr){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}Mr.URL_SCHEME="localstorage://";const Lr=e=>{return j().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Mr.URL_SCHEME)?(t=e.slice(Mr.URL_SCHEME.length),new Mr(t)):null;var t};wr.registerSaveRouter(Lr),wr.registerLoadRouter(Lr);class zr{constructor(){o(j().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),o("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Tr+"/",n="/"+Er;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);if(r.startsWith(t)&&r.endsWith(n)){e[Or(r)]=JSON.parse(this.LS.getItem(r))}}return e}async removeModel(e){var t;const n=_r(e=(t=e).startsWith(Mr.URL_SCHEME)?t.slice(Mr.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),s}}class Br{constructor(){this.managers={}}static getInstance(){return null==Br.instance&&(Br.instance=new Br),Br.instance}static registerManager(e,t){o(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),o(e.length>0,(()=>"scheme must not be an empty string."));const n=Br.getInstance();o(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function Pr(e){if(-1===e.indexOf("://"))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Br.getSchemes().join(",")}`);return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function Wr(e,t,n=!1){o(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=wr.getLoadHandlers(e);o(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),o(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const r=s[0],a=wr.getSaveHandlers(t);o(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),o(a.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const i=a[0],l=Pr(e).scheme,u=Pr(e).path,c=l===Pr(e).scheme,h=await r.load();n&&c&&await Br.getManager(l).removeModel(u);const p=await i.save(h);return n&&!c&&await Br.getManager(l).removeModel(u),p.modelArtifactsInfo}class Vr{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(j().get("IS_BROWSER")){j().setPlatform("browser",new Vr);try{Br.registerManager(Mr.URL_SCHEME,new zr)}catch(e){}try{Br.registerManager(Cr.URL_SCHEME,new Sr)}catch(e){}}const Ur=()=>require("node-fetch");let Gr;class Hr{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=j().global.fetch?j().global.fetch(e,t):(null==Gr&&(Gr=Ur()),Gr(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}function jr(e,t="float32",n){return t=t||"float32",P(e),new Ns(e,t,n)}j().get("IS_NODE")&&j().setPlatform("node",new Hr);const qr=ir({cast_:function(e,t){const n=sr(e,"x","cast");if(!N(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return Ks.runKernel("Cast",s,r)}});const Kr=ir({clone_:function(e){const t={x:sr(e,"x","clone","string_or_numeric")};return Ks.runKernel("Identity",t)}});function Xr(e,t=!1){console.log(e.toString(t))}qs();Cs={buffer:jr,cast:qr,clone:Kr,print:Xr};function Yr(e){return new Promise((e=>setTimeout(e))).then(e)}class Jr{constructor(e){if(!j().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Jr.URL_SCHEME)&&(e=e.slice(Jr.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer);const r=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=r,await Yr((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Yr((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:br(e)}}}}Jr.URL_SCHEME="downloads://";class Zr{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise(((n,s)=>{const r=new FileReader;r.onload=r=>{const a=JSON.parse(r.target.result),i=a.modelTopology;if(null==i)return void s(new Error(`modelTopology field is missing from file ${e.name}`));0===t.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void s(new Error(`weightManifest field is missing from file ${e.name}`));let l;try{l=this.checkManifestAndWeightFiles(o,t)}catch(e){return void s(e)}const u=[],c=[],h=[];o.forEach((e=>{e.paths.forEach((e=>{c.push(e),h.push(null)})),u.push(...e.weights)})),o.forEach((e=>{e.paths.forEach((e=>{const t=new FileReader;t.onload=t=>{const s=t.target.result,r=c.indexOf(e);if(h[r]=s,-1===h.indexOf(null)){const e={modelTopology:i,weightSpecs:u,weightData:gr(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy};null!=a.signature&&(e.signature=a.signature),null!=a.userDefinedMetadata&&(e.userDefinedMetadata=a.userDefinedMetadata),null!=a.modelInitializer&&(e.modelInitializer=a.modelInitializer),n(e)}},t.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(l[e])}))}))},r.onerror=t=>s(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(e)}))}checkManifestAndWeightFiles(e,t){const n=[],s=t.map((e=>yr(e.name))),r={};for(const a of e)a.paths.forEach((e=>{const a=yr(e);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===s.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[e]=t[s.indexOf(a)]}));if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return r}}function Qr(e,t,n,s){!function(e){o(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){o(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),o(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),o(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(e.map((a=>(a.then((a=>{const i=n+ ++r/e.length*(s-n);return t(i),a})),a))))}async function ea(e,t){null==t&&(t={});const n=null==t.fetchFunc?j().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(s):await Qr(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await Qr(r,t.onProgress,.5,1)}async function ta(e,t="",n,s){return na((e=>ea(e,{requestInit:s})))(e,t,n)}function na(e){return async(t,n="",s)=>{const r=t.map((()=>!1)),a={},i=null!=s?s.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=cr[l]*h(e.shape),c=()=>{r[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=u}))})),!i.every((e=>e))){const e=s.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const l=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),p={};let d=0;return l.forEach((e=>{const n=t[e].paths.length;let s=0;for(let e=0;e<n;e++)s+=c[d+e].byteLength;const r=new ArrayBuffer(s),i=new Uint8Array(r);let o=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[d+e]);i.set(t,o),o+=t.byteLength}a[e].forEach((e=>{const t=pr(r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),d+=n})),p}}wr.registerSaveRouter((e=>j().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Jr.URL_SCHEME)?function(e="model"){return new Jr(e)}(e.slice(Jr.URL_SCHEME.length)):null));class sa{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(o("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=j().platform.fetch,o(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&o(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:br(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest,r=t.generatedBy,a=t.convertedBy,i=t.format,o=t.signature,l=t.userDefinedMetadata;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,c;if(null!=s){const e=await this.loadWeights(s);[u,c]=e}const h={modelTopology:n,weightSpecs:u,weightData:c,generatedBy:r,convertedBy:a,format:i};null!=o&&(h.signature=o),null!=l&&(h.userDefinedMetadata=l);const p=t.modelInitializer;return p&&(h.modelInitializer=p),h}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),s=e.substring(0,t),r=n>t?e.substring(n):"";return[s+"/",r]}(t),r=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(r+e+s);this.weightUrlConverter&&i.push(...await Promise.all(o));return[a,gr(await ea(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function ra(e){return null!=e.match(sa.URL_SCHEME_REGEX)}sa.URL_SCHEME_REGEX=/^https?:\/\//;const aa=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>ra(e))):ra(e),n)return ia(e,t)}return null};function ia(e,t){return new sa(e,t)}function oa(e,t){return ia(e,t)}wr.registerSaveRouter(aa),wr.registerLoadRouter(aa);class la{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class ua{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}var ca=Object.freeze({__proto__:null,browserFiles:function(e){return new Zr(e)},browserHTTPRequest:oa,concatenateArrayBuffers:gr,decodeWeights:pr,encodeWeights:hr,fromMemory:function(e,t,n,s){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new la(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new la({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new la({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s})},getLoadHandlers:vr,getModelArtifactsInfoForJSON:br,getSaveHandlers:kr,http:ia,isHTTPScheme:ra,loadWeights:ta,registerLoadRouter:e=>wr.registerLoadRouter(e),registerSaveRouter:e=>wr.registerSaveRouter(e),weightsLoaderFactory:na,withSaveHandler:function(e){return new ua(e)},copyModel:async function(e,t){return Wr(e,t,!1)},listModels:async function(){const e=Br.getSchemes(),t={};for(const n of e){const e=await Br.getManager(n).listModels();for(const s in e){t[n+"://"+s]=e[s]}}return t},moveModel:async function(e,t){return Wr(e,t,!0)},removeModel:async function(e){const t=Pr(e);return Br.getManager(t.scheme).removeModel(t.path)}});const ha=ir({matMul_:function(e,t,n=!1,s=!1){let r=sr(e,"a","matMul"),a=sr(t,"b","matMul");[r,a]=zs(r,a);const i={a:r,b:a},o={transposeA:n,transposeB:s};return Ks.runKernel("BatchMatMul",i,o)}});const pa=ir({oneHot_:function(e,t,n=1,s=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const r={indices:sr(e,"indices","oneHot","int32")},a={depth:t,onValue:n,offValue:s};return Ks.runKernel("OneHot",r,a)}});const da=ir({transpose_:function(e,t){const n=sr(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),o(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{o(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const s={x:n},r={perm:t};return Ks.runKernel("Transpose",s,r)}});const fa=ir({confusionMatrix_:function(e,t,n){const s=sr(e,"labels","confusionMatrix"),r=sr(t,"predictions","confusionMatrix");o(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),o(1===s.rank,(()=>`Expected the rank of labels to be 1, but got ${s.rank}`)),o(1===r.rank,(()=>`Expected the rank of predictions to be 1, but got ${r.rank}`)),o(s.shape[0]===r.shape[0],(()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`)),o(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=pa(qr(s,"int32"),n),i=pa(qr(r,"int32"),n),l=da(a),u=ha(l,i);return qr(u,"int32")}});var ma=Object.freeze({__proto__:null,confusionMatrix:fa});function ga(e,t,n){if(u(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=er(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return lr(e,t,s,n)}let ya;function ba(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(r){const t=2;if(r&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Qn("FromPixels",Ks.backendName)){const n={pixels:e},s={numChannels:t};return Ks.runKernel("FromPixels",n,s)}const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i?c=e.getContext("2d").getImageData(0,0,l,u).data:s||n?c=e.data:(a||r||o)&&(null==ya&&(ya=document.createElement("canvas").getContext("2d")),ya.canvas.width=l,ya.canvas.height=u,ya.drawImage(e,0,0,l,u),c=ya.getImageData(0,0,l,u).data),4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return ga(h,[u,l,t],"int32")}function xa(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}const wa=ir({fromPixels_:ba});var ka=Object.freeze({__proto__:null,fromPixelsAsync:async function(e,t=3){let n=null;if(j().getBool("WRAP_TO_IMAGEBITMAP")&&xa(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return ba(n,t)},toPixels:async function(e,t){let n=sr(e,"img","toPixels");if(!(e instanceof Ss)){const e=n;n=qr(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[s,r]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let e=0;e<s*r;++e){const t=[0,0,0,255];for(let s=0;s<a;s++){const r=i[e*a+s];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===a?(t[0]=r*o,t[1]=r*o,t[2]=r*o):t[s]=r*o}const s=4*e;l[s+0]=Math.round(t[0]),l[s+1]=Math.round(t[1]),l[s+2]=Math.round(t[2]),l[s+3]=Math.round(t[3])}if(null!=t){t.width=r,t.height=s;const e=t.getContext("2d"),n=new ImageData(l,r,s);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l},fromPixels:wa});function va(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===h(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let e=0;e<r.length-1;++e)i*=r[e];const o=e.shape,l=r.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=o[e],l.push(o[e]);const c=[..._(e.shape).map((e=>e/u)),1].slice(0,a);return[l,i,u,c]}var Na=Object.freeze({__proto__:null,prepareAndValidate:va});function Ia(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function Ca(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Ia(n,t,e)}function $a(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let e=r;e<a;++e)i*=n[e];const o=r<1?1:r;return{sliceRank:r,numUpdates:h(t.shape)/o,sliceSize:i,strides:[..._(n.slice(0,r)),1],outputSize:h(n)}}var Sa=Object.freeze({__proto__:null,validateUpdateShape:Ia,validateInput:Ca,calculateShapes:$a});function Ta(e,t,n){const s=e.shape.length;o(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),o(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)o(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function Ea(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Aa(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function Ra(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function Fa(e,t,n){return n<=e?n:n-(t-1)}function Da(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function _a(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=Oa(i,l,u,s,e),h=Ma(o,l,u,r,e),p=Ra(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=za(i,s,a,e,t,l),h[t]=Ba(o,r,a,e,t,l),p[t]=La(a,t,l);return{begin:c,end:h,strides:p}}function Oa(e,t,n,s,r){const a=[...r],i=Da(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=Fa(t,n,r);let o=s[i];e&1<<i&&(o=0),a[r]=o}return a}function Ma(e,t,n,s,a){const i=[...a],o=Da(n,t);for(let r=0;r<i.length;r++)if(o.indexOf(r)>-1)i[r]=Number.MAX_SAFE_INTEGER;else{const a=Fa(t,n,r);let o=s[a];e&1<<a&&(o=Number.MAX_SAFE_INTEGER),i[r]=o}for(let e=0;e<i.length;e++){const t=a[e];i[e]<0&&(i[e]+=t),i[e]=r(0,i[e],a[e])}return i}function La(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function za(e,t,n,s,a,i){let o=t[a];const l=n[a]||1;(e&1<<a||i&1<<a||null==o)&&(o=l>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=s[a];return o<0&&(o+=u),o=r(0,o,u-1),o}function Ba(e,t,n,s,a,i){let o=t[a];const l=n[a]||1;(e&1<<a||i&1<<a||null==o)&&(o=l>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=s[a];return o<0&&(o+=u),o=l>0?r(0,o,u):r(-1,o,u-1),o}function Pa(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function Wa(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function Va(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach((e=>{o(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(o(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,a]}function Ua(e,t,n,s,r,a,i,o,l){let u=t.slice(),c=n.slice(),h=s;null==s&&(h=new Array(u.length));const p=Ea(i);if(p.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const d=e.length-u.length,f=Ea(o),m=e.slice();f.forEach((e=>{u[e]=0,c[e]=1,m.splice(e,0,1)}));const{begin:g,end:y,strides:b}=_a(m,p,d,u,c,h,r,a,i);u=g,c=y,h=b;const x=Ea(l);x.forEach((e=>{c[e]=u[e]+1,h[e]=1}));const w=Aa(u,c,h),k=w.filter(((e,t)=>-1===x.indexOf(t)));return{nonStrided:h.every((e=>1===e)),$begin:u,$end:c,$strides:h,size:w,newShape:m,outShape:k}}var Ga=Object.freeze({__proto__:null,assertParamsValid:Ta,maskToAxes:Ea,computeOutShape:Aa,stridesWithElidedDims:Ra,getNormalizedAxes:_a,startIndicesWithElidedDims:Oa,stopIndicesWithElidedDims:Ma,stridesForAxis:La,startForAxis:za,stopForAxis:Ba,isSliceContinous:Pa,computeFlatOffset:Wa,parseSliceParams:Va,sliceInfo:Ua});class Ha{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class ja{constructor(){this.classNameMap={}}static getMap(){return null==ja.instance&&(ja.instance=new ja),ja.instance}static register(e){ja.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function qa(e){o(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),o("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),o(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),ja.register(e)}var Ka=Object.freeze({__proto__:null,Serializable:Ha,SerializationMap:ja,registerClass:qa});function Xa(){return 32===Ks.backend.floatPrecision()?.001:.1}function Ya(e,t,n){let s=!0;if((C(e)||C(t))&&(s=!1),C(e)&&C(t)&&(s=!0),s){const n=e.constructor.name,s=t.constructor.name;if(n!==s)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${s}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=er(e),s=er(t);if(!p(n,s))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${s}]`)}const r=C(e)?e:c(e),a=C(t)?t:c(t);if(r.length!==a.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${a.length}.\nActual:   ${r}.\nExpected: ${a}.`);for(let e=0;e<a.length;++e){const t=r[e],s=a[e];if(!n(t,s))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${s}.\nActual:   ${r}.\nExpected: ${a}.`)}}function Ja(e,t,n){if(null==n&&(n=Xa()),!Za(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function Za(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}var Qa=Object.freeze({__proto__:null,TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(e,t,n){return null==n&&(n=Xa()),Ya(e,t,((e,t)=>Za(e,t,n)))},testEpsilon:Xa,expectPromiseToFail:function(e,t){e().then((()=>t.fail()),(()=>t()))},expectArraysEqual:function(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return T(e)||T(e[0])||T(t)||T(t[0])?Ya(e,n,((e,t)=>e==t)):Ya(e,t,((e,t)=>Za(e,t,0)))},expectNumbersClose:Ja,expectValuesInRange:function(e,t,n){for(let s=0;s<e.length;s++)if(e[s]<t||e[s]>n)throw new Error(`Value out of range:${e[s]} low: ${t}, high: ${n}`)},expectArrayBuffersEqual:function(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))},encodeStrings:function e(t){for(let n=0;n<t.length;n++){const s=t[n];Array.isArray(s)?e(s):t[n]=ps(s)}return t}});const ei="3.6.0";function ti(){j().set("PROD",!0)}function ni(){j().set("DEBUG",!0)}function si(){j().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function ri(e){j().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function ai(){Ks.disposeVariables()}function ii(){return Ks}function oi(){return Ks.memory()}function li(e){return Ks.profile(e)}function ui(e,t){return Ks.tidy(e,t)}function ci(e){Ws(e).forEach((e=>e.dispose()))}function hi(e){return Ks.keep(e)}function pi(e){return Ks.time(e)}function di(e){return Ks.setBackend(e)}function fi(){return Ks.ready()}function mi(){return Ks.backendName}function gi(e){Ks.removeBackend(e)}function yi(e){return Ks.findBackend(e)}function bi(e){return Ks.findBackendFactory(e)}function xi(e,t,n=1){return Ks.registerBackend(e,t,n)}function wi(){return Ks.backend}function ki(e,t){j().setPlatform(e,t)}$s=ri;const vi=ir({add_:function(e,t){let n=sr(e,"a","add"),s=sr(t,"b","add");[n,s]=zs(n,s);const r={a:n,b:s};return Ks.runKernel(ee,r)}});const Ni=ir({floorDiv_:function(e,t){let n=sr(e,"a","floorDiv"),s=sr(t,"b","floorDiv");[n,s]=zs(n,s);const r={a:n,b:s};return Ks.runKernel("FloorDiv",r)}});const Ii=ir({div_:function(e,t){let n=sr(e,"a","div"),s=sr(t,"b","div");if([n,s]=zs(n,s),"int32"===n.dtype&&"int32"===s.dtype)return Ni(n,s);const r={a:n,b:s};return Ks.runKernel("RealDiv",r,{})}});const Ci=ir({mul_:function(e,t){let n=sr(e,"a","mul"),s=sr(t,"b","mul");[n,s]=zs(n,s);const r={a:n,b:s};return Ks.runKernel("Multiply",r)}});const $i=ir({abs_:function(e){const t=sr(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Ks.runKernel("ComplexAbs",e)}{const e={x:t};return Ks.runKernel("Abs",e)}}});const Si=ir({acos_:function(e){const t={x:sr(e,"x","acos")};return Ks.runKernel("Acos",t)}});const Ti=ir({acosh_:function(e){const t={x:sr(e,"x","acosh")};return Ks.runKernel("Acosh",t)}});const Ei=ir({addN_:function(e){o(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),o(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>sr(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!p(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return Ks.runKernel("AddN",s)}});const Ai=ir({all_:function(e,t=null,n=!1){const s={x:sr(e,"x","all","bool")},r={axis:t,keepDims:n};return Ks.runKernel("All",s,r)}});const Ri=ir({any_:function(e,t=null,n=!1){const s={x:sr(e,"x","any","bool")},r={axis:t,keepDims:n};return Ks.runKernel("Any",s,r)}});const Fi=ir({argMax_:function(e,t=0){const n={x:sr(e,"x","argMax")},s={axis:t};return Ks.runKernel("ArgMax",n,s)}});const Di=ir({argMin_:function(e,t=0){const n={x:sr(e,"x","argMin")},s={axis:t};return Ks.runKernel("ArgMin",n,s)}});const _i=ir({asin_:function(e){const t={x:sr(e,"x","asin")};return Ks.runKernel("Asin",t)}});const Oi=ir({asinh_:function(e){const t={x:sr(e,"x","asinh")};return Ks.runKernel("Asinh",t)}});const Mi=ir({atan_:function(e){const t={x:sr(e,"x","atan")};return Ks.runKernel("Atan",t)}});const Li=ir({atan2_:function(e,t){let n=sr(e,"a","atan2"),s=sr(t,"b","atan2");[n,s]=zs(n,s);const r={a:n,b:s};return Ks.runKernel("Atan2",r)}});const zi=ir({atanh_:function(e){const t={x:sr(e,"x","atanh")};return Ks.runKernel("Atanh",t)}});function Bi(e,t,n,s,r="NHWC",a){return Vi(e,[...t,e[3]],n,a,s,null,null,Ji(r))}function Pi(e,t,n,s,r,a,i="channelsLast"){const[o,l]=Hi(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return Vi(e,u,n,s,r,a,!1,i)}function Wi(e,t,n,s,r,a,i="NDHWC"){const[o,l,u]=ji(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return Ui(e,c,n,s,r,!1,h,a)}function Vi(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=Hi(n),[y,b]=Hi(s),x=qi(p,y),w=qi(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=Gi(e,t,n));const a=e[0],i=e[1],o=Ki((a-t+2*s)/n+1,r),l=Ki((i-t+2*s)/n+1,r);return[o,l]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Ki((t-a+p+d)/s+1,o),h=Ki((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,w,a,o),I=i?f*h:f;let C;return"channelsFirst"===o?C=[l,I,v,N]:"channelsLast"===o&&(C=[l,v,N,I]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:v,outWidth:N,outChannels:I,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:C,filterShape:t}}function Ui(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=ji(n),[w,k,v]=ji(s),N=qi(d,w),I=qi(f,k),C=qi(m,v),{padInfo:$,outDepth:S,outHeight:T,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,r,a){null==r&&(r=Gi(e,t,s));const i=e[0],o=e[1],l=e[2],u=Ki((i-t+2*r)/s+1,a),c=Ki((o-t+2*r)/s+1,a),h=Ki((l-t+2*r)/s+1,a);return[u,c,h,n]}([t,n,s,1],o,1,r,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/r),d=Math.ceil(n/a),f=Math.ceil(s/i);const e=(p-1)*r+o-t,c=(d-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/r),d=Math.ceil((n-l+1)/a),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,u,c,h,y,b,x,N,I,C,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,S,T,E]:"channelsLast"===i&&(R=[l,S,T,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:S,outHeight:T,outWidth:E,outChannels:A,padInfo:$,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:I,effectiveFilterWidth:C,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function Gi(e,t,n,s=1){const r=qi(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function Hi(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function ji(e){return"number"==typeof e?[e,e,e]:e}function qi(e,t){return t<=1?e:e+(e-1)*(t-1)}function Ki(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Xi(e){const[t,n,s]=Hi(e);return 1===t&&1===n&&1===s}function Yi(e,t){return Xi(e)||Xi(t)}function Ji(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const Zi=ir({reshape_:function(e,t){const n={x:sr(e,"x","reshape","string_or_numeric")},s={shape:t};return Ks.runKernel("Reshape",n,s)}});const Qi=ir({avgPool_:function(e,t,n,s,r){const a=sr(e,"x","avgPool","float32");o(Yi(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,l=!1;3===a.rank&&(l=!0,i=Zi(a,[1,a.shape[0],a.shape[1],a.shape[2]])),o(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),null!=r&&o(d(s),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const u={x:i},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let h=Ks.runKernel("AvgPool",u,c);return h=qr(h,a.dtype),l?Zi(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const eo=ir({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const i=sr(e,"x","avgPool3d","float32");let l=i,u=!1;4===i.rank&&(u=!0,l=Zi(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),o(5===l.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`)),o("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),null!=r&&o(d(s),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const c={x:l},h={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let p=Ks.runKernel("AvgPool3D",c,h);return p=qr(p,l.dtype),u?Zi(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const to=ir({concat_:function(e,t=0){o(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=rr(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Kr(n[0]);const s=n,r={axis:t};return Ks.runKernel("Concat",s,r)}});const no=ir({sigmoid_:function(e){const t={x:sr(e,"x","sigmoid")};return Ks.runKernel("Sigmoid",t)}});const so=ir({slice_:function(e,t,n){const s=sr(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return Ks.runKernel("Slice",r,a)}});const ro=ir({tanh_:function(e){const t={x:sr(e,"x","tanh")};return Ks.runKernel("Tanh",t)}});const ao=ir({basicLSTMCell_:function(e,t,n,s,r,a){const i=sr(e,"forgetBias","basicLSTMCell"),o=sr(t,"lstmKernel","basicLSTMCell"),l=sr(n,"lstmBias","basicLSTMCell"),u=sr(s,"data","basicLSTMCell"),c=sr(r,"c","basicLSTMCell"),h=sr(a,"h","basicLSTMCell"),p=to([u,h],1),d=ha(p,o),f=vi(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=so(f,[0,0],y),x=so(f,[0,g],y),w=so(f,[0,2*g],y),k=so(f,[0,3*g],y),v=vi(Ci(no(b),ro(x)),Ci(c,no(vi(i,w))));return[v,Ci(ro(v),no(k))]}});const io=ir({batchToSpaceND_:function(e,t,n){const s=sr(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));o(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),o(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),o(s.shape[0]%r==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const a={x:s},i={blockShape:t,crops:n};return Ks.runKernel("BatchToSpaceND",a,i)}});const oo=ir({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=sr(e,"x","batchNorm"),l=sr(t,"mean","batchNorm"),u=sr(n,"variance","batchNorm");let c,h;null!=r&&(c=sr(r,"scale","batchNorm")),null!=s&&(h=sr(s,"offset","batchNorm")),o(l.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),o(null==h||l.rank===h.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),o(null==c||l.rank===c.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:function(e){let t;return t=0===e.rank||1===e.rank?Zi(e,[1,1,1,e.size]):2===e.rank?Zi(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Zi(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),scale:c,offset:h,mean:l,variance:u},d={varianceEpsilon:a},f=Ks.runKernel("FusedBatchNorm",p,d);return Zi(f,i.shape)}});const lo=ir({batchNorm2d_:function(e,t,n,s,r,a){const i=sr(e,"x","batchNorm"),l=sr(t,"mean","batchNorm"),u=sr(n,"variance","batchNorm");let c,h;return null!=r&&(c=sr(r,"scale","batchNorm")),null!=s&&(h=sr(s,"offset","batchNorm")),o(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),o(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${l.rank}.`)),o(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&o(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`)),null!=h&&o(2===h.rank||1===h.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${h.rank}.`)),oo(i,l,u,h,c,a)}});const uo=ir({batchNorm3d_:function(e,t,n,s,r,a){const i=sr(e,"x","batchNorm"),l=sr(t,"mean","batchNorm"),u=sr(n,"variance","batchNorm");let c,h;return null!=r&&(c=sr(r,"scale","batchNorm")),null!=s&&(h=sr(s,"offset","batchNorm")),o(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),o(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${l.rank}.`)),o(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&o(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`)),null!=h&&o(3===h.rank||1===h.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${h.rank}.`)),oo(i,l,u,h,c,a)}});const co=ir({batchNorm4d_:function(e,t,n,s,r,a){const i=sr(e,"x","batchNorm"),l=sr(t,"mean","batchNorm"),u=sr(n,"variance","batchNorm");let c,h;return null!=r&&(c=sr(r,"scale","batchNorm")),null!=s&&(h=sr(s,"offset","batchNorm")),o(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),o(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${l.rank}.`)),o(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&o(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`)),null!=h&&o(4===h.rank||1===h.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${h.rank}.`)),oo(i,l,u,h,c,a)}});const ho=ir({bincount_:function(e,t,n){const s=sr(e,"x","bincount"),r=sr(t,"weights","bincount");o("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),o(n>=0,(()=>`size must be non-negative, but got ${n}.`)),o(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},i={size:n};return Ks.runKernel("Bincount",a,i)}});const po=ir({broadcastTo_:function(e,t){let n=sr(e,"broadcastTo","x");const s=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Zi(n,e)}const r=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Kr(n);const i={x:n},o={reps:a};return Ks.runKernel("Tile",i,o)}});const fo=ir({ceil_:function(e){const t={x:sr(e,"x","ceil")};return Ks.runKernel("Ceil",t)}});const mo=ir({clipByValue_:function(e,t,n){const s=sr(e,"x","clipByValue");o(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const r={x:s},a={clipValueMin:t,clipValueMax:n};return Ks.runKernel("ClipByValue",r,a)}});const go=ir({concat1d_:function(e){return to(e,0)}});const yo=ir({concat2d_:function(e,t){return to(e,t)}});const bo=ir({concat3d_:function(e,t){return to(e,t)}});const xo=ir({concat4d_:function(e,t){return to(e,t)}});const wo=ir({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const l=sr(e,"x","conv2d"),u=sr(t,"filter","conv2d");let c=l,h=!1;3===l.rank&&(h=!0,c=Zi(l,[1,l.shape[0],l.shape[1],l.shape[2]])),o(4===c.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${c.rank}.`)),o(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),null!=i&&o(d(s),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const p="NHWC"===r?c.shape[3]:c.shape[1];o(p===u.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${u.shape[2]}.`)),o(Yi(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const f={x:c,filter:u},m={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},g=Ks.runKernel("Conv2D",f,m);return h?Zi(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const ko=ir({conv1d_:function(e,t,n,s,r="NWC",a=1,i){const l=sr(e,"x","conv1d"),u=sr(t,"filter","conv1d");let c=l,h=!1;2===l.rank&&(h=!0,c=Zi(l,[1,l.shape[0],l.shape[1]])),o(3===c.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${c.rank}.`)),o(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),null!=i&&o(d(s),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`)),o(c.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),o(Yi(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),o("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const p=Zi(u,[1,u.shape[0],u.shape[1],u.shape[2]]),f=Zi(c,[c.shape[0],1,c.shape[1],c.shape[2]]),m=wo(f,p,[1,n],s,"NHWC",[1,a],i);return Zi(m,h?[m.shape[2],m.shape[3]]:[m.shape[0],m.shape[2],m.shape[3]])}});const vo=ir({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",i){o(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let l=e,u=t,c=!1;3===t.rank&&(c=!0,u=Zi(t,[1,t.shape[0],t.shape[1],t.shape[2]]),l=[1,e[0],e[1],e[2]]),o(4===l.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${l.length}.`)),o(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),o(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const h="NHWC"===a?l[3]:l[1],p="NHWC"===a?u.shape[3]:u.shape[1];o(h===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${h}) must match input depth for filter ${n.shape[2]}.`)),o(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),null!=i&&o(d(r),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const f={dy:u,filter:n},m={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:l},g=Ks.runKernel("Conv2DBackpropInput",f,m);return c?Zi(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const No=ir({conv2dTranspose_:function(e,t,n,s,r,a){const i=sr(e,"x","conv2dTranspose"),o=sr(t,"filter","conv2dTranspose");return vo(n,i,o,s,r,"NHWC",a)}});const Io=ir({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=sr(e,"x","conv3d"),l=sr(t,"filter","conv3d");let u=i,c=!1;4===i.rank&&(c=!0,u=Zi(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),o(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),o(5===l.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${l.rank}.`)),o(u.shape[4]===l.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${l.shape[3]}.`)),o(Yi(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),o("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const h={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a},d=Ks.runKernel("Conv3D",h,p);return c?Zi(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Co=ir({conv3DBackpropInput_:function(e,t,n,s,r){o(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,l=!1;4===t.rank&&(l=!0,i=Zi(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],c=i.shape[4];o(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),o(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),o(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),o(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),o(c===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[4]}.`));const h={dy:i,filter:n},p={pad:r,strides:s,inputShape:a},d=Ks.runKernel("Conv3DBackpropInputV2",h,p);return l?Zi(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const $o=ir({conv3dTranspose_:function(e,t,n,s,r){const a=sr(e,"x","conv3dTranspose"),i=sr(t,"filter","conv3dTranspose");return Co(n,a,i,s,r)}});const So=ir({cos_:function(e){const t={x:sr(e,"x","cos")};return Ks.runKernel(Re,t)}});const To=ir({cosh_:function(e){const t={x:sr(e,"x","cosh")};return Ks.runKernel("Cosh",t)}});const Eo=ir({cumsum_:function(e,t=0,n=!1,s=!1){const r={x:sr(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return Ks.runKernel("Cumsum",r,a)}});const Ao=ir({denseBincount_:function(e,t,n,s=!1){const r=sr(e,"x","denseBincount"),a=sr(t,"weights","denseBincount");o("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),o(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),o(n>=0,(()=>`size must be non-negative, but got ${n}.`)),o(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const i={x:r,weights:a},l={size:n,binaryOutput:s};return Ks.runKernel("DenseBincount",i,l)}});const Ro=ir({depthToSpace_:function(e,t,n="NHWC"){const s=sr(e,"x","depthToSpace"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];o(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),o(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),o(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`));const l={x:s},u={blockSize:t,dataFormat:n};return Ks.runKernel("DepthToSpace",l,u)}});const Fo=ir({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const l=sr(e,"x","depthwiseConv2d"),u=sr(t,"filter","depthwiseConv2d");let c=l,h=!1;3===l.rank&&(h=!0,c=Zi(l,[1,l.shape[0],l.shape[1],l.shape[2]])),o(4===c.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`)),o(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`)),o(c.shape[3]===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${c.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),null!=i&&o(d(s),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const p={x:c,filter:u},f={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},m=Ks.runKernel("DepthwiseConv2dNative",p,f);return h?Zi(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Do=ir({diag_:function(e){const t={x:sr(e,"x","diag")};return Ks.runKernel("Diag",t)}});const _o=ir({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const i=sr(e,"x","dilation2d"),l=sr(t,"filter","dilation2d");o(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),o(3===l.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${l.rank}.`)),o("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=i,c=!1;3===i.rank&&(u=Zi(i,[1,i.shape[0],i.shape[1],i.shape[2]]),c=!0);const h={x:u,filter:l},p={strides:n,pad:s,dilations:r},d=Ks.runKernel("Dilation2D",h,p);return c?Zi(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});function Oo(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function Mo(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function Lo(e,t){const n=[],s=Math.max(e.length,t.length);for(let r=0;r<s;r++){let s=e[e.length-r-1];null==s&&(s=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(s)}}return n}const zo=ir({equal_:function(e,t){let n=sr(e,"a","equal"),s=sr(t,"b","equal");[n,s]=zs(n,s),Lo(n.shape,s.shape);const r={a:n,b:s};return Ks.runKernel("Equal",r)}});const Bo=ir({where_:function(e,t,n){const s=sr(t,"a","where"),r=sr(n,"b","where"),a=sr(e,"condition","where","bool"),i=Lo(Lo(a.shape,s.shape),r.shape),o={condition:po(a,i),t:po(s,i),e:po(r,i)};return Ks.runKernel("Select",o)}});const Po=ir({zerosLike_:function(e){const t={x:sr(e,"x","zerosLike")};return Ks.runKernel("ZerosLike",t)}});const Wo=ir({divNoNan_:function(e,t){let n=sr(e,"a","div"),s=sr(t,"b","div");[n,s]=zs(n,s);const r=Ii(n,s),a=Po(r),i=zo(s,a);return Bo(i,a,r)}});const Vo=ir({dot_:function(e,t){const n=sr(e,"t1","dot"),s=sr(t,"t2","dot");o(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(o(r===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`)),1===n.rank&&1===s.rank){const e=Zi(n,[1,-1]),t=Zi(s,[-1,1]),r=ha(e,t);return Zi(r,[])}if(1===n.rank&&2===s.rank){const e=Zi(n,[1,-1]),t=Zi(s,[s.shape[0],s.shape[1]]),r=ha(e,t);return Zi(r,[r.size])}if(2===n.rank&&1===s.rank){const e=Zi(s,[-1,1]),t=ha(n,e);return Zi(t,[t.size])}{const e=Zi(s,[s.shape[0],s.shape[1]]);return ha(n,e)}}});const Uo=ir({einsum_:function(e,...t){const n=t.map(((e,t)=>sr(e,`tensors${t}`,"einsum"))),s={equation:e};return Ks.runKernel("Einsum",n,s)}});const Go=ir({elu_:function(e){const t={x:sr(e,"x","elu")};return Ks.runKernel(je,t)}});const Ho=ir({erf_:function(e){let t=sr(e,"x","erf");o("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=qr(t,"float32"));const n={x:t};return Ks.runKernel(Ke,n)}});const jo=ir({exp_:function(e){const t={x:sr(e,"x","exp")};return Ks.runKernel(Ye,t)}});const qo=ir({expandDims_:function(e,t=0){const n=sr(e,"x","expandDims","string_or_numeric");o(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},r={dim:t};return Ks.runKernel("ExpandDims",s,r)}});const Ko=ir({expm1_:function(e){const t={x:sr(e,"x","expm1")};return Ks.runKernel("Expm1",t)}});const Xo=ir({tile_:function(e,t){const n=sr(e,"x","tile","string_or_numeric");o(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},r={reps:t};return Ks.runKernel("Tile",s,r)}});const Yo=ir({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=jr([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const i=Zi(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return Xo(qo(i,0),[n[0],1,1]);if(2===n.length)return Xo(qo(qo(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Xo(qo(qo(qo(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function Jo(e,t,n){const s={shape:e,value:t,dtype:n};return Ks.runKernel("Fill",{},s)}const Zo=ir({floor_:function(e){const t={x:sr(e,"x","floor")};return Ks.runKernel("Floor",t)}});const Qo=ir({gather_:function(e,t,n=0,s=0){const r={x:sr(e,"x","gather"),indices:sr(t,"indices","gather","int32")},a={axis:n,batchDims:s};return Ks.runKernel("GatherV2",r,a)}});const el=ir({greater_:function(e,t){let n=sr(e,"a","greater"),s=sr(t,"b","greater");[n,s]=zs(n,s),Lo(n.shape,s.shape);const r={a:n,b:s};return Ks.runKernel("Greater",r)}});const tl=ir({greaterEqual_:function(e,t){let n=sr(e,"a","greaterEqual"),s=sr(t,"b","greaterEqual");[n,s]=zs(n,s),Lo(n.shape,s.shape);const r={a:n,b:s};return Ks.runKernel("GreaterEqual",r)}});const nl=ir({imag_:function(e){const t={input:sr(e,"input","imag")};return Ks.runKernel("Imag",t)}});const sl=ir({isFinite_:function(e){const t={x:sr(e,"x","isFinite")};return Ks.runKernel("IsFinite",t)}});const rl=ir({isInf_:function(e){const t={x:sr(e,"x","isInf")};return Ks.runKernel("IsInf",t)}});const al=ir({isNaN_:function(e){const t={x:sr(e,"x","isNaN")};return Ks.runKernel("IsNan",t)}});const il=ir({leakyRelu_:function(e,t=.2){const n={x:sr(e,"x","leakyRelu")},s={alpha:t};return Ks.runKernel("LeakyRelu",n,s)}});const ol=ir({less_:function(e,t){let n=sr(e,"a","less"),s=sr(t,"b","less");[n,s]=zs(n,s),Lo(n.shape,s.shape);const r={a:n,b:s};return Ks.runKernel("Less",r)}});const ll=ir({lessEqual_:function(e,t){let n=sr(e,"a","lessEqual"),s=sr(t,"b","lessEqual");[n,s]=zs(n,s),Lo(n.shape,s.shape);const r={a:n,b:s};return Ks.runKernel("LessEqual",r)}});function ul(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return Ks.runKernel("LinSpace",{},s)}const cl=ir({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=sr(e,"x","localResponseNormalization");o(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),o(d(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,l=!1;3===a.rank&&(l=!0,i=Zi(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:i},c={depthRadius:t,bias:n,alpha:s,beta:r},h=Ks.runKernel("LRN",u,c);return l?Zi(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const hl=ir({log_:function(e){const t={x:sr(e,"x","log")};return Ks.runKernel(xt,t)}});const pl=ir({log1p_:function(e){const t={x:sr(e,"x","log1p")};return Ks.runKernel("Log1p",t)}});function dl(e){return o(F(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const s=sr(t,"x","tf.grad","string_or_numeric"),r=null!=n?sr(n,"dy","tf.grad"):null;return Ks.tidy((()=>{const{value:t,grads:n}=Ks.gradients((()=>e(s)),[s],r);return null!=r&&l(t.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),xl(n),n[0]}))}}function fl(e){return o(F(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{o(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const s=rr(t,"args","tf.grads","string_or_numeric"),r=null!=n?sr(n,"dy","tf.grads"):null;return Ks.tidy((()=>{const{value:t,grads:n}=Ks.gradients((()=>e(...s)),s,r);return null!=r&&l(t.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),xl(n),n}))}}function ml(e){return o(F(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{o(t instanceof Ss,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),o(null==n||n instanceof Ss,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:s,value:r}=Ks.gradients((()=>e(t)),[t],n);return xl(s),{grad:s[0],value:r}}}function gl(e){return o(F(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{o(Array.isArray(t)&&t.every((e=>e instanceof Ss)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),o(null==n||n instanceof Ss,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const s=Ks.gradients((()=>e(...t)),t,n);return null!=n&&l(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),xl(s.grads),s}}function yl(e,t){o(F(e),(()=>"The f passed in variableGrads(f) must be a function")),o(null==t||Array.isArray(t)&&t.every((e=>e instanceof Es)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Ks.registeredVariables)t.push(Ks.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,r=t.length;o((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:a,grads:i}=Ks.gradients(e,t,null,!0);o(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),o(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const l={};return t.forEach(((e,t)=>{null!=i[t]&&(l[e.name]=i[t])})),null!=s&&s.forEach((e=>l[e.name]=null)),{value:a,grads:l}}function bl(e){return Ks.customGrad(e)}function xl(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}const wl=ir({neg_:function(e){const t={x:sr(e,"x","neg")};return Ks.runKernel("Neg",t)}});const kl=ir({softplus_:function(e){const t={x:sr(e,"x","softplus")};return Ks.runKernel("Softplus",t)}});const vl=ir({logSigmoid_:function(e){const t=sr(e,"x","logSigmoid");return bl((e=>({value:wl(kl(wl(e))),gradFunc:t=>Ci(t,no(wl(e)))})))(t)}});const Nl=ir({max_:function(e,t=null,n=!1){const s={x:sr(e,"x","max")},r={reductionIndices:t,keepDims:n};return Ks.runKernel("Max",s,r)}});const Il=ir({sub_:function(e,t){let n=sr(e,"a","sub"),s=sr(t,"b","sub");[n,s]=zs(n,s);const r={a:n,b:s};return Ks.runKernel(_n,r)}});const Cl=ir({sum_:function(e,t=null,n=!1){let s=sr(e,"x","sum");"bool"===s.dtype&&(s=qr(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Ks.runKernel("Sum",r,a)}});const $l=ir({logSoftmax_:function(e,t=-1){const n=sr(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return bl(((e,n)=>{const s=Nl(e,t,!0),r=Il(e,s),a=Il(qr(r,"float32"),hl(Cl(jo(r),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[s]=n,r=jo(s);return Il(e,Ci(Cl(e,t,!0),r))}}}))(n)}});function Sl(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Tl(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function El(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function Al(e,t){return Tl(e,t.map((e=>1)),t)}function Rl(e,t,n){o(Sl(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Fl(e,t){if(Sl(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function Dl(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function _l(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const Ol=ir({logSumExp_:function(e,t=null,n=!1){const s=sr(e,"x","logSumExp"),r=b(t,s.shape),a=Nl(s,r,!0),i=Il(s,a),o=jo(i),l=Cl(o,r),u=hl(l),c=vi(Zi(a,u.shape),u);if(n){const e=Al(c.shape,r);return Zi(c,e)}return c}});const Ml=ir({logicalAnd_:function(e,t){const n=sr(e,"a","logicalAnd","bool"),s=sr(t,"b","logicalAnd","bool");Lo(n.shape,s.shape);const r={a:n,b:s};return Ks.runKernel("LogicalAnd",r)}});const Ll=ir({logicalNot_:function(e){const t={x:sr(e,"x","logicalNot","bool")};return Ks.runKernel("LogicalNot",t)}});const zl=ir({logicalOr_:function(e,t){const n=sr(e,"a","logicalOr","bool"),s=sr(t,"b","logicalOr","bool");Lo(n.shape,s.shape);const r={a:n,b:s};return Ks.runKernel("LogicalOr",r)}});const Bl=ir({logicalXor_:function(e,t){const n=sr(e,"a","logicalXor","bool"),s=sr(t,"b","logicalXor","bool");return Lo(n.shape,s.shape),Ml(zl(e,t),Ll(Ml(e,t)))}});const Pl=ir({maxPool_:function(e,t,n,s,r){const a=sr(e,"x","maxPool");let i=a,l=!1;3===a.rank&&(l=!0,i=Zi(a,[1,a.shape[0],a.shape[1],a.shape[2]])),o(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),o(Yi(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=r&&o(d(s),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const u={x:i},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r},h=Ks.runKernel("MaxPool",u,c);return l?Zi(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Wl=ir({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const i=sr(e,"x","maxPool3d");let l=i,u=!1;4===i.rank&&(u=!0,l=Zi(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),o(5===l.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`)),o("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),null!=r&&o(d(s),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const c={x:l},h={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},p=Ks.runKernel("MaxPool3D",c,h);return u?Zi(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Vl=ir({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a={x:sr(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},o=Ks.runKernel("MaxPoolWithArgmax",a,i);return{result:o[0],indexes:o[1]}}});const Ul=ir({maximum_:function(e,t){let n=sr(e,"a","maximum"),s=sr(t,"b","maximum");[n,s]=zs(n,s),"bool"===n.dtype&&(n=qr(n,"int32"),s=qr(s,"int32")),Lo(n.shape,s.shape);const r={a:n,b:s};return Ks.runKernel("Maximum",r)}});const Gl=ir({mean_:function(e,t=null,n=!1){const s={x:sr(e,"x","mean")},r={axis:t,keepDims:n};return Ks.runKernel("Mean",s,r)}});function Hl(e,t="float32"){if("complex64"===t){const t=Hl(e,"float32"),n=Hl(e,"float32");return or(t,n)}const n=z(h(e),t);return Ks.makeTensor(n,e,t)}function jl(e,t="float32"){if("complex64"===t){const t=jl(e,"float32"),n=Hl(e,"float32");return or(t,n)}const n=L(h(e),t);return Ks.makeTensor(n,e,t)}function ql(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let s=sr(e,"x","meshgrid",e instanceof Ss?e.dtype:"float32");if(void 0===t)return[s];let r=sr(t,"y","meshgrid",t instanceof Ss?t.dtype:"float32");const a=h(s.shape),i=h(r.shape);return"xy"===n?(s=Zi(s,[1,-1]),r=Zi(r,[-1,1]),[ha(jl([i,1],s.dtype),s),ha(r,jl([1,a],r.dtype))]):(s=Zi(s,[-1,1]),r=Zi(r,[1,-1]),[ha(s,jl([1,i],s.dtype)),ha(jl([a,1],r.dtype),r)])}const Kl=ir({min_:function(e,t=null,n=!1){const s={x:sr(e,"x","min")},r={axis:t,keepDims:n};return Ks.runKernel("Min",s,r)}});const Xl=ir({minimum_:function(e,t){let n=sr(e,"a","minimum"),s=sr(t,"b","minimum");[n,s]=zs(n,s),"bool"===n.dtype&&(n=qr(n,"int32"),s=qr(s,"int32")),Lo(n.shape,s.shape);const r={a:n,b:s};return Ks.runKernel("Minimum",r)}});const Yl=ir({mirrorPad_:function(e,t,n){o("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=sr(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");o(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let e=0;e<s.rank;e++)o(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),o(t[e][0]>=0&&t[e][0]<=s.shape[e]-r&&t[e][1]>=0&&t[e][1]<=s.shape[e]-r,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-r} or less than 0 for input of shape ${s.shape}`));const a={paddings:t,mode:n},i={x:s};return Ks.runKernel("MirrorPad",i,a)}});const Jl=ir({mod_:function(e,t){let n=sr(e,"a","mod"),s=sr(t,"b","mod");[n,s]=zs(n,s);const r={a:n,b:s};return Ks.runKernel(zt,r)}});const Zl=ir({square_:function(e){const t=sr(e,"x","square");return Ks.runKernel("Square",{x:t},{})}});const Ql=ir({moments_:function(e,t=null,n=!1){const s=b(t,(e=sr(e,"x","moments")).shape),r=Gl(e,s,n);let a=r.shape;n||(a=Al(r.shape,s));const i=Zl(Il(qr(e,"float32"),Zi(r,a)));return{mean:r,variance:Gl(i,s,n)}}});const eu=ir({multiRNNCell_:function(e,t,n,s){const r=sr(t,"data","multiRNNCell"),a=rr(n,"c","multiRNNCell"),i=rr(s,"h","multiRNNCell");let o=r;const l=[];for(let t=0;t<e.length;t++){const n=e[t](o,a[t],i[t]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}});const tu=ir({multinomial_:function(e,t,n,s=!1){const r=sr(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?Zi(r,[1,-1]):r},l={numSamples:t,seed:n,normalized:s},u=Ks.runKernel("Multinomial",o,l);return 1===i?Zi(u,[u.size]):u}});const nu=ir({notEqual_:function(e,t){let n=sr(e,"a","notEqual"),s=sr(t,"b","notEqual");[n,s]=zs(n,s),Lo(n.shape,s.shape);const r={a:n,b:s};return Ks.runKernel("NotEqual",r)}});const su=ir({onesLike_:function(e){const t={x:sr(e,"x","onesLike")};return Ks.runKernel("OnesLike",t)}});const ru=ir({outerProduct_:function(e,t){const n=sr(e,"v1","outerProduct"),s=sr(t,"v2","outerProduct");o(1===n.rank&&1===s.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`));const r=Zi(n,[-1,1]),a=Zi(s,[1,-1]);return ha(r,a)}});const au=ir({pad_:function(e,t,n=0){const s=sr(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return Ks.runKernel("PadV2",a,r)}});const iu=ir({pad1d_:function(e,t,n=0){return o(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),au(e,[t],n)}});const ou=ir({pad2d_:function(e,t,n=0){return o(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),au(e,t,n)}});const lu=ir({pad3d_:function(e,t,n=0){return o(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),au(e,t,n)}});const uu=ir({pad4d_:function(e,t,n=0){return o(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),au(e,t,n)}});const cu=ir({spaceToBatchND_:function(e,t,n){const s=sr(e,"x","spaceToBatchND");o(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),o(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),o(s.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:s},a={blockShape:t,paddings:n};return Ks.runKernel("SpaceToBatchND",r,a)}});const hu=ir({pool_:function(e,t,n,s,r,a){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const i=sr(e,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=Zi(i,[1,i.shape[0],i.shape[1],i.shape[2]])),o(Yi(a,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`));const c=Pi(l.shape,t,a,r,s),h=[c.dilationHeight,c.dilationWidth];let p;p="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],r[t]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const d=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const s=n.map((e=>e[0])),r=n.map((e=>e[1])),a=e.concat(s,r),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=r.map(((e,t)=>e+i[t])),l=t.map(((e,t)=>[s[t],o[t]])),u=t.map(((e,t)=>[0,i[t]]));return[l,u]}([c.inHeight,c.inWidth],h,p),g=d?s:"valid",y=d?l:cu(l,h,f),b=("avg"===n?()=>Qi(y,t,a,g):()=>Pl(y,t,a,g))(),x=d?b:io(b,h,m);return u?Zi(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const pu=ir({pow_:function(e,t){let n=sr(e,"base","pow"),s=sr(t,"exp","pow");[n,s]=zs(n,s);const r={a:n,b:s};return Ks.runKernel(Jt,r)}});const du=ir({prelu_:function(e,t){const n={x:sr(e,"x","prelu"),alpha:sr(t,"alpha","prelu")};return Ks.runKernel("Prelu",n)}});const fu=ir({prod_:function(e,t=null,n=!1){let s=sr(e,"x","prod");"bool"===s.dtype&&(s=qr(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Ks.runKernel("Prod",r,a)}});const mu=ir({rand_:function(e,t,n){const s=h(e);let r=null;if(null==n||"float32"===n)r=new Float32Array(s);else if("int32"===n)r=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(s)}for(let e=0;e<s;e++)r[e]=t();return Ks.makeTensor(r,e,n)}});"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function gu(e,t){return e(t={exports:{}},t.exports),t.exports}var yu=gu((function(e){!function(e,t,n){function s(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function r(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new s(e),a=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,e,!1)})),bu=gu((function(e){!function(e,t,n){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,e,!1)})),xu=gu((function(e){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,e,!1)})),wu=gu((function(e){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function r(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.x&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,e,!1)})),ku=gu((function(e){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function r(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.X&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,e,!1)})),vu=gu((function(e){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,e,!1)})),Nu=gu((function(e){!function(t,n){var s,r=this,a=256,i=n.pow(a,6),o=n.pow(2,52),l=2*o,u=255;function c(e,u,c){var g=[],y=f(d((u=1==u?{entropy:!0}:u||{}).entropy?[e,m(t)]:null==e?function(){try{var e;return s&&(e=s.randomBytes)?e=e(a):(e=new Uint8Array(a),(r.crypto||r.msCrypto).getRandomValues(e)),m(e)}catch(e){var n=r.navigator,i=n&&n.plugins;return[+new Date,r,i,r.screen,m(t)]}}():e,3),g),b=new h(g),x=function(){for(var e=b.g(6),t=i,n=0;e<o;)e=(e+n)*a,t*=a,n=b.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),t),(u.pass||c||function(e,t,s,r){return r&&(r.S&&p(r,b),e.state=function(){return p(b,{})}),s?(n.random=e,t):e})(x,y,"global"in u?u.global:this==n,u.state)}function h(e){var t,n=e.length,s=this,r=0,i=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);r<a;)o[r]=r++;for(r=0;r<a;r++)o[r]=o[i=u&i+e[r%n]+(t=o[r])],o[i]=t;(s.g=function(e){for(var t,n=0,r=s.i,i=s.j,o=s.S;e--;)t=o[r=u&r+1],n=n*a+o[u&(o[r]=o[i=u&i+t])+(o[i]=t)];return s.i=r,s.j=i,n})(a)}function p(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(d(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function f(e,t){for(var n,s=e+"",r=0;r<s.length;)t[u&r]=u&(n^=19*t[u&r])+s.charCodeAt(r++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(n.seedrandom=c,f(n.random(),t),e.exports){e.exports=c;try{s=require("crypto")}catch(e){}}else 0}([],Math)}));Nu.alea=yu,Nu.xor128=bu,Nu.xorwow=xu,Nu.xorshift7=wu,Nu.xor4096=ku,Nu.tychei=vu;var Iu=Nu.alea;class Cu{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=Iu(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class $u{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const r=s||Math.random();this.randu=Iu(r.toString()),this.randn=new Cu(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,r,a;for(;;){do{s=this.randn.nextValue(),a=1+this.c*s}while(a<=0);if(a*=a*a,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),r=this.randu(),r<t||Math.log(r)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Su{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Iu(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Tu=ir({randomGamma_:function(e,t,n=1,s="float32",r){if(null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const a=new $u(t,n,s,r),i=jr(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const Eu=ir({randomNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new Cu(t,n,s,!1,r),i=jr(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const Au=ir({randomUniform_:function(e,t=0,n=1,s="float32",r){const a=jr(e,s),i=new Su(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});function Ru(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return Ks.runKernel("Range",{},r)}const Fu=ir({real_:function(e){const t={input:sr(e,"input","real")};return Ks.runKernel("Real",t)}});const Du=ir({reciprocal_:function(e){const t={x:sr(e,"x","reciprocal")};return Ks.runKernel("Reciprocal",t)}});const _u=ir({relu_:function(e){const t={x:sr(e,"x","relu")};return Ks.runKernel("Relu",t)}});const Ou=ir({relu6_:function(e){const t={x:sr(e,"x","relu6")};return Ks.runKernel("Relu6",t)}});const Mu=ir({reverse_:function(e,t){const n={x:sr(e,"x","reverse")},s={dims:t};return Ks.runKernel("Reverse",n,s)}});const Lu=ir({reverse1d_:function(e){const t=sr(e,"x","reverse");return o(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),Mu(t,0)}});const zu=ir({reverse2d_:function(e,t){const n=sr(e,"x","reverse");return o(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Mu(n,t)}});const Bu=ir({reverse3d_:function(e,t){const n=sr(e,"x","reverse");return o(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Mu(n,t)}});const Pu=ir({reverse4d_:function(e,t){const n=sr(e,"x","reverse");return o(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Mu(n,t)}});const Wu=ir({round_:function(e){const t={x:sr(e,"x","round")};return Ks.runKernel("Round",t)}});const Vu=ir({rsqrt_:function(e){const t={x:sr(e,"x","rsqrt")};return Ks.runKernel("Rsqrt",t)}});function Uu(e,t){if((C(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&C(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return lr(e,[],[],t)}const Gu=ir({selu_:function(e){const t={x:sr(e,"x","selu")};return Ks.runKernel("Selu",t)}});const Hu=ir({separableConv2d_:function(e,t,n,s,r,a=[1,1],i="NHWC"){const l=sr(e,"x","separableConv2d"),u=sr(t,"depthwiseFilter","separableConv2d"),c=sr(n,"pointwiseFilter","separableConv2d");let h=l,p=!1;if(3===l.rank&&(p=!0,h=Zi(l,[1,l.shape[0],l.shape[1],l.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");o(4===h.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${h.rank}.`)),o(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),o(4===c.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),o(1===c.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`)),o(1===c.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`));const d=u.shape[2],f=u.shape[3];o(c.shape[2]===d*f,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*f}, but got ${c.shape[2]}.`));const m=Fo(h,u,s,r,i,a),g=wo(m,c,1,"valid",i);return p?Zi(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const ju=async function(e,t){const n=sr(e,"x","setdiff1d"),s=sr(t,"y","setdiff1d");o(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),o(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),o(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const r=await n.data(),a=await s.data(),i=new Set(a);let l=0;for(let e=0;e<r.length;e++)i.has(r[e])||l++;const u=new Ns([l],n.dtype),c=new Ns([l],"int32");for(let e=0,t=0;e<r.length;e++)i.has(r[e])||(u.values[t]=r[e],c.values[t]=e,t++);return[u.toTensor(),c.toTensor()]};const qu=ir({sign_:function(e){const t={x:sr(e,"x","sign")};return Ks.runKernel("Sign",t)}});const Ku=ir({sin_:function(e){const t={x:sr(e,"x","sin")};return Ks.runKernel(bn,t)}});const Xu=ir({sinh_:function(e){const t={x:sr(e,"x","sinh")};return Ks.runKernel("Sinh",t)}});const Yu=ir({slice1d_:function(e,t,n){const s=sr(e,"x","slice1d");return o(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),so(s,[t],[n])}});const Ju=ir({slice2d_:function(e,t,n){const s=sr(e,"x","slice2d");return o(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),so(s,t,n)}});const Zu=ir({slice3d_:function(e,t,n){const s=sr(e,"x","slice3d");return o(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),so(s,t,n)}});const Qu=ir({slice4d_:function(e,t,n){const s=sr(e,"x","slice4d");return o(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),so(s,t,n)}});const ec=ir({softmax_:function(e,t=-1){const n=sr(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return Ks.runKernel("Softmax",s,r)}});const tc=ir({fft_:function(e){o("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Ks.runKernel("FFT",t)}});const nc=ir({ifft_:function(e){o("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Ks.runKernel("IFFT",t)}});const sc=ir({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=Zi(e,[n,t]);s=nc(r)}else{const r=[n,2*(t-1)],a=Zi(Fu(e),[n,t]),i=Zi(nl(e),[n,t]),o=Mu(so(a,[0,1],[n,t-2]),1),l=Ci(Mu(so(i,[0,1],[n,t-2]),1),Uu(-1)),u=to([a,o],1),c=to([i,l],1),h=Zi(or(u,c),[r[0],r[1]]);s=nc(h)}if(s=Fu(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=Zi(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}});const rc=ir({split_:function(e,t,n=0){const s={x:sr(e,"x","split")},r={numOrSizeSplits:t,axis:n};return Ks.runKernel("SplitV",s,r)}});const ac=ir({rfft_:function(e,t){o("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,r=so(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,r=to([e,Hl(s)],e.shape.length-1),n=t}else r=e;const a=Po(r),i=Zi(or(r,a),[s,n]),l=tc(i),u=Math.floor(n/2)+1,c=Fu(l),h=nl(l),p=rc(c,[u,n-u],c.shape.length-1),d=rc(h,[u,n-u],h.shape.length-1),f=r.shape.slice();return f[r.shape.length-1]=u,Zi(or(p[0],d[0]),f)}});const ic=ir({sqrt_:function(e){const t={x:sr(e,"x","sqrt")};return Ks.runKernel("Sqrt",t)}});const oc=ir({squaredDifference_:function(e,t){let n=sr(e,"a","squaredDifference"),s=sr(t,"b","squaredDifference");[n,s]=zs(n,s),Lo(n.shape,s.shape);const r={a:n,b:s};return Ks.runKernel("SquaredDifference",r,{})}});const lc=ir({squeeze_:function(e,t){const n=sr(e,"x","squeeze");return Zi(n,x(n.shape,t).newShape)}});const uc=ir({stack_:function(e,t=0){const n=rr(e,"tensors","stack","string_or_numeric");o(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&o(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,r={axis:t};return Ks.runKernel("Pack",s,r)}});const cc=ir({step_:function(e,t=0){const n={x:sr(e,"x","step")},s={alpha:t};return Ks.runKernel("Step",n,s)}});const hc=ir({stridedSlice_:function(e,t,n,s,r=0,a=0,i=0,o=0,l=0){const u={x:sr(e,"x","stridedSlice")},c={begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Ks.runKernel("StridedSlice",u,c)}});const pc=ir({tan_:function(e){const t={x:sr(e,"x","tan")};return Ks.runKernel(On,t)}});function dc(e,t){u(e);const n=er(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return lr(e,null,n,t)}function fc(e,t,n){if(u(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=er(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return lr(e,t,s,n)}function mc(e,t,n){if(u(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=er(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return lr(e,t,s,n)}function gc(e,t,n){if(u(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=er(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return lr(e,t,s,n)}function yc(e,t,n){if(u(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=er(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return lr(e,t=t||s,s,n)}const bc=ir({topk_:function(e,t=1,n=!0){const s=sr(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},i={k:t,sorted:n},[o,l]=Ks.runKernel("TopK",a,i);return{values:o,indices:l}}});const xc=ir({truncatedNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new Cu(t,n,s,!0,r),i=jr(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const wc=ir({unique_:function(e,t=0){const n=sr(e,"x","unique","string_or_numeric");o(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},r={axis:t},[a,i]=Ks.runKernel("Unique",s,r);return{values:a,indices:i}}});const kc=ir({unsortedSegmentSum_:function(e,t,n){const s=sr(e,"x","unsortedSegmentSum"),r=sr(t,"segmentIds","unsortedSegmentSum","int32");o(d(n),(()=>"numSegments must be of dtype int"));const a={x:s,segmentIds:r},i={numSegments:n};return Ks.runKernel("UnsortedSegmentSum",a,i)}});const vc=ir({unstack_:function(e,t=0){const n=sr(e,"x","unstack","string_or_numeric");o(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},r={axis:t};return Ks.runKernel("Unpack",s,r)}});function Nc(e,t=!0,n,s){return Ks.makeVariable(e,t,n,s)}function Ic(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=jr(e,"int32"),r=jr([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=s.indexToLoc(n[t]),i=t*e.length;r.values.set(a,i)}return r.toTensor()}const Cc=async function(e){const t=sr(e,"condition","whereAsync","bool"),n=await t.data(),s=Ic(t.shape,n);return e!==t&&t.dispose(),s};const $c=async function(e,t,n){const s=sr(e,"tensor","boolMask"),r=sr(t,"mask","boolMask","bool"),a=null==n?0:n,i=r.rank,u=s.shape;o(i>0,(()=>"mask cannot be scalar")),l(u.slice(a,a+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let c=1;for(let e=a;e<a+i;e++)c*=u[e];const h=u.slice(0,a).concat([c],u.slice(a+i)),p=Zi(s,h),d=Zi(r,[-1]),f=await Cc(d),m=lc(f,[1]),g=Qo(p,m,a);return e!==s&&s.dispose(),t!==r&&r.dispose(),m.dispose(),p.dispose(),d.dispose(),f.dispose(),g};function Sc(e,t,n=null){if(0===e.rank)return $i(e);if(1!==e.rank&&null===n)return Sc(Zi(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Cl($i(e),n);if(t===1/0)return Nl($i(e),n);if(t===-1/0)return Kl($i(e),n);if("euclidean"===t||2===t)return ic(Cl(pu($i(e),Uu(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Nl(Cl($i(e),n[0]),n[1]-1);if(t===1/0)return Nl(Cl($i(e),n[1]),n[0]);if(t===-1/0)return Kl(Cl($i(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return ic(Cl(Zl(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Tc=ir({norm_:function(e,t="euclidean",n=null,s=!1){const r=Sc(e=sr(e,"x","norm"),t,n);let a=r.shape;if(s){const t=b(n,e.shape);a=Al(r.shape,t)}return Zi(r,a)}});const Ec=ir({movingAverage_:function(e,t,n,s,r=!0){const a=sr(e,"v","movingAverage"),i=sr(t,"x","movingAverage"),l=sr(n,"decay","movingAverage");Bs(a,i),o(p(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const u=Uu(1),c=Il(u,l);let h=Ci(Il(i,a),c);if(r){o(null!=s,(()=>"When using zeroDebias: true, step is required."));const e=sr(s,"step","movingAverage");h=Ii(h,Il(u,pu(l,e)))}return vi(a,h)}});const Ac=ir({scatterND_:function(e,t,n){const s=sr(e,"indices","scatterND","int32"),r=sr(t,"updates","scatterND");Ca(r,s,n);const a={indices:s,updates:r},i={shape:n};return Ks.runKernel("ScatterNd",a,i)}});const Rc=ir({sparseToDense_:function(e,t,n,s=0){const r=sr(e,"sparseIndices","sparseToDense","int32"),a=sr(t,"sparseValues","sparseToDense"),i=sr(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},l={outputShape:n};return Ks.runKernel("SparseToDense",o,l)}});const Fc=ir({gatherND_:function(e,t){const n=sr(t,"indices","gatherND","int32"),s={params:sr(e,"x","gatherND"),indices:n};return Ks.runKernel("GatherNd",s)}});const Dc=ir({dropout_:function(e,t,n,s){const r=sr(e,"x","dropout");if(o("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),o(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Ss?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(p(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,l=Ii(Zo(vi(Au(a,0,1,"float32",s),i)),i);return Ci(r,l)}});function _c(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Oc(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return dc(r,"float32")}const Mc=async function(e,t,n=1){const s=sr(e,"predictions","inTopK"),r=sr(t,"targets","inTopK");o(s.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`)),o(s.rank-1===r.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`)),l(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=s.shape[s.shape.length-1];o(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await s.data(),u=await r.data(),[c,h]=[i.length/a,a],p=w("bool",c);for(let e=0;e<c;e++){const t=e*h,s=i.subarray(t,t+h),r=[];for(let e=0;e<s.length;e++)r.push({value:s[e],index:e});r.sort(((e,t)=>t.value-e.value)),p[e]=0;for(let t=0;t<n;t++)if(r[t].index===u[e]){p[e]=1;break}}return e!==s&&s.dispose(),t!==r&&r.dispose(),ur(p,r.shape,"bool")};const Lc=ir({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",i){let l=e;3===e.rank&&(l=Zi(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Zi(t,[1,t.shape[0],t.shape[1],t.shape[2]])),o(4===l.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${l.shape}.`)),o(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),o(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const c="NHWC"===a?l.shape[3]:l.shape[1],h="NHWC"===a?u.shape[3]:u.shape[1];o(c===n[2],(()=>`Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${n[2]}.`)),o(h===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${h}) must match output depth for filter (${n[3]}).`)),null!=i&&o(d(r),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const p={x:l,dy:u},f={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n};return Ks.runKernel("Conv2DBackpropFilter",p,f)}});function zc(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Ci(e,cc(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Bc(e,t){let n=t;const s=Mo(e.shape,t.shape);return s.length>0&&(n=Cl(n,s)),Zi(n,e.shape)}function Pc(e,t,n,s){if("linear"===t)return e;if("relu"===t)return _u(e);if("elu"===t)return Go(e);if("relu6"===t)return Ou(e);if("prelu"===t)return du(e,n);if("leakyrelu"===t)return il(e,s);if("sigmoid"===t)return no(e);throw new Error(`Unknown fused activation ${t}.`)}const Wc=(e,t)=>!(e>0)||"linear"===t;const Vc=ir({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:l,activation:u="linear",preluActivationWeights:c,leakyreluAlpha:h}){if(u=u||"linear",!1===Wc(Ks.state.gradientDepth,u)){let o=wo(e,t,n,s,r,a,i);return null!=l&&(o=vi(o,l)),Pc(o,u,c,h)}const p=sr(e,"x","conv2d"),f=sr(t,"filter","conv2d");let m=p,g=!1;3===p.rank&&(g=!0,m=Zi(p,[1,p.shape[0],p.shape[1],p.shape[2]])),o(4===m.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${m.rank}.`)),o(4===f.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${f.rank}.`)),null!=i&&o(d(s),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`)),o(m.shape[3]===f.shape[2],(()=>`Error in conv2d: depth of input (${m.shape[3]}) must match input depth for filter ${f.shape[2]}.`)),o(Yi(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),o("NHWC"===r,(()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`));const y=Vi(m.shape,f.shape,n,a,s,i);let b,x;null!=l&&(b=sr(l,"bias","fused conv2d"),[b]=zs(b,p),Lo(y.outShape,b.shape)),null!=c&&(x=sr(c,"prelu weights","fused conv2d"));const w=(e,t)=>{const[r,i,l,c]=t,h=zc(e,l,u);o(Xi(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const p=[vo(i.shape,h,r,n,s),Lc(i,h,r.shape,n,s)];if(null!=c){const e=Bc(c,h);p.push(e)}return p},k={x:m,filter:f,bias:b,preluActivationWeights:x},v={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:h};if(null==l){return bl(((e,t,n)=>{let s=Ks.runKernel("FusedConv2D",k,v);return n([t,e,s]),g&&(s=Zi(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}}))(m,f)}return bl(((e,t,n,s)=>{let r=Ks.runKernel("FusedConv2D",k,v);return s([t,e,r,n]),g&&(r=Zi(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}}))(m,f,b)}});const Uc=ir({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],i){let o=e;3===e.rank&&(o=Zi(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Zi(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n};return Ks.runKernel("DepthwiseConv2dNativeBackpropFilter",u,c)}});const Gc=ir({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=Zi(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e},h=Ks.runKernel("DepthwiseConv2dNativeBackpropInput",u,c);return l?Zi(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Hc=ir({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:l,activation:u="linear",preluActivationWeights:c,leakyreluAlpha:h}){if(!1===Wc(Ks.state.gradientDepth,u)){let o=Fo(e,t,n,s,r,a,i);return null!=l&&(o=vi(o,l)),Pc(o,u,c,h)}const p=sr(e,"x","depthwiseConv2d"),f=sr(t,"filter","depthwiseConv2d");let m=p,g=!1;3===p.rank&&(g=!0,m=Zi(p,[1,p.shape[0],p.shape[1],p.shape[2]])),o(4===m.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`)),o(4===f.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`)),o(m.shape[3]===f.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${m.shape[3]}) must match the inChannels dimension in filter ${f.shape[2]}.`)),null==a&&(a=[1,1]),o(Yi(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=i&&o(d(s),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${s}.`));const y=Vi(m.shape,f.shape,n,a,s,i,!0);let b,x;null!=l&&(b=sr(l,"bias","fused conv2d"),[b]=zs(b,p),Lo(y.outShape,b.shape)),null!=c&&(x=sr(c,"prelu weights","fused depthwiseConv2d"));const w=(e,t)=>{o(Xi(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[r,l,c,h]=t,p=zc(e,c,u),d=Gc(l.shape,p,r,n,s,a,i),f=Uc(l,p,r.shape,n,s,a,i);if(null!=h){return[d,f,Bc(b,p)]}return[d,f]},k={x:m,filter:f,bias:b,preluActivationWeights:x},v={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:h};if(null==l){return bl(((e,t,n)=>{let s=Ks.runKernel("FusedDepthwiseConv2D",k,v);return n([t,e,s]),g&&(s=Zi(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}}))(m,f)}return bl(((e,t,n,s)=>{let r=Ks.runKernel("FusedDepthwiseConv2D",k,v);return s([t,e,r,n]),g&&(r=Zi(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}}))(m,f,b)}});const jc=ir({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:l}){if(!1===Wc(Ks.state.gradientDepth,a)){let o=ha(e,t,n,s);return null!=r&&(o=vi(o,r)),Pc(o,a,i,l)}let u=sr(e,"a","fused matMul"),c=sr(t,"b","fused matMul");[u,c]=zs(u,c);const d=n?u.shape[u.rank-2]:u.shape[u.rank-1],f=s?c.shape[c.rank-1]:c.shape[c.rank-2],m=n?u.shape[u.rank-1]:u.shape[u.rank-2],g=s?c.shape[c.rank-2]:c.shape[c.rank-1],y=u.shape.slice(0,-2),b=c.shape.slice(0,-2),x=h(y),w=h(b);o(u.rank>=2&&c.rank>=2&&u.rank===c.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${u.rank} and ${c.rank}.`)),o(p(y,b),(()=>`Error in fused matMul: outer dimensions (${y}) and (${b}) of Tensors with shapes ${u.shape} and ${c.shape} must match.`)),o(d===f,(()=>`Error in fused matMul: inner shapes (${d}) and (${f}) of Tensors with shapes ${u.shape} and ${c.shape} and transposeA=${n} and transposeB=${s} must match.`));const k=u.shape.slice(0,-2).concat([m,g]),v=Zi(u,n?[x,d,m]:[x,m,d]),N=Zi(c,s?[w,g,f]:[w,f,g]);let I,C;null!=r&&(I=sr(r,"bias","fused matMul"),[I]=zs(I,u),Lo(k,I.shape)),null!=i&&(C=sr(i,"prelu weights","fused matMul"));const $=(e,t)=>{const[i,o,l,u]=t,c=zc(Zi(e,l.shape),l,a);let h,p;if(n||s?!n&&s?(h=ha(c,o,!1,!1),p=ha(c,i,!0,!1)):n&&!s?(h=ha(o,c,!1,!0),p=ha(i,c,!1,!1)):(h=ha(o,c,!0,!0),p=ha(c,i,!0,!0)):(h=ha(c,o,!1,!0),p=ha(i,c,!0,!1)),null!=r){return[h,p,Bc(u,c)]}return[h,p]},S={a:v,b:N,bias:I,preluActivationWeights:C},T={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:l};if(null==r){return bl(((e,t,n)=>{const s=Ks.runKernel("_FusedMatMul",S,T);return n([e,t,s]),{value:Zi(s,k),gradFunc:$}}))(v,N)}return bl(((e,t,n,s)=>{const r=Ks.runKernel("_FusedMatMul",S,T);return s([e,t,r,n]),{value:Zi(r,k),gradFunc:$}}))(v,N,I)}});var qc=Object.freeze({__proto__:null,conv2d:Vc,depthwiseConv2d:Hc,matMul:jc});const Kc=ir({hammingWindow_:function(e){return Oc(e,.54,.46)}});const Xc=ir({hannWindow_:function(e){return Oc(e,.5,.5)}});const Yc=ir({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(so(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=to([so(e,a,t-s),Jo([s],r)]);i.push(o),a+=n}return 0===i.length?fc([],[0,t]):Zi(to(i),[i.length,t])}});const Jc=ir({stft_:function(e,t,n,s,r=Xc){null==s&&(s=_c(t));const a=Yc(e,t,n),i=Ci(a,r(t));return ac(i,s)}});const Zc=ir({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=sr(e,"image","cropAndResize"),l=sr(t,"boxes","cropAndResize","float32"),u=sr(n,"boxInd","cropAndResize","int32"),c=l.shape[0];o(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),o(2===l.rank&&4===l.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${c},4] but had shape ${l.shape}.`)),o(1===u.rank&&u.shape[0]===c,(()=>`Error in cropAndResize: boxInd must be have size [${c}] but had shape ${l.shape}.`)),o(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),o(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),o("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const h={image:i,boxes:l,boxInd:u},p={method:r,extrapolationValue:a,cropSize:s};return Ks.runKernel("CropAndResize",h,p)}});const Qc=ir({flipLeftRight_:function(e){const t=sr(e,"image","flipLeftRight","float32");o(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Ks.runKernel("FlipLeftRight",n,{})}});const eh=ir({rotateWithOffset_:function(e,t,n=0,s=.5){const r=sr(e,"image","rotateWithOffset","float32");o(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},i={radians:t,fillValue:n,center:s};return Ks.runKernel("RotateWithOffset",a,i)}});function th(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),o(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),o(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),o(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),o(1===t.rank,(()=>"scores must be a 1D tensor")),o(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),o(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const nh=ir({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=sr(e,"boxes","nonMaxSuppression"),i=sr(t,"scores","nonMaxSuppression"),o=th(a,i,n,s,r),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return Ks.runKernel("NonMaxSuppressionV3",{boxes:a,scores:i},l)}});function sh(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||rh)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function rh(e,t){return e>t?1:e<t?-1:0}function ah(e,t,n,s,r){return lh(e,t,n,s,r,0)}function ih(e,t,n,s,r,a){return lh(e,t,n,s,r,0,!1,a,!0)}function oh(e,t,n,s,r,a){return lh(e,t,n,s,r,a,!0)}function lh(e,t,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>r&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(hh);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=uh(e,a,h[n]);if(i>=s){o=!0;break}if(t.score=t.score*ch(s,c,i),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>r&&sh(u,t,hh))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function uh(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function ch(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function hh(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const ph=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=sr(e,"boxes","nonMaxSuppressionAsync"),i=sr(t,"scores","nonMaxSuppressionAsync"),o=th(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=ah(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),dc(h,"int32")};const dh=ir({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=sr(e,"boxes","nonMaxSuppression"),o=sr(t,"scores","nonMaxSuppression"),l=th(i,o,n,s,r,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Ks.runKernel("NonMaxSuppressionV5",u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const fh=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=sr(e,"boxes","nonMaxSuppressionAsync"),o=sr(t,"scores","nonMaxSuppressionAsync"),l=th(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=oh(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:dc(p,"int32"),selectedScores:dc(d)}};const mh=ir({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=sr(e,"boxes","nonMaxSuppression"),o=sr(t,"scores","nonMaxSuppression"),l=th(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Ks.runKernel("NonMaxSuppressionV4",u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const gh=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=sr(e,"boxes","nonMaxSuppressionAsync"),o=sr(t,"scores","nonMaxSuppressionAsync"),l=th(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=ih(p,d,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:dc(f,"int32"),validOutputs:Uu(m,"int32")}};const yh=ir({resizeBilinear_:function(e,t,n=!1,s=!1){const r=sr(e,"images","resizeBilinear");o(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),o(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),o(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=Zi(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,l={images:a},u={alignCorners:n,halfPixelCenters:s,size:t},c=Ks.runKernel("ResizeBilinear",l,u);return i?Zi(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const bh=ir({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=sr(e,"images","resizeNearestNeighbor");o(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),o(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),o("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),o(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=Zi(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,l={images:a},u={alignCorners:n,halfPixelCenters:s,size:t},c=Ks.runKernel("ResizeNearestNeighbor",l,u);return i?Zi(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const xh=ir({threshold_:function(e,t="binary",n=!1,s=.5){const r=sr(e,"image","threshold"),a=r.shape[0]*r.shape[1];let i,l,u,c,h=Ci(dc([s]),255);if(o(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),o(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),o("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),o("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===r.shape[2]){[i,l,u]=rc(r,[1,1,1],-1);const e=Ci(i,.2989),t=Ci(l,.587),n=Ci(u,.114);c=vi(vi(e,t),n)}else c=e;if("otsu"===t){h=function(e,t){let n,s,r,a,i,o,l=dc([-1]),u=dc([0]),c=dc([0]);for(let h=0;h<e.size-1;h++){n=so(e,0,h+1),s=so(e,h+1),i=Ii(Cl(n),t),o=Ii(Cl(s),t);const p=Cl(Ci(n,Ru(0,n.size)));r=Ii(p,Cl(n));const d=Jo(s.shape,n.size),f=vi(Ru(0,s.size),d),m=Ci(s,f);a=Ii(Cl(m),Cl(s));const g=Il(r,a),y=Il(r,a),b=Ci(i,o);c=Ci(Ci(b,g),y);const x=el(c,u);u=Bo(x,c,u),l=Bo(x,dc([h]),l)}return l}(ho(qr(Wu(c),"int32"),ur([]),256),a)}const p=n?ll(c,h):el(c,h);return qr(Ci(p,255),"int32")}});const wh=ir({transform_:function(e,t,n="nearest",s="constant",r=0,a){const i=sr(e,"image","transform","float32"),l=sr(t,"transforms","transform","float32");o(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),o(2===l.rank&&(l.shape[0]===i.shape[0]||1===l.shape[0])&&8===l.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),o(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const u={image:i,transforms:l},c={interpolation:n,fillMode:s,fillValue:r,outputShape:a};return Ks.runKernel("Transform",u,c)}});const kh=ir({bandPart_:function(e,t,n){o(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),o(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=sr(e,"a","bandPart");o(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,i]=s.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const l=Zi(Ru(0,a,1,"int32"),[-1,1]),u=Ru(0,i,1,"int32"),c=Il(l,u),h=Ml(ll(c,Uu(+t,"int32")),tl(c,Uu(-n,"int32"))),p=Hl([a,i],s.dtype);return Zi(uc(vc(Zi(s,[-1,a,i])).map((e=>Bo(h,e,p)))),r)}});const vh=ir({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,o(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)o(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=rc(e,e.shape[0],0).map((e=>lc(e,[0])));o(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(Ks.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=Ci(Cl(Ci(n[s],e)),n[s]);e=Il(e,t)}return Ii(e,Tc(e,"euclidean"))})));return t?uc(n,0):n}});function Nh(e,t=!1){return Ks.tidy((()=>{o(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=Yo(n),a=Kr(e);const i=fc([[1]],[1,1]);let l=Kr(i);const u=n>=s?s:n;for(let e=0;e<u;++e){const t=a,o=l,u=r;[l,a,r]=Ks.tidy((()=>{const t=so(a,[e,e],[n-e,1]),o=Tc(t),u=so(a,[e,e],[1,1]),c=Bo(el(u,0),fc([[-1]]),fc([[1]])),h=Il(u,Ci(c,o)),p=Ii(t,h);l=1===p.shape[0]?Kr(i):to([i,so(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=wl(Ii(ha(c,h),o)),f=so(a,[e,0],[n-e,s]),m=Ci(d,l),g=da(l);if(0===e)a=Il(f,ha(m,ha(g,f)));else{const t=Il(f,ha(m,ha(g,f)));a=to([so(a,[0,0],[e,s]),t],0)}const y=da(m),b=so(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=Il(b,ha(ha(b,l),y));else{const t=Il(b,ha(ha(b,l),y));r=to([so(r,[0,0],[n,e]),t],1)}return[l,a,r]})),ci([t,o,u])}return!t&&n>s&&(r=so(r,[0,0],[n,s]),a=so(a,[0,0],[s,s])),[r,a]}))}const Ih=ir({qr_:function(e,t=!1){if(o(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Nh(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=vc(Zi(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];s.forEach((e=>{const[n,s]=Nh(e,t);r.push(n),a.push(s)}));return[Zi(uc(r,0),e.shape),Zi(uc(a,0),e.shape)]}}});var Ch;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Ch||(Ch={}));const $h=ir({computeWeightedLoss_:function(e,t,n=Ch.SUM_BY_NONZERO_WEIGHTS){const s=sr(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=sr(t,"weights","computeWeightedLoss"));const a=null==r?s:Ci(s,r);if(n===Ch.NONE)return a;if(n===Ch.SUM)return Cl(a);if(n===Ch.MEAN){if(null==r)return Gl(a);{const e=s.size/r.size,t=Ii(Cl(a),Cl(r));return e>1?Ii(t,Uu(e)):t}}if(n===Ch.SUM_BY_NONZERO_WEIGHTS){if(null==r)return Ii(Cl(a),Uu(s.size));{const e=Ci(r,jl(s.shape)),t=qr(Cl(nu(e,Uu(0))),"float32");return Ii(Cl(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const Sh=ir({absoluteDifference_:function(e,t,n,s=Ch.SUM_BY_NONZERO_WEIGHTS){const r=sr(e,"labels","absoluteDifference"),a=sr(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=sr(n,"weights","absoluteDifference")),l(r.shape,a.shape,"Error in absoluteDifference: ");const o=$i(Il(r,a));return $h(o,i,s)}});const Th=ir({cosineDistance_:function(e,t,n,s,r=Ch.SUM_BY_NONZERO_WEIGHTS){const a=sr(e,"labels","cosineDistance"),i=sr(t,"predictions","cosineDistance");let o=null;null!=s&&(o=sr(s,"weights","cosineDistance")),l(a.shape,i.shape,"Error in cosineDistance: ");const u=Uu(1),c=Il(u,Cl(Ci(a,i),n,!0));return $h(c,o,r)}});const Eh=ir({hingeLoss_:function(e,t,n,s=Ch.SUM_BY_NONZERO_WEIGHTS){let r=sr(e,"labels","hingeLoss");const a=sr(t,"predictions","hingeLoss");let i=null;null!=n&&(i=sr(n,"weights","hingeLoss")),l(r.shape,a.shape,"Error in hingeLoss: ");const o=Uu(1);r=Il(Ci(Uu(2),r),o);const u=_u(Il(o,Ci(r,a)));return $h(u,i,s)}});const Ah=ir({huberLoss_:function(e,t,n,s=1,r=Ch.SUM_BY_NONZERO_WEIGHTS){const a=sr(e,"labels","huberLoss"),i=sr(t,"predictions","huberLoss");let o=null;null!=n&&(o=sr(n,"weights","huberLoss")),l(a.shape,i.shape,"Error in huberLoss: ");const u=Uu(s),c=$i(Il(i,a)),h=Xl(c,u),p=Il(c,h),d=vi(Ci(Uu(.5),Zl(h)),Ci(u,p));return $h(d,o,r)}});const Rh=ir({logLoss_:function(e,t,n,s=1e-7,r=Ch.SUM_BY_NONZERO_WEIGHTS){const a=sr(e,"labels","logLoss"),i=sr(t,"predictions","logLoss");let o=null;null!=n&&(o=sr(n,"weights","logLoss")),l(a.shape,i.shape,"Error in logLoss: ");const u=Uu(1),c=Uu(s),h=wl(Ci(a,hl(vi(i,c)))),p=Ci(Il(u,a),hl(vi(Il(u,i),c))),d=Il(h,p);return $h(d,o,r)}});const Fh=ir({meanSquaredError_:function(e,t,n,s=Ch.SUM_BY_NONZERO_WEIGHTS){const r=sr(e,"labels","meanSquaredError"),a=sr(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=sr(n,"weights","meanSquaredError")),l(r.shape,a.shape,"Error in meanSquaredError: ");const o=oc(r,a);return $h(o,i,s)}});const Dh=ir({sigmoidCrossEntropy_:function(e,t,n,s=0,r=Ch.SUM_BY_NONZERO_WEIGHTS){let a=sr(e,"multiClassLabels","sigmoidCrossEntropy");const i=sr(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=sr(n,"weights","sigmoidCrossEntropy")),l(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=Uu(s),t=Uu(1),n=Uu(.5);a=vi(Ci(a,Il(t,e)),Ci(n,e))}const u=function(e,t){const n=sr(e,"labels","sigmoidCrossEntropyWithLogits"),s=sr(t,"logits","sigmoidCrossEntropyWithLogits");l(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=_u(s),a=Ci(s,n),i=pl(jo(wl($i(s))));return vi(Il(r,a),i)}(a,i);return $h(u,o,r)}});const _h=ir({softmaxCrossEntropy_:function(e,t,n,s=0,r=Ch.SUM_BY_NONZERO_WEIGHTS){let a=sr(e,"onehotLabels","softmaxCrossEntropy");const i=sr(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=sr(n,"weights","softmaxCrossEntropy")),l(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=Uu(s),t=Uu(1),n=Uu(a.shape[1]);a=vi(Ci(a,Il(t,e)),Ii(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return bl(((e,t,s)=>{const r=Ol(t,[n],!0),a=Il(qr(t,"float32"),r);s([e,a]);const i=wl(Ci(a,e));return{value:Cl(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=Al(e.shape,[n]);return[Ci(Zi(e,a),Il(qr(s,"float32"),jo(r))),Ci(Zi(e,a),Il(jo(r),qr(s,"float32")))]}}}))(e,t)}(a,i);return $h(u,o,r)}});const Oh=ir({sparseFillEmptyRows_:function(e,t,n,s){const r=sr(e,"indices","sparseFillEmptyRows"),a=sr(t,"values","sparseFillEmptyRows"),i=sr(n,"denseShape","sparseFillEmptyRows"),o=sr(s,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const l={indices:r,values:a,denseShape:i,defaultValue:o},u=Ks.runKernel("SparseFillEmptyRows",l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}});const Mh=ir({sparseReshape_:function(e,t,n){const s=sr(e,"inputIndices","sparseReshape"),r=sr(t,"inputShape","sparseReshape"),a=sr(n,"newShape","sparseReshape");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const i={inputIndices:s,inputShape:r,newShape:a},o=Ks.runKernel("SparseReshape",i);return{outputIndices:o[0],outputShape:o[1]}}}),Lh={fft:tc,ifft:nc,rfft:ac,irfft:sc},zh={hammingWindow:Kc,hannWindow:Xc,frame:Yc,stft:Jc},Bh={flipLeftRight:Qc,resizeNearestNeighbor:bh,resizeBilinear:yh,rotateWithOffset:eh,cropAndResize:Zc,nonMaxSuppression:nh,nonMaxSuppressionAsync:ph,nonMaxSuppressionWithScore:dh,nonMaxSuppressionWithScoreAsync:fh,nonMaxSuppressionPadded:mh,nonMaxSuppressionPaddedAsync:gh,threshold:xh,transform:wh},Ph={bandPart:kh,gramSchmidt:vh,qr:Ih},Wh={absoluteDifference:Sh,computeWeightedLoss:$h,cosineDistance:Th,hingeLoss:Eh,huberLoss:Ah,logLoss:Rh,meanSquaredError:Fh,sigmoidCrossEntropy:Dh,softmaxCrossEntropy:_h},Vh={sparseFillEmptyRows:Oh,sparseReshape:Mh};class Uh extends Ha{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return ci(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return yl(e,t)}dispose(){null!=this.iterations_&&ci(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Uu(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Uh,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Gh extends Uh{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Ks.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ks.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:ui((()=>Po(s).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:ui((()=>Po(s).variable(false)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;ui((()=>{const e=vi(Ci(a,this.rho),Ci(Zl(r),1-this.rho)),t=Ci(Ii(ic(vi(i,this.epsilon)),ic(vi(a,this.epsilon))),r),n=vi(Ci(i,this.rho),Ci(Zl(t),1-this.rho));a.assign(e),i.assign(n);const o=vi(Ci(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(ci(this.accumulatedGrads.map((e=>e.variable))),ci(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Gh.className="Adadelta",qa(Gh);class Hh extends Uh{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ks.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:ui((()=>Jo(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;ui((()=>{const e=vi(a,Zl(r));a.assign(e);const t=vi(Ci(Ii(r,ic(vi(e,Ks.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&ci(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Hh.className="Adagrad",qa(Hh);class jh extends Uh{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],ui((()=>{this.accBeta1=Uu(t).variable(),this.accBeta2=Uu(n).variable()})),null==s&&(this.epsilon=Ks.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);ui((()=>{const n=Il(1,this.accBeta1),s=Il(1,this.accBeta2);t.forEach(((t,r)=>{const a=Ks.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:ui((()=>Po(a).variable(false)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:ui((()=>Po(a).variable(false)))});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=vi(Ci(o,this.beta1),Ci(i,1-this.beta1)),c=vi(Ci(l,this.beta2),Ci(Zl(i),1-this.beta2)),h=Ii(u,n),p=Ii(c,s);o.assign(u),l.assign(c);const d=vi(Ci(Ii(h,vi(ic(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(Ci(this.accBeta1,this.beta1)),this.accBeta2.assign(Ci(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ci(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&ci(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),ui((()=>{this.accBeta1.assign(pu(this.beta1,this.iterations_+1)),this.accBeta2.assign(pu(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}jh.className="Adam",qa(jh);class qh extends Uh{constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],ui((()=>{this.iteration=Uu(0).variable(),this.accBeta1=Uu(t).variable()})),null==s&&(this.epsilon=Ks.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);ui((()=>{const n=Il(1,this.accBeta1),s=Ii(-this.learningRate,vi(Ci(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=Ks.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Po(a).variable(false)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:Po(a).variable(false)});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=vi(Ci(o,this.beta1),Ci(i,1-this.beta1)),c=Ci(l,this.beta2),h=$i(i),p=Ul(c,h);o.assign(u),l.assign(p);const d=vi(Ci(Ii(s,n),Ii(u,vi(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(vi(this.iteration,1)),this.accBeta1.assign(Ci(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ci(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&ci(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}qh.className="Adamax",qa(qh);class Kh extends Uh{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=Ks.registeredVariables[t];ui((()=>{const e=vi(Ci(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=hi(Uu(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Kh.className="SGD",qa(Kh);class Xh extends Kh{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Uu(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ks.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:ui((()=>Po(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&ui((()=>{let e;const t=vi(Ci(this.m,r),a);e=this.useNesterov?vi(Ci(this.c,vi(a,Ci(t,this.m))),s):vi(Ci(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&ci(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Xh.className="Momentum",qa(Xh);class Yh extends Uh{constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Ks.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ks.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:ui((()=>Po(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:ui((()=>Po(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:ui((()=>Po(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;ui((()=>{const e=vi(Ci(i,this.decay),Ci(Zl(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=vi(Ci(t,this.decay),Ci(a,1-this.decay)),l=Ii(Ci(a,this.learningRate),ic(Il(e,vi(Zl(r),this.epsilon)))),u=vi(Ci(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=Il(s,u);s.assign(c)}else{const e=vi(Ci(i,this.decay),Ci(Zl(a),1-this.decay)),t=vi(Ci(o,this.momentum),Ii(Ci(a,this.learningRate),ic(vi(e,this.epsilon))));i.assign(e),o.assign(t);const n=Il(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&ci(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&ci(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&ci(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Yh.className="RMSProp",qa(Yh);class Jh{static sgd(e){return new Kh(e)}static momentum(e,t,n=!1){return new Xh(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new Yh(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new jh(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new Gh(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new qh(e,t,n,s,r)}static adagrad(e,t=.1){return new Hh(e,t)}}const Zh={sgd:Jh.sgd,momentum:Jh.momentum,adadelta:Jh.adadelta,adagrad:Jh.adagrad,rmsprop:Jh.rmsprop,adamax:Jh.adamax,adam:Jh.adam},Qh="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function ep(){return new Promise((e=>Qh((()=>e()))))}function tp(e,t){const n=e[0].length;e.forEach(((e,t)=>{o(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),o(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)o(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function np(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}function sp(e){return e<=30?e:D(e,Math.floor(Math.sqrt(e)))}function rp(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function ap(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function ip(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function op(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function lp(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function up(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}const cp=1.0507009873554805;function hp(...e){j().getBool("IS_TEST")||console.warn(...e)}function pp(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function dp(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function fp(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function mp(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function gp(e,t){return{real:e[2*t],imag:e[2*t+1]}}function yp(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function bp(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function xp(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}const wp=/->/g;function kp(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(wp,"").length)/"->".length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[s,r]=e.split("->");o(-1===s.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const a=s.split(","),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const l=[];for(let e=0;e<r.length;++e){const t=r[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===l.indexOf(t)&&l.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===l.indexOf(t)&&","!==t&&l.push(t)}const u=new Array(a.length);for(let e=0;e<i;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<a[e].length;++t)u[e].push(l.indexOf(a[e][t]))}const c=l.length,h=[];for(let e=r.length;e<c;++e)h.push(e);return{allDims:l,summedDims:h,idDims:u}}function vp(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function Np(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const r=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=r[n]:o(s[t[e][n]]===r[n],(()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(r)}, but got dimension ${r[n]}`))}}function Ip(e,t){const n=e,s=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let e=0;e<r;++e)s.push([]);const a=[];for(let e=0;e<n.length;++e){const r=$p(t,n[e]);for(const t of r)-1===a.indexOf(t)&&(s[e].push(t),a.push(t))}return{path:n,steps:s}}function Cp(e){return e.every(((e,t)=>e===t))}function $p(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}function Sp(e,t,n=0){let s=[];if("number"==typeof t)o(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{o(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const s=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-s}o(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function Tp(e,t){let n,s=!1;for(e<=30?(n=e,s=!0):n=D(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=D(e,n+1);return n}function Ep(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function Ap(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}var Rp=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:Tp,computeOutShape:Ep,collectGatherOpShapeInfo:Ap});function Fp(e){try{return e.map((e=>ds(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Dp(e){return e.map((e=>ps(e)))}var _p=Object.freeze({__proto__:null,slice_util:Ga,segment_util:Rp,fromUint8ToStringArray:Fp,fromStringArrayToUint8:Dp,upcastType:Ms,axesAreInnerMostDims:Sl,combineLocations:Tl,computeOutAndReduceShapes:El,expandShapeToKeepDim:Al,assertAxesAreInnerMostDims:Rl,getAxesPermutation:Fl,getUndoAxesPermutation:Dl,getInnerMostAxes:_l,getBroadcastDims:Oo,getReductionAxes:Mo,assertAndGetBroadcastShape:Lo,assertParamsConsistent:tp,computeOutShape:np,computeDilation2DInfo:Bi,computePool2DInfo:Pi,computePool3DInfo:Wi,computeConv2DInfo:Vi,computeConv3DInfo:Ui,computeDefaultPad:Gi,tupleValuesAreOne:Xi,eitherStridesOrDilationsAreOne:Yi,convertConv2DDataFormat:Ji,getFusedDyActivation:zc,getFusedBiasGradient:Bc,applyActivation:Pc,shouldFuse:Wc,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:sp,getImageCenter:rp,getReshaped:ap,getPermuted:ip,getReshapedPermuted:op,getSliceBeginCoords:lp,getSliceSize:up,prepareAndValidate:va,validateUpdateShape:Ia,validateInput:Ca,calculateShapes:$a,SELU_SCALEALPHA:1.7580993408473768,SELU_SCALE:cp,ERF_P:.3275911,ERF_A1:.254829592,ERF_A2:-.284496736,ERF_A3:1.421413741,ERF_A4:-1.453152027,ERF_A5:1.061405429,warn:hp,log:function(...e){j().getBool("IS_TEST")||console.log(...e)},mergeRealAndImagArrays:pp,splitRealAndImagArrays:dp,complexWithEvenIndex:fp,complexWithOddIndex:mp,getComplexWithIndex:gp,assignToTypedArray:yp,exponents:bp,exponent:xp,decodeEinsumEquation:kp,getEinsumPermutation:vp,checkEinsumDimSizes:Np,getEinsumComputePath:Ip,isIdentityPermutation:Cp,prepareSplitSize:Sp}),Op=Object.freeze({__proto__:null,nonMaxSuppressionV3Impl:ah,nonMaxSuppressionV4Impl:ih,nonMaxSuppressionV5Impl:oh,whereImpl:Ic});const Mp={kernelName:"Abs",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(e,cc(qr(n,"float32"),-1))}}},Lp={kernelName:"Acos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Zl(qr(n,"float32")),s=ic(Il(Uu(1),t));return wl(Ii(e,s))}}}},zp={kernelName:"Acosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=ic(Il(Zl(qr(n,"float32")),1));return Ii(e,t)}}}},Bp={kernelName:ee,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(n.shape,s.shape);return{a:()=>{let t=e;const s=Mo(n.shape,r);return s.length>0&&(t=Cl(t,s)),Zi(t,n.shape)},b:()=>{let t=e;const n=Mo(s.shape,r);return n.length>0&&(t=Cl(t,n)),Zi(t,s.shape)}}}},Pp={kernelName:"AddN",saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},Wp={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Po(n)}}},Vp={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Po(n)}}},Up={kernelName:"Asin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ii(e,ic(Il(Uu(1),Zl(qr(n,"float32")))))}}},Gp={kernelName:"Asinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=ic(vi(Uu(1),Zl(qr(n,"float32"))));return Ii(e,t)}}}},Hp={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(n.shape,s.shape);return{a:()=>{const t=vi(Zl(n),Zl(s));let a=Ci(e,Ii(s,t));const i=Mo(n.shape,r);return i.length>0&&(a=Cl(a,i)),Zi(a,n.shape)},b:()=>{const t=vi(Zl(n),Zl(s));let a=wl(Ci(e,Ii(n,t)));const i=Mo(s.shape,r);return i.length>0&&(a=Cl(a,i)),Zi(a,s.shape)}}}},jp={kernelName:"Atan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ii(e,vi(Zl(qr(n,"float32")),1))}}},qp={kernelName:"Atanh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ii(e,Il(Uu(1),Zl(qr(n,"float32"))))}}};const Kp=ir({avgPool3dGrad_:function(e,t,n,s,r,a){const i=sr(e,"dy","avgPool3dGrad"),l=sr(t,"input","avgPool3dGrad");let u=i,c=l,h=!1;4===l.rank&&(h=!0,u=Zi(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),c=Zi(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),o(5===u.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`)),o(5===c.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`)),null!=a&&o(d(r),(()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`));const p={dy:u,input:c},f={filterSize:n,strides:s,pad:r,dimRoundingMode:a},m=Ks.runKernel("AvgPool3DGrad",p,f);return h?Zi(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),Xp={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>Kp(e,s,r,a,i,o)}}};const Yp=ir({avgPoolGrad_:function(e,t,n,s,r){const a=sr(e,"dy","avgPoolGrad"),i=sr(t,"input","avgPoolGrad");o(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let l=i,u=a,c=!1;3===i.rank&&(c=!0,l=Zi(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=Zi(a,[1,a.shape[0],a.shape[1],a.shape[2]])),o(4===u.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),o(4===l.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${l.rank}.`));const h={dy:u,input:l},p={filterSize:n,strides:s,pad:r},d=Ks.runKernel("AvgPoolGrad",h,p);return c?Zi(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Jp={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>Yp(e,s,r,a,i)}}},Zp={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>ha(e,r,!1,!1),b:()=>ha(e,s,!0,!1)}:a&&!i?{a:()=>ha(r,e,!1,!0),b:()=>ha(s,e,!1,!1)}:{a:()=>ha(r,e,!0,!0),b:()=>ha(e,s,!0,!0)}:{a:()=>ha(e,r,!1,!0),b:()=>ha(s,e,!0,!1)}}},Qp={kernelName:"BatchToSpaceND",gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>cu(e,s,r)}}},ed={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])i[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>Cl(e,o,!0)}}},td={kernelName:"Cast",gradFunc:e=>({x:()=>e.clone()})},nd={kernelName:"Ceil",gradFunc:e=>({x:()=>Po(e)})},sd={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>Bo(Ml(tl(s,r),ll(s,a)),e,Po(e))}}},rd={kernelName:"ComplexAbs",inputsToSave:["x"],gradFunc:Mp.gradFunc},ad={kernelName:"Concat",saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=b(r,t[0].shape)[0],i=s.map((e=>e[a]));return rc(e,i,a).map((e=>()=>e))}},id={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:l,dataFormat:u}=n;return o(Xi(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>vo(s.shape,e,r,i,l,u),filter:()=>Lc(s,e,r.shape,i,l,u)}}},od={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>wo(e,r,a,i,o,1,l),filter:()=>Lc(e,s,r.shape,a,i,o,l)}}};const ld=ir({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=Zi(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=Zi(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),o(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),o(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),o(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),o(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),o(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const l={x:a,dy:i},u={strides:s,pad:r,filterShape:n};return Ks.runKernel("Conv3DBackpropFilterV2",l,u)}}),ud={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;o(Xi(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,l]=t;return{x:()=>Co(i.shape,e,l,r,a),filter:()=>ld(i,e,l.shape,r,a)}}},cd={kernelName:Re,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(wl(Ku(qr(n,"float32"))),e)}}},hd={kernelName:"Cosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(Xu(qr(n,"float32")),e)}}},pd={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=Fl([r],s.rank);let n=Eo(e,r,a,!i);return null!=t&&(n=da(n,t)),n}}}},dd={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,l=null==s?[1,1]:s;o(Xi(l),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${l}'`));const[u,c]=t;return o(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),o(4===c.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`)),o(u.shape[3]===c.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`)),o(Yi(r,l),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${l}'.`)),null!=i&&o(d(a),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`)),{x:()=>Gc(u.shape,e,c,r,a,s,i),filter:()=>Uc(u,e,c.shape,r,a,s,i)}}},fd={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>Ks.runKernel("Dilation2DBackpropInput",a,n),filter:()=>Ks.runKernel("Dilation2DBackpropFilter",i,n)}}},md={kernelName:je,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Ks.runKernel("EluGrad",s)}}},gd={kernelName:Ke,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Ci(jo(wl(Zl(n))),2/Math.sqrt(Math.PI));return{x:()=>Ci(e,s)}}},yd={kernelName:Ye,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(e,n)}}},bd={kernelName:"ExpandDims",inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Zi(e,n.shape)}}},xd={kernelName:"Expm1",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(e,jo(n))}}},wd={kernelName:"Floor",gradFunc:e=>({x:()=>Po(e)})},kd={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(n.shape,s.shape);return{a:()=>{const t=Ii(e,qr(s,"float32")),a=Mo(n.shape,r);return a.length>0?Zi(Cl(t,a),n.shape):t},b:()=>{let t=Ci(e,qr(n,"float32"));const a=Mo(s.shape,r);a.length>0&&(t=Zi(Cl(t,a),s.shape));const i=Zl(s);return wl(Ii(t,qr(i,"float32")))}}}},vd={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?Uu(1):o,u=Mo(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=Il(r,a),p=Ci(e,l),d=Vu(vi(i,Uu(s))),f=Ci(Ci(Ci(d,d),d),Uu(-.5));return{x:()=>1===a.rank?Zi(Ci(Ci(e,Xo(Zi(d,[1,1,1,a.shape[0]]),c)),l),r.shape):Zi(Ci(Ci(e,d),l),r.shape),mean:()=>{let e=Ci(Ci(d,Uu(-1)),p);return 1===a.rank&&(e=Cl(e,u)),Zi(e,a.shape)},variance:()=>{let e=Ci(Ci(f,h),p);return 1===a.rank&&(e=Cl(e,u)),Zi(e,a.shape)},scale:()=>{const t=Ci(h,d);let n=Ci(e,t);return 1===a.rank&&(n=Cl(n,u)),Zi(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Cl(t,u)),Zi(t,a.shape)}}}},Nd={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,i=b(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=Id(0,l),p=Id(l+1,l+1+c),d=Cd([o,[n],u]),f=Zi(e,d),m=Zi(r,[n]),g=Cd([[l],h,p]),y=da(f,g);let b=kc(y,m,s.shape[i]);const x=Dl(g);return b=da(b,x),b},indices:()=>r}}};function Id(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Cd(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const $d={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Po(n),b:()=>Po(s)}}},Sd={kernelName:"Identity",gradFunc:e=>({x:()=>qr(e,"float32")})},Td={kernelName:"IsFinite",gradFunc:e=>({x:()=>Po(e)})},Ed={kernelName:"IsInf",gradFunc:e=>({x:()=>Po(e)})},Ad={kernelName:"IsNan",gradFunc:e=>({x:()=>Po(e)})},Rd={kernelName:"LeakyRelu",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=el(s,0);return{x:()=>Bo(a,e,Ci(e,r))}}},Fd={kernelName:"Log1p",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ii(e,vi(n,1))}}},Dd={kernelName:xt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ii(e,qr(n,"float32"))}}},_d={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=jo(s);return Il(e,Ci(Cl(e,r,!0),t))}}}};const Od=ir({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return Ks.runKernel("LRNGrad",o,l)}}),Md={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>Od(s,r,e,a,i,o,l)}}};function Ld(e,t,n,s){return t.rank<n.rank&&(t=Zi(t,Al(t.shape,s))),e.rank<n.rank&&(e=Zi(e,Al(e.shape,s))),{x:()=>Ci(e,qr(zo(n,t),e.dtype))}}const zd={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=Ld(e,t[1],a,b(r,a.shape));return{x:()=>i.x()}}},Bd={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Ci(e,qr(tl(n,s),"float32")),b:()=>Ci(e,qr(ol(n,s),"float32"))}}};const Pd=ir({maxPool3dGrad_:function(e,t,n,s,r,a,i){const l=sr(e,"dy","maxPool3dGrad"),u=sr(t,"input","maxPool3dGrad"),c=sr(n,"output","maxPool3dGrad");let h=l,p=u,f=c,m=!1;4===u.rank&&(m=!0,h=Zi(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=Zi(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),f=Zi(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),o(5===h.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${h.rank}.`)),o(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),o(5===f.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${f.rank}.`)),null!=i&&o(d(a),(()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const g={dy:h,input:p,output:f},y={filterSize:s,strides:r,pad:a,dimRoundingMode:i},b=Ks.runKernel("MaxPool3DGrad",g,y);return m?Zi(b,[b.shape[1],b.shape[2],b.shape[3],b.shape[4]]):b}}),Wd={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>Pd(e,s,r,a,i,o,l)}}};const Vd=ir({maxPoolGrad_:function(e,t,n,s,r,a,i){const l=sr(e,"dy","maxPoolGrad"),u=sr(t,"input","maxPoolGrad"),c=sr(n,"output","maxPoolGrad");o(u.rank===l.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${l.rank})`)),o(4===l.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),o(4===u.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`)),null!=i&&o(d(a),(()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const h={dy:l,input:u,output:c},p={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return Ks.runKernel("MaxPoolGrad",h,p)}}),Ud={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>so(e,a,s.shape)}}},Gd={kernelName:"SpaceToBatchND",gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>io(e,s,r)}}},Hd={kernelName:"SplitV",gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>to(e,s)}}};const jd=[Mp,Lp,zp,Bp,Pp,Wp,Vp,Up,Gp,Hp,jp,qp,Xp,Jp,Zp,Qp,ed,td,nd,sd,rd,ad,od,id,ud,cd,hd,pd,dd,fd,{kernelName:"RealDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(n.shape,s.shape);return{a:()=>{const t=Ii(e,qr(s,"float32")),a=Mo(n.shape,r);return a.length>0?Zi(Cl(t,a),n.shape):t},b:()=>{let t=Ci(e,qr(n,"float32"));const a=Mo(s.shape,r);a.length>0&&(t=Zi(Cl(t,a),s.shape));const i=Zl(s);return wl(Ii(t,qr(i,"float32")))}}}},md,gd,yd,bd,xd,kd,wd,vd,Nd,$d,Sd,Td,Ed,Ad,Rd,Fd,Dd,_d,Md,zd,zd,Bd,Wd,{kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>Vd(e,s,r,a,i,o)}}},{kernelName:"Mean",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=b(r,s.shape),i=h(El(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach((e=>{t[e]=1}));const n=Zi(e,t);return Ii(Ci(n,jl(s.shape,"float32")),i)}}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=Ld(e,i,a,b(r,a.shape));return{x:()=>o.x()}}},{kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Ci(e,qr(ll(n,s),"float32")),b:()=>Ci(e,qr(el(n,s),"float32"))}}},{kernelName:"MirrorPad",inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>so(e,a,s.shape)}}},{kernelName:zt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(n.shape,s.shape);return{a:()=>{const t=Mo(n.shape,r);return t.length>0?Zi(Cl(e,t),n.shape):e},b:()=>{const t=Ci(e,wl(Zo(Ii(n,s)))),a=Mo(s.shape,r);return a.length>0?Zi(Cl(t,a),s.shape):t}}}},{kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(n.shape,s.shape);return{a:()=>{const t=Ci(e,qr(s,"float32")),a=Mo(n.shape,r);return a.length>0?Zi(Cl(t,a),n.shape):t},b:()=>{const t=Ci(e,qr(n,"float32")),a=Mo(s.shape,r);return a.length>0?Zi(Cl(t,a),s.shape):t}}}},{kernelName:"Neg",gradFunc:e=>({x:()=>wl(e)})},{kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>Hl(n.shape,"float32")}}},{kernelName:"OnesLike",gradFunc:e=>({x:()=>Po(e)})},{kernelName:"Pack",saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return vc(e,s).map((e=>()=>e))}},Ud,Ud,{kernelName:Jt,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=Lo(a.shape,i.shape);return{a:()=>{const t=qr(i,"float32");let n=Ci(e,Ci(t,pu(a,Il(t,Uu(1)))));const s=Mo(a.shape,o);return s.length>0&&(n=Cl(n,s)),Zi(n,a.shape)},b:()=>{const t=el(a,0),n=Bo(t,hl(a),Po(a));let s=Ci(e,Ci(r,n));const l=Mo(i.shape,o);return l.length>0&&(s=Cl(s,l)),Zi(s,i.shape)}}}},{kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=el(n,0);return{x:()=>Bo(r,e,Ci(e,s)),alpha:()=>{let t=Bo(r,Po(e),Ci(e,n));const a=Mo(s.shape,e.shape);return a.length>0&&(t=Cl(t,a)),Zi(t,s.shape)}}}},{kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ii(e,wl(Zl(n)))}}},{kernelName:"Relu6",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Ci(ll(n,6),cc(n));return{x:()=>Ci(e,qr(s,"float32"))}}},{kernelName:"Relu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(e,qr(cc(n),"float32"))}}},{kernelName:"Reshape",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Zi(e,n.shape)}}},{kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Ks.runKernel("ResizeBilinearGrad",r,n)}}},{kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Ks.runKernel("ResizeNearestNeighborGrad",r,n)}}},{kernelName:"Reverse",gradFunc:(e,t,n)=>{const{dims:s}=n,r=b(s,e.shape);return{x:()=>Mu(e,r)}}},{kernelName:"Round",gradFunc:e=>({x:()=>Po(e)})},{kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>wl(Ii(e,Ci(pu(n,1.5),2)))}}},{kernelName:"Select",inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>qr(Po(n),"float32"),t:()=>Ci(e,qr(n,e.dtype)),e:()=>Ci(e,qr(Ll(n),e.dtype))}}},{kernelName:"Selu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=el(n,Uu(0)),s=Uu(1.7580993408473768),r=Uu(cp),a=Ci(e,r),i=Ci(Ci(e,s),jo(qr(n,"float32")));return Bo(t,a,i)}}}},{kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(e,Ci(n,Il(Uu(1),n)))}}},{kernelName:"Sign",gradFunc:e=>({x:()=>Po(e)})},{kernelName:bn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(So(qr(n,"float32")),e)}}},{kernelName:"Sinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(To(qr(n,"float32")),e)}}},{kernelName:"Slice",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=Va(s,r,a),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>au(e,u)}}},{kernelName:"Softmax",outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=Ci(e,s);return{logits:()=>Il(a,Ci(Cl(a,[r],true),s))}}},{kernelName:"Softplus",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(e,no(n))}}},Gd,Gd,Hd,Hd,{kernelName:"Sqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ii(e,Ci(ic(qr(n,"float32")),2))}}},{kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Uu(2);return{a:()=>Ci(e,Ci(r,Il(n,s))),b:()=>Ci(e,Ci(r,Il(s,n)))}}},{kernelName:"Square",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(e,Ci(qr(n,"float32"),2))}}},{kernelName:"Step",gradFunc:e=>({x:()=>Po(e)})},{kernelName:_n,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Lo(n.shape,s.shape);return{a:()=>{let t=e;const s=Mo(n.shape,r);return s.length>0&&(t=Cl(t,s)),Zi(t,n.shape)},b:()=>{let t=e;const n=Mo(s.shape,r);return n.length>0&&(t=Cl(t,n)),Zi(wl(t),s.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;b(a,s.shape).forEach((e=>{r[e]=1}));const i=Zi(e,r),o=Ci(i,jl(s.shape,"float32"));return{x:()=>o}}},{kernelName:On,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ii(e,Zl(So(n)))}}},{kernelName:"Tanh",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ci(Il(Uu(1),Zl(n)),e)}}},{kernelName:"Tile",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=Po(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=vi(t,so(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=vi(t,so(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=vi(t,so(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=vi(t,so(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:"Transpose",gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=Dl(r);return{x:()=>da(e,a)}}},{kernelName:"Unpack",gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>uc(e,r)}}},{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Ul(t,Po(t)),s=Qo(e,n);let r=tl(t,Uu(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=qo(r,e+1);r=Ml(r,jl(s.shape,"bool"));const i=Po(s);return Bo(r,s,i)}(e,n)}}},{kernelName:"ZerosLike",gradFunc:e=>({x:()=>Po(e)})}];for(const e of jd)ss(e);let qd;function Kd(){return null==qd&&(qd=wi().epsilon()),qd}Ts().prototype.abs=function(){return this.throwIfDisposed(),$i(this)},Ts().prototype.acos=function(){return this.throwIfDisposed(),Si(this)},Ts().prototype.acosh=function(){return this.throwIfDisposed(),Ti(this)},Ts().prototype.add=function(e){return this.throwIfDisposed(),vi(this,e)},Ts().prototype.all=function(e,t){return this.throwIfDisposed(),Ai(this,e,t)},Ts().prototype.any=function(e,t){return this.throwIfDisposed(),Ri(this,e,t)},Ts().prototype.argMax=function(e){return this.throwIfDisposed(),Fi(this,e)},Ts().prototype.argMin=function(e){return this.throwIfDisposed(),Di(this,e)},Ts().prototype.asScalar=function(){return this.throwIfDisposed(),o(1===this.size,(()=>"The array must have only 1 element.")),Zi(this,[])},Ts().prototype.asType=function(e){return this.throwIfDisposed(),qr(this,e)},Ts().prototype.as1D=function(){return this.throwIfDisposed(),Zi(this,[this.size])},Ts().prototype.as2D=function(e,t){return this.throwIfDisposed(),Zi(this,[e,t])},Ts().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Zi(this,[e,t,n])},Ts().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),Zi(this,[e,t,n,s])},Ts().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),Zi(this,[e,t,n,s,r])},Ts().prototype.asin=function(){return this.throwIfDisposed(),_i(this)},Ts().prototype.asinh=function(){return this.throwIfDisposed(),Oi(this)},Ts().prototype.atan=function(){return this.throwIfDisposed(),Mi(this)},Ts().prototype.atan2=function(e){return this.throwIfDisposed(),Li(this,e)},Ts().prototype.atanh=function(){return this.throwIfDisposed(),zi(this)},Ts().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),Qi(this,e,t,n,s)},Ts().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),io(this,e,t)},Ts().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),oo(this,e,t,n,s,r)},Ts().prototype.broadcastTo=function(e){return this.throwIfDisposed(),po(this,e)},Ts().prototype.cast=function(e){return this.throwIfDisposed(),qr(this,e)},Ts().prototype.ceil=function(){return this.throwIfDisposed(),fo(this)},Ts().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),mo(this,e,t)},Ts().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof Ss&&(e=[e]),to([this,...e],t)},Ts().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),ko(this,e,t,n,s,r,a)},Ts().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),No(this,e,t,n,s,r)},Ts().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),wo(this,e,t,n,s,r,a)},Ts().prototype.cos=function(){return this.throwIfDisposed(),So(this)},Ts().prototype.cosh=function(){return this.throwIfDisposed(),To(this)},Ts().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Eo(this,e,t,n)},Ts().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Ro(this,e,t)},Ts().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Fo(this,e,t,n,s,r,a)},Ts().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),_o(this,e,t,n,s,r)},Ts().prototype.divNoNan=function(e){return this.throwIfDisposed(),Wo(this,e)},Ts().prototype.div=function(e){return this.throwIfDisposed(),Ii(this,e)},Ts().prototype.dot=function(e){return this.throwIfDisposed(),Vo(this,e)},Ts().prototype.elu=function(){return this.throwIfDisposed(),Go(this)},Ts().prototype.equal=function(e){return this.throwIfDisposed(),zo(this,e)},Ts().prototype.erf=function(){return this.throwIfDisposed(),Ho(this)},Ts().prototype.exp=function(){return this.throwIfDisposed(),jo(this)},Ts().prototype.expandDims=function(e){return this.throwIfDisposed(),qo(this,e)},Ts().prototype.expm1=function(){return this.throwIfDisposed(),Ko(this)},Ts().prototype.fft=function(){return this.throwIfDisposed(),tc(this)},Ts().prototype.flatten=function(){return this.throwIfDisposed(),Zi(this,[this.size])},Ts().prototype.floor=function(){return this.throwIfDisposed(),Zo(this)},Ts().prototype.floorDiv=function(e){return this.throwIfDisposed(),Ni(this,e)},Ts().prototype.gather=function(e,t){return this.throwIfDisposed(),Qo(this,e,t)},Ts().prototype.greaterEqual=function(e){return this.throwIfDisposed(),tl(this,e)},Ts().prototype.greater=function(e){return this.throwIfDisposed(),el(this,e)},Ts().prototype.ifft=function(){return this.throwIfDisposed(),nc(this)},Ts().prototype.irfft=function(){return this.throwIfDisposed(),sc(this)},Ts().prototype.isFinite=function(){return this.throwIfDisposed(),sl(this)},Ts().prototype.isInf=function(){return this.throwIfDisposed(),rl(this)},Ts().prototype.isNaN=function(){return this.throwIfDisposed(),al(this)},Ts().prototype.leakyRelu=function(e){return this.throwIfDisposed(),il(this,e)},Ts().prototype.lessEqual=function(e){return this.throwIfDisposed(),ll(this,e)},Ts().prototype.less=function(e){return this.throwIfDisposed(),ol(this,e)},Ts().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),cl(this,e,t,n,s)},Ts().prototype.logSigmoid=function(){return this.throwIfDisposed(),vl(this)},Ts().prototype.logSoftmax=function(e){return this.throwIfDisposed(),$l(this,e)},Ts().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Ol(this,e,t)},Ts().prototype.log=function(){return this.throwIfDisposed(),hl(this)},Ts().prototype.log1p=function(){return this.throwIfDisposed(),pl(this)},Ts().prototype.logicalAnd=function(e){return this.throwIfDisposed(),Ml(this,e)},Ts().prototype.logicalNot=function(){return this.throwIfDisposed(),Ll(this)},Ts().prototype.logicalOr=function(e){return this.throwIfDisposed(),zl(this,e)},Ts().prototype.logicalXor=function(e){return this.throwIfDisposed(),Bl(this,e)},Ts().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),ha(this,e,t,n)},Ts().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),Pl(this,e,t,n,s)},Ts().prototype.max=function(e,t){return this.throwIfDisposed(),Nl(this,e,t)},Ts().prototype.maximum=function(e){return this.throwIfDisposed(),Ul(this,e)},Ts().prototype.mean=function(e,t){return this.throwIfDisposed(),Gl(this,e,t)},Ts().prototype.min=function(e,t){return this.throwIfDisposed(),Kl(this,e,t)},Ts().prototype.minimum=function(e){return this.throwIfDisposed(),Xl(this,e)},Ts().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Yl(this,e,t)},Ts().prototype.mod=function(e){return this.throwIfDisposed(),Jl(this,e)},Ts().prototype.mul=function(e){return this.throwIfDisposed(),Ci(this,e)},Ts().prototype.neg=function(){return this.throwIfDisposed(),wl(this)},Ts().prototype.norm=function(e,t,n){return this.throwIfDisposed(),Tc(this,e,t,n)},Ts().prototype.notEqual=function(e){return this.throwIfDisposed(),nu(this,e)},Ts().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),pa(this,e,t,n)},Ts().prototype.onesLike=function(){return this.throwIfDisposed(),su(this)},Ts().prototype.pad=function(e,t){return this.throwIfDisposed(),au(this,e,t)},Ts().prototype.pool=function(e,t,n,s,r){return this.throwIfDisposed(),hu(this,e,t,n,s,r)},Ts().prototype.pow=function(e){return this.throwIfDisposed(),pu(this,e)},Ts().prototype.prelu=function(e){return this.throwIfDisposed(),du(this,e)},Ts().prototype.prod=function(e,t){return this.throwIfDisposed(),fu(this,e,t)},Ts().prototype.reciprocal=function(){return this.throwIfDisposed(),Du(this)},Ts().prototype.relu=function(){return this.throwIfDisposed(),_u(this)},Ts().prototype.relu6=function(){return this.throwIfDisposed(),Ou(this)},Ts().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Zi(this,e.shape)},Ts().prototype.reshape=function(e){return this.throwIfDisposed(),Zi(this,e)},Ts().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),yh(this,e,t,n)},Ts().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),bh(this,e,t,n)},Ts().prototype.reverse=function(e){return this.throwIfDisposed(),Mu(this,e)},Ts().prototype.rfft=function(){return this.throwIfDisposed(),ac(this)},Ts().prototype.round=function(){return this.throwIfDisposed(),Wu(this)},Ts().prototype.rsqrt=function(){return this.throwIfDisposed(),Vu(this)},Ts().prototype.selu=function(){return this.throwIfDisposed(),Gu(this)},Ts().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Hu(this,e,t,n,s,r,a)},Ts().prototype.sigmoid=function(){return this.throwIfDisposed(),no(this)},Ts().prototype.sign=function(){return this.throwIfDisposed(),qu(this)},Ts().prototype.sin=function(){return this.throwIfDisposed(),Ku(this)},Ts().prototype.sinh=function(){return this.throwIfDisposed(),Xu(this)},Ts().prototype.slice=function(e,t){return this.throwIfDisposed(),so(this,e,t)},Ts().prototype.softmax=function(e){return this.throwIfDisposed(),ec(this,e)},Ts().prototype.softplus=function(){return this.throwIfDisposed(),kl(this)},Ts().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),cu(this,e,t)},Ts().prototype.split=function(e,t){return this.throwIfDisposed(),rc(this,e,t)},Ts().prototype.sqrt=function(){return this.throwIfDisposed(),ic(this)},Ts().prototype.square=function(){return this.throwIfDisposed(),Zl(this)},Ts().prototype.squaredDifference=function(e){return this.throwIfDisposed(),oc(this,e)},Ts().prototype.squeeze=function(e){return this.throwIfDisposed(),lc(this,e)},Ts().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof Ss?[this,e]:[this,...e];return uc(n,t)},Ts().prototype.step=function(e){return this.throwIfDisposed(),cc(this,e)},Ts().prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),hc(this,e,t,n,s,r,a,i,o)},Ts().prototype.sub=function(e){return this.throwIfDisposed(),Il(this,e)},Ts().prototype.sum=function(e,t){return this.throwIfDisposed(),Cl(this,e,t)},Ts().prototype.tan=function(){return this.throwIfDisposed(),pc(this)},Ts().prototype.tanh=function(){return this.throwIfDisposed(),ro(this)},Ts().prototype.tile=function(e){return this.throwIfDisposed(),Xo(this,e)},Ts().prototype.toBool=function(){return this.throwIfDisposed(),qr(this,"bool")},Ts().prototype.toFloat=function(){return this.throwIfDisposed(),qr(this,"float32")},Ts().prototype.toInt=function(){return this.throwIfDisposed(),qr(this,"int32")},Ts().prototype.topk=function(e,t){return this.throwIfDisposed(),bc(this,e,t)},Ts().prototype.transpose=function(e){return this.throwIfDisposed(),da(this,e)},Ts().prototype.unique=function(e){return this.throwIfDisposed(),wc(this,e)},Ts().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),kc(this,e,t)},Ts().prototype.unstack=function(e){return this.throwIfDisposed(),vc(this,e)},Ts().prototype.where=function(e,t){return this.throwIfDisposed(),Bo(e,this,t)},Ts().prototype.zerosLike=function(){return this.throwIfDisposed(),Po(this)};class Xd extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Xd.prototype)}}class Yd extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Yd.prototype)}}class Jd extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Jd.prototype)}}class Zd extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Zd.prototype)}}class Qd extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Qd.prototype)}}Error;function ef(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function tf(e,t){if(!e)throw new Qd(t)}function nf(e,t){let n=0;for(const s of e)s===t&&n++;return n}function sf(e){return 1===e.length?e[0]:e}function rf(e){return Array.isArray(e)?e:[e]}function af(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function of(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let lf={};function uf(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function cf(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>cf(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?cf(t):e[n]=t.value)}}}function hf(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in lf)a=lf[r];else if(a=t[r],null==a)throw new Jd(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new Jd(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in lf?[o,l]=lf.className:i in t&&([o,l]=t[i]),null==o)throw new Jd(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(lf))e[t]=lf[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},lf);for(const e of Object.keys(n))lf[e]=n[e];cf(a.config);const s=l(o,a.config,n,r);return lf=Object.assign({},t),s}{const e=Object.assign({},lf);for(const e of Object.keys(n))lf[e]=n[e];const t=new o(a.config);return lf=Object.assign({},e),t}}}function pf(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function df(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function ff(e){if(null==e)throw new Jd(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function mf(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Jd(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function gf(e,t,n=0,s=1/0){return tf(n>=0),tf(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function yf(e,t){Array.isArray(e)?(o(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>yf(e,`element ${n+1} of ${t}`)))):o(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${bf(e)}.`))}function bf(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>bf(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function xf(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function wf(e,t){return ui((()=>ic(Cl(Ci(e,e),t,!0))))}class kf extends Ha{getConfig(){return{}}}class vf extends kf{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ui((()=>{const t=wf(e,this.axis),n=mo(t,0,this.maxValue);return Ci(e,Ii(n,vi(Kd(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}vf.className="MaxNorm",qa(vf);class Nf extends kf{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ui((()=>Ii(e,vi(Kd(),wf(e,this.axis)))))}getConfig(){return{axis:this.axis}}}Nf.className="UnitNorm",qa(Nf);class If extends kf{apply(e){return _u(e)}}If.className="NonNeg",qa(If);class Cf extends kf{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return ui((()=>{const t=wf(e,this.axis),n=vi(Ci(this.rate,mo(t,this.minValue,this.maxValue)),Ci(1-this.rate,t));return Ci(e,Ii(n,vi(Kd(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Cf.className="MinMaxNorm",qa(Cf);const $f={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Sf(e){return uf(e)}function Tf(e,t={}){return hf(e,ja.getMap().classNameMap,t,"constraint")}function Ef(e){if(null==e)return null;if("string"==typeof e){return Tf({className:e in $f?$f[e]:e,config:{}})}return e instanceof kf?e:Tf(e)}var Af=Object.freeze({__proto__:null,maxNorm:function(e){return new vf(e)},unitNorm:function(e){return new Nf(e)},nonNeg:function(){return new If},minMaxNorm:function(e){return new Cf(e)}});const Rf=["channelsFirst","channelsLast"],Ff=["nearest","bilinear"],Df=["valid","same","causal"],_f=["max","avg"],Of=["sum","mul","concat","ave"],Mf=new Map;function Lf(e){mf(Rf,"DataFormat",e)}function zf(e){mf(Df,"PaddingMode",e)}function Bf(e){mf(_f,"PoolMode",e)}const Pf=[];function Wf(e,t){Pf.push(e);try{const e=t();return Pf.pop(),e}catch(e){throw Pf.pop(),e}}function Vf(e){if(!Hf(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===Pf.length?"":Pf.join("/")+"/")+e}function Uf(e){if(!Hf(e))throw new Error("Not a valid tensor name: '"+e+"'");Mf.has(e)||Mf.set(e,0);const t=Mf.get(e);if(Mf.set(e,Mf.get(e)+1),t>0){const n=`${e}_${t}`;return Mf.set(n,1),n}return e}const Gf=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Hf(e){return!!e.match(Gf)}function jf(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function qf(e){return dc(e=Array.isArray(e)?new Float32Array(e):e)}function Kf(e){return Kl(qf(e)).dataSync()[0]}function Xf(e){return Nl(qf(e)).dataSync()[0]}function Yf(e,t){if(t<e)throw new Jd(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Jf(e,t){return e.asType(t)}function Zf(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),e.reshape(n)}function Qf(e,t,n){return ui((()=>{switch(e.rank){case 1:return Yu(e,t,n);case 2:return Ju(e,[t,0],[n,e.shape[1]]);case 3:return Zu(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Qu(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return so(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return so(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Jd(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function em(e,t,n){return ui((()=>{switch(e.rank){case 1:return Yu(e,t,n);case 2:return Ju(e,[0,t],[e.shape[0],n]);case 3:return Zu(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Qu(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Jd(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function tm(e,t,n,s){return ui((()=>{switch(e.rank){case 1:return Yu(e,t,n);case 2:switch(s){case 1:return Qf(e,t,n);case 2:return em(e,t,n);default:throw new Jd(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Qf(e,t,n);case 2:return Zu(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return em(e,t,n);default:throw new Jd(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Qf(e,t,n);case 2:return Qu(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Qu(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return em(e,t,n);default:throw new Jd(`The axis is not within the rank of the tensor ${s}`)}default:throw new Jd(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function nm(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),to(e,t)}function sm(e,t){switch(e.rank){case 1:return go([e,t]);case 2:return yo([e,t],0);case 3:return bo([e,t],0);case 4:return xo([e,t],0);default:throw new Jd(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function rm(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Jd(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return Xo(e,t)}function am(e,t=0,n=1,s,r){return Eu(e,t,n,s,r)}function im(e,t,n,s){if(e.rank<2||t.rank<2)throw new Zd(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Zd(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){return jc({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?um(e.rank,s,"channelsLast"):null,activation:n})}{const r=e.shape.slice(),a=r.pop();e=e.reshape([-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=t.transpose(c).reshape([l,-1]);const h=[...r,...u];return jc({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?um(e.rank,s,"channelsLast"):null,activation:n}).reshape(h)}}function om(e,t,n){return ui((()=>(t=Array.isArray(t)?dc(t,"int32"):t.toInt(),Qo(e,t,n))))}function lm(e){return Ci(e,e)}function um(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new Jd(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1,1]):t.reshape([1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,1,s[0]]):t.reshape([1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1]):t.reshape([1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,s[0]]):t.reshape([1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1]):t.reshape([1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,s[0]]):t.reshape([1].concat(s))}else if(e<3)return t;throw new Jd(`Unsupported input rank by biasAdd: ${t.rank}`)}function cm(e,t,n){return ui((()=>(null==n&&(n="channelsLast"),Lf(n),e.add(um(e.rank,t,n)))))}function hm(e,t,n,s){return ui((()=>Dc(e,t,n,s)))}function pm(e,t,n=!1){return n?e():t()}const dm=["fanIn","fanOut","fanAvg"],fm=["normal","uniform","truncatedNormal"];class mm extends Ha{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class gm extends mm{apply(e,t){return Hl(e,t)}}gm.className="Zeros",qa(gm);class ym extends mm{apply(e,t){return jl(e,t)}}ym.className="Ones",qa(ym);class bm extends mm{constructor(e){if(super(),"object"!=typeof e)throw new Jd(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Jd(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return ui((()=>Ci(Uu(this.value),jl(e,t))))}getConfig(){return{value:this.value}}}bm.className="Constant",qa(bm);class xm extends mm{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return Au(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}xm.className="RandomUniform",qa(xm);class wm extends mm{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Zd(`randomNormal does not support dType ${t}.`);return am(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}wm.className="RandomNormal",qa(wm);class km extends mm{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Zd(`truncatedNormal does not support dType ${t}.`);return xc(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}km.className="TruncatedNormal",qa(km);class vm extends mm{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return ui((()=>{if(2!==e.length||e[0]!==e[1])throw new Jd("Identity matrix initializer can only be used for 2D square matrices.");return Ci(this.gain,Yo(e[0]))}))}getConfig(){return{gain:this.gain}}}vm.className="Identity",qa(vm);class Nm extends mm{constructor(e){if(super(),e.scale<0)throw new Jd(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,mf(dm,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){mf(fm,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(Lf(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=jf(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=jf(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=jf(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Zd(`${this.getClassName()} does not support dType ${t}.`);return xc(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return Au(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Nm.className="VarianceScaling",qa(Nm);class Im extends Nm{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Nm.className}}Im.className="GlorotUniform",qa(Im);class Cm extends Nm{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Nm.className}}Cm.className="GlorotNormal",qa(Cm);class $m extends Nm{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Nm.className}}$m.className="HeNormal",qa($m);class Sm extends Nm{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Nm.className}}Sm.className="HeUniform",qa(Sm);class Tm extends Nm{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Nm.className}}Tm.className="LeCunNormal",qa(Tm);class Em extends Nm{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Nm.className}}Em.className="LeCunNormal",qa(Em);class Am extends mm{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Zd("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return ui((()=>{if(e.length<2)throw new Zd("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=am(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=Ph.gramSchmidt(t);return e[0]>e[1]&&(n=n.transpose()),Ci(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}Am.className="Orthogonal",qa(Am);const Rm={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Fm(e,t={}){return hf(e,ja.getMap().classNameMap,t,"initializer")}function Dm(e){return uf(e)}function _m(e){if("string"==typeof e){const t=e in Rm?Rm[e]:e;if("GlorotNormal"===t)return new Cm;if("GlorotUniform"===t)return new Im;if("HeNormal"===t)return new $m;if("HeUniform"===t)return new Sm;if("LeCunNormal"===t)return new Tm;if("LeCunUniform"===t)return new Em;{const e={};return e.className=t,e.config={},Fm(e)}}return e instanceof mm?e:Fm(e)}var Om=Object.freeze({__proto__:null,zeros:function(){return new gm},ones:function(){return new ym},constant:function(e){return new bm(e)},randomUniform:function(e){return new xm(e)},randomNormal:function(e){return new wm(e)},truncatedNormal:function(e){return new km(e)},identity:function(e){return new vm(e)},varianceScaling:function(e){return new Nm(e)},glorotUniform:function(e){return new Im(e)},glorotNormal:function(e){return new Cm(e)},heNormal:function(e){return new $m(e)},heUniform:function(e){return new Sm(e)},leCunNormal:function(e){return new Tm(e)},leCunUniform:function(e){return new Em(e)},orthogonal:function(e){return new Am(e)}});let Mm=0;function Lm(){return Mm++}const zm={};function Bm(e=""){return e in zm||(zm[e]=0),zm[e]+=1,e+zm[e].toString()}function Pm(e){return Array.isArray(e)&&Array.isArray(e[0])}function Wm(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Vm(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Jd(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function Um(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new Jd(`Expected exactly 1 Shape; got ${e.length}`)}return e}function Gm(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}class Hm{constructor(e,t="float32",n="Variable",s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Lm(),n=null==n?"Variable":n,this.originalName=Vf(n),this.name=Uf(this.originalName),this.trainable_=s,this.constraint=r,this.val=Nc(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function jm(e){return e.map((e=>e.read()))}function qm(e){e.forEach((e=>{e[0].write(e[1])}))}class Km{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class Xm{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=Lm(),null!=a&&(this.originalName=Vf(a),this.name=Uf(this.originalName)),this.rank=t.length}}let Ym=0;class Jm{constructor(e,t){this.callArgs=t,this.id=Ym++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Zm=0;class Qm extends Ha{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Zm++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=af(e)+"_"+Bm(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Yd(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Jd(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return sf(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return sf(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Xd(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Xd(`Layer ${this.name} is not connected, no input to return.`);return sf(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Xd(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Xd(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return sf(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=rf(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=rf(this.inputSpec);if(e.length!==t.length)throw new Jd(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],r=t[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new Jd(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new Jd(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new Jd(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new Jd(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const e=s.shape;for(const t in r.axes){const s=Number(t),a=r.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new Jd(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new Jd(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=rf(e);let s=!0;for(const e of n)if(!(e instanceof Xm)){s=!1;break}let r=!0;for(const e of n)if(e instanceof Xm){r=!1;break}if(s===r)throw new Jd("Arguments to apply() must be all SymbolicTensors or all Tensors");return Wf(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of rf(e))t.push(n.shape);this.build(sf(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);const r=rf(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=sf(a),null!=this.activityRegularizer)throw new Zd("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=rf(e);const t=[];for(const n of e)t.push(n.shape);return sf(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new Xm(a,n,this,rf(e),t,this.name,s))):new Xm(a,s,this,rf(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new Zd("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Xd(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Xd(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Yd(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Gm(this.weights)}build(e){this.built=!0}getWeights(e=!1){return jm(e?this.trainableWeights:this.weights)}setWeights(e){ui((()=>{const t=this.weights;if(t.length!==e.length)throw new Jd(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=jm(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!p(a.shape,o.shape))throw new Jd(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}qm(n)}))}addWeight(e,t,n,s,r,a,i){if(-1!==this._addedWeightNames.indexOf(e))throw new Jd(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=_m("zeros"));const o=s.apply(t,n),l=new Hm(o,n,e,a,i);return o.dispose(),null!=r&&this.addLoss((()=>r.apply(l.read()))),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=rf(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,r,a,i=null){const o=rf(e);t=rf(t),n=rf(n),s=rf(s),r=Wm(r),a=Wm(a);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new Jm({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function eg(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=eg(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class tg extends Qm{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:Bm("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Jd("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Jd("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Jd("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new Xm(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new Jm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Jd(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function ng(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Jd("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new tg({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}async function sg(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];ci(s)}}function rg(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var ag;tg.className="InputLayer",qa(tg),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(ag||(ag={}));class ig{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class og{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class lg extends ig{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const r=ui((()=>vi(this.totals[e],Ci(s,n))));this.totals[e]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:ui((()=>{const n=Ci(Ii(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),hi(t[e])})))}}class ug extends ig{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];e.push(i.data()),t.push(s),n.push(a)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}}class cg extends ig{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");A(this.yieldEvery)&&(this.maybeWait=function(e,t){let n,s=cs();return(...r)=>{const a=cs();return a-s<t||(s=a,n=e(...r)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await sg(n),s.push(this.yield(e,t,n))),s.push(ep()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await sg(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await sg(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(ep()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await sg(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await sg(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(ep()):A(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await sg(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await sg(e),await this.trainEnd(e))}}function hg(e,t){if(null==e&&(e={}),e instanceof ig)return[e];if(Array.isArray(e)&&e[0]instanceof ig)return e;return rf(e).map((e=>new cg(e,t)))}class pg{constructor(){}static registerCallbackConstructor(e,t){o(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),pg.checkForDuplicate(t),null==pg.constructors[e]&&(pg.constructors[e]=[]),pg.constructors[e].push(t)}static checkForDuplicate(e){for(const t in pg.constructors){pg.constructors[+t].forEach((t=>{if(t===e)throw new Jd("Duplicate callback constructor.")}))}}static clear(){pg.constructors={}}static createCallbacks(e){const t=[];for(const n in pg.constructors){const s=+n;e>=s&&t.push(...pg.constructors[s])}return t.map((e=>new e))}}function dg(e,t,n,s,r,a,i,o,l){const u=new ug,c=[new lg,...pg.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new og(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function fg(e,t={},n=!1){return hf(e,ja.getMap().classNameMap,t,"layer",n)}function mg(e,t){return ui((()=>{"float32"!==e.dtype&&(e=e.asType("float32"));const n=Cl(lm(e),t,!0),s=Jo(n.shape,Kd()),r=ic(Ul(n,s));return Ii(e,r)}))}function gg(e,t){return ui((()=>Gl(lm(Il(t,e)),-1)))}function yg(e,t){return ui((()=>Gl($i(Il(t,e)),-1)))}function bg(e,t){return ui((()=>{const n=Il(e,t),s=mo($i(e),Kd(),Number.MAX_VALUE),r=$i(Ii(n,s));return Ci(100,Gl(r,-1))}))}function xg(e,t){return ui((()=>{const n=mo(t,Kd(),Number.MAX_VALUE),s=hl(vi(1,n)),r=mo(e,Kd(),Number.MAX_VALUE),a=hl(vi(1,r));return Gl(lm(Il(s,a)),-1)}))}function wg(e,t,n=!1){return ui((()=>{if(n)t=ec(t);else{const e=Cl(t,t.shape.length-1,!0);t=Ii(t,e)}return t=mo(t,Kd(),1-Kd()),wl(Cl(Ci(e.toFloat(),hl(t)),t.shape.length-1))}))}function kg(e,t,n=!1){return ui((()=>{const s=Zo(function(e){const t=[jf(e.shape)];return e.reshape(t)}(e)).toInt(),r=(t=mo(t,Kd(),1-Kd())).shape;return wg(pa(s,r[r.length-1]).reshape(r),t,n)}))}function vg(e,t){return ui((()=>{let n;return n=mo(t,Kd(),1-Kd()),n=hl(Ii(n,Il(1,n))),Gl(function(e,t){if(!p(e.shape,t.shape))throw new Jd(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return ui((()=>{const n=t.relu(),s=t.abs().neg();return n.sub(t.mul(e)).add(s.exp().log1p())}))}(e,n),-1)}))}function Ng(e,t){return ui((()=>{const n=mo(e,Kd(),1),s=mo(t,Kd(),1);return Cl(Ci(e,hl(Ii(n,s))),-1)}))}function Ig(e,t){return ui((()=>{const n=mg(e,-1),s=mg(t,-1),r=Ci(n,s);return wl(Cl(r,-1))}))}pg.constructors={};const Cg={meanSquaredError:gg,meanAbsoluteError:yg,meanAbsolutePercentageError:bg,meanSquaredLogarithmicError:xg,squaredHinge:function(e,t){return ui((()=>{const n=Ul(0,Il(1,Ci(e,t)));return Gl(lm(n),-1)}))},hinge:function(e,t){return ui((()=>{const n=Ul(0,Il(1,Ci(e,t)));return Gl(n,-1)}))},categoricalHinge:function(e,t){return ui((()=>{const n=Cl(Ci(e,t),-1),s=Nl(Ci(Il(1,e),t),-1);return Ul(0,vi(1,Il(s,n)))}))},logcosh:function(e,t){return ui((()=>{const n=Math.log(2),s=Il(t,e),r=Il(vi(s,kl(Ci(-2,s))),n);return Gl(r,-1)}))},categoricalCrossentropy:wg,sparseCategoricalCrossentropy:kg,binaryCrossentropy:vg,kullbackLeiblerDivergence:Ng,poisson:function(e,t){return ui((()=>{const n=hl(vi(Kd(),t));return Gl(Il(t,Ci(e,n)),-1)}))},cosineProximity:Ig};function $g(e){if("string"==typeof e){if(e in Cg)return Cg[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Jd(t)}return e}function Sg(e,t){return ui((()=>{const n=Ci(.5,su(t)),s=Jf(el(t,n),e.dtype);return Gl(zo(e,s),-1)}))}function Tg(e,t){return ui((()=>Jf(zo(Fi(e,-1),Fi(t,-1)),"float32")))}function Eg(e,t){return ui((()=>Ml(e.equal(1),t.equal(1)).sum().cast("float32")))}function Ag(e,t){return ui((()=>{const n=Eg(e,t),s=function(e,t){return ui((()=>Ml(e.equal(0),t.equal(1)).sum().cast("float32")))}(e,t),r=n.add(s);return Bo(el(r,0),n.div(r),0).cast("float32")}))}function Rg(e,t){return ui((()=>{const n=Eg(e,t),s=function(e,t){return ui((()=>Ml(e.equal(1),t.equal(0)).sum().cast("float32")))}(e,t),r=n.add(s);return Bo(el(r,0),n.div(r),0).cast("float32")}))}function Fg(e,t){return vg(e,t)}function Dg(e,t){return e.rank===t.rank&&(e=e.squeeze([e.rank-1])),(t=t.argMax(-1)).dtype!==e.dtype&&(t=t.asType(e.dtype)),zo(e,t).asType("float32")}const _g=wg,Og=kg,Mg={binaryAccuracy:Sg,categoricalAccuracy:Tg,precision:Ag,categoricalCrossentropy:_g,sparseCategoricalCrossentropy:Og,mse:gg,MSE:gg,mae:yg,MAE:yg,mape:bg,MAPE:bg,cosine:Ig};function Lg(e){if("string"==typeof e&&e in Mg)return Mg[e];if("string"!=typeof e&&null!=e)return e;throw new Jd(`Unknown metric ${e}`)}function zg(e){if(tf(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(Cg))if(Cg[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(Mg))if(Mg[n]===e){t=n;break}return void 0!==t?t:e.name}}function Bg(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Pg(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Pg(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Pg(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Pg(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function Wg(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(r?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),Vg(a,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)r?Ug(o[e],n,s):Gg(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;t=null!=e.collectedTrainableWeights?Gm(e.collectedTrainableWeights):Gm(e.trainableWeights);return t}(e),u=Gm(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}function Vg(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function Ug(e,t,n){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}Vg([`${e.name} (${e.getClassName()})`,s,e.countParams().toString()],t,n)}function Gg(e,t,n,s){let r;try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const a=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],r=t.tensorIndices[e];a.push(`${n}[${s}][${r}]`)}const i=e.name,o=e.getClassName(),l=0===a.length?"":a[0];Vg([`${i} (${o})`,r,e.countParams().toString(),l],t,s);for(let e=1;e<a.length;++e)Vg(["","","",a[e]],t,s)}function Hg(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function jg(e,t){if(null===e)return null;if("string"==typeof e)return of(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Hg(t,r,s)?n.push(s):n.push(jg(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=of(n);t[e]=jg(s,e)}}return t}}function qg(e,t){if(null==e)return null;if("string"==typeof e)return af(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Hg(t,r,s)?n.push(s):n.push(qg(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n],r=af(n);t[r]="name"!==n&&"className"!==n||"string"!=typeof s?qg(s,n):s}return t}}const Kg="3.6.0";class Xg{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Xg)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Jd(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return qr(t,e.dtype)}catch(n){throw new Jd(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof Xm){if(null==this.id2Value[e.id])throw new Jd(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Jd(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof Xm){if(null==this.id2Value[e.id])throw new Jd(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Jd(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&ci(this.id2Mask)}}const Yg={},Jg={};function Zg(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],l=i.map((e=>e.name)),u=[],c=t.names();for(const e of l)-1!==c.indexOf(e)?u.push(t.getValue(e)):u.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const h=l.join(",")+"|"+t.names().join(",");let p,d;if(null==Yg[h]){const e=function(e,t){o(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const r=ey(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=ey(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:Qg(s)}}(i,t);p=e.sorted,d=e.recipientCounts,Yg[h]=p,Jg[h]=d}p=Yg[h],d={},r||Object.assign(d,Jg[h]);const f=new Xg(t);for(let e=0;e<p.length;++e){if(null!=s){const e=oi().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const a=p[e],i=a.sourceLayer;if(i instanceof tg)continue;const o=[],c=[],h=[];let m=!1;for(const e of a.inputs){const n=f.getValue(e),s=f.getMask(e);o.push(n),c.push(s),null!=s&&(m=!0),r||(d[e.name]--,0!==d[e.name]||t.hasKey(e)||-1!==l.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||h.push(n))}m&&((n=n||{}).mask=c[0]);const g=rf(i.apply(o,n));let y=null;i.supportsMasking&&(y=i.computeMask(o,c));const b=ty(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){f.hasKey(x[e])||f.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=l.indexOf(x[e].name);-1!==t&&(u[t]=g[e])}r||ci(h)}return f.disposeMasks(),a?u:u[0]}function Qg(e){const t={};for(const n in e)t[n]=e[n].size;return t}function ey(e,t){const n=new Set,s=[],r={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function ty(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class ny extends Qm{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=Bm(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],df(this.inputs).length!==this.inputs.length)throw new Jd(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);df(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;tf(0===n,"input layer has >1 nodes"),tf(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof tg))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new Yd(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(ny.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],r=u.inboundLayers[e],a=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,r,a,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];a=Math.max(a,i),s[e.outboundLayer.id]=a,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],i=e.nodeIndices[s],o=r.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(r[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(pf);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof ny&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(pf);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new Yd(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new Yd(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Jm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Jd("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new Jd(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const r=[];for(const s in e){let a=s;if(null==n[s]){const e=s.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])r.push([n[a],e[s]]);else if(t)throw new Jd(`Provided weight data has no target variable: ${s}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Jd(`${e.length} of ${s} weights are not set: ${e}`)}qm(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 3.6.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=qg(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return ui((()=>{e=rf(e);const n=new Xg;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return Zg(this.outputs,n,t)}))}computeMask(e,t){return ui((()=>{let n;return e=rf(e),n=null==t?ef(null,e.length):rf(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=Wm(e);if(t.length!==this.inputLayers.length)throw new Jd(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],r=t[e];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(pf);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const r=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${r.name}_${a}_${i}`];s.push(o)}const r=Wm(t.computeOutputShape(sf(s))),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++){n[`${t.name}_${a}_${e}`]=r[e]}}}const r=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],r=`${t.name}_${n}_${s}`;a.push(r)}for(let e=0;e<a.length;e++){const t=a[e];tf(t in n),r.push(n[t])}return sf(r)}runInternalGraph(e,t){null==t&&(t=ef(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=e[s],i=t[s];n[r.id]=[a,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(pf);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,r=e.outputTensors,a=new Array;for(const e of s)e.id in n&&a.push(n[e.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),o=rf(t.call(e,u)),l=rf(t.computeMask(e,n)),s=[e],i=[n]}else s=a.map((e=>e[0])),i=a.map((e=>e[1])),null==u.mask&&(u.mask=i),o=rf(t.call(s,u)),l=rf(t.computeMask(s,i));if(t.activityRegularizer)throw new Zd("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const e of this.outputs){tf(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),r.push(t),a.push(s)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof ny?1:0;for(let s=0;s<e.inboundNodes.length;s++){const r=ny.nodeKey(e,s);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Jd(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Jd("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new Jd(`No such layer: ${e}`)}calculateLosses(){return ui((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=ny.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),r=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],r=ny.nodeKey(e,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[ny.nodeKey(r,a)];null==l&&(l=0),e.push([r.name,l,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=this.inputLayersNodeIndices[e],a=ny.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],a=ny.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];r.push([n.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(sf(n),s)}function l(e){const n=e.name,a=fg(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new Jd(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!ff(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];tf(t in r);const a=r[t].inboundNodes[n].outputTensors;h.push(a[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];tf(t in r);const a=r[t].inboundNodes[n].outputTensors;p.push(a[s])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new Jd("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){ui((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function sy(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function ry(e,t){return sy(e,t,"classWeight")}async function ay(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=ui((()=>{if(1===e.shape.length)return e.clone();if(2===e.shape.length){if(e.shape[1]>1){const t=1;return e.argMax(t)}if(1===e.shape[1])return e.reshape([e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());ci(t);const r=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])})),dc(r,"float32")}return null}function iy(e,t){return Ci(e,t)}function oy(e,t){let n,s;const r=t;n=r.xs,s=r.ys,o(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=ly("input",e.inputNames,n),i=ly("output",e.outputNames,s),l=a[0].shape[0];o(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),o(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)o(a[t].shape[0]===l,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${l} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)o(i[t].shape[0]===l,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${l} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function ly(e,t,n){if(n instanceof Ss)return[n];if(Array.isArray(n))return o(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const r of t){if(null==n[r])throw new Jd(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}async function uy(e,t,n){const s=null!=n.batchesPerEpoch;if(o(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),o(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),o(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),o(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),o(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if(cy(n.validationData))o(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new Zd("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const l=e.makeTrainFunction(),u=e.getDedupedMetricsNames();let c;c=r?u.slice().concat(u.map((e=>"val_"+e))):u.slice();const h=hg(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:d,history:f}=dg(h,p,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,r,c);d.setModel(e),e.history=f,await d.onTrainBegin(),e.stopTraining_=!1;let m=null==n.initialEpoch?0:n.initialEpoch,g=await t.iterator();for(;m<n.epochs;){const o={};await d.onEpochBegin(m);let c=0,h=0;for(s||(g=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await g.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=oy(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await d.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=ry(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await ay(r[e],null,t[e]))}const o=s.concat(r).concat(i),p=l(o);ci(o);for(let e=0;e<u.length;++e){const t=u[e],n=p[e];a[t]=n,hi(n)}await d.onBatchEnd(h,a),rg(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=cy(n.validationData)?rf(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):rf(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)o[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await d.onEpochEnd(m,o),m++,e.stopTraining_)break}return await d.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function cy(e){return"function"==typeof e.iterator}function hy(e){o(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function py(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>Qf(e,t,n-t))):Qf(e,t,n-t)}function dy(e,t){return ui((()=>null==e?null:Array.isArray(e)?e.map((e=>dy(e,t))):om(e,"int32"===t.dtype?t:t.toInt())))}function fy(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}async function my(e,t,n,r={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,i,o,l,u,c,h;e.isTraining=!0;try{const p=null==r.batchSize?32:r.batchSize;hy(p);const d=!1,f=await e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,d,p);a=f[0],i=f[1],h=f[2];let m,g=!1;if(null!=r.validationData&&r.validationData.length>0){if(g=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Zd("validationData including sample weights is not supported yet."):new Jd(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);o=r.validationData[0],l=r.validationData[1];const t=!0,n=await e.standardizeUserData(o,l,null,null,t,p);u=n[0],c=n[1],m=u.concat(c)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){g=!0;const e=Math.floor(a[0].shape[0]*(1-r.validationSplit)),t=a[0].shape[0];u=py(a,e,t),a=py(a,0,e),c=py(i,e,t),i=py(i,0,e),m=u.concat(c)}else null!=r.validationSteps&&(g=!0);const y=a.concat(i).concat(h);e.checkTrainableWeightsConsistency();const b=e.makeTrainFunction(),x=e.getDedupedMetricsNames();let w,k;g?(e.makeTestFunction(),w=e.testFunction,k=x.slice().concat(x.map((e=>"val_"+e)))):(w=null,m=[],k=x.slice());const v=hg(r.callbacks,r.yieldEvery);return await async function(e,t,n,r,a,i,o,l,u,c,h,p,d,f,m){null==a&&(a=32),null==i&&(i=1),null==h&&(h=!0),null==d&&(d=0);let g=!1;if(null!=u&&null!=c&&(g=!0),null!=m&&(g=!0,null==f))throw new Jd("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const y=e.checkNumSamples(n,a,f,"steps_per_epoch");let b;null!=y&&(b=Yf(0,y)),null==o&&(o=1);const{callbackList:x,history:w}=dg(l,o,i,d,y,f,a,g,p);x.setModel(e),e.history=w,await x.onTrainBegin(),e.stopTraining_=!1;for(let o=d;o<i;++o){await x.onEpochBegin(o);const i={};if(null!=f)throw new Zd("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new Zd("batch shuffling is not implemneted yet");h&&s(b);const o=dc(b),l=fy(y,a);for(let s=0;s<l.length;++s){const h={};if(await x.onBatchBegin(s,h),ui((()=>{const p=l[s][0],d=l[s][1],f=Qf(o,p,d-p);h.batch=s,h.size=d-p;const m=dy(n,f),y=t(m);for(let e=0;e<r.length;++e){const t=r[e],n=y[e];h[t]=n,hi(n)}if(s===l.length-1&&g){const t=e.testLoop(u,c,a);for(let e=0;e<r.length;++e){const n=r[e],s=t[e];hi(s),i["val_"+n]=s}}})),await x.onBatchEnd(s,h),rg(h),e.stopTraining_)break}o.dispose()}if(await x.onEpochEnd(o,i),e.stopTraining_)break}return await x.onTrainEnd(),await e.history.syncData(),e.history}(e,b,y,x,p,r.epochs,r.verbose,v,w,m,r.shuffle,k,r.initialEpoch,null,null)}finally{e.isTraining=!1,yy(a,t),yy(i,n),yy(u,o),yy(c,l),null!=h&&ci(h)}}function gy(e){const t=[];e instanceof Ss&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(Zf(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function yy(e,t){if(null==e)return;const n=[];if(t instanceof Ss)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof Ss)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const r=e[t];-1===n.indexOf(r.id)&&s.push(r)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function by(e){return Array.isArray(e)}function xy(e){return!function(e){return e instanceof Ss}(e)&&!by(e)}function wy(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(by(e)&&e.length>0)t=!0;else if(xy(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Jd(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(xy(e)){e=e,a=[];for(const n of t){if(null==e[n])throw new Jd(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(by(e)){if((e=e).length!==t.length)throw new Jd(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(e=e,t.length>1)throw new Jd(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=gy(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Jd(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l>=0&&o!==l)throw new Jd(`Error when checking ${r}: expected ${t[e]} to have shape [${n[e]}], but got array with shape [${i.shape}].`)}}return a}function ky(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new Jd(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new Jd(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Jd(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l!==o)throw new Jd(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class vy extends ny{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Jd("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");Wg(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Zh.adagrad(.01),Adadelta:()=>Zh.adadelta(1,.95,Kd()),Adam:()=>Zh.adam(.001,.9,.999,Kd()),Adamax:()=>Zh.adamax(.002,.9,.999,Kd(),0),RMSProp:()=>Zh.rmsprop(.001,.9,0,Kd()),SGD:()=>Zh.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Jd(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Uh))throw new Jd("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Jd(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>$g(e)))}else{const n=$g(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Jd(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push($g(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Wf("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};Wf("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===vg?-1!==["accuracy","acc"].indexOf(i)?s=Sg:-1!==["crossentropy","ce"].indexOf(i)&&(s=Fg):this.lossFunctions[e]===kg?-1!==["accuracy","acc"].indexOf(i)?s=Dg:-1!==["crossentropy","ce"].indexOf(i)&&(s=Og):-1!==["accuracy","acc"].indexOf(i)?s=Tg:-1!==["crossentropy","ce"].indexOf(i)&&(s=_g),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=Lg(i);a=e,n=""+zg(i)}let t;Wf(n,(()=>{t=a})),r(e,n,t)}})(s[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;hy(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const a=r[0].concat(r[1]);this.makeTestFunction();const i=this.testFunction;return sf(this.testLoop(i,a,s,n.verbose,n.steps))}finally{yy(r[0],e),yy(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new Zd("Verbose mode is not implemented yet.");o(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let l=0,u=0;for(;!s||u<n.batches;){const t=await i.next();if(a=ui((()=>{if(t.value){const{xs:n,ys:s}=oy(e,t.value),i=n.concat(s),o=ui((()=>r(i)));if(ci(i),0===u)for(let e=0;e<o.length;++e)a.push(Uu(0));const c=i[0].shape[0];for(let e=0;e<o.length;++e){const t=o[e],n=a[e];a[e]=ui((()=>vi(a[e],Ci(c,t)))),u>0&&ci(n)}ci(o),l+=c,++u}return a})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=Ii(a[e],l),ci(t)}return sf(a)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new Jd(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new Jd(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Jd("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new Xg;if(e instanceof Ss&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Jd(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new Jd(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=Zg(r,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=ef(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map((e=>e.name));for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new Jd(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return ui((()=>{const s=this.checkNumSamples(e);if(n)throw new Zd("Verbose predictLoop() is not implemented yet.");const r=fy(s,t),a=this.outputs.map((e=>[]));for(let t=0;t<r.length;++t){ui((()=>{const n=r[t][0],s=r[t][1],a=py(e,n,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new Xg(i);return Zg(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)))}return sf(a.map((e=>to(e,0))))}))}predict(e,t={}){const n=gy(e);ky(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return hy(s),this.predictLoop(n,s)}finally{yy(n,e)}}predictOnBatch(e){ky(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new Yd("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===kg?r.push(t.slice(0,t.length-1).concat([1])):r.push(t)}if(function(e,t,n){const s=df(e.map((e=>e.shape[0])));s.sort();const r=df(t.map((e=>e.shape[0])));if(r.sort(),s.length>1)throw new Jd(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(r.length>1)throw new Jd(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&r.length>0&&!p(s,r))throw new Jd(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=wy(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=wy(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[gg,vg,wg];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===wg&&1===a.shape[a.shape.length-1])throw new Jd(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new Jd(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new Jd(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=ry(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await ay(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,r){return ui((()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new Zd("Verbose mode is not implemented yet.");if(null!=r)throw new Zd("steps mode in testLoop() is not implemented yet");{const s=fy(a,n),r=dc(Yf(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=Qf(r,a,o-a),u=dy(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(Uu(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=vi(i[e],Ci(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=Ii(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;if(nf(e,s)>1){r+=`_${nf(e.slice(0,n),s)}`}t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new Xg(e),o=Zg(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=r[e]&&(n=iy(n,r[e]));const a=Gl(n);t.push(a),l=0===e?n:vi(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],r=this.metricsTensors[e][1];n=Gl(t(s[r],o[r]))}hi(n),a.push(n)}return l=Gl(l),this.calculateLosses().forEach((e=>{l=vi(l,e)})),l}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>ui((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new Xg(a),o=Zg(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=Gl(s(r[e],o[e]));n=0===e?a:vi(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=Gl(n(r[s],o[s]));t.push(a)}return t}))}async fit(e,t,n={}){return my(this,e,t,n)}async fitDataset(e,t){return uy(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return ci(a),sf(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=oi().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-oi().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=af(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>af(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=af(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[af(zg(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>af(zg(e))));{const e={};for(const t in this.metrics)e[t]=af(zg(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=fg(jg(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=of(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>of(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=of(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>of(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=of(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=kr(e);if(0===t.length)throw new Jd(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Jd(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Jd("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await hr(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.6.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await hr(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=gr([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;Bg(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){Bg(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}vy.className="Model",qa(vy);class Ny extends vy{}async function Iy(e,t){if(null==t&&(t={}),"string"==typeof e){const n=vr(e,t);if(0===n.length)n.push(oa(e,t));else if(n.length>1)throw new Jd(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){null==n&&(n={});if(null==e.load)throw new Jd("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await e.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const a=null==n.strict||n.strict,i=null!=s.weightData&&null!=s.weightSpecs&&a,o=fg(jg(r),t,i),l=s.trainingConfig;null!=l&&o.loadTrainingConfig(l);null!=s.userDefinedMetadata&&o.setUserDefinedMetadata(s.userDefinedMetadata);if(null!=s.weightData){if(null==s.weightSpecs)throw new Jd("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=pr(e,t),s={},r=[];return t.forEach((e=>{"optimizer"===e.group?r.push({name:e.name,tensor:n[e.name]}):s[e.name]=n[e.name]})),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);o.loadWeights(e,a),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),ci(e),ci(t.map((e=>e.tensor)))}return o}(e,void 0,t)}Ny.className="Functional",qa(Ny);class Cy extends vy{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:Bm("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new Jd(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Cy||e instanceof vy;let n;if(t){if(n=e,1!==n.outputs.length)throw new Jd("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Jd("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Jd("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=ng({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Jd(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Jd("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=eg(this.outputs[0])}this.inboundNodes=[],new Jm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:ef(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(Um(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new vy({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Yd("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Yd("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Yd("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Yd("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Jd("Legacy serialization format not supported yet.");r=t}else o(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof Cy))throw new Zd(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of r){const t=fg(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new Jd("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Jd("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function $y(e){return new vy(e)}function Sy(e){return new Cy(e)}function Ty(e,t){return null==t&&(t={}),Iy(e,t)}function Ey(e){return ng(e)}function Ay(e,t){pg.registerCallbackConstructor(e,t)}Cy.className="Sequential",qa(Cy);class Ry extends Ha{getConfig(){return{}}}class Fy extends Ry{apply(e,t=1){return function(e,t=1){if(1!==t)throw new Zd(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Go(e)}(e,t)}}Fy.className="elu",qa(Fy);class Dy extends Ry{apply(e){return Gu(e)}}Dy.className="selu",qa(Dy);class _y extends Ry{apply(e){return _u(e)}}_y.className="relu",qa(_y);class Oy extends Ry{apply(e){return ui((()=>Xl(6,_u(e))))}}Oy.className="relu6",qa(Oy);class My extends Ry{apply(e){return e}}My.className="linear",qa(My);class Ly extends Ry{apply(e){return no(e)}}Ly.className="sigmoid",qa(Ly);class zy extends Ry{apply(e){return function(e){return ui((()=>{const t=vi(.5,Ci(.2,e));return mo(t,0,1)}))}(e)}}zy.className="hardSigmoid",qa(zy);class By extends Ry{apply(e){return kl(e)}}By.className="softplus",qa(By);class Py extends Ry{apply(e){return function(e){return ui((()=>Ii(e,$i(e).add(1))))}(e)}}Py.className="softsign",qa(Py);class Wy extends Ry{apply(e){return ro(e)}}Wy.className="tanh",qa(Wy);class Vy extends Ry{apply(e,t=-1){return ec(e,t)}}Vy.className="softmax",qa(Vy);class Uy extends Ry{apply(e,t=-1){return $l(e,t)}}Uy.className="logSoftmax",qa(Uy);class Gy extends Ry{apply(e,t=1){return ui((()=>no(e.mul(t)).mul(e)))}}Gy.className="swish",qa(Gy);class Hy extends Ry{apply(e){return ui((()=>Ci(e,ro(kl(e)))))}}function jy(e){return e.getClassName()}function qy(e,t={}){return hf(e,ja.getMap().classNameMap,t,"activation")}function Ky(e){if(null==e){const e={className:"linear",config:{}};return qy(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},qy(t)}return e instanceof Ry?e:qy(e)}function Xy(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}Hy.className="mish",qa(Hy);class Yy extends Ha{}class Jy extends Yy{constructor(e){super(),Xy(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return ui((()=>{let t=Hl([1]);return this.hasL1&&(t=vi(t,Cl(Ci(this.l1,$i(e))))),this.hasL2&&(t=vi(t,Cl(Ci(this.l2,lm(e))))),t.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Jy.className="L1L2",qa(Jy);const Zy={l1l2:"L1L2"};function Qy(e){return uf(e)}function eb(e,t={}){return hf(e,ja.getMap().classNameMap,t,"regularizer")}function tb(e){if(null==e)return null;if("string"==typeof e){return eb({className:e in Zy?Zy[e]:e,config:{}})}return e instanceof Yy?e:eb(e)}class nb extends Qm{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=Vm(e);let n=_u(e);return null!=this.maxValue&&(n=mo(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}nb.className="ReLU",qa(nb);class sb extends Qm{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Vm(e);return il(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}sb.className="LeakyReLU",qa(sb);class rb extends Qm{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=_m(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=tb(e.alphaRegularizer),this.alphaConstraint=Ef(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Jd(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=Um(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new Km({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=Vm(e),du(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Dm(this.alphaInitializer),alphaRegularizer:Qy(this.alphaRegularizer),alphaConstraint:Sf(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}rb.className="PReLU",qa(rb);class ab extends Qm{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Zd(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Vm(e);return Go(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}ab.className="ELU",qa(ab);class ib extends Qm{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=Vm(e);return n.mul(Jf(n.greater(this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}ib.className="ThresholdedReLU",qa(ib);class ob extends Qm{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Vy).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=Vm(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function lb(e,t,n){if("number"==typeof e)return ef(e,t);if(e.length!==t)throw new Jd(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new Jd(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function ub(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function cb(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+Xf([n-t,0]);else{if("same"!==s)throw new Jd(`Unsupport padding mode: ${s}.`);e*=t}return e}function hb(e,t){return ui((()=>(Lf(t),"channelsFirst"===t?da(e,[0,2,3,1]):e)))}function pb(e,t){return ui((()=>(Lf(t),"channelsFirst"===t?da(e,[0,2,3,4,1]):e)))}function db(e,t,n,s=1,r="valid",a,i=1){return ui((()=>{if(null==a&&(a="channelsLast"),Lf(a),3!==e.shape.length)throw new Jd(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new Jd(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Jd(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=da(e,[0,2,1])),"causal"===r)throw new Zd("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=ko(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=cm(o,n)),o}))}function fb(e,t,n,s=[1,1],r="valid",a,i,o=null){return ui((()=>{if(null==a&&(a="channelsLast"),Lf(a),3!==e.rank&&4!==e.rank)throw new Jd(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Jd(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=hb(e,a);if("causal"===r)throw new Zd("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Vc({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=da(l,[0,3,1,2])),l}))}function mb(e,t,n,s=[1,1,1],r="valid",a,i){return ui((()=>{if(null==a&&(a="channelsLast"),Lf(a),4!==e.rank&&5!==e.rank)throw new Jd(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new Jd(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=pb(e,a);if("causal"===r)throw new Zd("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Io(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=cm(o,n)),"channelsFirst"===a&&(o=da(o,[0,4,1,2,3])),o}))}ob.className="Softmax",qa(ob);class gb extends Qm{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",gb.verifyArgs(t),this.rank=e,yf(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Zd(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=lb(t.kernelSize,e,"kernelSize"),this.strides=lb(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,zf(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Lf(this.dataFormat),this.activation=Ky(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=_m(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Ef(t.biasConstraint),this.biasRegularizer=tb(t.biasRegularizer),this.activityRegularizer=tb(t.activityRegularizer),this.dilationRate=lb(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Jd(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Jd(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Jd(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(tf("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!gf(e.kernelSize,"number",1,3))throw new Jd(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:jy(this.activation),useBias:this.useBias,biasInitializer:Dm(this.biasInitializer),biasRegularizer:Qy(this.biasRegularizer),activityRegularizer:Qy(this.activityRegularizer),biasConstraint:Sf(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class yb extends gb{constructor(e,t){super(e,t),this.kernel=null,yb.verifyArgs(t),this.filters=t.filters,yf(this.filters,"filters"),this.kernelInitializer=_m(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Ef(t.kernelConstraint),this.kernelRegularizer=tb(t.kernelRegularizer)}build(e){e=Um(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Jd(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return ui((()=>{let t;e=Vm(e);const n=null==this.bias?null:this.bias.read(),s=xf(this.activation.getClassName());if(null!=s&&2===this.rank)t=fb(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=db(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=fb(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Zd("convolutions greater than 3D are not implemented yet.");t=mb(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=Um(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=ub(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:Dm(this.kernelInitializer),kernelRegularizer:Qy(this.kernelRegularizer),kernelConstraint:Sf(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Jd(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class bb extends yb{constructor(e){super(2,e),bb.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!gf(e.kernelSize,"number",1,2))throw new Jd(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}bb.className="Conv2D",qa(bb);class xb extends yb{constructor(e){super(3,e),xb.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Jd(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}xb.className="Conv3D",qa(xb);class wb extends bb{constructor(e){if(super(e),this.inputSpec=[new Km({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Jd(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=Um(e)).length)throw new Jd("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Jd("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Km({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return ui((()=>{let t=Vm(e);if(4!==t.shape.length)throw new Jd(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,cb(i,c,l,this.padding),cb(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=da(t,[0,2,3,1]));let d=No(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=da(d,[0,3,1,2])),null!=this.bias&&(d=cm(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=Um(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=cb(t[s],o,a,this.padding),t[r]=cb(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}wb.className="Conv2DTranspose",qa(wb);class kb extends xb{constructor(e){if(super(e),this.inputSpec=[new Km({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new Jd(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=Um(e)).length)throw new Jd("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Jd("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Km({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return ui((()=>{let t=Vm(e);if(5!==t.shape.length)throw new Jd(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a,i;"channelsFirst"===this.dataFormat?(i=2,r=3,a=4):(i=1,r=2,a=3);const o=n[i],l=n[r],u=n[a],c=this.kernelSize[0],h=this.kernelSize[1],p=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[s,cb(o,d,c,this.padding),cb(l,f,h,this.padding),cb(u,m,p,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=da(t,[0,2,3,4,1]));let y=$o(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=da(y,[0,4,1,2,3])),null!==this.bias&&(y=cm(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=Um(e)).slice();let n,s,r,a;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3,a=4):(n=4,s=1,r=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=cb(t[s],u,i,this.padding),t[r]=cb(t[r],c,o,this.padding),t[a]=cb(t[a],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}kb.className="Conv3DTranspose",qa(kb);class vb extends yb{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Jd("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Jd("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Jd(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=_m(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=tb(t.depthwiseRegularizer),this.depthwiseConstraint=Ef(t.depthwiseConstraint),this.pointwiseInitializer=_m(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=tb(t.pointwiseRegularizer),this.pointwiseConstraint=Ef(t.pointwiseConstraint)}build(e){if((e=Um(e)).length<this.rank+2)throw new Jd(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Jd(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new Km({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return ui((()=>{let t;if(e=Vm(e),1===this.rank)throw new Zd("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=da(e,[0,2,3,1])),t=Hu(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=cm(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=da(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Dm(this.depthwiseInitializer),e.pointwiseInitializer=Dm(this.pointwiseInitializer),e.depthwiseRegularizer=Qy(this.depthwiseRegularizer),e.pointwiseRegularizer=Qy(this.pointwiseRegularizer),e.depthwiseConstraint=Sf(this.depthwiseConstraint),e.pointwiseConstraint=Sf(this.pointwiseConstraint),e}}vb.className="SeparableConv";class Nb extends vb{constructor(e){super(2,e)}}Nb.className="SeparableConv2D",qa(Nb);class Ib extends yb{constructor(e){super(1,e),Ib.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!gf(e.kernelSize,"number",1,1))throw new Jd(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Ib.className="Conv1D",qa(Ib);class Cb extends Qm{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return ui((()=>{if(e=Vm(e),"channelsLast"===this.dataFormat){const t=tm(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return tm(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=tm(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return tm(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Cb.className="Cropping2D",qa(Cb);class $b extends Qm{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Lf(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,mf(Ff,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return ui((()=>{let t=Vm(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=da(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s]);return da(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}$b.className="UpSampling2D",qa($b);class Sb extends gb{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=_m(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Ef(e.depthwiseConstraint),this.depthwiseRegularizer=tb(e.depthwiseRegularizer)}build(e){if((e=Um(e)).length<4)throw new Jd(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Jd(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ui((()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return ui((()=>{null==r&&(r="channelsLast"),Lf(r);let i=hb(e,r);if(4!==e.rank)throw new Jd(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new Jd(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=Fo(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=da(i,[0,3,1,2])),i}))}(e=Vm(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=cm(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=Um(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=ub(t,this.kernelSize[0],this.padding,this.strides[0]),a=ub(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Dm(this.depthwiseInitializer),e.depthwiseRegularizer=Qy(this.depthwiseRegularizer),e.depthwiseConstraint=Sf(this.depthwiseRegularizer),e}}function Tb(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new Jd("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function Eb(e,t,n,s=!1,r,a,i=!1,o=!1){return ui((()=>{const l=t.shape.length;if(l<3)throw new Jd(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(Yf(2,l));if(t=da(t,u),null!=a)throw new Zd("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=r.asType("bool").asType("float32")).rank===l-1&&(r=qo(r,-1)),r=da(r,u)),s&&(t=Mu(t,0),null!=r&&(r=Mu(r,0)));const c=[];let h,p=n;const d=t.shape[0],f=vc(t);let m,g;null!=r&&(m=vc(r));for(let t=0;t<d;++t){const n=f[t],s=ui((()=>e(n,p)));if(null==r)h=s[0],p=s[1];else{const e=ui((()=>{const e=m[t],n=su(e).sub(e);return{output:s[0].mul(e).add(p[0].mul(n)),newStates:p.map(((t,r)=>s[1][r].mul(e).add(t.mul(n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}if(o){g=uc(c,1)}return[h,g,p]}))}Sb.className="DepthwiseConv2D",qa(Sb);class Ab extends Qm{constructor(e){let t;if(super(e),null==e.cell)throw new Jd("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new zb({cells:e.cell}):e.cell,null==t.stateSize)throw new Jd("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Km({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return Yf(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){Pm(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return ui((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Zd("Constants support is not implemented in RNN yet.");Pm(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new Km({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!p(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new Jd(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new Km({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){ui((()=>{if(!this.stateful)throw new Xd("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Jd("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Hl([n,e]))):this.states_=[Hl([n,this.cell.stateSize])];else if(null==e)ci(this.states_),null!=this.keptStates&&(ci(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Hl([n,e]))):this.states_[0]=Hl([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Jd(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):ci(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!p(s.shape,a))throw new Jd(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>hi(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=Tb(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new Km({shape:e.shape}));i=i.concat(this.stateSpec)}null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length);if(a[0]instanceof Xm){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return ui((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=Vm(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new Jd(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=Eb(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return ui((()=>{let t=Hl(e.shape);return t=Cl(t,[1,2]),t=Zf(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?rm(t,[1,e]):t)):this.cell.stateSize>1?[rm(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===Ab.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=fg(t.cell,n);return new e(Object.assign(t,{cell:s}))}}Ab.className="RNN",qa(Ab);class Rb extends Qm{}class Fb extends Rb{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,yf(this.units,"units"),this.activation=Ky(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=_m(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=_m(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=_m(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=tb(e.kernelRegularizer),this.recurrentRegularizer=tb(e.recurrentRegularizer),this.biasRegularizer=tb(e.biasRegularizer),this.kernelConstraint=Ef(e.kernelConstraint),this.recurrentConstraint=Ef(e.recurrentConstraint),this.biasConstraint=Ef(e.biasConstraint),this.dropout=Kf([1,Xf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Kf([1,Xf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Um(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ui((()=>{if(2!==(e=e).length)throw new Jd(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Bb({ones:()=>su(e),rate:this.dropout,training:s})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Bb({ones:()=>su(n),rate:this.recurrentDropout,training:s}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=im(null!=a?Ci(e,a):e,this.kernel.read()),null!=this.bias&&(r=cm(r,this.bias.read())),null!=i&&(n=Ci(n,i));let o=vi(r,im(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:jy(this.activation),useBias:this.useBias,kernelInitializer:Dm(this.kernelInitializer),recurrentInitializer:Dm(this.recurrentInitializer),biasInitializer:Dm(this.biasInitializer),kernelRegularizer:Qy(this.kernelRegularizer),recurrentRegularizer:Qy(this.recurrentRegularizer),biasRegularizer:Qy(this.biasRegularizer),activityRegularizer:Qy(this.activityRegularizer),kernelConstraint:Sf(this.kernelConstraint),recurrentConstraint:Sf(this.recurrentConstraint),biasConstraint:Sf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Fb.className="SimpleRNNCell",qa(Fb);class Db extends Ab{constructor(e){e.cell=new Fb(e),super(e)}call(e,t){return ui((()=>{null!=this.cell.dropoutMask&&(ci(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ci(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return new e(t)}}Db.className="SimpleRNN",qa(Db);class _b extends Rb{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Jd("GRUCell does not support reset_after parameter set to true.");this.units=e.units,yf(this.units,"units"),this.activation=Ky(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Ky(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=_m(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=_m(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=_m(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=tb(e.kernelRegularizer),this.recurrentRegularizer=tb(e.recurrentRegularizer),this.biasRegularizer=tb(e.biasRegularizer),this.kernelConstraint=Ef(e.kernelConstraint),this.recurrentConstraint=Ef(e.recurrentConstraint),this.biasConstraint=Ef(e.biasConstraint),this.dropout=Kf([1,Xf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Kf([1,Xf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=Um(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return ui((()=>{if(2!==(e=e).length)throw new Jd(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Bb({ones:()=>su(e),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Bb({ones:()=>su(s),rate:this.recurrentDropout,training:n,count:3}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=Ci(e,r[0]));let u=im(e,this.kernel.read());this.useBias&&(u=cm(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Ci(s,a[0]));const c=this.recurrentKernel.read(),[h,p]=rc(c,[2*this.units,this.units],c.rank-1),d=im(s,h),[f,m,g]=rc(u,3,u.rank-1),[y,b]=rc(d,2,d.rank-1);i=this.recurrentActivation.apply(vi(f,y)),o=this.recurrentActivation.apply(vi(m,b));const x=im(Ci(o,s),p);l=this.activation.apply(vi(g,x));const w=vi(Ci(i,s),Ci(vi(1,wl(i)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:jy(this.activation),recurrentActivation:jy(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Dm(this.kernelInitializer),recurrentInitializer:Dm(this.recurrentInitializer),biasInitializer:Dm(this.biasInitializer),kernelRegularizer:Qy(this.kernelRegularizer),recurrentRegularizer:Qy(this.recurrentRegularizer),biasRegularizer:Qy(this.biasRegularizer),activityRegularizer:Qy(this.activityRegularizer),kernelConstraint:Sf(this.kernelConstraint),recurrentConstraint:Sf(this.recurrentConstraint),biasConstraint:Sf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}_b.className="GRUCell",qa(_b);class Ob extends Ab{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new _b(e),super(e)}call(e,t){return ui((()=>{null!=this.cell.dropoutMask&&(ci(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ci(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Ob.className="GRU",qa(Ob);class Mb extends Rb{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,yf(this.units,"units"),this.activation=Ky(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Ky(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=_m(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=_m(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=_m(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=tb(e.kernelRegularizer),this.recurrentRegularizer=tb(e.recurrentRegularizer),this.biasRegularizer=tb(e.biasRegularizer),this.kernelConstraint=Ef(e.kernelConstraint),this.recurrentConstraint=Ef(e.recurrentConstraint),this.biasConstraint=Ef(e.biasConstraint),this.dropout=Kf([1,Xf([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Kf([1,Xf([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=Um(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends mm{apply(t,s){const r=e.apply([n]),a=(new ym).apply([n]),i=e.apply([2*n]);return sm(sm(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return ui((()=>{const n=null!=t.training&&t.training;if(3!==(e=e).length)throw new Jd(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Bb({ones:()=>su(e),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Bb({ones:()=>su(s),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=Ci(e,a[0]));let h=im(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Ci(s,i[0])),h=vi(h,im(s,this.recurrentKernel.read())),this.useBias&&(h=cm(h,this.bias.read()));const[p,d,f,m]=rc(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=vi(Ci(l,r),Ci(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Ci(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:jy(this.activation),recurrentActivation:jy(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Dm(this.kernelInitializer),recurrentInitializer:Dm(this.recurrentInitializer),biasInitializer:Dm(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Qy(this.kernelRegularizer),recurrentRegularizer:Qy(this.recurrentRegularizer),biasRegularizer:Qy(this.biasRegularizer),activityRegularizer:Qy(this.activityRegularizer),kernelConstraint:Sf(this.kernelConstraint),recurrentConstraint:Sf(this.recurrentConstraint),biasConstraint:Sf(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Mb.className="LSTMCell",qa(Mb);class Lb extends Ab{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Mb(e),super(e)}call(e,t){return ui((()=>{null!=this.cell.dropoutMask&&(ci(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ci(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Lb.className="LSTM",qa(Lb);class zb extends Rb{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return ui((()=>{let n=(e=e).slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;Pm(e)&&(e=e[0]),e=e,this.cells.forEach(((n,s)=>{Wf(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(fg(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return jm(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}qm(t)}}function Bb(e){const{ones:t,rate:n,training:s=!1,count:r=1}=e,a=()=>hm(t(),n),i=()=>pm(a,t,s);if(!r||r<=1)return hi(i().clone());return Array(r).fill(void 0).map(i).map((e=>hi(e.clone())))}zb.className="StackedRNNCells",qa(zb);var Pb=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n};class Wb extends Ab{constructor(e){if(e.unroll)throw new Zd("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Zd("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Km({ndim:5})]}call(e,t){return ui((()=>{if(null!=this.cell.dropoutMask&&(ci(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ci(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Jd("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return ui((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=Hl([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]}))}resetStates(e,t=!1){ui((()=>{if(!this.stateful)throw new Xd("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new Jd("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Hl(r))):this.states_=[Hl(r)];else if(null==e)ci(this.states_),null!=this.keptStates&&(ci(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Hl(r))):this.states_[0]=Hl(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Jd(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):ci(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!p(n.shape,s))throw new Jd(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>hi(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=ub(l,s[0],r,a[0],i[0]),h=ub(u,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Wb.className="ConvRNN2D";class Vb extends Mb{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,yf(this.filters,"filters"),this.kernelSize=lb(n,2,"kernelSize"),this.kernelSize.forEach((e=>yf(e,"kernelSize"))),this.strides=lb(s||1,2,"strides"),this.strides.forEach((e=>yf(e,"strides"))),this.padding=r||"valid",zf(this.padding),this.dataFormat=a||"channelsLast",Lf(this.dataFormat),this.dilationRate=lb(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>yf(e,"dilationRate")))}build(e){var t;e=Um(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Jd(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends mm{apply(e,t){return nm([n.apply([s]),jl([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return ui((()=>{if(3!==e.length)throw new Jd(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Bb({ones:()=>su(s),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?Ci(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Bb({ones:()=>su(r),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,w]=rc(this.kernel.read(),4,3),[k,v,N,I]=this.useBias?rc(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,k,this.padding),u=this.inputConv(u,b,v,this.padding),c=this.inputConv(c,x,N,this.padding),h=this.inputConv(h,w,I,this.padding);const[C,$,S,T]=rc(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,C),f=this.recurrentConv(f,$),m=this.recurrentConv(m,S),g=this.recurrentConv(g,T);const E=this.recurrentActivation.apply(vi(l,d)),A=this.recurrentActivation.apply(vi(u,f)),R=vi(Ci(A,a),Ci(E,this.activation.apply(vi(c,m)))),F=Ci(this.recurrentActivation.apply(vi(h,g)),this.activation.apply(R));return[F,F,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=Pb(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(e,t,n,s){const r=wo(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?cm(r,n,this.dataFormat):r}recurrentConv(e,t){return wo(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Vb.className="ConvLSTM2DCell",qa(Vb);class Ub extends Wb{constructor(e){const t=new Vb(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}Ub.className="ConvLSTM2D",qa(Ub);class Gb extends Qm{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return ui((()=>{this.invokeCallHook(e,t);const n=Vm(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return pm((()=>hm(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Gb.className="Dropout",qa(Gb);class Hb extends Gb{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}Hb.className="SpatialDropout1D",qa(Hb);class jb extends Qm{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,yf(this.units,"units"),this.activation=Ky(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=_m(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=_m(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Ef(e.kernelConstraint),this.biasConstraint=Ef(e.biasConstraint),this.kernelRegularizer=tb(e.kernelRegularizer),this.biasRegularizer=tb(e.biasRegularizer),this.activityRegularizer=tb(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=Um(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=Um(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return ui((()=>{this.invokeCallHook(e,t);const n=Vm(e),s=xf(this.activation.getClassName());let r;return null!=s?r=im(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=im(n,this.kernel.read()),null!=this.bias&&(r=cm(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:jy(this.activation),useBias:this.useBias,kernelInitializer:Dm(this.kernelInitializer),biasInitializer:Dm(this.biasInitializer),kernelRegularizer:Qy(this.kernelRegularizer),biasRegularizer:Qy(this.biasRegularizer),activityRegularizer:Qy(this.activityRegularizer),kernelConstraint:Sf(this.kernelConstraint),biasConstraint:Sf(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}jb.className="Dense",qa(jb);class qb extends Qm{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=Um(e);for(const t of e.slice(1))if(null==t)throw new Jd(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],jf(e,1)]}call(e,t){return ui((()=>{this.invokeCallHook(e,t);let n=Vm(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=n.transpose(e)}return function(e){if(e.rank<=1)throw new Jd(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],jf(e.shape,1)];return e.reshape(t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}qb.className="Flatten",qa(qb);class Kb extends Qm{constructor(e){super(e),this.supportsMasking=!0,this.activation=Ky(e.activation)}call(e,t){return ui((()=>{this.invokeCallHook(e,t);const n=Vm(e);return this.activation.apply(n)}))}getConfig(){const e={activation:jy(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}Kb.className="Activation",qa(Kb);class Xb extends Qm{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return ui((()=>{return e=Vm(e),t=e,n=this.n,ui((()=>{if(2!==t.shape.length)throw new Jd(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return rm(Zf(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}Xb.className="RepeatVector",qa(Xb);class Yb extends Qm{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==a)throw new Jd("Can only specifiy one unknown dimension.");a=e}else r*=t}const i=jf(e);if(null!==a){if(0===r||i%r!=0)throw new Jd(n);s[a]=i/r}else if(i!==r)throw new Jd(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return ui((()=>{this.invokeCallHook(e,t);const n=Vm(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return n.reshape(r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}Yb.className="Reshape",qa(Yb);class Jb extends Qm{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=Yf(1,e.dims.length+1);if(!p(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Km({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=Um(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return da(Vm(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}Jb.className="Permute",qa(Jb);class Zb extends Qm{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=Vm(e);return Ri(nu(n,this.maskValue),-1)}call(e,t){return ui((()=>{this.invokeCallHook(e,t);const n=Vm(e),s=Ri(nu(n,this.maskValue),-1,!0);return n.mul(s.asType(n.dtype))}))}}Zb.className="Masking",qa(Zb);class Qb extends Qm{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(rf(e.inputLength))}this.inputDim=e.inputDim,yf(this.inputDim,"inputDim"),this.outputDim=e.outputDim,yf(this.outputDim,"outputDim"),this.embeddingsInitializer=_m(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=tb(e.embeddingsRegularizer),this.activityRegularizer=tb(e.activityRegularizer),this.embeddingsConstraint=Ef(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return ui((()=>this.maskZero?(e=Vm(e),nu(e,Po(e))):null))}computeOutputShape(e){if(e=Um(e),null==this.inputLength)return[...e,this.outputDim];const t=rf(this.inputLength);if(t.length!==e.length-1)throw new Jd(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new Jd(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return ui((()=>{this.invokeCallHook(e,t);let n=Vm(e);"int32"!==n.dtype&&(n=Jf(n,"int32"));return om(this.embeddings.read(),n.as1D()).reshape(Um(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Dm(this.embeddingsInitializer),embeddingsRegularizer:Qy(this.embeddingsRegularizer),activityRegularizer:Qy(this.activityRegularizer),embeddingsConstraint:Sf(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}Qb.className="Embedding",qa(Qb);class ex extends Qm{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Zd}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new Jd("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[Um(e)]),(e=e).length<2)throw new Jd(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=df(t),t.length>1)throw new Jd(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===df(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return ui((()=>{if(e=e,this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=Xf(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=Zf(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,r=e[0],a=e.slice(1).concat([r]);let i=s.reshape([r].concat(jf(e.slice(1))));i=da(i,[1,0]),i=i.reshape(a),t.push(i),n=!0}else if(e>1){const r=Yf(1,e).concat([0]);t.push(da(s,r)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=da(s.reshape([-1,t]),[1,0]).reshape(n)}else if(r>1){const e=[r-1].concat(Yf(0,r-1));s=da(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==(e=e)[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=df(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return ui((()=>{if(null==t)return null;if(!Array.isArray(t))throw new Jd("`mask` should be an Array");if(!Array.isArray(e))throw new Jd("`inputs` should be an Array");if(t.length!==e.length)throw new Jd(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:qo(e,0))))[0];for(let e=1;e<t.length-1;++e)n=Ml(n,t[e]);return n}))}}class tx extends ex{constructor(e){super(e)}mergeFunction(e){return ui((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=vi(t,e[n]);return t}))}}tx.className="Add",qa(tx);class nx extends ex{constructor(e){super(e)}mergeFunction(e){return ui((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Ci(t,e[n]);return t}))}}nx.className="Multiply",qa(nx);class sx extends ex{constructor(e){super(e)}mergeFunction(e){return ui((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=vi(t,e[n]);return Ci(1/e.length,t)}))}}sx.className="Average",qa(sx);class rx extends ex{constructor(e){super(e)}mergeFunction(e){return ui((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Ul(t,e[n]);return t}))}}rx.className="Maximum",qa(rx);class ax extends ex{constructor(e){super(e)}mergeFunction(e){return ui((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Xl(t,e[n]);return t}))}}ax.className="Minimum",qa(ax);class ix extends ex{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Jd("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let r=!1;for(const e of n)if(p(e,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new Jd("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return ui((()=>nm(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Jd("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Jd("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Jd("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Jd(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return ui((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(su(e[n]).asType("bool")):t[n].rank<e[n].rank?s.push(qo(t[n],-1)):s.push(t[n]);const r=to(s,this.axis);return Ai(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function ox(e,t){for(;e<0;)e+=t;return e}ix.className="Concatenate",qa(ix);class lx extends ex{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){o(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new Zd("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new Jd(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Jd(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>ox(t,e[n].shape.length))):[ox(this.axes,n.shape.length),ox(this.axes,s.shape.length)],this.normalize&&(n=mg(n,t[0]),s=mg(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new Zd("batchDot is not implemented for tensors of 4D or higher rank yet");if(o(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),o(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new Zd("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return ui((()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?e.mul(t).sum(a[0]):e.transpose([1,0]).mul(t).sum(a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;i=e.matMul(t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=i.squeeze(t)}return 1===i.shape.length&&(i=i.expandDims(1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[ox(this.axes,e.length),ox(this.axes,t.length)],n}computeOutputShape(e){o(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new Zd("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}lx.className="Dot",qa(lx);class ux extends Qm{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return ui((()=>{this.invokeCallHook(e,t);const n=Vm(e);return pm((()=>am(n.shape,0,this.stddev).add(n)),(()=>n),t.training||!1)}))}}ux.className="GaussianNoise",qa(ux);class cx extends Qm{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return ui((()=>{this.invokeCallHook(e,t);const n=Vm(e);if(this.rate>0&&this.rate<1){return pm((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return n.mul(am(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}cx.className="GaussianDropout",qa(cx);class hx extends Qm{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Vm(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return ui((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return pm((()=>{const t=Vm(e),s=-1.7580993408473766;let r=tl(Au(n),this.rate);r=Jf(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate;return t.mul(r).add(r.add(-1).mul(s)).mul(a).add(i)}),(()=>Vm(e)),t.training||!1)}return e}))}}function px(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=lo(e,t,n,s,r,a);else if(3===e.rank)i=uo(e,t,n,s,r,a);else{if(4!==e.rank)throw new Zd(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=co(e,t,n,s,r,a)}return i}function dx(e,t,n,s,r=.001){return p(s.slice().sort(),Yf(0,e.rank-1))?function(e,t,n,s,r=.001){return ui((()=>{const a=Ql(e,s),i=a.mean,o=a.variance;return[px(e,i,o,n,t,r),i,o]}))}(e,t,n,s,r):function(e,t,n,s,r=.001){return ui((()=>{const a=Ql(e,s),i=a.mean,o=a.variance,l=[];for(const t of Yf(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=i.reshape(l),c=o.reshape(l),h=null==t?null:t.reshape(l),p=null==n?null:n.reshape(l);return[px(e,u,c,p,h,r),i,o]}))}(e,t,n,s,r)}hx.className="AlphaDropout",qa(hx);class fx extends Qm{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=_m(e.betaInitializer||"zeros"),this.gammaInitializer=_m(e.gammaInitializer||"ones"),this.movingMeanInitializer=_m(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=_m(e.movingVarianceInitializer||"ones"),this.betaConstraint=Ef(e.betaConstraint),this.gammaConstraint=Ef(e.gammaConstraint),this.betaRegularizer=tb(e.betaRegularizer),this.gammaRegularizer=tb(e.gammaRegularizer)}build(e){e=Um(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Jd(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Km({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return ui((()=>{const n=null!=t.training&&t.training,s=Vm(e),r=s.shape,a=r.length,i=Yf(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=ef(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!p(u,Yf(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=this.movingMean.read().reshape(l),t=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,r=this.scale?this.gamma.read().reshape(l):null;return px(s,e,t,n,r,this.epsilon)}return px(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,d,f]=dx(s,this.gamma.read(),this.beta.read(),i,this.epsilon),m=(e,t,n)=>{ui((()=>{const s=1-n,r=e.read(),a=r.sub(t).mul(s);e.write(r.sub(a))}))};return(()=>{m(this.movingMean,d,this.momentum),m(this.movingVariance,f,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Dm(this.betaInitializer),gammaInitializer:Dm(this.gammaInitializer),movingMeanInitializer:Dm(this.movingMeanInitializer),movingVarianceInitializer:Dm(this.movingVarianceInitializer),betaRegularizer:Qy(this.betaRegularizer),gammaRegularizer:Qy(this.gammaRegularizer),betaConstraint:Sf(this.betaConstraint),gammaConstraint:Sf(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}fx.className="BatchNormalization",qa(fx);class mx extends Qm{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=_m(e.betaInitializer||"zeros"),this.gammaInitializer=_m(e.gammaInitializer||"ones"),this.betaRegularizer=tb(e.betaRegularizer),this.gammaRegularizer=tb(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=Um(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==df(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=Vm(e),s=n.shape,r=s.length;return ui((()=>{let{mean:e,variance:t}=Ql(n,this.axis,!0);const a=ef(1,r);for(const e of this.axis)a[e]=s[e];const i=e=>null!=e&&e.shape.length!==r&&this.axis!==[r-1]?e.reshape(a):e;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=e.tile(u),t=t.tile(u),o=o.tile(c),l=l.tile(c),px(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Dm(this.betaInitializer),gammaInitializer:Dm(this.gammaInitializer),betaRegularizer:Qy(this.betaRegularizer),gammaRegularizer:Qy(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}mx.className="LayerNormalization",qa(mx);class gx extends Qm{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Jd(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Jd(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Jd(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new Km({ndim:4})]}computeOutputShape(e){let t,n;return e=Um(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return ui((()=>{return t=Vm(e),n=this.padding,s=this.dataFormat,ui((()=>{if(4!==t.rank)throw new Jd(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Jd("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new Jd(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],au(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function yx(e,t,n,s,r,a){return ui((()=>{let i;Lf(r),Bf(a),zf(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=hb(e,r);const o="same"===s?"same":"valid";return i="max"===a?Pl(e,t,n,o):Qi(e,t,n,o),"channelsFirst"===r&&(i=da(i,[0,3,1,2])),i}))}function bx(e,t,n,s,r,a){return ui((()=>{let i;Lf(r),Bf(a),zf(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=pb(e,r);const o="same"===s?"same":"valid";return i="max"===a?Wl(e,t,n,o):eo(e,t,n,o),"channelsFirst"===r&&(i=da(i,[0,4,1,2,3])),i}))}gx.className="ZeroPadding2D",qa(gx);class xx extends Qm{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Jd(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(yf(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Jd(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}yf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,zf(this.padding),this.inputSpec=[new Km({ndim:3})]}computeOutputShape(e){const t=ub((e=Um(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return ui((()=>{this.invokeCallHook(e,t),e=Zf(Vm(e),2);const n=this.poolingFunction(Vm(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return lc(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class wx extends xx{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Lf(r),zf(s),yx(e,t,n,s,r,"max")}}wx.className="MaxPooling1D",qa(wx);class kx extends xx{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Lf(r),zf(s),yx(e,t,n,s,r,"avg")}}kx.className="AveragePooling1D",qa(kx);class vx extends Qm{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Jd(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];yf(this.poolSize,"poolSize"),yf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Lf(this.dataFormat),zf(this.padding),this.inputSpec=[new Km({ndim:4})]}computeOutputShape(e){e=Um(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=ub(t,this.poolSize[0],this.padding,this.strides[0]),n=ub(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return ui((()=>(this.invokeCallHook(e,t),this.poolingFunction(Vm(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Nx extends vx{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Lf(r),zf(s),yx(e,t,n,s,r,"max")}}Nx.className="MaxPooling2D",qa(Nx);class Ix extends vx{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Lf(r),zf(s),yx(e,t,n,s,r,"avg")}}Ix.className="AveragePooling2D",qa(Ix);class Cx extends Qm{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Jd(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];yf(this.poolSize,"poolSize"),yf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Lf(this.dataFormat),zf(this.padding),this.inputSpec=[new Km({ndim:5})]}computeOutputShape(e){e=Um(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=ub(t,this.poolSize[0],this.padding,this.strides[0]),n=ub(n,this.poolSize[1],this.padding,this.strides[1]),s=ub(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return ui((()=>(this.invokeCallHook(e,t),this.poolingFunction(Vm(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class $x extends Cx{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Lf(r),zf(s),bx(e,t,n,s,r,"max")}}$x.className="MaxPooling3D",qa($x);class Sx extends Cx{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Lf(r),zf(s),bx(e,t,n,s,r,"avg")}}Sx.className="AveragePooling3D",qa(Sx);class Tx extends Qm{constructor(e){super(e),this.inputSpec=[new Km({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Zd}}class Ex extends Tx{constructor(e){super(e||{})}call(e,t){return ui((()=>{const t=Vm(e);return Gl(t,1)}))}}Ex.className="GlobalAveragePooling1D",qa(Ex);class Ax extends Tx{constructor(e){super(e||{})}call(e,t){return ui((()=>{const t=Vm(e);return Nl(t,1)}))}}Ax.className="GlobalMaxPooling1D",qa(Ax);class Rx extends Qm{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Lf(this.dataFormat),this.inputSpec=[new Km({ndim:4})]}computeOutputShape(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Zd}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Fx extends Rx{call(e,t){return ui((()=>{const t=Vm(e);return"channelsLast"===this.dataFormat?Gl(t,[1,2]):Gl(t,[2,3])}))}}Fx.className="GlobalAveragePooling2D",qa(Fx);class Dx extends Rx{call(e,t){return ui((()=>{const t=Vm(e);return"channelsLast"===this.dataFormat?Nl(t,[1,2]):Nl(t,[2,3])}))}}Dx.className="GlobalMaxPooling2D",qa(Dx);class _x extends Qm{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=fg(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class Ox extends _x{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=Um(e)).length<3)throw new Jd(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=Um(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return ui((()=>Eb(((e,n)=>[Vm(this.layer.call(e,t)),[]]),e=Vm(e),[],!1,null,null,!1,!0)[1]))}}Ox.className="TimeDistributed",qa(Ox);class Mx extends _x{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=fg(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=fg(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,mf(Of,"BidirectionalMergeMode",r),e.weights)throw new Zd("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),r=r,this.returnState?(s=r.slice(1),t=r[0]):t=r[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):sf(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=Tb(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Jd("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map((e=>new Km({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new Zd("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof Xm;for(const e of a)if(e instanceof Xm!==o)throw new Jd("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return ui((()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=Mu(r,1)),"concat"===this.mergeMode?i=nm([s,r]):"sum"===this.mergeMode?i=vi(s,r):"ave"===this.mergeMode?i=Ci(.5,vi(s,r)):"mul"===this.mergeMode?i=Ci(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Wf(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),Wf(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=fg(t.layer);if(delete t.layer,null!=t.numConstants)throw new Zd("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}function Lx(e){return new kx(e)}function zx(e){return new Ix(e)}function Bx(e){return new Sx(e)}function Px(e){return new Ax(e)}function Wx(e){return new Dx(e)}function Vx(e){return new wx(e)}function Ux(e){return new Nx(e)}Mx.className="Bidirectional",qa(Mx);const Gx=Px,Hx=Wx,jx=Vx,qx=Ux;var Kx=Object.freeze({__proto__:null,inputLayer:function(e){return new tg(e)},elu:function(e){return new ab(e)},reLU:function(e){return new nb(e)},leakyReLU:function(e){return new sb(e)},prelu:function(e){return new rb(e)},softmax:function(e){return new ob(e)},thresholdedReLU:function(e){return new ib(e)},conv1d:function(e){return new Ib(e)},conv2d:function(e){return new bb(e)},conv2dTranspose:function(e){return new wb(e)},conv3d:function(e){return new xb(e)},conv3dTranspose:function(e){return new kb(e)},separableConv2d:function(e){return new Nb(e)},cropping2D:function(e){return new Cb(e)},upSampling2d:function(e){return new $b(e)},depthwiseConv2d:function(e){return new Sb(e)},activation:function(e){return new Kb(e)},dense:function(e){return new jb(e)},dropout:function(e){return new Gb(e)},spatialDropout1d:function(e){return new Hb(e)},flatten:function(e){return new qb(e)},repeatVector:function(e){return new Xb(e)},reshape:function(e){return new Yb(e)},permute:function(e){return new Jb(e)},embedding:function(e){return new Qb(e)},add:function(e){return new tx(e)},average:function(e){return new sx(e)},concatenate:function(e){return new ix(e)},maximum:function(e){return new rx(e)},minimum:function(e){return new ax(e)},multiply:function(e){return new nx(e)},dot:function(e){return new lx(e)},batchNormalization:function(e){return new fx(e)},layerNormalization:function(e){return new mx(e)},zeroPadding2d:function(e){return new gx(e)},averagePooling1d:Lx,avgPool1d:function(e){return Lx(e)},avgPooling1d:function(e){return Lx(e)},averagePooling2d:zx,avgPool2d:function(e){return zx(e)},avgPooling2d:function(e){return zx(e)},averagePooling3d:Bx,avgPool3d:function(e){return Bx(e)},avgPooling3d:function(e){return Bx(e)},globalAveragePooling1d:function(e){return new Ex(e)},globalAveragePooling2d:function(e){return new Fx(e)},globalMaxPooling1d:Px,globalMaxPooling2d:Wx,maxPooling1d:Vx,maxPooling2d:Ux,maxPooling3d:function(e){return new $x(e)},gru:function(e){return new Ob(e)},gruCell:function(e){return new _b(e)},lstm:function(e){return new Lb(e)},lstmCell:function(e){return new Mb(e)},simpleRNN:function(e){return new Db(e)},simpleRNNCell:function(e){return new Fb(e)},convLstm2d:function(e){return new Ub(e)},convLstm2dCell:function(e){return new Vb(e)},rnn:function(e){return new Ab(e)},stackedRNNCells:function(e){return new zb(e)},bidirectional:function(e){return new Mx(e)},timeDistributed:function(e){return new Ox(e)},globalMaxPool1d:Gx,globalMaxPool2d:Hx,maxPool1d:jx,maxPool2d:qx,Layer:Qm,RNN:Ab,RNNCell:Rb,input:Ey,gaussianNoise:function(e){return new ux(e)},gaussianDropout:function(e){return new cx(e)},alphaDropout:function(e){return new hx(e)},masking:function(e){return new Zb(e)}});var Xx=Object.freeze({__proto__:null,binaryAccuracy:function(e,t){return Sg(e,t)},binaryCrossentropy:function(e,t){return Fg(e,t)},sparseCategoricalAccuracy:function(e,t){return Dg(e,t)},categoricalAccuracy:function(e,t){return Tg(e,t)},categoricalCrossentropy:function(e,t){return _g(e,t)},precision:function(e,t){return Ag(e,t)},recall:function(e,t){return Rg(e,t)},cosineProximity:function(e,t){return Ig(e,t)},meanAbsoluteError:function(e,t){return yg(e,t)},meanAbsolutePercentageError:function(e,t){return bg(e,t)},MAPE:function(e,t){return bg(e,t)},mape:function(e,t){return bg(e,t)},meanSquaredError:function(e,t){return gg(e,t)},MSE:function(e,t){return gg(e,t)},mse:function(e,t){return gg(e,t)}}),Yx=Object.freeze({__proto__:null,modelFromJSON:async function(e,t){"modelTopology"in e||(e={modelTopology:e});let n=(e=e).modelTopology;null!=n.model_config&&(n=n.model_config);const s=fg(jg(n),t);if(null!=e.weightsManifest){const t=await ta(e.weightsManifest,e.pathPrefix,s.weights.map((e=>e.originalName))),n={};for(const e of s.weights)n[e.originalName]=t[e.originalName];s.loadWeights(n),ci(t)}return s}});var Jx=Object.freeze({__proto__:null,l1l2:function(e){return new Jy(e)},l1:function(e){return Xy(t=e),new Jy({l1:null!=t?t.l1:null,l2:0});var t},l2:function(e){return Xy(t=e),new Jy({l2:null!=t?t.l2:null,l1:0});var t}});class Zx extends ig{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof vy))throw new Error("model must be a LayersModel, not some other Container");this.model=e}}function Qx(e,t){return e<t}function ew(e,t){return e>t}class tw extends Zx{constructor(e){if(super(),null==e&&(e={}),e.restoreBestWeights)throw new Zd("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=Qx:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=ew:this.monitorFunc=Qx,this.monitorFunc===Qx&&(this.minDelta*=-1)}async onTrainBegin(e){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===Qx?1/0:-1/0}async onEpochEnd(e,t){await sg(t);const n=this.getMonitorValue(t);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))}async onTrainEnd(e){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(e){null==e&&(e={});const t=e[this.monitor];return null==t&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}const nw={earlyStopping:function(e){return new tw(e)}};var sw,rw;!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(sw||(sw={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(rw||(rw={}));const aw={};function iw(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};aw[e]=n}function ow(e){return aw[e]}function lw(e){delete aw[e]}function uw(e,t,n,s,r){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return cw(t.inputNames[a.inputIndexStart],n,s,r);if("tensors"===a.type){return t.inputNames.slice(e,i).map((e=>cw(e,n,s,r)))}const o=cw(t.inputNames.slice(e)[0],n,s,r),l=o.dataSync();return"number"===a.type?l[0]:M(o.shape,l)}const i=t.attrParams[e];return i&&i.value}function cw(e,t,n,s){const[r,a]=dw(e);if(null!=s){const e=s.getHashTableHandleByName(r);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[pw(r,e)]));return void 0!==i?t[pw(r,i)][a]:void 0}function hw(e,t){const[n,s]=dw(e);return[pw(n,t&&t.currentContextId),s]}function pw(e,t){return t?`${e}-${t}`:e}function dw(e){const t=e.split(":");if(1===t.length)return[e,0];return[t[0],Number(t[t.length-1])]}function fw(e,t,n){let s=uw("pad",e,t,n);if("explicit"===s){s=uw("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=s[2*e],r[e][1]=s[2*e+1];return r}return s}function mw(e){return e.kept?e:Kr(e)}var gw=Object.freeze({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var yw=Object.freeze({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var bw=Object.freeze({__proto__:null,json:[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]});var xw=Object.freeze({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]});var ww=Object.freeze({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]});var kw=Object.freeze({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var vw=Object.freeze({__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]});var Nw=Object.freeze({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]});var Iw=Object.freeze({__proto__:null,json:[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}]});var Cw=Object.freeze({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]});var $w=Object.freeze({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Sw=Object.freeze({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}]});var Tw=Object.freeze({__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]});var Ew=Object.freeze({__proto__:null,json:[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]});var Aw=Object.freeze({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]});var Rw=Object.freeze({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]});var Fw=Object.freeze({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]});class Dw{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[gw,yw,bw,xw,ww,kw,vw,$w,Cw,Nw,Sw,Tw,Ew,Aw,Rw,Fw,Iw].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],r=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach((e=>{const[n]=hw(e);t.inputs.push(i[n]),i[n].children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=hw(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=hw(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:r,placeholders:s,signature:t,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=ow(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let r;switch(n.type){case"string":r=Ow(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Ow(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=Hw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Hw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=Lw(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=Lw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=Gw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Gw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=Mw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Mw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=qw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=qw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=Uw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Uw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=jw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=jw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=Pw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Pw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=Ww(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Ww(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=Bw(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Bw(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=hw(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:zw(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),s[t]=n}));Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach((e=>{const[n]=hw(e);t.inputs.push(s[n]),s[n].children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=hw(i[e.name]),r=s[t];null!=r&&(r.defaultOutput=n,a.push(r))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function _w(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=j().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Ow(e,t,n,s=!1){const r=e[t];return null!=r?_w(r.s,s):n}function Mw(e,t,n){const s=e[t];return s?s.b:n}function Lw(e,t,n){const s=e[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function zw(e){switch("string"==typeof e&&(e=sw[e]),e){case sw.DT_FLOAT:return"float32";case sw.DT_INT32:case sw.DT_INT64:case sw.DT_INT8:case sw.DT_UINT8:return"int32";case sw.DT_BOOL:return"bool";case sw.DT_DOUBLE:return"float32";case sw.DT_STRING:return"string";default:return null}}function Bw(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function Pw(e,t,n){const s=e[t];return s&&s.type?zw(s.type):n}function Ww(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>zw(e))):n}function Vw(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function Uw(e,t,n){const s=e[t];return s&&s.shape?Vw(s.shape):n}function Gw(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function Hw(e,t,n,s=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>_w(e,s))):n}function jw(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>Vw(e))):n}function qw(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class Kw{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return cw(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return cw(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Lw(this.node.rawAttrs,e,t);if(null!=n.s)return Ow(this.node.rawAttrs,e,t);if(null!=n.b)return Mw(this.node.rawAttrs,e,t);if(null!=n.shape)return Uw(this.node.rawAttrs,e,t);if(null!=n.type)return Pw(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Gw(this.node.rawAttrs,e,t);if(null!=n.list.s)return Hw(this.node.rawAttrs,e,t);if(null!=n.list.shape)return jw(this.node.rawAttrs,e,t);if(null!=n.list.b)return qw(this.node.rawAttrs,e,t);if(null!=n.list.type)return Ww(this.node.rawAttrs,e,t)}return t}}function Xw(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){o(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const r=e[s],a=t[s];o(r<0||a<0||r===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function Yw(e){return"number"!=typeof e&&!e.some((e=>e<0))}function Jw(e,t,n){let s=Zw(e,n);const r=!Yw(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach((e=>{s=Zw(e.shape,s)})),!Yw(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function Zw(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const r=e[s],a=t[s];if(r>=0&&a>=0&&r!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=r>=0?r:a}return n}class Qw{constructor(e,t,n,s,r,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Uu(0),hi(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),Xw(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,hi(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return ur([],[0].concat(this.elementShape));const n=this.readMany(e);return Xw(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),uc(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return ur([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return Xw(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),to(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,vc(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,a=[];ui((()=>{t=Zi(t,[1,n,r]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],r];a[n]=Zi(so(t,i,o),this.elementShape)}return a}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,a)}}class ek{constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);Xw(t,e.shape,"TensorList shape mismatch: "),hi(e)})),this.idTensor=Uu(0),this.maxNumElements=s,hi(this.idTensor)}get id(){return this.idTensor.id}copy(){return new ek([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);Xw(e,this.elementShape,"TensorList shape mismatch: ");const s=Jw(this.elementShape,this.tensors,e);return ui((()=>{const e=this.tensors.map((e=>Zi(e,s)));return uc(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=Jw(this.elementShape,this.tensors,e),s=this.tensors.pop();return Xw(s.shape,e,"TensorList shape mismatch: "),Zi(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(Xw(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");hi(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);Xw(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=Jw(this.elementShape,this.tensors,t);return Zi(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);Xw(this.elementShape,t.shape,"TensorList shape mismatch: "),hi(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);Xw(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=Jw(this.elementShape,this.tensors,n);return 0===e.length?ur([],[0].concat(s)):ui((()=>{const t=e.map((e=>Zi(this.tensors[e],s)));return uc(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);Xw(this.elementShape,t,"TensorList shape mismatch: ");const n=Jw(this.elementShape,this.tensors,t);return 0===this.size()?ur([],[0].concat(n)):ui((()=>{const e=this.tensors.map((e=>Zi(e,n)));return to(e,0)}))}}const tk=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=uw("thenBranch",e,t,n),r=uw("elseBranch",e,t,n),a=uw("cond",e,t,n),i=uw("args",e,t,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=uw("body",e,t,n),r=uw("cond",e,t,n),a=uw("args",e,t,n),i=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[mw(uw("pred",e,t,n))];case"Switch":{const s=uw("pred",e,t,n);let r=uw("data",e,t,n);return r.kept||(r=mw(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==cw(e,t,n)));if(s){return[mw(cw(s,t,n))]}return}case"Enter":{const s=uw("frameName",e,t,n),r=uw("tensor",e,t,n);return n.enterFrame(s),[mw(r)]}case"Exit":{const s=uw("tensor",e,t,n);return n.exitFrame(),[mw(s)]}case"NextIteration":{const s=uw("tensor",e,t,n);return n.nextIteration(),[mw(s)]}case"TensorArrayV3":{const s=uw("size",e,t,n),r=uw("dtype",e,t,n),a=uw("elementShape",e,t,n),i=uw("dynamicSize",e,t,n),o=uw("clearAfterRead",e,t,n),l=uw("identicalElementShapes",e,t,n),u=uw("name",e,t,n),c=new Qw(u,r,s,a,l,i,o);return n.addTensorArray(c),[c.idTensor,Uu(1)]}case"TensorArrayWriteV3":{const s=uw("tensorArrayId",e,t,n),r=uw("index",e,t,n),a=uw("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const s=uw("tensorArrayId",e,t,n),r=uw("index",e,t,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=uw("tensorArrayId",e,t,n),r=uw("indices",e,t,n),a=uw("dtype",e,t,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=uw("tensorArrayId",e,t,n),r=uw("indices",e,t,n),a=uw("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const s=uw("tensorArrayId",e,t,n),r=n.getTensorArray(s.id),a=uw("dtype",e,t,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=uw("tensorArrayId",e,t,n),r=uw("tensor",e,t,n),a=uw("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const s=uw("tensorArrayId",e,t,n);return[Uu(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=uw("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=uw("tensorListId",e,t,n),r=uw("index",e,t,n),a=uw("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const s=uw("tensorListId",e,t,n),r=uw("index",e,t,n),a=uw("elementShape",e,t,n),i=uw("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=uw("indices",e,t,n),r=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new ek([],n,e.dtype,s),i=vc(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(uw("tensor",e,t,n),s,uw("elementShape",e,t,n),uw("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=uw("elementShape",e,t,n),r=uw("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function(e,t,n){return new ek([],e,t,n)}(s,r,uw(a,e,t,n));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const s=uw("tensorListId",e,t,n),r=uw("indices",e,t,n),a=uw("elementShape",e,t,n),i=uw("elementDType",e,t,n);return[n.getTensorList(s.id).gather(r,i,a)]}case"TensorListStack":{const s=uw("tensorListId",e,t,n),r=uw("elementShape",e,t,n),a=uw("elementDType",e,t,n),i=uw("numElements",e,t,n);return[n.getTensorList(s.id).stack(r,a,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);Xw(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=vc(e);return new ek(r,t,s)}(uw("tensor",e,t,n),uw("elementShape",e,t,n),uw("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":{const s=uw("tensorListId",e,t,n),r=n.getTensorList(s.id),a=uw("dtype",e,t,n),i=uw("elementShape",e,t,n);return[r.concat(a,i)]}case"TensorListPushBack":{const s=uw("tensorListId",e,t,n),r=uw("tensor",e,t,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=uw("tensorListId",e,t,n),r=uw("elementShape",e,t,n),a=uw("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=uw("tensor",e,t,n),r=uw("elementShape",e,t,n),a=function(e,t,n){let s=0;const r=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const a=Zw(e.shape.slice(1),n),i=0===s?0:e.size/s,o=ui((()=>{const n=[];e=Zi(e,[1,s,i]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:r[s-1],0],l=[1,t[s],i];n[s]=Zi(so(e,o,l),a)}return e.dispose(),n})),l=new ek([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(s,uw("lengths",e,t,n),r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function nk(e,t,n){const[s,r]=uw("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o="fusedbatchnorm"===s,l=uw("numArgs",e,t,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const u=uw("strides",e,t,n),c=fw(e,t,n),h=uw("dataFormat",e,t,n).toUpperCase(),p=uw("dilations",e,t,n),[d,f]=uw("args",e,t,n);return{stride:u,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:r,leakyreluAlpha:uw("leakyreluAlpha",e,t,n)}}function sk(e,t,n){return{boxes:uw("boxes",e,t,n),scores:uw("scores",e,t,n),maxOutputSize:uw("maxOutputSize",e,t,n),iouThreshold:uw("iouThreshold",e,t,n),scoreThreshold:uw("scoreThreshold",e,t,n),softNmsSigma:uw("softNmsSigma",e,t,n)}}class rk{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Uu(0),this.tensorMap=new Map,hi(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Uu(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),ui((()=>{const e=vc(t),s=n.length,r=e.length;o(s===r,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`));for(let t=0;t<s;t++){const s=n[t],r=e[t];hi(r),this.tensorMap.set(s,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return ui((()=>{const e=[];for(let s=0;s<n.length;s++){const r=n[s],a=this.findWithDefault(r,t);e.push(a)}return uc(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function ak(e,t,n,s){const r=((e,t,n)=>{switch(e.category){case"arithmetic":return ui((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[vi(uw("a",e,t,n),uw("b",e,t,n))];case"AddN":return[Ei(uw("tensors",e,t,n))];case"FloorMod":case"Mod":return[Jl(uw("a",e,t,n),uw("b",e,t,n))];case"Mul":return[Ci(uw("a",e,t,n),uw("b",e,t,n))];case"RealDiv":case"Div":return[Ii(uw("a",e,t,n),uw("b",e,t,n))];case"DivNoNan":return[Wo(uw("a",e,t,n),uw("b",e,t,n))];case"FloorDiv":return[Ni(uw("a",e,t,n),uw("b",e,t,n))];case"Sub":return[Il(uw("a",e,t,n),uw("b",e,t,n))];case"Minimum":return[Xl(uw("a",e,t,n),uw("b",e,t,n))];case"Maximum":return[Ul(uw("a",e,t,n),uw("b",e,t,n))];case"Pow":return[pu(uw("a",e,t,n),uw("b",e,t,n))];case"SquaredDifference":return[oc(uw("a",e,t,n),uw("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return ui((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[$i(uw("x",e,t,n))];case"Acos":return[Si(uw("x",e,t,n))];case"Acosh":return[Ti(uw("x",e,t,n))];case"Asin":return[_i(uw("x",e,t,n))];case"Asinh":return[Oi(uw("x",e,t,n))];case"Atan":return[Mi(uw("x",e,t,n))];case"Atan2":return[Li(uw("x",e,t,n),uw("y",e,t,n))];case"Atanh":return[zi(uw("x",e,t,n))];case"Ceil":return[fo(uw("x",e,t,n))];case"Complex":return[or(uw("real",e,t,n),uw("imag",e,t,n))];case"Cos":return[So(uw("x",e,t,n))];case"Cosh":return[To(uw("x",e,t,n))];case"Elu":return[Go(uw("x",e,t,n))];case"Erf":return[Ho(uw("x",e,t,n))];case"Exp":return[jo(uw("x",e,t,n))];case"Expm1":return[Ko(uw("x",e,t,n))];case"Floor":return[Zo(uw("x",e,t,n))];case"Log":return[hl(uw("x",e,t,n))];case"Log1p":return[pl(uw("x",e,t,n))];case"Imag":return[nl(uw("x",e,t,n))];case"Neg":return[wl(uw("x",e,t,n))];case"Reciprocal":return[Du(uw("x",e,t,n))];case"Real":return[Fu(uw("x",e,t,n))];case"Relu":return[_u(uw("x",e,t,n))];case"Round":return[Wu(uw("x",e,t,n))];case"Selu":return[Gu(uw("x",e,t,n))];case"Sigmoid":return[no(uw("x",e,t,n))];case"Sin":return[Ku(uw("x",e,t,n))];case"Sign":return[qu(uw("x",e,t,n))];case"Sinh":return[Xu(uw("x",e,t,n))];case"Softplus":return[kl(uw("x",e,t,n))];case"Sqrt":return[ic(uw("x",e,t,n))];case"Square":return[Zl(uw("x",e,t,n))];case"Tanh":return[ro(uw("x",e,t,n))];case"Tan":return[pc(uw("x",e,t,n))];case"ClipByValue":return[mo(uw("x",e,t,n),uw("clipValueMin",e,t,n),uw("clipValueMax",e,t,n))];case"Relu6":return[Ou(uw("x",e,t,n))];case"Rsqrt":return[Vu(cw(e.inputNames[0],t,n))];case"Prod":return[fu(uw("x",e,t,n),uw("axes",e,t,n))];case"LeakyRelu":return[il(uw("x",e,t,n),uw("alpha",e,t,n))];case"Prelu":return[du(uw("x",e,t,n),uw("alpha",e,t,n))];case"IsNan":return[al(cw(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return tk(e,t,n);case"convolution":return ui((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const s=uw("stride",e,t,n),r=uw("pad",e,t,n),a=uw("dataFormat",e,t,n).toUpperCase(),i=uw("dilation",e,t,n);return[ko(uw("x",e,t,n),uw("filter",e,t,n),s,r,a,i)]}case"Conv2D":{const s=uw("strides",e,t,n),r=fw(e,t,n),a=uw("dataFormat",e,t,n).toUpperCase(),i=uw("dilations",e,t,n);return[wo(uw("x",e,t,n),uw("filter",e,t,n),[s[1],s[2]],r,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=nk(e,t,n);return[Vc({x:uw("x",e,t,n),filter:uw("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=nk(e,t,n);return[Hc({x:uw("x",e,t,n),filter:uw("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=uw("outputShape",e,t,n),r=uw("strides",e,t,n),a=fw(e,t,n);return[No(uw("x",e,t,n),uw("filter",e,t,n),s,[r[1],r[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=uw("strides",e,t,n),r=fw(e,t,n),a=uw("dilations",e,t,n),i=uw("dataFormat",e,t,n).toUpperCase();return[Fo(uw("input",e,t,n),uw("filter",e,t,n),[s[1],s[2]],r,i,[a[1],a[2]])]}case"Conv3D":{const s=uw("strides",e,t,n),r=uw("pad",e,t,n),a=uw("dataFormat",e,t,n).toUpperCase(),i=uw("dilations",e,t,n);return[Io(uw("x",e,t,n),uw("filter",e,t,n),[s[1],s[2],s[3]],r,a,[i[1],i[2],i[3]])]}case"AvgPool":{const s=uw("strides",e,t,n),r=uw("pad",e,t,n),a=uw("kernelSize",e,t,n);return[Qi(uw("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=uw("strides",e,t,n),r=uw("pad",e,t,n),a=uw("kernelSize",e,t,n);return[Pl(uw("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=uw("strides",e,t,n),r=uw("pad",e,t,n),a=uw("kernelSize",e,t,n),i=uw("includeBatchInIndex",e,t,n),{result:o,indexes:l}=Vl(uw("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r,i);return[o,l]}case"AvgPool3D":{const s=uw("strides",e,t,n),r=uw("pad",e,t,n),a=uw("kernelSize",e,t,n);return[eo(uw("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=uw("strides",e,t,n),r=uw("pad",e,t,n),a=uw("kernelSize",e,t,n);return[Wl(uw("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=uw("strides",e,t,n),r=uw("pad",e,t,n),a=uw("dilations",e,t,n),i=s[1],o=s[2],l=a[1],u=a[2];return[_o(uw("x",e,t,n),uw("filter",e,t,n),[i,o],r,[l,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return ui((()=>((e,t,n)=>{switch(e.op){case"Fill":{const s=uw("shape",e,t,n),r=uw("dtype",e,t,n);return[Jo(s,uw("value",e,t,n),r)]}case"LinSpace":return[ul(uw("start",e,t,n),uw("stop",e,t,n),uw("num",e,t,n))];case"Multinomial":{const s=uw("logits",e,t,n),r=uw("numSamples",e,t,n),a=uw("seed",e,t,n);return[tu(s,r,a)]}case"OneHot":{const s=uw("indices",e,t,n),r=uw("depth",e,t,n),a=uw("onValue",e,t,n),i=uw("offValue",e,t,n);return[pa(s,r,a,i)]}case"Ones":return[jl(uw("shape",e,t,n),uw("dtype",e,t,n))];case"OnesLike":return[su(uw("x",e,t,n))];case"RandomUniform":return[Au(uw("shape",e,t,n),uw("minval",e,t,n),uw("maxval",e,t,n),uw("dtype",e,t,n))];case"Range":return[Ru(uw("start",e,t,n),uw("stop",e,t,n),uw("step",e,t,n),uw("dtype",e,t,n))];case"TruncatedNormal":{const s=uw("shape",e,t,n),r=uw("mean",e,t,n),a=uw("stdDev",e,t,n),i=uw("seed",e,t,n);return[xc(s,r,a,uw("dtype",e,t,n),i)]}case"Zeros":return[Hl(uw("shape",e,t,n),uw("dtype",e,t,n))];case"ZerosLike":return[Po(uw("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=sk(e,t,n),u=await Bh.nonMaxSuppressionWithScoreAsync(s,r,a,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=sk(e,t,n),l=uw("padToMaxOutputSize",e,t,n),u=await Bh.nonMaxSuppressionPaddedAsync(s,r,a,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=sk(e,t,n);return[await Bh.nonMaxSuppressionAsync(s,r,a,i,o)]}case"Where":{const s=qr(uw("condition",e,t,n),"bool"),r=[await Cc(s)];return s.dispose(),r}case"ListDiff":return ju(uw("x",e,t,n),uw("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return ui((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const s=uw("x",e,t,n),r=uw("k",e,t,n),a=uw("sorted",e,t,n),i=bc(s,r,a);return[i.values,i.indices]}case"Unique":{const s=uw("x",e,t,n),r=wc(s);return[r.values,r.indices]}case"UniqueV2":{const s=uw("x",e,t,n),r=uw("axis",e,t,n),a=wc(s,r);return[a.values,a.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return ui((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const s=uw("images",e,t,n),r=uw("size",e,t,n),a=uw("alignCorners",e,t,n),i=uw("halfPixelCenters",e,t,n);return[Bh.resizeBilinear(s,[r[0],r[1]],a,i)]}case"ResizeNearestNeighbor":{const s=uw("images",e,t,n),r=uw("size",e,t,n),a=uw("alignCorners",e,t,n),i=uw("halfPixelCenters",e,t,n);return[Bh.resizeNearestNeighbor(s,[r[0],r[1]],a,i)]}case"CropAndResize":{const s=uw("image",e,t,n),r=uw("boxes",e,t,n),a=uw("boxInd",e,t,n),i=uw("cropSize",e,t,n),o=uw("method",e,t,n),l=uw("extrapolationValue",e,t,n);return[Bh.cropAndResize(s,r,a,i,o,l)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return ui((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=uw("default",e,t,n);return[cw(e.name,t,n)||s];case"Placeholder":return[cw(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[mw(uw("x",e,t,n))];case"IdentityN":return uw("x",e,t,n).map((e=>mw(e)));case"Snapshot":return[mw(uw("x",e,t,n))];case"Shape":return[dc(uw("x",e,t,n).shape,"int32")];case"ShapeN":return uw("x",e,t,n).map((e=>dc(e.shape)));case"Size":return[Uu(uw("x",e,t,n).size,"int32")];case"Rank":return[Uu(uw("x",e,t,n).rank,"int32")];case"NoOp":return[Uu(1)];case"Print":const r=uw("x",e,t,n),a=uw("data",e,t,n),i=uw("message",e,t,n),o=uw("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<a.length;e++)console.log(Array.prototype.slice.call(a[e].dataSync()).slice(0,o));return[r];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return ui((()=>((e,t,n)=>{switch(e.op){case"Equal":return[zo(uw("a",e,t,n),uw("b",e,t,n))];case"NotEqual":return[nu(uw("a",e,t,n),uw("b",e,t,n))];case"Greater":return[el(uw("a",e,t,n),uw("b",e,t,n))];case"GreaterEqual":return[tl(uw("a",e,t,n),uw("b",e,t,n))];case"Less":return[ol(uw("a",e,t,n),uw("b",e,t,n))];case"LessEqual":return[ll(uw("a",e,t,n),uw("b",e,t,n))];case"LogicalAnd":return[Ml(uw("a",e,t,n),uw("b",e,t,n))];case"LogicalNot":return[Ll(uw("a",e,t,n))];case"LogicalOr":return[zl(uw("a",e,t,n),uw("b",e,t,n))];case"Select":case"SelectV2":return[Bo(uw("condition",e,t,n),uw("a",e,t,n),uw("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return ui((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[ha(uw("a",e,t,n),uw("b",e,t,n),uw("transposeA",e,t,n),uw("transposeB",e,t,n))];case"Einsum":return[Uo(uw("equation",e,t,n),...uw("tensors",e,t,n))];case"Transpose":return[da(uw("x",e,t,n),uw("perm",e,t,n))];case"_FusedMatMul":const[s,r]=uw("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o=uw("numArgs",e,t,n),l=uw("leakyreluAlpha",e,t,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=uw("args",e,t,n);return[jc({a:uw("a",e,t,n),b:uw("b",e,t,n),transposeA:uw("transposeA",e,t,n),transposeB:uw("transposeB",e,t,n),bias:u,activation:r,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return ui((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[oo(uw("x",e,t,n),uw("mean",e,t,n),uw("variance",e,t,n),uw("offset",e,t,n),uw("scale",e,t,n),uw("epsilon",e,t,n))];case"LRN":return[cl(uw("x",e,t,n),uw("radius",e,t,n),uw("bias",e,t,n),uw("alpha",e,t,n),uw("beta",e,t,n))];case"Softmax":return[ec(uw("x",e,t,n))];case"LogSoftmax":return[$l(uw("x",e,t,n))];case"SparseToDense":return[Rc(uw("sparseIndices",e,t,n),uw("outputShape",e,t,n),uw("sparseValues",e,t,n),uw("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return ui((()=>((e,t,n)=>{switch(e.op){case"Max":{const s=uw("axis",e,t,n),r=uw("keepDims",e,t,n);return[Nl(uw("x",e,t,n),s,r)]}case"Mean":{const s=uw("axis",e,t,n),r=uw("keepDims",e,t,n);return[Gl(uw("x",e,t,n),s,r)]}case"Min":{const s=uw("axis",e,t,n),r=uw("keepDims",e,t,n);return[Kl(uw("x",e,t,n),s,r)]}case"Sum":{const s=uw("axis",e,t,n),r=uw("keepDims",e,t,n);return[Cl(uw("x",e,t,n),s,r)]}case"All":{const s=uw("axis",e,t,n),r=uw("keepDims",e,t,n);return[Ai(uw("x",e,t,n),s,r)]}case"Any":{const s=uw("axis",e,t,n),r=uw("keepDims",e,t,n);return[Ri(uw("x",e,t,n),s,r)]}case"ArgMax":{const s=uw("axis",e,t,n);return[Fi(uw("x",e,t,n),s)]}case"ArgMin":{const s=uw("axis",e,t,n);return[Di(uw("x",e,t,n),s)]}case"Prod":{const s=uw("axis",e,t,n),r=uw("keepDims",e,t,n);return[fu(uw("x",e,t,n),s,r)]}case"Cumsum":{const s=uw("axis",e,t,n),r=uw("exclusive",e,t,n),a=uw("reverse",e,t,n);return[Eo(uw("x",e,t,n),s,r,a)]}case"Bincount":const s=uw("x",e,t,n),r=uw("weights",e,t,n),a=uw("size",e,t,n);return[ho(s,r,a)];case"DenseBincount":{const s=uw("x",e,t,n),r=uw("weights",e,t,n),a=uw("size",e,t,n),i=uw("binaryOutput",e,t,n);return[Ao(s,r,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return ui((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=uw("n",e,t,n),r=uw("axis",e,t,n);let a=uw("tensors",e,t,n);return a=a.slice(0,s),[to(a,r)]}case"Gather":{const s=uw("x",e,t,n),r=uw("indices",e,t,n);return[Qo(s,qr(r,"int32"),0)]}case"GatherV2":{const s=uw("axis",e,t,n),r=uw("batchDims",e,t,n),a=uw("x",e,t,n),i=uw("indices",e,t,n);return[Qo(a,qr(i,"int32"),s,r)]}case"Reverse":{const s=uw("dims",e,t,n),r=[];for(let e=0;e<s.length;e++)s[e]&&r.push(e);const a=uw("x",e,t,n);return[Mu(a,r)]}case"ReverseV2":{const s=uw("axis",e,t,n),r=uw("x",e,t,n);return[Mu(r,s)]}case"Slice":{const s=uw("begin",e,t,n),r=uw("size",e,t,n);return[so(uw("x",e,t,n),s,r)]}case"StridedSlice":{const s=uw("begin",e,t,n),r=uw("end",e,t,n),a=uw("strides",e,t,n),i=uw("beginMask",e,t,n),o=uw("endMask",e,t,n),l=uw("ellipsisMask",e,t,n),u=uw("newAxisMask",e,t,n),c=uw("shrinkAxisMask",e,t,n),h=uw("x",e,t,n);return[hc(h,s,r,a,i,o,l,u,c)]}case"Pack":return ui((()=>{const s=uw("axis",e,t,n),r=uw("tensors",e,t,n),a=r[0].shape,i=lc(r[0]).shape,o=r.map((e=>{const t=p(e.shape,a);if(!t&&!p(lc(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:Zi(e,a)}));return[uc(o,s)]}));case"Unpack":{const s=uw("axis",e,t,n),r=uw("tensor",e,t,n);return vc(r,s)}case"Tile":{const s=uw("reps",e,t,n);return[Xo(uw("x",e,t,n),s)]}case"Split":case"SplitV":{const s=uw("axis",e,t,n),r=uw("numOrSizeSplits",e,t,n),a=uw("x",e,t,n);return rc(a,r,s)}case"ScatterNd":{const s=uw("indices",e,t,n),r=uw("values",e,t,n),a=uw("shape",e,t,n);return[Ac(s,r,a)]}case"GatherNd":{const s=uw("x",e,t,n),r=uw("indices",e,t,n);return[Fc(s,r)]}case"SparseToDense":{const s=uw("sparseIndices",e,t,n),r=uw("outputShape",e,t,n),a=uw("sparseValues",e,t,n),i=uw("defaultValue",e,t,n);return[Rc(s,a,r,a.dtype===i.dtype?i:qr(i,a.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return ui((()=>((e,t,n)=>{switch(e.op){case"SparseReshape":{const{outputIndices:s,outputShape:r}=Vh.sparseReshape(uw("inputIndices",e,t,n),uw("inputShape",e,t,n),uw("newShape",e,t,n));return[s,r]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return ui((()=>((e,t,n)=>{switch(e.op){case"FFT":return[tc(uw("x",e,t,n))];case"IFFT":return[nc(uw("x",e,t,n))];case"RFFT":return[ac(uw("x",e,t,n))];case"IRFFT":return[sc(uw("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return ui((()=>((e,t,n)=>{switch(e.op){case"Cast":return[qr(uw("x",e,t,n),uw("dtype",e,t,n))];case"ExpandDims":{const s=uw("axis",e,t,n);return[qo(uw("x",e,t,n),s)]}case"Squeeze":{const s=uw("axis",e,t,n);return[lc(uw("x",e,t,n),s)]}case"Reshape":return[Zi(uw("x",e,t,n),uw("shape",e,t,n))];case"MirrorPad":return[Yl(uw("x",e,t,n),uw("padding",e,t,n),uw("mode",e,t,n))];case"PadV2":case"Pad":return[au(uw("x",e,t,n),uw("padding",e,t,n),uw("constantValue",e,t,n))];case"SpaceToBatchND":{const s=uw("blockShape",e,t,n),r=uw("paddings",e,t,n);return[cu(uw("x",e,t,n),s,r)]}case"BatchToSpaceND":{const s=uw("blockShape",e,t,n),r=uw("crops",e,t,n);return[io(uw("x",e,t,n),s,r)]}case"DepthToSpace":{const s=uw("blockSize",e,t,n),r=uw("dataFormat",e,t,n).toUpperCase();return[Ro(uw("x",e,t,n),s,r)]}case"BroadcastTo":return[po(uw("x",e,t,n),uw("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=uw("keyDType",e,t,n),a=uw("valueDType",e,t,n),i=new rk(r,a);return s.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const r=uw("tableHandle",e,t,n,s),a=uw("keys",e,t,n),i=uw("values",e,t,n),o=s.getHashTableById(r.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const r=uw("tableHandle",e,t,n,s),a=uw("keys",e,t,n),i=uw("defaultValue",e,t,n),o=s.getHashTableById(r.id);return[await o.find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const r=uw("tableHandle",e,t,n,s);return[s.getHashTableById(r.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const r=ow(e.op);if(r&&r.customExecutor)return r.customExecutor(new Kw(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return U(r)?r.then((e=>[].concat(e))):[].concat(r)}class ik{constructor(e={},t={},n={},s={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function ok(e,t,n,s){const r=new Set,a=[];let i=null,o=null;const l=new Set,u=Object.keys(e).map((e=>dw(e)[0]));let c=[];null!=s&&(c=s.map((e=>dw(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(hk(e)||pk(e)||dk(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&(-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:a,dynamicNode:i,syncInputs:o}}const lk=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],uk=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],ck=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function hk(e){return lk.indexOf(e.op)>=0}function pk(e){return uk.indexOf(e.op)>=0}function dk(e){return ck.indexOf(e.op)>=0}class fk{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new fk(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(e,t){const n=ok(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}return function(e,t,n){const{usedNodes:s,inputs:r}=n,a=[],i=Object.keys(r).map((e=>dw(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{s.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{s.has(e.name)&&a.push(e)})),null!=o&&o.forEach((e=>{s.has(e.name)&&a.push(e)}));const l=new Set,u=[];for(;a.length>0;){const e=a.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&s.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&a.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[dw(e)[0]])),r=t.map((e=>dw(e)[0]));let a=r.map((e=>this.graph.nodes[e]));0===a.length&&(a=this._outputs);const i=this.getCompilationKey(s,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,a),this.compiledMap.set(i,o));const l={},u={};return ui((()=>{const n=new ik(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=dw(t),a=[];a[r]=e[t],s[n]=a}));const a=this.getFrozenTensorIds(s),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!s[t.name]){const e=ak(t,s,n,this._resourceManager);if(U(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);s[t.name]=e,this.checkTensorForDisposal(t.name,t,s,n,a,r,i)}}return null==this.parent&&n.dispose(a),t.map((e=>cw(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,r,a,i){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[pw(e,n.currentContextId)]}(e.name,n,s);null!=t&&t.forEach((e=>{if(e&&!e.kept&&!r.has(e.id)){const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,s={},r={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const a=new ik(this.weightMap,s,r,this.functionExecutorMap),i=await this.executeWithControlFlow(e,a,t,n),o=t.map((e=>cw(e,i,a))),l=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.keys(i).forEach((e=>{i[e].forEach((e=>{!e||e.kept||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const r=Object.keys(e),a=r.map((e=>this.graph.nodes[dw(e)[0]])),i=n.map((e=>dw(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=ok(e,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=dw(t),r=[];r[s]=e[t],d[n]=r}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(a,p,t,d,g,m,i,f,l);await Promise.all(e)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!hk(e)&&!cw(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${r}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,s,r,a,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&uw("isConstant",e.node,s,n)&&([c]=hw(e.node.name,n)),null==s[e.node.name]){const h=ak(e.node,s,n,this._resourceManager);c||([c]=hw(e.node.name,n));const p=n.currentContext;U(h)?u.push(h.then((u=>(s[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l),u)))):(s[c]=h,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l))}else this.processChildNodes(e.node,t,n,s,r,l)}return u}processChildNodes(e,t,n,s,r,a){e.children.forEach((e=>{const[i]=hw(e.name,n);!r[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!cw(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!cw(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=dw(t),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value;o(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&o(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=dw(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=dw(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class mk{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class gk{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new mk}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=oa(e,this.loadOptions);else{const t=vr(e,this.loadOptions);if(0===t.length)t.push(oa(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=pr(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new fk(Dw.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Dw.Instance.transformGraph(e.modelInitializer);this.initializer=new fk(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=kr(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof Ss||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,s)=>(t[n]=e[s],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function yk(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new gk(e,t);return await n.load(),n}const bk="3.6.0";function xk(e,t,n=new Map,s=new Set){if(null==e)return null;if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(Ik(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const i=xk(e[a],t,n,s);r[a]=i}return s.delete(e),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function wk(e,t=vk){return kk(e,t)}function kk(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(Ik(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=kk(e.map((e=>e[a])),t,n);r[a]=s}return n.delete(s),r}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function vk(e){return null===e?null:Ik(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function Nk(e,t){const n=new Map;xk(e,t,n);for(const e of Array.from(n.keys())){const t=n.get(e);if(U(t)){const s=await t;n.set(e,s)}}return xk(e,t,n)}function Ik(e){return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof Ss))}function Ck(e){return function(e,t){return xk(e,t)}(e,$k)}function $k(e){return e instanceof Ss?{value:e.clone(),recurse:!1}:Ik(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class Sk{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class Tk extends Sk{constructor(){super(Tk.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function Ek(e){return new Dk(e)}function Ak(e){return new _k(e)}function Rk(e,t){return new Hk(e,t)}Tk.INITIAL_CAPACITY=32;class Fk{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new Wk(this,e)}filter(e){return new Bk(this,e)}map(e){return new Pk(this,e)}mapAsync(e){return new Vk(this,e)}serialMapAsync(e){return new Vk(this,e).serial()}flatmap(e){return new Gk(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new zk(this,e,t)}columnMajorBatch(e,t=!0,n=vk){return this.rowMajorBatch(e,t).map((e=>wk(e,n)))}concatenate(e,t){return new Hk(Ek([this,e]),t)}take(e){return e<0||null==e?this:new Lk(this,e)}skip(e){return e<0||null==e?this:new Mk(this,e)}prefetch(e){return new Kk(this,e)}shuffle(e,t){return new Xk(this,e,t)}serial(){return new Ok(this)}}class Dk extends Fk{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:Ck(e),done:!1}}}class _k extends Fk{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class Ok extends Fk{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class Mk extends Fk{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;ci(e.value)}return this.upstream.next()}}class Lk extends Fk{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class zk extends Fk{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Bk extends Fk{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;ci(e.value)}}}class Pk extends Fk{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Ws(e.value),n=this.transform(e.value),s=Ws(n);for(const e of t)Ps(e,s)||e.dispose();return{value:n,done:!1}}}class Wk extends Fk{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class Vk extends Fk{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Ws(e.value),n=await this.transform(e.value),s=Ws(n);for(const e of t)Ps(e,s)||e.dispose();return{value:n,done:!1}}}class Uk extends Fk{constructor(){super(),this.outputQueue=new Tk,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Gk extends Uk{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=Ws(e.value),n=this.transform(e.value),s=Ws(n);this.outputQueue.pushAll(n);for(const e of t)Ps(e,s)||e.dispose();return!0}}class Hk extends Fk{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var jk;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(jk||(jk={}));class qk extends Fk{constructor(e,t=jk.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const s=await Nk(this.iterators,(function(e){if(e instanceof Fk){return{value:e.next().then((e=>(t++,e.done&&n++,e.value))),recurse:!1}}return{value:null,recurse:!0}}));if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case jk.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case jk.SHORTEST:return{value:null,done:!0};case jk.LONGEST:}return this.count++,{value:s,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class Kk extends Fk{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new Sk(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class Xk extends Kk{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Iu(n||cs().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Yk{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return o(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),Jk((async()=>(await n.iterator()).columnMajorBatch(e,t,Zk)),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Jk((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,Jk((async()=>(await t.iterator()).filter((t=>ui((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return Jk((async()=>(await t.iterator()).map((t=>ui((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return Jk((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return Jk((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Jk((async()=>Rk(Ak((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Jk((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=Iu(t||cs().toString());return Jk((async()=>{let t=r.int32();return n&&(t+=r.int32()),(await s.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Jk((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Jk(e,t=null){return new class extends Yk{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function Zk(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(s=n)||"object"!=typeof s&&"function"!=typeof s||Array.isArray(n)||"object"==typeof n&&n instanceof Ss||C(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof Ss?uc(e):ur(e)}(e),recurse:!1}}var n,s;return{value:null,recurse:!0}}Yk.MAX_BUFFER_SIZE=1e4;class Qk extends Yk{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map((e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e)))}}const ev=Symbol("out"),tv=Symbol("field"),nv=Symbol("quote"),sv=Symbol("quoteafterquote"),rv=Symbol("quoteinquote");class av extends Yk{constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new Qk(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(o(null==t.delimiter,(()=>"Delimiter should not be provided when delimWhitespace is true.")),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&o(e.length===this.fullColumnNames.length,(()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+").")),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce(((e,t)=>(e[t]=e[t]+1||1,e)),{}),n=Object.keys(t).filter((e=>t[e]>1));if(o(0===n.length,(()=>"Duplicate column names found: "+n.toString())),this.columnConfigs)for(const e of Object.keys(this.columnConfigs)){if(-1===this.fullColumnNames.indexOf(e))throw new Error('The key "'+e+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").")}this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const n=t.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map((e=>this.makeDataElement(e)))}makeDataElement(e){const t=this.parseRow(e),n={},s={};for(let r=0;r<this.fullColumnNames.length;r++){const a=this.fullColumnNames[r],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=t[r];let l=null;if(""===o)if(i&&void 0!==i.default)l=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${e}`);l=void 0}else{const e=Number(o);if(isNaN(e))l=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":l=e;break;case"int32":l=Math.floor(e);break;case"bool":l=this.getBoolean(o);break;default:l=e}else l=e}i&&i.isLabel?s[a]=l:n[a]=l}}return 0===Object.keys(s).length?n:{xs:n,ys:s}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const n=[];let s=0;const r=e.length;let a=ev;for(let t=0;t<r;t++)switch(a){case ev:switch(e.charAt(t)){case'"':s=t+1,a=nv;break;case this.delimiter:if(s=t+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=ev;break;default:a=tv,s=t}break;case tv:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(s,t)),a=ev,s=t+1}break;case nv:switch(e.charAt(t)){case'"':a=sv}break;case sv:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(s,t-1)),a=ev,s=t+1;break;case'"':a=nv;break;default:a=rv}break;case rv:switch(e.charAt(t)){case'"':a=nv}}if(a===sv?n.push(e.substring(s,r-1)):n.push(e.substring(s)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class iv extends Fk{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(j().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const t=new iv(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(e){throw new Error(`Error thrown while initializing video stream: ${e.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise((s=>{const r=setInterval((()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&s({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(r),s({freqDataQueue:e,timeDataQueue:t}))}),this.fftSize/this.sampleRateHz*1e3)}))}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach(((e,s)=>n.set(e,s*t))),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(h(t));return n.set(e,n.length-e.length),ur(n,t)}}class ov extends Fk{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=dc([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,s=(1-t)/2,r=n+e,a=t+s;this.cropBox=fc([s,n,a,r],[1,4])}else this.cropBox=fc([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(j().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new ov(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&o("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,(()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`));try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise((e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}}))}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=wa(this.webcamVideoElement)}catch(e){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(e){throw new Error(`Error thrown cropping the video: ${e.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return ui((()=>{const t=qo(qr(e,"float32"),0);let n;n=Bh.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const s=n.shape;return Zi(n,s.slice(1))}))}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach((e=>e.stop()));try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class lv{}class uv extends Fk{split(e){return new cv(this,e)}}class cv extends uv{constructor(e,t){super(),this.upstream=e,this.impl=new hv(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class hv extends Uk{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const e of t.slice(0,-1))this.outputQueue.push(e);return this.carryover=t[t.length-1],!0}}class pv extends Fk{decodeUTF8(){return new dv(this)}}class dv extends uv{constructor(e){super(),this.upstream=e,this.impl=new fv(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class fv extends Uk{constructor(e){if(super(),this.upstream=e,j().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=require("string_decoder");this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=j().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class mv extends pv{constructor(e,t={}){super(),this.file=e,this.options=t,o(e instanceof Uint8Array||!!j().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),(()=>"FileChunkIterator only supports File, Blob and Uint8Array right now.")),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise(((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const s=new FileReader;s.onload=n=>{let r=s.result;if(r instanceof ArrayBuffer&&(r=new Uint8Array(r)),!(r instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(r)},s.onabort=e=>t(new Error("Aborted")),s.onerror=e=>t(new Error(e.type));const r=this.file.slice(this.offset,n);s.readAsArrayBuffer(r)}this.offset=n}));return{value:await e,done:!1}}}const gv=e=>({method:e.method,headers:e.headers,body:e.body,mode:e.mode,credentials:e.credentials,cache:e.cache,redirect:e.redirect,referrer:e.referrer,integrity:e.integrity});function yv(e){return"string"==typeof e&&"file://"===e.substr(0,7)}class bv extends lv{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(yv(this.input)&&j().get("IS_NODE")){const e=require("fs");this.input=e.readFileSync(this.input.substr(7))}return new mv(this.input,this.options)}}class xv extends lv{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return yv(this.url)?new bv(this.url,this.fileOptions).iterator():async function(e,t={}){let n,s;"string"==typeof e?n=e:(n=e.url,s=gv(e));const r=await hs(n,s);if(r.ok){const e=new Uint8Array(await r.arrayBuffer());return new mv(e,t)}throw new Error(r.statusText)}(this.url,this.fileOptions)}}var wv=Object.freeze({__proto__:null,array:function(e){return Jk((async()=>Ek(e)),e.length)},Dataset:Yk,zip:function(e){if(!Ik(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return Jk((async()=>function(e,t=jk.FAIL){return new qk(e,t)}(await Nk(e,(e=>{if(e instanceof Yk)return{value:e.iterator(),recurse:!1};if(Ik(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")})),jk.SHORTEST)),t)},CSVDataset:av,TextLineDataset:Qk,csv:function(e,t={}){return new av(new xv(e),t)},func:function(e){const t=Ak(e);return Jk((async()=>t))},generator:function(e){return Jk((async()=>{const t=await e();return Ak((()=>t.next()))}))},microphone:async function(e){return iv.create(e)},webcam:async function(e,t){return ov.create(e,t)},FileDataSource:bv,URLDataSource:xv,version_data:"3.6.0"});function kv(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&o("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const vv=Ic;class Nv extends t{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new e(this,ii())}nextDataId(){return Nv.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,j().get("IS_NODE")&&hp("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&T(n[0])){const r=n.map((e=>ps(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){return pp(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>ds(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return jr(e.shape,e.dtype,n)}makeOutput(e,t,n){const s=this.write(e,t,n);return ii().makeTensorFromDataId(s,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=cs();e();return{kernelMs:cs()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){kv([e],"where");const t=this.readSync(e.dataId);return vv(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function Iv(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}Nv.nextDataId=0;const Cv={kernelName:"Abs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;kv(t,"abs");let s=new Float32Array(h(t.shape));return s=Iv(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,"float32")}};function $v(e){return(t,n,s,r,a)=>{const i=Lo(t,n),o=i.length,l=_(i),u=w(a,h(i)),c=t.length,p=n.length,d=_(t),f=_(n),m=Oo(t,i),g=Oo(n,i);if(m.length+g.length===0)for(let t=0;t<u.length;++t)u[t]=e(s[t%s.length],r[t%r.length]);else for(let t=0;t<u.length;++t){const n=V(t,o,l),a=n.slice(-c);m.forEach((e=>a[e]=0));const i=W(a,c,d),h=n.slice(-p);g.forEach((e=>h[e]=0));const y=W(h,p,f);u[t]=e(s[i],r[y])}return[u,i]}}function Sv(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const Tv={kernelName:"Complex",backendName:"cpu",kernelFunc:Sv};function Ev(e,t,n="float32"){if("complex64"===n){return Sv({inputs:{real:Ev(e,t,"float32"),imag:Ev(e,t,"float32")},backend:e})}const s=z(h(t),n);return e.makeTensorInfo(t,n,s)}function Av(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const Rv={kernelName:"Identity",backendName:"cpu",kernelFunc:Av};function Fv(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Dv={kernelName:"Real",backendName:"cpu",kernelFunc:Fv};function _v(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return Av({inputs:{x:r},backend:n});const e=Ev(n,r.shape,r.dtype),t=_v({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=Sv({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=Fv({inputs:{input:r},backend:n}),t=_v({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!I(r.dtype,a)){const e=Av({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}if("int32"===a){const e=n.data.get(r.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(r.shape,"int32",t)}if("bool"===a){const e=n.data.get(r.dataId).values,t=us([0],r.dtype),[s,a]=$v(((e,t)=>e!==t?1:0))(r.shape,[],e,t,"bool");return n.makeTensorInfo(a,"bool",s)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`)}const Ov={kernelName:"Cast",backendName:"cpu",kernelFunc:_v};function Mv(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a:a,b:i}=n,o=r;kv([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c=s||a.dtype,[h,p]=t(a.shape,i.shape,l,u,c);return o.makeTensorInfo(p,c,h)}:({inputs:e,backend:r})=>{const{a:a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=_v({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=_v({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),k=Sv({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),k}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function Lv(e){return(t,n,s,r,a,i)=>{const o=Lo(t,n),l=h(o),u=o.length,c=_(o),p=w("float32",l),d=w("float32",l),f=Oo(t,o),m=Oo(n,o),g=pp(s,r),y=pp(a,i),b=t.length,x=_(t),k=n.length,v=_(n);if(f.length+m.length===0)for(let t=0;t<p.length;t++){const n=t%g.length,s=t%y.length,r=e(g[2*n],g[2*n+1],y[2*s],y[2*s+1]);p[t]=r.real,d[t]=r.imag}else for(let t=0;t<p.length;t++){const n=V(t,u,c),s=n.slice(-b);f.forEach((e=>s[e]=0));const r=W(s,b,x),a=n.slice(-k);m.forEach((e=>a[e]=0));const i=W(a,k,v),o=e(g[2*r],g[2*r+1],y[2*i],y[2*i+1]);p[t]=o.real,d[t]=o.imag}return[p,d,o]}}const zv=$v(((e,t)=>e+t)),Bv=Lv(((e,t,n,s)=>({real:e+n,imag:t+s}))),Pv=Mv(ee,zv,Bv),Wv={kernelName:ee,backendName:"cpu",kernelFunc:Pv};function Vv(e,t,n,s,r){const a=h(s),i=z(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(i[s]+=a>0?t[n]:1)}return i}function Uv(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=jr([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,r),o,a):i.set(i.get(o,a)+1,o,a))}return i}function Gv(e){return(t,n,s)=>{const r=w(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],s);return r}}function Hv(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(kv(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=h(i.shape),c=n||i.dtype,p=k(c,u);for(let e=0;e<u;++e)p[e]=t(l[e],r);return o.makeTensorInfo(i.shape,c,p)}}function jv(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(kv(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,r);return o.makeTensorInfo(i.shape,u,c)}}const qv=Gv((e=>Math.ceil(e))),Kv={kernelName:"Ceil",backendName:"cpu",kernelFunc:jv("Ceil",qv)};function Xv(e,t,n,s){const r=k(n,h(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=h(e.shape);r.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const a="string"===n?Fp(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]}))}return r}const Yv=Gv((e=>Math.exp(e))),Jv=jv(Ye,Yv),Zv={kernelName:Ye,backendName:"cpu",kernelFunc:Jv},Qv=Gv((e=>Math.expm1(e))),eN={kernelName:"Expm1",backendName:"cpu",kernelFunc:jv("Expm1",Qv)},tN=Gv((e=>Math.floor(e))),nN={kernelName:"Floor",backendName:"cpu",kernelFunc:jv("Floor",tN)};function sN(e,t,n){const s=jr(n,e.dtype);for(let n=0;n<s.size;++n){const r=s.indexToLoc(n).slice(),a=r[0],i=r[2],o=t.locToIndex([a,i]);r[2]=t.values[o];const l=e.locToIndex(r);s.values[n]=e.values[l]}return s}const rN=$v(((e,t)=>e>t?1:0)),aN={kernelName:"Greater",backendName:"cpu",kernelFunc:Mv("Greater",rN,null,"bool")},iN=$v(((e,t)=>e<t?1:0)),oN={kernelName:"Less",backendName:"cpu",kernelFunc:Mv("Less",iN,null,"bool")};function lN(e,t,n){const s=(t-e)/(n-1),r=z(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r}const uN=Gv((e=>Math.log(e))),cN=jv(xt,uN),hN={kernelName:xt,backendName:"cpu",kernelFunc:cN};function pN(e,t,n,s){const r=w(s,h(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];t>a&&(a=t)}r[n]=a}return r}const dN=$v(((e,t)=>Math.max(e,t))),fN={kernelName:"Maximum",backendName:"cpu",kernelFunc:Mv("Maximum",dN)},mN=$v(((e,t)=>Math.min(e,t))),gN={kernelName:"Minimum",backendName:"cpu",kernelFunc:Mv("Minimum",mN)},yN=$v(((e,t)=>e*t)),bN=Lv(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),xN=Mv("Multiply",yN,bN),wN={kernelName:"Multiply",backendName:"cpu",kernelFunc:xN};function kN(e,t,n){const s=ls(-1,n);return yN([],t,s,e,n)}const vN={kernelName:"Neg",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;kv(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=kN(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},NN=$v(((e,t)=>e!==t?1:0)),IN={kernelName:"NotEqual",backendName:"cpu",kernelFunc:Mv("NotEqual",NN,null,"bool")};function CN(e,t,n,s,r){const a=t.length,i=h(t),o=_(t),l=_(r),u=w(n,h(r));for(let t=0;t<i;++t){const n=V(t,a,o),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[s[e]];u[W(r,a,l)]=e[t]}return u}function $N(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;kv(r,"transpose");const i=r.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=r.shape[a[e]];const l=CN(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const SN={kernelName:"Transpose",backendName:"cpu",kernelFunc:$N};function TN(e,t,n,s){const[r,a]=El(e,s),i=Ms(t,"int32"),o=z(h(r),i),l=h(a);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:r,outDtype:i}}const EN={kernelName:"Prod",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;kv(r,"prod");const o=r.shape.length,l=b(a,r.shape),u=Fl(l,o);let c=l,h=r;const p=[];null!=u&&(h=$N({inputs:{x:r},backend:n,attrs:{perm:u}}),p.push(h),c=_l(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=TN(h.shape,h.dtype,d,c);let y=m;return i&&(y=Al(m,l)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function AN(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return z(0,s);const r=z(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+n;return r}const RN=Gv((e=>1/Math.sqrt(e))),FN={kernelName:"Rsqrt",backendName:"cpu",kernelFunc:jv("Rsqrt",RN)};function DN(e,t,n,s,r){const a=Pa(s,t,n),i=h(n),o=_(s);if(a){const n=Wa(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l=jr(s,r,"string"===r?Fp(e):e),u=jr(n,r);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===r?Dp(u.values):u.values}function _N(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;kv(r,"slice");const[o,l]=Va(r,a,i);Ta(r,o,l);const u=DN(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const ON={kernelName:"Slice",backendName:"cpu",kernelFunc:_N};function MN(e,t,n,s,r,a,i){const o=t[0],l=a[0],u=new Array(l),c=new Array(o),h=t[1];if(0===l){if(0!==o)throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${o}`);return[k(n,0),[0,h],k(r,0),u,c]}let p=!0,d=0;const f=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*h];if(n<0)throw new Error(`indices(${t}, 0) is invalid: ${n} < 0`);if(n>=l)throw new Error(`indices(${t}, 0) is invalid: ${n} >= ${l}`);++f[n],p=p&&n>=d,d=n}let m=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&p){const t=e,n=s;for(let e=0;e<o;++e)c[e]=e;return[t,[o,h],n,u,c]}{const t=f[l-1],a=k(n,t*h),p=k(r,t),d=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*h],r=d[n],i=(0===n?0:f[n-1])+r;d[n]++;for(let n=0;n<h;++n)a[i*h+n]=e[t*h+n];p[i]=s[t],c[t]=i}for(let e=0;e<l;++e){if(0===d[e]){const t=0===e?0:f[e-1];a[t*h+0]=e;for(let e=1;e<h;++e)a[t*h+e]=0;p[t]=i}}return[a,[o,h],p,u,c]}}function LN(e,t,n,s,r){const a=h(s),i=t[0],o=r.length,l=[];let u=1,c=-1;for(let e=0;e<o;++e){const t=r[e];if(-1===t){if(-1!==c)throw new Error(`only one output dimension may be -1, not both ${c} and ${e}`);c=e,l.push(1)}else{if(t<0)throw new Error(`size ${e} must be non-negative, not ${t}`);u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(a/u);if(u*e!==a)throw new Error(`Input to reshape is a SparseTensor with ${a}\n          dense values, but the requested shape requires a multiple of ${u}. inputShape=${s} outputShape= ${l}`);l[c]=e}const p=h(l);if(p!==a)throw new Error(`Input to reshape is a tensor with ${a} dense values, but the requested shape has ${p}. inputShape=${s} outputShape=${l}`);const d=s.length,f=[];if(d>0){f[d-1]=1;for(let e=d-2;e>=0;--e)f[e]=f[e+1]*s[e+1]}const m=[];if(o>0){m[o-1]=1;for(let e=o-2;e>=0;--e)m[e]=m[e+1]*l[e+1]}const g=k(n,i*o);for(let t=0;t<i;++t){let n=0;for(let s=0;s<d;++s)n+=e[t*d+s]*f[s];for(let e=0;e<o;++e)g[t*o+e]=Math.trunc(n/m[e]),n%=m[e]}return[g,[i,o],l]}const zN=$v(((e,t)=>{const n=e-t;return n*n})),BN={kernelName:"SquaredDifference",backendName:"cpu",kernelFunc:Mv("SquaredDifference",zN)};function PN(e,t,n,s){const r=jr(e,t.dtype);for(let e=0;e<r.size;e++){const a=r.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+s[e];r.set(t.get(...i),...a)}return r}const WN=$v(((e,t)=>e-t)),VN=Lv(((e,t,n,s)=>({real:e-n,imag:t-s}))),UN=Mv(_n,WN,VN),GN={kernelName:_n,backendName:"cpu",kernelFunc:UN};function HN(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=jr(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const a=e.locToIndex(r);s.values[t]=e.values[a]}return s}function jN(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=w(n,i*s),u=w("int32",i*s);for(let t=0;t<i;t++){const n=t*o,r=e.subarray(n,n+o),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort(((e,t)=>t.value-e.value));const i=t*s,c=l.subarray(i,i+s),h=u.subarray(i,i+s);for(let e=0;e<s;e++)c[e]=a[e].value,h[e]=a[e].index}const c=t.slice();return c[c.length-1]=s,[jr(c,n,l),jr(c,"int32",u)]}function qN(e,t,n,s){const r=b(t,n)[0],a=[1,n[0],1];for(let e=0;e<r;e++)a[0]*=n[e];a[1]=n[r];for(let e=r+1;e<n.length;e++)a[2]*=n[e];const i={},o=new Int32Array(n[r]),l=new Ns(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new Ns(h,s);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)p.set(l.get(n,e,s),n,t,s)}));const d=n.slice();return d[r]=h[1],{outputValues:p.values,outputShape:d,indices:o}}var KN=Object.freeze({__proto__:null,simpleAbsImpl:Iv,addImpl:zv,bincountImpl:Vv,bincountReduceImpl:Uv,ceilImpl:qv,concatImpl:Xv,expImpl:Yv,expm1Impl:Qv,floorImpl:tN,gatherV2Impl:sN,greaterImpl:rN,lessImpl:iN,linSpaceImpl:lN,logImpl:uN,maxImpl:pN,maximumImpl:dN,minimumImpl:mN,multiplyImpl:yN,negImpl:kN,notEqualImpl:NN,prodImpl:TN,rangeImpl:AN,rsqrtImpl:RN,sliceImpl:DN,sparseFillEmptyRowsImpl:MN,sparseReshapeImpl:LN,squaredDifferenceImpl:zN,stridedSliceImpl:PN,subImpl:WN,tileImpl:HN,topKImpl:jN,transposeImpl:CN,uniqueImpl:qN});xi("cpu",(()=>new Nv),1);const XN=Hv(je,(e=>e>=0?e:Math.exp(e)-1)),YN={kernelName:je,backendName:"cpu",kernelFunc:XN};function JN(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;kv([r],"leakyRelu");const i=h(r.shape),o=n.data.get(r.dataId).values,l=w("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(r.shape,"float32",l)}const ZN={kernelName:"LeakyRelu",backendName:"cpu",kernelFunc:JN},QN=$v(((e,t)=>e<0?t*e:e));function eI(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;kv([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=QN(s.shape,r.shape,a,i,s.dtype);return n.makeTensorInfo(l,s.dtype,o)}const tI={kernelName:"Prelu",backendName:"cpu",kernelFunc:eI},nI=Hv("Relu",(e=>Math.max(0,e))),sI={kernelName:"Relu",backendName:"cpu",kernelFunc:nI},rI=Hv("Relu6",(e=>Math.min(Math.max(0,e),6))),aI={kernelName:"Relu6",backendName:"cpu",kernelFunc:rI},iI=Hv("Sigmoid",(e=>1/(1+Math.exp(-e)))),oI={kernelName:"Sigmoid",backendName:"cpu",kernelFunc:iI};function lI(e,t,n,s,r){if("linear"===n)return Av({inputs:{x:t},backend:e});if("relu"===n)return nI({inputs:{x:t},backend:e});if("elu"===n)return XN({inputs:{x:t},backend:e});if("relu6"===n)return rI({inputs:{x:t},backend:e});if("prelu"===n)return eI({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return JN({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return iI({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function uI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=h(r.shape),l=y(a,i),u=h(l);o(i===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const c=n.data.get(r.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.real,t=c.complexTensorInfos.imag;e.shape=l,t.shape=l}return{dataId:r.dataId,shape:l,dtype:r.dtype}}const cI={kernelName:"Reshape",backendName:"cpu",kernelFunc:uI};function hI(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:l}=s;kv([r,a],"matMul");const u=r.shape.length,c=a.shape.length,p=i?r.shape[u-2]:r.shape[u-1],d=l?a.shape[c-1]:a.shape[c-2],f=i?r.shape[u-1]:r.shape[u-2],m=l?a.shape[c-2]:a.shape[c-1],g=r.shape.slice(0,-2),y=a.shape.slice(0,-2),b=h(g),x=h(y);o(u>=2&&c>=2&&(b===x||1===b||1===x),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${g}) and (${y}).`));const w=(b>x?r.shape.slice(0,-2):a.shape.slice(0,-2)).concat([f,m]);o(p===d,(()=>`Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${l} must match.`));const k=l?[x,m,d]:[x,d,m],v=uI({inputs:{x:r},backend:n,attrs:{shape:i?[b,p,f]:[b,f,p]}}),N=uI({inputs:{x:a},backend:n,attrs:{shape:k}}),I=i?v.shape[1]:v.shape[2],C=i?v.shape[2]:v.shape[1],$=l?N.shape[1]:N.shape[2],S=Math.max(b,x),T=n.data.get(v.dataId).values,E=n.data.get(N.dataId).values,A=_(v.shape),R=_(N.shape),[F,D,O]=i?[A[0],1,A[1]]:[A[0],A[1],1],[M,L,z]=l?[1,R[1],R[0]]:[R[1],1,R[0]],B=C*$,P=jr([S,C,$],v.dtype),W=P.values,V=n.blockSize;for(let e=0;e<S;e++)for(let t=0;t<C;t+=V)for(let n=0;n<$;n+=V)for(let s=0;s<I;s+=V){const r=Math.min(t+V,C),a=Math.min(n+V,$),i=Math.min(s+V,I);for(let o=t;o<r;o++)for(let t=n;t<a;t++){let n=0;for(let r=s;r<i;r++){const s=Math.min(e,b-1)*F,a=Math.min(e,x-1)*z;n+=T[s+o*D+r*O]*E[r*M+t*L+a]}W[e*B+(o*$+t)]+=n}}return n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(N),n.makeTensorInfo(w,P.dtype,P.values)}const pI={kernelName:"BatchMatMul",backendName:"cpu",kernelFunc:hI};const dI={kernelName:"_FusedMatMul",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=hI({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=Pv({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=lI(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}},fI={kernelName:"Acos",backendName:"cpu",kernelFunc:Hv("Acos",(e=>Math.acos(e)))},mI={kernelName:"Acosh",backendName:"cpu",kernelFunc:Hv("Acosh",(e=>Math.acosh(e)))};const gI={kernelName:"AddN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;kv(t,"addN");const r=s.map((e=>n.data.get(e.dataId).values)),a=jr(s[0].shape,s[0].dtype),i=a.values;for(let e=0;e<s.length;e++){const t=r[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};const yI={kernelName:"All",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;kv(r,"all");const o=b(a,r.shape);let l=o;const u=Fl(l,r.shape.length);let c=r;null!=u&&(c=$N({inputs:{x:r},backend:n,attrs:{perm:u}}),l=_l(l.length,r.shape.length)),Rl("all",l,c.shape.length);const[p,d]=El(c.shape,l),f=h(d),m=z(h(p),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n&&s}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(p,c.dtype,m);if(i){const e=uI({inputs:{x:y},backend:n,attrs:{shape:Al(p,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const bI={kernelName:"Any",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;kv(r,"any");const o=b(a,r.shape);let l=o;const u=Fl(l,r.shape.length);let c=r;null!=u&&(c=$N({inputs:{x:r},backend:n,attrs:{perm:u}}),l=_l(l.length,r.shape.length)),Rl("any",l,c.shape.length);const[p,d]=El(c.shape,l),f=h(d),m=z(h(p),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];n=n||s}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(p,c.dtype,m);if(i){const e=uI({inputs:{x:y},backend:n,attrs:{shape:Al(p,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const xI={kernelName:"ArgMax",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;kv(r,"argMax");let i=b(a,r.shape);const o=Fl(i,r.shape.length);let l=r;const u=[];null!=o&&(l=$N({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=_l(i.length,l.shape.length)),i=[i[0]],Rl("argMax",i,l.shape.length);const[c,p]=El(l.shape,i),d=z(h(c),"int32"),f=h(p),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const r=m[t+e];r>n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const wI={kernelName:"ArgMin",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;kv(r,"argMin");let i=b(a,r.shape);const o=Fl(i,r.shape.length);let l=r;const u=[];null!=o&&(l=$N({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=_l(i.length,l.shape.length)),i=[i[0]],Rl("argMin",i,l.shape.length);const[c,p]=El(l.shape,i),d=z(h(c),"int32"),f=h(p),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const r=m[t+e];r<n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},kI={kernelName:"Asin",backendName:"cpu",kernelFunc:Hv("Asin",(e=>Math.asin(e)))},vI={kernelName:"Asinh",backendName:"cpu",kernelFunc:Hv("Asinh",(e=>Math.asinh(e)))},NI={kernelName:"Atan",backendName:"cpu",kernelFunc:Hv("Atan",(e=>Math.atan(e)))},II={kernelName:"Atan2",backendName:"cpu",kernelFunc:Mv("Atan2",$v(((e,t)=>Math.atan2(e,t))))},CI={kernelName:"Atanh",backendName:"cpu",kernelFunc:Hv("Atanh",(e=>Math.atanh(e)))};function $I(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=jr(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*y,m=t*s[0];for(let t=0;t<r.inChannels;++t)for(let y=0;y<r.outHeight;++y){const w=y*i-p,k=Math.max(0,w),v=Math.min(r.inHeight,c+w),N=n+y*b;for(let n=0;n<r.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let n=k;n<v;n+=l){const r=m+n*s[1];for(let n=c;n<p;n+=u){const i=e[r+n*s[2]+t];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[N+n*x+t]="avg"===a?b/w:y}}}return m}function SI(e,t,n,s,r=!1,a=!1){const i=jr(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=jr(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+g);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(e,n,o,t);u>w&&(w=u,k=r?a?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*p+l)}}i.set(k,e,n,o,t)}}return i}function TI(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=jr(r.outShape,n),w=x.values,k=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],v=r.outShape[2]*r.outShape[3]*r.outShape[4],N=r.outShape[3]*r.outShape[4],I=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*k,x=t*s[0];for(let t=0;t<r.inChannels;++t)for(let k=0;k<r.outDepth;++k){const C=k*i-m;let $=C;for(;$<0;)$+=u;const S=Math.min(r.inDepth,p+C),T=n+k*v;for(let n=0;n<r.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(r.inHeight,d+i),k=T+n*N;for(let n=0;n<r.outWidth;++n){const i=n*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(r.inWidth,f+i),g=k+n*I;let v=b,N=0,C=0;for(let n=$;n<S;n+=u){const r=x+n*s[1];for(let n=p;n<m;n+=c){const i=r+n*s[2];for(let n=o;n<d;n+=h){const r=e[i+n*s[3]+t];if("max"===a&&r>v?v=r:"avg"===a&&(N+=r,C++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===a?N/C:v}}}}return x}const EI={kernelName:"AvgPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;kv(r,"avgPool");const{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=s;o(Yi(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=Pi(r.shape,a,i,1,l,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&p(c.inShape,c.outShape))h=Av({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=_(r.shape),s=$I(e,r.shape,r.dtype,t,c,"avg");h=n.makeTensorInfo(c.outShape,r.dtype,s.values)}return h}};const AI={kernelName:"AvgPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;kv(r,"avgPool3d");const c=Wi(r.shape,a,i,1,o,l,u),h=TI(n.data.get(r.dataId).values,r.shape,r.dtype,_(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}};const RI={kernelName:"AvgPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;kv([r,a],"avgPool3DGrad");const c=Wi(a.shape,i,o,1,l,u),h=c.strideDepth,p=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,v=c.effectiveFilterWidth,N=w-1-c.padInfo.front,I=v-1-c.padInfo.left,C=k-1-c.padInfo.top,$=jr(a.shape,"float32"),S=1/(f*m*g),T=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-N,i=s-C,o=r-I;let l=0;for(let n=0;n<w;n+=y){const s=(a+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<k;n+=b){const r=(i+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<v;n+=x){const a=(o+n)/d;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;l+=T.get(e,s,r,a,t)}}}$.set(l*S,e,n,s,r,t)}return n.makeTensorInfo($.shape,$.dtype,$.values)}};const FI={kernelName:"AvgPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;kv([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=Pi(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=jr(i.shape,"float32"),v=1/(d*f),N=n.data.get(r.dataId).values,I=jr(r.shape,"float32",N);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-w,a=s-x;let i=0;for(let n=0;n<y;n+=m){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const r=(a+n)/p;if(r<0||r>=c.outWidth||Math.floor(r)!==r)continue;i+=I.get(e,s,r,t)}}k.set(i*v,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const DI={kernelName:"FusedBatchNorm",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:l,variance:u}=t;o(l.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),o(null==i||l.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),o(null==a||l.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),kv([r,l,u,a,i],"batchNorm");let{varianceEpsilon:c}=s;null==c&&(c=.001);const h=n.data.get(r.dataId).values,p=n.data.get(l.dataId).values,d=n.data.get(u.dataId).values,f=a?n.data.get(a.dataId).values:new Float32Array([1]),m=i?n.data.get(i.dataId).values:new Float32Array([0]),g=new Float32Array(h.length),y=m.length,b=f.length,x=d.length,w=p.length;let k=0,v=0,N=0,I=0;for(let e=0;e<h.length;++e)g[e]=m[k++]+(h[e]-p[v++])*f[N++]/Math.sqrt(d[I++]+c),k>=y&&(k=0),v>=w&&(v=0),N>=b&&(N=0),I>=x&&(I=0);return n.makeTensorInfo(r.shape,r.dtype,g)}};const _I={kernelName:"BatchToSpaceND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;kv([r],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),l=ap(r.shape,a,o),u=ip(l.length,a.length),c=op(r.shape,a,o),h=lp(i,a.length),p=up(c,i,a.length),d=uI({inputs:{x:r},backend:n,attrs:{shape:l}}),f=$N({inputs:{x:d},backend:n,attrs:{perm:u}}),m=uI({inputs:{x:f},backend:n,attrs:{shape:c}}),g=_N({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const OI={kernelName:"Bincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=Vv(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}},MI={kernelName:"ClipByValue",backendName:"cpu",kernelFunc:Hv("ClipByValue",((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e}))},LI={kernelName:"ComplexAbs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(h(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function zI(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const BI={kernelName:"Imag",backendName:"cpu",kernelFunc:zI};function PI(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=b(r,t[0].shape)[0];let i=np(t.map((e=>e.shape)),a);if(0===h(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>h(e.shape)>0));if(1===o.length)return Av({inputs:{x:o[0]},backend:n});if(tp(o.map((e=>e.shape)),a),"complex64"===o[0].dtype){const e=o.map((e=>Fv({inputs:{input:e},backend:n}))),t=o.map((e=>zI({inputs:{input:e},backend:n}))),s=PI({inputs:e,backend:n,attrs:{axis:a}}),r=PI({inputs:t,backend:n,attrs:{axis:a}}),i=Sv({inputs:{real:s,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const l=o.map((e=>{const t=h(e.shape.slice(a));return uI({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=np(l.map((e=>e.shape)),1);const c=1===l[0].shape[0],p=Xv(u,i,t[0].dtype,c),d=np(o.map((e=>e.shape)),a),f=n.makeTensorInfo(d,t[0].dtype,p);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const WI={kernelName:"Concat",backendName:"cpu",kernelFunc:PI};function VI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;kv([r,a],"conv2d");const h=Ji(l),p=Vi(r.shape,a.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new Ns(p.outShape,r.dtype),k=_(r.shape),v=_(a.shape),N=k[0],I=x?k[1]:k[2],C=x?k[2]:1,$=x?1:k[1],S=w.strides[0],T=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(r.dataId).values,F=n.data.get(a.dataId).values,D=w.values;for(let e=0;e<p.batchSize;++e){const t=e*N,n=e*S;for(let e=0;e<p.outHeight;++e){const s=n+e*T,r=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=r+e*m;if(n<0||n>=p.inHeight)continue;const a=e*v[0],i=t+n*I;for(let e=0;e<p.outWidth;++e){const t=s+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=p.inWidth)continue;const r=i+s*C;let o=a+e*v[1];for(let e=0;e<p.inChannels;++e){const n=R[r+e*$];for(let e=0;e<p.outChannels;++e)D[t+e*A]+=n*F[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const UI={kernelName:"Conv2D",backendName:"cpu",kernelFunc:VI};const GI={kernelName:"Conv2DBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;kv([r,a],"conv2dBackpropFilter");const h=Ji(l),p=Vi(r.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new Ns(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,k=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,N=new Ns(r.shape,r.dtype,k),I=new Ns(a.shape,a.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((x-s)/f)),a=Math.min(p.outWidth,(p.inWidth+x-s)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=r;e<a;++e){const n=s+e*f-x;l+=y?N.get(u,t,n,i)*I.get(u,c,e,o):N.get(u,i,t,n)*I.get(u,o,c,e)}}b.set(l,e,s,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const HI={kernelName:"Conv2DBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;kv([r,a],"conv2dBackpropInput");const h=_(a.shape),p=_(r.shape);let d=Ji(u);const f=Vi(i,a.shape,o,1,l,c,!1,d),m=new Ns(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[x,w,k]=h,{batchSize:v,filterHeight:N,filterWidth:I,inChannels:C,inHeight:$,inWidth:S,outChannels:T,outHeight:E,outWidth:A,strideHeight:R,strideWidth:F}=f;d=f.dataFormat;const D=N-1-f.padInfo.top,O=I-1-f.padInfo.left,M="channelsLast"===d,L=m.strides[0],z=M?m.strides[1]:m.strides[2],B=M?m.strides[2]:1,P=M?1:m.strides[1],W=p[0],V=M?p[1]:p[2],U=M?p[2]:1,G=M?1:p[1];for(let e=0;e<v;++e)for(let t=0;t<C;++t)for(let n=0;n<$;++n){const s=n-D,r=Math.max(0,Math.ceil(s/R)),a=Math.min(E,(N+s)/R);for(let i=0;i<S;++i){const o=i-O,l=Math.max(0,Math.ceil(o/F)),u=Math.min(A,(I+o)/F);let c=0;for(let n=r;n<a;++n){const r=n*R-s;for(let s=l;s<u;++s){const a=W*e+V*n+U*s,i=x*(N-1-r)+w*(I-1-(s*F-o))+k*t;for(let e=0;e<T;++e){c+=y[a+G*e]*b[i+e]}}}g[L*e+z*n+B*i+P*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const jI={kernelName:"Conv3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;kv([r,a],"conv3d");const u=Ui(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new Ns(u.outShape,r.dtype),k=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,N=w.values,I=_(r.shape),C=_(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*I[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*w.strides[1],r=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=r+e*d;if(n<0||n>=u.inDepth)continue;const a=e*C[0],i=t+n*I[1];for(let e=0;e<u.outHeight;++e){const t=s+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*C[1],o=i+s*I[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<p;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const a=r+e*C[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=k[i+e];for(let e=0;e<u.outChannels;++e)N[n+e]+=t*v[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const qI={kernelName:"Conv3DBackpropFilterV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;kv([r,a],"conv3dBackpropFilterV2");const u=_(r.shape),c=_(a.shape),h=Ui(r.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new Ns(h.filterShape,"float32"),x=b.values,[w,k,v,N]=b.strides,I=n.data.get(a.dataId).values,[C,$,S,T]=c,E=n.data.get(r.dataId).values,[A,R,F,D]=u,O=h.padInfo.front,M=h.padInfo.left,L=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((O-e)/p)),n=Math.min(h.outDepth,(h.inDepth+O-e)/p),s=e*w;for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((L-r)/d)),i=Math.min(h.outHeight,(h.inHeight+L-r)/d),o=r*k+s;for(let s=0;s<y;++s){const l=Math.max(0,Math.ceil((M-s)/f)),u=Math.min(h.outWidth,(h.inWidth+M-s)/f),c=s*v+o;for(let o=0;o<h.inChannels;++o){const m=o*N+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*C;for(let m=t;m<n;++m){const t=(e+m*p-O)*R+h,n=m*$+y;for(let e=a;e<i;++e){const a=(r+e*d-L)*F+t,i=e*S+n;for(let e=l;e<u;++e){const t=e*T+i;g+=E[(s+e*f-M)*D+a+o]*I[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const KI={kernelName:"Conv3DBackpropInputV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;kv([r],"conv3dBackpropInputV2");const u=_(r.shape),c=_(a.shape),h=Ui(l,a.shape,o,1,i),p=new Ns(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(r.dataId).values,[x,w,k,v]=u,N=n.data.get(a.dataId).values,[I,C,$,S]=c,{batchSize:T,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:F,inDepth:D,inHeight:O,inWidth:M,outChannels:L,outDepth:z,outHeight:B,outWidth:P,strideDepth:W,strideHeight:V,strideWidth:U}=h,G=E-1-h.padInfo.front,H=A-1-h.padInfo.top,j=R-1-h.padInfo.left;for(let e=0;e<T;++e)for(let t=0;t<F;++t)for(let n=0;n<D;++n){const s=n-G,r=Math.max(0,Math.ceil(s/W)),a=Math.min(z,(E+s)/W);for(let i=0;i<O;++i){const o=i-H,l=Math.max(0,Math.ceil(o/V)),u=Math.min(B,(A+o)/V);for(let c=0;c<M;++c){const h=c-j,p=Math.max(0,Math.ceil(h/U)),T=Math.min(P,(R+h)/U);let F=0;for(let n=r;n<a;++n){const r=n*W-s;for(let s=l;s<u;++s){const a=s*V-o;for(let i=p;i<T;++i){const o=x*e+w*n+k*s+v*i,l=I*(E-1-r)+C*(A-1-a)+$*(R-1-(i*U-h))+S*t;for(let e=0;e<L;++e){F+=b[o+e]*N[l+e]}}}}d[f*e+m*n+g*i+y*c+t]=F}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},XI=Hv(Re,(e=>Math.cos(e))),YI={kernelName:Re,backendName:"cpu",kernelFunc:XI},JI={kernelName:"Cosh",backendName:"cpu",kernelFunc:Hv("Cosh",(e=>Math.cosh(e)))};const ZI={kernelName:"CropAndResize",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,p,d]=r.shape,f=a.shape[0],[m,g]=o,y=jr([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(r.dataId).values,k=_(r.shape),v=_(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],r=b[t+2],a=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(r-n)*(h-1)/(m-1):0,f=g>1?(a-s)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+r)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<d;s++){const r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=u}else if("bilinear"===l){const n=Math.floor(c),r=Math.ceil(c),o=c-n;for(let l=0;l<g;l++){const c=g>1?s*(p-1)+l*f:.5*(s+a)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const s=n+l*v[2]+t*v[1]+e*v[0];y.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<d;s++){let a=s+h*k[2]+n*k[1]+i*k[0];const u=w[a];a=s+m*k[2]+n*k[1]+i*k[0];const c=w[a];a=s+h*k[2]+r*k[1]+i*k[0];const p=w[a];a=s+m*k[2]+r*k[1]+i*k[0];const d=u+(c-u)*b,f=p+(w[a]-p)*b;a=s+l*v[2]+t*v[1]+e*v[0],y.values[a]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const r=g>1?s*(p-1)+n*f:.5*(s+a)*(p-1);if(r<0||r>p-1){for(let s=0;s<d;s++){const r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=u}continue}const o=Math.round(r),l=Math.round(c);for(let s=0;s<d;s++){const r=s+o*k[2]+l*k[1]+i*k[0],a=s+n*v[2]+t*v[1]+e*v[0];y.values[a]=w[r]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const QI={kernelName:"Cumsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;kv(r,"cumsum");const l=Fl([a],r.shape.length);let u=r;null!=l&&(u=$N({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=_l(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const p=Ms(u.dtype,"int32"),d=z(h(u.shape),p),f=n.data.get(u.dataId).values,m=u.shape[u.shape.length-1],g=o?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=m)for(let t=0;t<m;t++){const n=g(e,t);if(0===t)d[n]=i?0:f[n];else{const s=g(e,t-1);d[n]=i?f[s]+d[s]:f[n]+d[s]}}const y=n.makeTensorInfo(u.shape,p,d);if(null!=l){const e=$N({inputs:{x:y},backend:n,attrs:{perm:Dl(l)}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(u),e}return y}};const eC={kernelName:"DenseBincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=Vv(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=Uv(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};const tC={kernelName:"DepthToSpace",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;o("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`)),o(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const l=r.shape[0],u=r.shape[1],c=r.shape[2],h=r.shape[3],p=u*a,d=c*a,f=h/(a*a),m=n.data.get(r.dataId).values,g=new Float32Array(l*p*d*f);let y=0;for(let e=0;e<l;++e)for(let t=0;t<p;++t){const n=Math.floor(t/a),s=t%a;for(let t=0;t<d;++t){const r=Math.floor(t/a),i=(s*a+t%a)*f;for(let t=0;t<f;++t){const s=t+i+h*(r+c*(n+u*e));g[y++]=m[s]}}}return n.makeTensorInfo([l,p,d,f],r.dtype,g)}};function nC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:l,dilations:u,dimRoundingMode:c}=s;kv([r,a],"depthwiseConv2DNative");const h=_(r.shape),p=_(a.shape);let d=u;null==d&&(d=[1,1]),o(Yi(i,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`));const f=Vi(r.shape,a.shape,i,d,l,c,!0),{filterHeight:m,filterWidth:g,dilationHeight:y,dilationWidth:b,padInfo:x}=f,w=x.left,k=x.top,v=f.outChannels/f.inChannels,N=new Ns(f.outShape,r.dtype),I=n.data.get(r.dataId).values,C=n.data.get(a.dataId).values,$=N.values;for(let e=0;e<f.batchSize;++e){const t=e*h[0],n=e*N.strides[0];for(let e=0;e<f.outHeight;++e){const s=n+e*N.strides[1],r=e*f.strideHeight-k;for(let e=0;e<m;++e){const n=r+e*y;if(n<0||n>=f.inHeight)continue;const a=e*p[0],i=t+n*h[1];for(let e=0;e<f.outWidth;++e){const t=s+e*N.strides[2],n=e*f.strideWidth-w;for(let e=0;e<g;++e){const s=n+e*b;if(s<0||s>=f.inWidth)continue;const r=a+e*p[1],o=i+s*f.inChannels;let l=t,u=r;for(let e=0;e<f.inChannels;++e){const t=I[o+e];for(let e=0;e<v;++e)$[l+e]+=t*C[u+e];l+=v,u+=v}}}}}}return n.makeTensorInfo(N.shape,N.dtype,N.values)}const sC={kernelName:"DepthwiseConv2dNative",backendName:"cpu",kernelFunc:nC};const rC={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;kv([r,a],"depthwiseConv2dNativeBackpropFilter");const h=Vi(r.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new Ns(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(r.dataId).values,k=new Ns(r.shape,r.dtype,w),v=n.data.get(a.dataId).values,N=new Ns(a.shape,a.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((y-s)/d)),a=Math.min(h.outWidth,(h.inWidth+y-s)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),l=i%x;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=r;e<a;++e){const n=s+e*d-y;u+=k.get(l,t,n,o)*N.get(l,c,e,i)}}g.set(u,e,s,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const aC={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;kv([r,a],"depthwiseConv2DNativeBackpropInput");const h=_(r.shape),p=_(a.shape),d=Vi(c,a.shape,i,o,l,u,!0),f=new Ns(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[w,k,v]=h,N=n.data.get(a.dataId).values,[I,C,$]=p,{batchSize:S,filterHeight:T,filterWidth:E,inChannels:A,inHeight:R,inWidth:F,outChannels:D,outHeight:O,outWidth:M,strideHeight:L,strideWidth:z}=d,B=T-1-d.padInfo.top,P=E-1-d.padInfo.left,W=D/A;for(let e=0;e<S;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const s=n-B,r=Math.max(0,Math.ceil(s/L)),a=Math.min(O,(T+s)/L);for(let i=0;i<F;++i){const o=i-P,l=Math.max(0,Math.ceil(o/z)),u=Math.min(M,(E+o)/z);let c=0;for(let n=r;n<a;++n){const r=n*L-s;for(let s=l;s<u;++s){const a=w*e+k*n+v*s,i=I*(T-1-r)+C*(E-1-(s*z-o))+$*t;for(let e=0;e<W;++e){c+=x[a+(t*W+e)]*N[i+e]}}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const iC={kernelName:"Diag",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=h(s.shape),a=n.data.get(s.dataId).values,i=jr([r,r],s.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*r+e]=a[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},oC={kernelName:"Dilation2D",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,p=l.data.get(r.dataId).values,d=r.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:v,strideWidth:N,filterHeight:I,filterWidth:C,dilationHeight:$,dilationWidth:S,outShape:T}=Bi(s.shape,r.shape,a,i,"NHWC",o),E=h(T),A=T.length,R=k(s.dtype,E);for(let e=0;e<f;++e)for(let t=0;t<b;++t){const n=t*v-w.top;for(let a=0;a<x;++a){const i=a*N-w.left;for(let o=0;o<y;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<I;++t){const a=n+t*$;if(a>=0&&a<m)for(let n=0;n<C;++n){const h=i+n*S;if(h>=0&&h<g){const i=W([e,a,h,o],c,_(s.shape)),f=W([t,n,o],d,_(r.shape)),m=u[i]+p[f];m>l&&(l=m)}}}R[W([e,t,a,o],A,_(T))]=l}}}return{dataId:l.write(us(R,s.dtype),T,s.dtype),shape:T,dtype:s.dtype}}},lC={kernelName:"Dilation2DBackpropFilter",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:l,dilations:u}=n,c=t,h=M(s.shape,c.data.get(s.dataId).values),p=M(r.shape,c.data.get(r.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:N,dilationHeight:I,dilationWidth:C,outShape:$}=Bi(s.shape,r.shape,i,l,"NHWC",u);o(a.rank===$.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${$.length}, but got ${a.rank}`));const S=M($,c.data.get(a.dataId).values),T=B(r.shape,r.dtype);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let s=0;s<b;++s){const r=s*k-x.left;for(let a=0;a<g;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<v;++t){const s=n+t*I;if(s>=0&&s<f)for(let n=0;n<N;++n){const u=r+n*C;if(u>=0&&u<m){const r=h[e][s][u][a]+p[t][n][a];r>i&&(i=r,o=t,l=n)}}}T[o][l][a]+=S[e][t][s][a]}}}return{dataId:c.write(us(T,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},uC={kernelName:"Dilation2DBackpropInput",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:l,dilations:u}=n,c=t,h=M(s.shape,c.data.get(s.dataId).values),p=M(r.shape,c.data.get(r.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:N,dilationHeight:I,dilationWidth:C,outShape:$}=Bi(s.shape,r.shape,i,l,"NHWC",u);o(a.rank===$.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${$.length}, but got ${a.rank}`));const S=M($,c.data.get(a.dataId).values),T=B(s.shape,s.dtype);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let s=0;s<b;++s){const r=s*k-x.left;for(let a=0;a<g;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let t=0;t<v;++t){const s=n+t*I;if(s>=0&&s<f)for(let n=0;n<N;++n){const u=r+n*C;if(u>=0&&u<m){const r=h[e][s][u][a]+p[t][n][a];r>i&&(i=r,o=s,l=u)}}}T[e][o][l][a]+=S[e][t][s][a]}}}return{dataId:c.write(us(T,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}};function cC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;kv(r,"sum"),o="bool"===r.dtype?_v({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):Av({inputs:{x:r},backend:n});const l=o.shape.length,u=b(a,o.shape),c=Fl(u,l);let p=u,d=o;null!=c&&(d=$N({inputs:{x:o},backend:n,attrs:{perm:c}}),p=_l(p.length,l)),Rl("sum",p,d.shape.length);const[f,m]=El(d.shape,p);let g=Ev(n,f,Ms(d.dtype,"int32"));const y=h(m),x=n.data.get(g.dataId).values,w=n.data.get(d.dataId).values;for(let e=0;e<x.length;++e){const t=e*y;let n=0;for(let e=0;e<y;++e)n+=w[t+e];x[e]=n}if(i){const e=g;g=uI({inputs:{x:g},backend:n,attrs:{shape:Al(g.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(d),g}const hC={kernelName:"Sum",backendName:"cpu",kernelFunc:cC};const pC={kernelName:"Einsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=kp(r,a.length);Np(i.length,l,a);const{path:u,steps:c}=Ip(o,l),h=c.length;let d=null,f=i.length;const m=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=vp(f,l[t]);let r;Cp(e)?r=a[t]:(r=$N({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),m.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);p(r.shape,i)||(r=uI({inputs:{x:r},backend:n,attrs:{shape:i}}),m.push(r)),null===d?d=r:(d=xN({inputs:{a:r,b:d},backend:n}),m.push(d))}e<h-1&&(u[e]>=0&&(d=cC({inputs:{x:d},backend:n,attrs:{axis:u[e]-(i.length-f),keepDims:!1}}),m.push(d)),f--)}for(const e of m)e!==d&&n.disposeIntermediateTensorInfo(e);return d}};const dC={kernelName:"EluGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;kv([s,r],"eluGrad");const a=new Float32Array(h(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",a)}},fC=Mv("Equal",$v(((e,t)=>e===t?1:0)),null,"bool"),mC={kernelName:"Equal",backendName:"cpu",kernelFunc:fC},gC=Hv(Ke,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+.3275911*n);return t*(1-((((1.061405429*s-1.453152027)*s+1.421413741)*s-.284496736)*s+.254829592)*s*Math.exp(-n*n))})),yC={kernelName:Ke,backendName:"cpu",kernelFunc:gC};function bC(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,l=r.shape.slice();let u=a;return a<0&&(o(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),u=i+a+1),l.splice(u,0,1),uI({inputs:{x:r},backend:n,attrs:{shape:l}})}const xC={kernelName:"ExpandDims",backendName:"cpu",kernelFunc:bC},wC=Mv("RealDiv",$v(((e,t)=>e/t))),kC={kernelName:"RealDiv",backendName:"cpu",kernelFunc:wC};function vC(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=h(u),p=w("float32",c),d=w("float32",c);for(let e=0;e<r;e++){const s=_N({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),r=_N({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=Sv({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=NC(i,t,n),h=pp(u,c);for(let t=0;t<a;t++){const n=gp(h,t);p[e*a+t]=n.real,d[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const f=n.makeTensorInfo(u,"float32",p),m=n.makeTensorInfo(u,"float32",d),g=Sv({inputs:{real:f,imag:m},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function NC(e,t,n){const s=h(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const r=IC(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",ls(s,"float32")),i=Av({inputs:{x:a},backend:n}),l=kC.kernelFunc({inputs:{a:e,b:a},backend:n}),u=kC.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}return dp(function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=xp(r*s,t,n),l=gp(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),yp(s,a,i,r)}return s}(pp(a,i),s,t));var o}function IC(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=pp(e,t),i=n/2,o=fp(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),p=r.makeTensorInfo(c,"float32",u),d=Sv({inputs:{real:h,imag:p},backend:r}),f=mp(a),m=f.real,g=f.imag,y=[m.length],b=r.makeTensorInfo(y,"float32",m),x=r.makeTensorInfo(y,"float32",g),w=Sv({inputs:{real:b,imag:x},backend:r}),k=IC(l,u,i,s,r),v=k.real,N=k.imag,I=[v.length],C=r.makeTensorInfo(I,"float32",v),$=r.makeTensorInfo(I,"float32",N),S=Sv({inputs:{real:C,imag:$},backend:r}),T=IC(m,g,i,s,r),E=T.real,A=T.imag,R=[E.length],F=r.makeTensorInfo(R,"float32",E),D=r.makeTensorInfo(R,"float32",A),_=Sv({inputs:{real:F,imag:D},backend:r}),O=bp(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),z=r.makeTensorInfo(M,"float32",O.imag),B=Sv({inputs:{real:L,imag:z},backend:r}),P=xN({inputs:{a:B,b:_},backend:r}),W=Pv({inputs:{a:S,b:P},backend:r}),V=UN({inputs:{a:S,b:P},backend:r}),U=Fv({inputs:{input:W},backend:r}),G=Fv({inputs:{input:V},backend:r}),H=zI({inputs:{input:W},backend:r}),j=zI({inputs:{input:V},backend:r}),q=PI({inputs:[U,G],backend:r,attrs:{axis:0}}),K=PI({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(q.dataId).values,Y=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(S),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const CC={kernelName:"FFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=h(s.shape),a=s.shape[s.shape.length-1],i=uI({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=vC(i,!1,n),l=uI({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function $C(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||R(r),o=k(i,h(s));return function(e,t,n){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const SC={kernelName:"Fill",backendName:"cpu",kernelFunc:$C};const TC={kernelName:"FlipLeftRight",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=w(s.dtype,h(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let s=0;s<l;s++){const r=s*u;for(let o=0;o<u;o++){const h=[i,e,s,o][2],p=Math.round(l-h),d=t+n+r+o;let f=c[d];if(p>=0&&p<l){f=c[t+n+p*u+o]}a[d]=f}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},EC={kernelName:"FloorDiv",backendName:"cpu",kernelFunc:Mv("FloorDiv",$v(((e,t)=>Math.floor(e/t))),null,"int32")};const AC={kernelName:"FusedConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=VI({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=Pv({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=lI(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};const RC={kernelName:"FusedDepthwiseConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=nC({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=Pv({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=lI(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};const FC={kernelName:"GatherNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=h(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,p]=va(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const d=jr([u,c],s.dtype),f=n.data.get(r.dataId).values,m=n.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=[];let n=0;for(let s=0;s<o;s++){const r=f[e*o+s];n+=r*p[s],t.push(r)}if(n<0||n>=a/c)throw new Error(`Invalid indices: ${t} does not index into ${s.shape}`);for(let t=0;t<c;t++)d.values[e*c+t]=m[n*c+t]}return n.makeTensorInfo(l,d.dtype,d.values)}};const DC={kernelName:"GatherV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;kv([r,a],"gatherV2");let l=o;null==o&&(l=0);const u=h(a.shape),c=Ap(r,a,b(i,r.shape)[0],l),p=uI({inputs:{x:r},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),d=uI({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,u/c.batchSize]}}),f=[c.batchSize,c.outerSize,u/c.batchSize,c.sliceSize],m=n.bufferSync(d),g=sN(n.bufferSync(p),m,f);return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.makeTensorInfo(c.outputShape,g.dtype,g.values)}},_C={kernelName:"GreaterEqual",backendName:"cpu",kernelFunc:Mv("GreaterEqual",$v(((e,t)=>e>=t?1:0)),null,"bool")};const OC={kernelName:"IFFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=h(s.shape),a=s.shape[s.shape.length-1],i=uI({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=vC(i,!0,n),l=uI({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},MC={kernelName:"IsFinite",backendName:"cpu",kernelFunc:Hv("IsFinite",(e=>Number.isFinite(e)?1:0),"bool")},LC={kernelName:"IsInf",backendName:"cpu",kernelFunc:Hv("IsInf",(e=>Math.abs(e)===1/0?1:0),"bool")},zC={kernelName:"IsNan",backendName:"cpu",kernelFunc:Hv("IsNan",(e=>Number.isNaN(e)?1:0),"bool")},BC={kernelName:"LessEqual",backendName:"cpu",kernelFunc:Mv("LessEqual",$v(((e,t)=>e<=t?1:0)),null,"bool")};const PC={kernelName:"LinSpace",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=lN(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},WC={kernelName:"Log1p",backendName:"cpu",kernelFunc:Hv("Log1p",(e=>Math.log1p(e)))},VC={kernelName:"LogicalAnd",backendName:"cpu",kernelFunc:Mv("LogicalAnd",$v(((e,t)=>e&&t)),null,"bool")},UC={kernelName:"LogicalNot",backendName:"cpu",kernelFunc:Hv("LogicalNot",(e=>e?0:1),"bool")},GC={kernelName:"LogicalOr",backendName:"cpu",kernelFunc:Mv("LogicalOr",$v(((e,t)=>e||t)),null,"bool")};const HC={kernelName:"LRN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;kv(r,"LRN");const u=r.shape[3],c=u-1,p=n.data.get(r.dataId).values,d=h(r.shape),f=new Float32Array(d);function m(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=p[n];r+=e*e}return r}for(let e=0;e<d;e++){const t=m(e),n=p[e]*Math.pow(i+o*t,-l);f[e]=n}return n.makeTensorInfo(r.shape,r.dtype,f)}};const jC={kernelName:"LRNGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;kv(i,"LRNGrad");const p=h(i.shape),d=i.shape[3],f=n.data.get(i.dataId).values,m=n.data.get(r.dataId).values,g=n.data.get(a.dataId).values,y=new Float32Array(p),b=p;for(let e=0;e<b;e++){const t=e%d,n=e-t+Math.max(0,t-o),s=e-t+Math.min(d,t+o+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(m[e],2);r=u*r+l;for(let t=n;t<s;t++){let n=-2*u*c*m[t]*g[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=f[e],y[t]+=n}}return n.makeTensorInfo(i.shape,r.dtype,y)}};function qC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=b(a,l);let p=c;const d=Fl(p,u);let f=o.data.get(r.dataId).values;if(null!=d){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[d[t]];f=CN(f,l,r.dtype,d,e),p=_l(p.length,u),l=e}kv(r,"max"),Rl("max",p,u);const[m,g]=El(l,p),y=pN(f,h(g),m,r.dtype),x=o.write(y,m,r.dtype);let w=m;if(i){w=Al(m,c)}return{dataId:x,shape:w,dtype:r.dtype}}const KC={kernelName:"Max",backendName:"cpu",kernelFunc:qC};const XC={kernelName:"MaxPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;kv(r,"maxPool");const{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=s;o(Yi(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=Pi(r.shape,a,i,1,l,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&p(c.inShape,c.outShape))h=Av({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=_(r.shape),s=$I(e,r.shape,r.dtype,t,c,"max");h=n.makeTensorInfo(c.outShape,r.dtype,s.values)}return h}};const YC={kernelName:"MaxPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;kv(r,"maxPool3d");const c=Wi(r.shape,a,i,1,o,l,u),h=TI(n.data.get(r.dataId).values,r.shape,r.dtype,_(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}};const JC={kernelName:"MaxPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;kv([r,a],"maxPool3DGrad");const c=Wi(a.shape,i,o,1,l,u),h=function(e,t){const n=jr(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const k=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const d=r*a-f;let v=d;for(;v<0;)v+=l;const N=Math.min(t.inWidth,h+d);let I=Number.NEGATIVE_INFINITY,C=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let s=p;s<k;s+=o){const r=s-u;for(let a=v;a<N;a+=l){const i=a-d,o=e.get(m,t,s,a,g);o>=I&&(I=o,C=n*c*h+r*c+i)}}}n.set(C,m,y,s,r,g)}}}return n}(n.bufferSync(a),c),p=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=b-1-c.padInfo.front,v=w-1-c.padInfo.left,N=x-1-c.padInfo.top,I=jr(a.shape,"float32"),C=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-k,i=s-N,o=r-v;let l=0;for(let n=0;n<b;n+=m){const s=(a+n)/p;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let r=0;r<x;r+=g){const a=(i+r)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let i=0;i<w;i+=y){const u=(o+i)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const p=b*x*w-1-h.get(e,s,a,u,t)===n*x*w+r*w+i?1:0;if(0===p)continue;l+=C.get(e,s,a,u,t)*p}}}I.set(l,e,n,s,r,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const ZC={kernelName:"MaxPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;kv([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Pi(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=jr(p.outShape,o.dtype,SI(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,k=w-1-p.padInfo.left,v=x-1-p.padInfo.top,N=jr(o.shape,"float32"),I=n.data.get(r.dataId).values,C=jr(r.shape,"float32",I);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const r=n-v,a=s-k;let i=0;for(let n=0;n<x;n+=y){const s=(r+n)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let r=0;r<w;r+=b){const o=(a+r)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*w-1-f.get(e,s,o,t)===n*w+r?1:0;if(0===l)continue;i+=C.get(e,s,o,t)*l}}N.set(i,e,n,s,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const QC={kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;kv(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=Pi(s.shape,r,a,[1,1],i),[h,p]=function(e,t,n,s,r){const a=$I(e,0,n,_(t),r,"max"),i=SI(e,t,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const e$={kernelName:"Mean",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=b(a,r.shape),l=h(El(r.shape,o)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const p=_v({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});u.push(p);const d=wC({inputs:{a:p,b:c},backend:n});u.push(d);const f=cC({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:i}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const t$={kernelName:"Min",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;kv(r,"min");const o=b(a,r.shape);let l=o;const u=Fl(l,r.shape.length);let c=r;null!=u&&(c=$N({inputs:{x:r},backend:n,attrs:{perm:u}}),l=_l(l.length,r.shape.length)),Rl("min",l,c.shape.length);const[p,d]=El(c.shape,l),f=h(d),m=z(h(p),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const s=g[t+e];s<n&&(n=s)}m[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(p,c.dtype,m);if(i){const e=uI({inputs:{x:y},backend:n,attrs:{shape:Al(p,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const n$={kernelName:"MirrorPad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;kv(r,"mirrorPad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===i?0:1,p=n.data.get(r.dataId).values,d=r.shape.length,f=_(r.shape),m=h(o),g=o.length,y=_(o),b=w(r.dtype,m);for(let e=0;e<m;e++){let t=V(e,g,y);for(let e=0;e<g;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=W(t,d,f);b[e]=p[n]}return{dataId:n.write(b,o,r.dtype),shape:o,dtype:r.dtype}}},s$=$v(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),r$=Mv(zt,s$),a$={kernelName:zt,backendName:"cpu",kernelFunc:r$};function i$(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=b([o],r.shape),u=qC({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=Al(u.shape,l),h=uI({inputs:{x:u},backend:n,attrs:{shape:c}}),p=UN({inputs:{a:r,b:h},backend:n}),d=Jv({inputs:{x:p},backend:n}),f=cC({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=uI({inputs:{x:f},backend:n,attrs:{shape:c}}),g=wC({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const o$={kernelName:"Softmax",backendName:"cpu",kernelFunc:i$};const l$={kernelName:"Multinomial",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;kv(r,"multinomial");const l=o?r:i$({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],p=n.data.get(l.dataId).values,d=[u,a],f=z(h(d),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];const s=Iu(i.toString()),r=e*a;for(let e=0;e<a;++e){const t=s();f[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){f[r+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(d,"int32",f)}},u$=ah;const c$={kernelName:"NonMaxSuppressionV3",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;kv(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=u$(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},h$=ih;const p$={kernelName:"NonMaxSuppressionV4",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;kv(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=h$(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},d$=oh;const f$={kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;kv(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=d$(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};const m$={kernelName:"OneHot",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s;kv(r,"oneHot");const l=h(r.shape),u=new Float32Array(l*a);u.fill(o);const c=n.data.get(r.dataId).values;for(let e=0;e<l;++e)c[e]>=0&&c[e]<a&&(u[e*a+c[e]]=i);return n.makeTensorInfo([...r.shape,a],"int32",u)}};function g$(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=Fv({inputs:{input:s},backend:n}),t=g$({inputs:{x:e},backend:n}),r=zI({inputs:{input:s},backend:n}),a=g$({inputs:{x:r},backend:n}),i=Sv({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return $C({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const y$={kernelName:"ZerosLike",backendName:"cpu",kernelFunc:g$};const b$={kernelName:"OnesLike",backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=Fv({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=zI({inputs:{input:r},backend:s}),i=g$({inputs:{x:a},backend:s}),o=Sv({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return $C({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function x$(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return bC({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{l(a,e.shape,"All tensors passed to stack must have matching shapes"),o(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],c=PI({inputs:t.map((e=>{const t=bC({inputs:{input:e},backend:n,attrs:{dim:r}});return u.push(t),t})),backend:n,attrs:{axis:r}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const w$={kernelName:"Pack",backendName:"cpu",kernelFunc:x$};const k$={kernelName:"PadV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;kv(r,"pad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(r.dataId).values,c=h(r.shape),p=r.shape.length,d=_(r.shape),f=h(o),m=o.length,g=_(o),y=w(r.dtype,f);0!==i&&y.fill(i);for(let e=0;e<c;e++){y[W(V(e,p,d).map(((e,t)=>e+l[t])),m,g)]=u[e]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},v$=$v(((e,t)=>Math.pow(e,t))),N$=Mv(Jt,v$),I$={kernelName:Jt,backendName:"cpu",kernelFunc:N$};const C$={kernelName:"Range",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=AN(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},$$={kernelName:"Reciprocal",backendName:"cpu",kernelFunc:Hv("Reciprocal",(e=>1/e))};const S$={kernelName:"ResizeBilinear",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;kv(r,"resizeBilinear");const l=_(r.shape),[u,c]=o,[p,d,f,m]=r.shape,g=n.data.get(r.dataId).values,y=new Float32Array(h([p,u,c,m])),b=[a&&u>1?d-1:d,a&&c>1?f-1:f],x=[a&&u>1?u-1:u,a&&c>1?c-1:c];let w=0;const k=b[0]/x[0],v=b[1]/x[1];for(let e=0;e<p;e++)for(let t=0;t<u;t++){let n;n=i?k*(t+.5)-.5:k*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(d-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=i?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(f-1,Math.ceil(t)),c=o+n*l[2],h=u+n*l[2],p=o+a*l[2],d=u+a*l[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[h+e],a=t+(g[p+e]-t)*s,i=a+(n+(g[d+e]-n)*s-a)*r;y[w++]=i}}}return n.makeTensorInfo([p,u,c,m],"float32",y)}};const T$={kernelName:"ResizeBilinearGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;kv([a,r],"resizeBilinearGrad");const o=_(r.shape),[l,u,c,h]=r.shape,[,p,d]=a.shape,f=new Float32Array(l*u*c*h),m=[i&&p>1?u-1:u,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=t+s*o[1],i=t+r*o[1],l=n-s,p=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,d=a+n*o[2],m=a+s*o[2],g=i+n*o[2],y=i+s*o[2],k=p*u,v=p*r,N=l*u,I=l*r;for(let e=0;e<h;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*N,f[y+e]+=t*I}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}};const E$={kernelName:"ResizeNearestNeighbor",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;kv(r,"resizeNearestNeighbor");const l=_(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?x*(e+.5):x*e;let s=Math.min(p-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[k++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,g)}};const A$={kernelName:"ResizeNearestNeighborGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;kv([a,r],"resizeNearestNeighborGrad");const o=_(r.shape),l=_(a.shape),[u,c,h,p]=r.shape,[,d,f]=a.shape,m=new Float32Array(u*c*h*p),g=n.data.get(a.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,N=2*Math.ceil(k)+2,I=2*Math.ceil(v)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*k),r=Math.floor(s-N/2);for(let s=0;s<h;s++){const a=n+s*o[2],u=Math.floor(s*v),y=Math.floor(u-I/2);for(let n=0;n<p;n++){let o=0;for(let a=0;a<N;a++){const u=a+r;if(u<0||u>=d)continue;const p=t+u*l[1],m=u*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<I;e++){const t=e+y;if(t<0||t>=f)continue;const r=p+t*l[2],a=t*w;s===Math.min(h-1,i?Math.round(a):Math.floor(a))&&(o+=g[r+n])}}m[a+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}};const R$={kernelName:"Reverse",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;kv(r,"reverse");const i=r.shape.length,o=b(a,r.shape);if(0===i)return Av({inputs:{x:r},backend:n});const l=new Ns(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=r.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},F$={kernelName:"RotateWithOffset",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=w(s.dtype,h(s.shape)),[u,c,p,d]=s.shape,[f,m]=rp(i,c,p),g=Math.sin(r),y=Math.cos(r),b=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*p*c*d;for(let e=0;e<c;e++){const n=e*(p*d);for(let s=0;s<p;s++){const r=s*d;for(let i=0;i<d;i++){const o=[u,e,s,i],h=o[2],x=o[1];let w=(h-f)*y-(x-m)*g,k=(h-f)*g+(x-m)*y;w=Math.round(w+f),k=Math.round(k+m);let v=a;if("number"!=typeof a&&(v=3===i?255:a[i]),w>=0&&w<p&&k>=0&&k<c){v=b[t+k*(p*d)+w*d+i]}l[t+n+r+i]=v}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},D$={kernelName:"Round",backendName:"cpu",kernelFunc:Hv("Round",(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}))};function _$(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,p=t.values;if(0===s)return jr(n,t.dtype);const d=jr(c,t.dtype);d.values.fill(l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),l+=n*o[t]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?d.values[l*r+n]+=p[e*r+n]:d.values[l*r+n]=0===t.rank?p[0]:p[e*r+n]}return d}const O$={kernelName:"ScatterNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=$a(0,r,i),p=_$(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}};const M$={kernelName:"Select",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;kv([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=Ms(r.dtype,a.dtype),p=z(h(r.shape),c);let d=0;const f=0===i||i>1||1===r.shape.length?1:h(r.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<f;t++)1===o[e]?p[d++]=l[e]:p[d++]=u[e];return n.makeTensorInfo(r.shape,c,p)}},L$={kernelName:"Selu",backendName:"cpu",kernelFunc:Hv("Selu",(e=>e>=0?1.0507009873554805*e:1.7580993408473768*(Math.exp(e)-1)))},z$={kernelName:"Sign",backendName:"cpu",kernelFunc:Hv("Sign",(e=>e<0?-1:e>0?1:0))},B$=Hv(bn,(e=>Math.sin(e))),P$={kernelName:bn,backendName:"cpu",kernelFunc:B$},W$={kernelName:"Sinh",backendName:"cpu",kernelFunc:Hv("Sinh",(e=>Math.sinh(e)))},V$=Math.log(1.1920928955078125e-7)+2,U$={kernelName:"Softplus",backendName:"cpu",kernelFunc:Hv("Softplus",(e=>{const t=e>-V$,n=e<V$,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r}))};const G$={kernelName:"SpaceToBatchND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;kv([r],"spaceToBatchND");const o=h(a),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=k$.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=ap(u.shape,a,o,!1),p=ip(c.length,a.length,!1),d=op(u.shape,a,o,!1),f=uI({inputs:{x:u},backend:n,attrs:{shape:c}}),m=$N({inputs:{x:f},backend:n,attrs:{perm:p}}),g=uI({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const H$={kernelName:"SparseFillEmptyRows",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values[0],[h,p,d,f,m]=MN(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};const j$={kernelName:"SparseReshape",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.data.get(r.dataId).values),o=n.data.get(s.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,h]=LN(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};const q$={kernelName:"SparseToDense",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=$a(0,r,o),d=_$(n.bufferSync(r),n.bufferSync(a),o,p,c,u,l,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,d.dtype,d.values)}};const K$={kernelName:"SplitV",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=b(i,r.shape)[0],l=Sp(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map((e=>{const t=[...c];t[o]=e;const s=_N({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s}))}},X$={kernelName:"Sqrt",backendName:"cpu",kernelFunc:Hv("Sqrt",(e=>Math.sqrt(e)))},Y$={kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;kv(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},J$={kernelName:"Step",backendName:"cpu",kernelFunc:Hv("Step",((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha}))};const Z$={kernelName:"StridedSlice",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s;kv(r,"stridedSlice");const{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=Ua(r.shape,a,i,o,l,u,c,h,p),x=uI({inputs:{x:r},backend:n,attrs:{shape:y}});let w;if(d){const e=_N({inputs:{x:x},backend:n,attrs:{begin:f,size:g}});w=uI({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,r.dtype,[]);else{const e=PN(b,n.bufferSync(x),m,f);w=n.makeTensorInfo(e.shape,e.dtype,e.values)}const k=uI({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),k}},Q$=Hv(On,(e=>Math.tan(e))),eS={kernelName:On,backendName:"cpu",kernelFunc:Q$},tS=Hv("Tanh",(e=>Math.tanh(e)));function nS(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return r(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return r(0,n,t-1)}(e,t);case"nearest":return function(e,t){return r(0,e,t-1)}(e,t);case"constant":default:return function(e,t){return e}(e)}}function sS(e,t,n,s,r,a,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*r+l*a+u]:c}function rS(e,t,n,s,r,a,i,o,l,u,c){return sS(e,t,n,s,r,a,i,Math.round(o),Math.round(l),u,c)}function aS(e,t,n,s,r,a,i,o,l,u,c){const h=Math.floor(o),p=Math.floor(l),d=h+1,f=p+1;return(d-o)*((f-l)*sS(e,t,n,s,r,a,i,h,p,u,c)+(l-p)*sS(e,t,n,s,r,a,i,h,f,u,c))+(o-h)*((f-l)*sS(e,t,n,s,r,a,i,d,p,u,c)+(l-p)*sS(e,t,n,s,r,a,i,d,f,u,c))}const iS=[dI,Cv,fI,mI,Wv,gI,yI,bI,xI,wI,kI,vI,NI,II,CI,EI,AI,RI,FI,pI,DI,_I,OI,Ov,Kv,MI,Tv,LI,WI,GI,HI,UI,qI,KI,jI,YI,JI,ZI,QI,eC,tC,sC,rC,aC,iC,oC,uC,lC,kC,pC,YN,dC,mC,yC,Zv,xC,eN,CC,SC,TC,nN,EC,AC,RC,FC,DC,aN,_C,Rv,OC,BI,MC,LC,zC,ZN,oN,BC,PC,hN,WC,VC,UC,GC,HC,jC,fN,XC,YC,JC,ZC,QC,KC,e$,t$,gN,n$,a$,l$,wN,vN,c$,p$,f$,IN,m$,b$,w$,k$,I$,tI,EN,C$,Dv,$$,sI,aI,cI,S$,T$,E$,A$,R$,F$,D$,FN,O$,M$,L$,oI,z$,P$,W$,ON,o$,U$,G$,H$,j$,q$,K$,X$,Y$,BN,J$,Z$,GN,hC,eS,{kernelName:"Tanh",backendName:"cpu",kernelFunc:tS},{kernelName:"Tile",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;kv(r,"tile");const i=HN(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:"TopK",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;kv(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=jN(o,r.shape,r.dtype,a);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},SN,{kernelName:"Transform",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[c,p,d,f]=r.shape,[m,g]=null!=u?u:[p,d],y=[c,m,g,f],b=_(r.shape),x=b[0],k=b[1],v=b[2],N=w(r.dtype,h(y));N.fill(l);const I=s.data.get(r.dataId).values,C=s.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?C:C.subarray(8*e,8*e+8);for(let n=0;n<m;++n)for(let s=0;s<g;++s)for(let r=0;r<f;++r){let a;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[0]*s+t[1]*n+t[2])/u,h=(t[3]*s+t[4]*n+t[5])/u,f=nS(c,d,o),m=nS(h,p,o);switch(i){case"nearest":a=rS(I,p,d,x,k,v,e,m,f,r,l);break;case"bilinear":a=aS(I,p,d,x,k,v,e,m,f,r,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}N[e*x+n*k+s*v+r]=a}return s.makeTensorInfo(y,r.dtype,N)}return{dataId:s.write(N,y,r.dtype),shape:r.shape,dtype:r.dtype}}},{kernelName:"Unique",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;kv(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=qN(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:"Unpack",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==a&&(l[u++]=r.shape[e]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[a]=e;const t=_N({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});p[e]=uI({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return p}},{kernelName:"UnsortedSegmentSum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;kv(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=bC({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=ls(e,"int32"),s=n.makeTensorInfo([],"int32",t),a=fC({inputs:{a:s,b:c},backend:n}),i=_v({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=xN({inputs:{a:i,b:r},backend:n}),h=cC({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),l.push(s),l.push(a),l.push(i),l.push(u),l.push(h)}const h=x$({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},y$];for(const e of iS)ns(e);const oS={},lS={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function uS(e){if(!(e in oS)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);if(t.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete oS[e]}),!1),1===e)return t.getContext("webgl",lS)||t.getContext("experimental-webgl",lS);return t.getContext("webgl2",lS)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;oS[e]=t}const t=oS[e];return t.isContextLost()?(delete oS[e],uS(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),oS[e])}var cS,hS,pS;function dS(e,t){return[t,e]}function fS(e){const t=h(e);return f(Math.ceil(t/4))}function mS(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function gS(e,t){const n=e;let s,r,a,i,o,l,u,c,h,p;return 2===j().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),l=e.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function yS(e,t){const n=t();return j().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(cS||(cS={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(hS||(hS={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(pS||(pS={}));function bS(e){return!!(j().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function xS(e,t){return TS(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function wS(e,t){const n=TS(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(yS(e,(()=>e.shaderSource(n,t))),yS(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=kS.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map(((e,t)=>m((t+1).toString(),a)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${m(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const kS=/ERROR: [0-9]+:([0-9]+):/g;function vS(e,t){if(yS(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function NS(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(yS(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),yS(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i))),yS(e,(()=>e.enableVertexAttribArray(o))),!0)}function IS(e,t,n,s){yS(e,(()=>function(e,t,n){ES(e,n),yS(e,(()=>e.activeTexture(e.TEXTURE0+n))),yS(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),yS(e,(()=>e.uniform1i(n,s)))}function CS(e,t,n){yS(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),yS(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function $S(e,t){yS(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),yS(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function SS(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function TS(e,t,n){const s=yS(e,(()=>t()));if(null==s)throw new Error(n);return s}function ES(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function AS(e,t=2){return h(e.slice(0,e.length-t))}function RS(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function FS(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[AS(e),...RS(e)]),t}function DS(e){return e%2==0}function _S(e,t){if(p(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(DS(n)&&DS(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&DS(e[0])&&DS(t[0])}let OS,MS;function LS(e,t){return null!=e.getExtension(t)}function zS(e){try{if(null!=uS(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function BS(e){if(0===e)return!1;const t=uS(e);if(1!==e){if(LS(t,"EXT_color_buffer_float"))return PS(t);const e="EXT_color_buffer_half_float";if(LS(t,e)){const n=t.getExtension(e);return function(e,t){const n=gS(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s);const r=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,r,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const i=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,i),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(i),o}(t,n)}return!1}if(!LS(t,"OES_texture_float"))return!1;if(!LS(t,"WEBGL_color_buffer_float"))return!1;return PS(t)}function PS(e){const t=gS(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function WS(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&o("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const VS=j();function US(){let e,t,n,s,r,a,i,o,l,u;return 2===j().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function GS(e,t,n="index"){const s=_(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${t}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function HS(e){const t=_(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}VS.registerFlag("HAS_WEBGL",(()=>VS.getNumber("WEBGL_VERSION")>0)),VS.registerFlag("WEBGL_VERSION",(()=>zS(2)?2:zS(1)?1:0)),VS.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),VS.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===VS.get("WEBGL_VERSION"))),VS.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),VS.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),VS.registerFlag("WEBGL_PACK",(()=>VS.getBool("HAS_WEBGL"))),VS.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>VS.getBool("WEBGL_PACK"))),VS.registerFlag("WEBGL_PACK_CLIP",(()=>VS.getBool("WEBGL_PACK"))),VS.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>VS.getBool("WEBGL_PACK"))),VS.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>VS.getBool("WEBGL_PACK"))),VS.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>VS.getBool("WEBGL_PACK"))),VS.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>VS.getBool("WEBGL_PACK"))),VS.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>VS.getBool("WEBGL_PACK"))),VS.registerFlag("WEBGL_PACK_REDUCE",(()=>VS.getBool("WEBGL_PACK"))),VS.registerFlag("WEBGL_LAZILY_UNPACK",(()=>VS.getBool("WEBGL_PACK"))),VS.registerFlag("WEBGL_CONV_IM2COL",(()=>VS.getBool("WEBGL_PACK"))),VS.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==OS){const t=uS(e);OS=t.getParameter(t.MAX_TEXTURE_SIZE)}return OS}(VS.getNumber("WEBGL_VERSION")))),VS.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==MS){const t=uS(e);MS=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,MS)}(VS.getNumber("WEBGL_VERSION")))),VS.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=VS.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=uS(e);return t=LS(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:LS(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),VS.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>VS.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Ys())),VS.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=uS(e);if(1===e){if(!LS(t,"OES_texture_float"))return!1}else if(!LS(t,"EXT_color_buffer_float"))return!1;return PS(t)}(VS.getNumber("WEBGL_VERSION")))),VS.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!VS.getBool("WEBGL_FORCE_F16_TEXTURES")&&VS.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),VS.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>BS(VS.getNumber("WEBGL_VERSION")))),VS.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=VS.getNumber("WEBGL_VERSION"))&&null!=uS(e).fenceSync;var e})),VS.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>VS.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),VS.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),VS.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Ys()&&VS.getBool("IS_CHROME")?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}));const jS="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class qS{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=cS.DENSE;const t=fS(e),n=US();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${GS(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class KS{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=cS.DENSE;const t=fS(e),n=US();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${GS(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class XS{constructor(e){this.variableNames=["A"],this.outTexUsage=hS.DOWNLOAD;const t=US();this.outputShape=e,this.userCode=`\n      ${jS}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class YS{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=hS.DOWNLOAD;const t=US();this.outputShape=e,this.userCode=`\n      ${jS}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class JS{constructor(e,t,n=!1){this.variableNames=["A"];const s=US(),[r,a]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${HS(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n        vec4 values = ${s.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${s.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class ZS{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const s=US(),[r,a]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const o=2*t+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n              values = ${s.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${HS(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${s.output} = ${o};\n      }\n    `}}function QS(e){const t=US();return function(e,t){const n=TS(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(yS(e,(()=>e.shaderSource(n,t))),yS(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function eT(e){return function(e,t){const n=TS(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return yS(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),yS(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function tT(e){return function(e,t){const n=TS(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return yS(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),yS(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function nT(e,t,n,s,r,a){!function(e,t){const n=j().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return TS(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return yS(e,(()=>e.bindTexture(o,i))),yS(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),yS(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),yS(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),yS(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),yS(e,(()=>e.texImage2D(o,0,s,t,n,0,r,a,null))),yS(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),i}function sT(e){return e.internalFormatFloat}function rT(e){return e.internalFormatHalfFloat}function aT(e){return e.downloadTextureFormat}function iT(e){return e.internalFormatPackedFloat}function oT(e){return e.internalFormatPackedHalfFloat}function lT(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=mS(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class uT{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=j().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){oS[e]=t}(t,e)):this.gl=uS(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===j().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=xS(this.gl,e),LS(this.gl,t))this.textureHalfFloatExtension=xS(this.gl,t);else if(j().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),LS(this.gl,s))this.colorBufferHalfFloatExtension=xS(this.gl,s);else if(j().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",LS(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!LS(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=eT(this.gl),this.indexBuffer=tT(this.gl),this.framebuffer=function(e){return TS(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=gS(this.gl,this.textureHalfFloatExtension)}get debug(){return j().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;yS(e,(()=>e.finish())),yS(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),yS(e,(()=>e.deleteFramebuffer(this.framebuffer))),yS(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),yS(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),yS(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=dS(t,n);return nT(e,r,a,sT(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=dS(t,n);return nT(e,r,a,rT(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=dS(t,n);return nT(e,r,a,aT(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){yS(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?yS(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):yS(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),yS(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let i,o,l;yS(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),yS(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),yS(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=mS(t,n);return nT(e,r,a,oT(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=mS(t,n);return nT(e,r,a,iT(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&($S(this.gl,this.framebuffer),this.outputTexture=null),yS(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[r,a]=dS(t,n),i=new Uint8Array(t*n*4);return yS(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return lT(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();yS(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return yS(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),yS(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),yS(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(j().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return yS(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=wS(t,e);null==this.vertexShader&&(this.vertexShader=QS(t));const s=function(e){return TS(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return yS(t,(()=>t.attachShader(s,this.vertexShader))),yS(t,(()=>t.attachShader(s,n))),function(e,t){if(yS(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,s),this.debug&&vS(t,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(e,t,n){return yS(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),NS(e,t,"clipSpacePos",n,3,20,0)&&NS(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),s}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&yS(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&vS(this.gl,this.program),yS(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return TS(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),yS(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),IS(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=mS(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&vS(this.gl,this.program),SS(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),yS(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),yS(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=xS(this.gl,2===j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await g((()=>this.disposed||this.isQueryAvailable(e,j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||g((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),CS(this.gl,e,this.framebuffer),this.debug&&SS(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(CS(this.gl,this.outputTexture,this.framebuffer),this.debug&&SS(this.gl)):$S(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;CS(s,e,this.framebuffer),this.debug&&SS(s),this.outputTexture=e,yS(s,(()=>s.viewport(0,0,t,n))),yS(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),yS(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:cT}=_p;function hT(e,t,n,s){const r=[];e.forEach((e=>{const t=h(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`))}));const a=r.join("\n"),i=e.map((e=>function(e,t,n=!1){let s="";s+=n?dT(e):pT(e);const r=e.shapeInfo.logicalShape,a=t.logicalShape;r.length<=a.length&&(s+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=cT(e.shapeInfo.logicalShape,t.logicalShape),l=kT(i),u=i-a;let c;const p=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${p[e+u]} = 0;`)).join("\n");let d="";d=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+u]}`)).join(", ");let f="return outputValue;";const m=1===h(e.shapeInfo.logicalShape),g=1===h(t.logicalShape);if(1!==a||m||g){if(m&&!g)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?f="return vec4(outputValue.x);":o.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&p(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=kT(l),c=cT(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let d;const f=["x","y","z","w","u","v"];d=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${f[e+h]} = 0;`)).join("\n");let m="";m=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${f[t+h]}`)).join(", ");return`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${m});\n    }\n  `}(e,t));return s}(e,t,s))).join("\n"),o=t.texShape,l=US(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,d,f=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${fT}\n    ${mT}\n    ${gT}\n  `}(l);t.isPacked?(c=function(e,t){switch(e.length){case 0:return bT();case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(p(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),r=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),r=s*Math.ceil(e[e.length-2]/2);let a=r,i="",o="b, r, c";for(let t=2;t<e.length-1;t++)a*=e[e.length-t-1],i=`\n      int b${t} = index / ${a};\n      index -= b${t} * ${a};\n    `+i,o=`b${t}, `+o;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${o});\n    }\n  `}(e,t)}}(t.logicalShape,o),d=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(l)):(c=function(e,t){switch(e.length){case 0:return bT();case 1:return function(e,t){if(1===t[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t);case 2:return function(e,t){if(p(e,t))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=GS(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=GS(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=GS(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=GS(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o),d=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),s&&(f+=yT);return[f,u,d,a,c,i,n].join("\n")}function pT(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[s,r]=e.shapeInfo.texShape;if(1===s&&1===r)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[a,i]=e.shapeInfo.texShape,o=xT(t);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${o});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${wT(e)}\n      }\n    `;const s=e.shapeInfo.texShape,r=s[0],a=s[1];if(1===a&&1===r)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const i=xT(t);if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${r}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `;if(1===r)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${a}, index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape;if(null!=r&&p(t,r)){const e=r[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${r[1]}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=x(t),o=a;if(o.length<t.length){const t=["row","col"];return`\n      ${pT(vT(e,o))}\n      float ${s}(int row, int col) {\n        return ${s}(${NT(t,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${wT(e)}\n      }\n    `;const l=r[0],u=r[1],c=xT(n);if(1===u)return`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===l)return`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[1]*t[2],a=t[2],{newShape:i,keptDims:o}=x(t),l=i;if(l.length<t.length){const t=["row","col","depth"];return`\n        ${pT(vT(e,l))}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${NT(t,o)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${a}, 1)));\n        ${wT(e)}\n      }\n    `;const u=e.shapeInfo.texShape,c=u[0],h=u[1],p=e.shapeInfo.flatOffset;if(h===r&&null==p)return`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const d=xT(n);return`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${a} + depth + ${d};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[3],a=t[2]*r,i=t[1]*a,{newShape:o,keptDims:l}=x(t);if(o.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${pT(vT(e,o))}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${NT(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${r}, 1)));\n        ${wT(e)}\n      }\n    `;const u=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===r&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const d=xT(n);return`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=x(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${pT(vT(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${NT(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${wT(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=xT(n);return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=x(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${pT(vT(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${NT(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${wT(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=xT(n);return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function dT(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=US();return`\n    vec4 ${n}() {\n      return ${s.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=e.shapeInfo.texShape,r=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],a=US();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${r[0]}, ${r[1]}, index);\n      return ${a.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=r[0],i=r[1],o=US();if(null!=r&&p(t,r))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],u=Math.ceil(t[1]/2);return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${u}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===t[0]){const n=[1,2],r=["b","row","col"];return`\n        ${dT(vT(e,t.slice(1)))}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${NT(r,n)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(t[2]/2),u=l*Math.ceil(t[1]/2),c=US();return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${u}, ${l}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(t[n-1]/2);let c=u*Math.ceil(t[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let e=2;e<n-1;e++)h=`int b${e}, `+h,c*=t[n-e-1],p=`b${e} * ${c} + `+p;const d=US();return`\n    vec4 ${r}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${d.texture2D}(${s}, uv);\n    }\n  `}(e)}}const fT="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",mT="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",gT="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",yT="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function bT(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function xT(e){return`offset${e}`}function wT(e){const t=e.name,n=h(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function kT(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function vT(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function NT(e,t){return t.map((t=>e[t])).join(", ")}function IT(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!p(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!p(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}const{addImpl:CT,bincountImpl:$T,bincountReduceImpl:ST,ceilImpl:TT,concatImpl:ET,expImpl:AT,expm1Impl:RT,floorImpl:FT,gatherV2Impl:DT,greaterImpl:_T,lessImpl:OT,linSpaceImpl:MT,logImpl:LT,maxImpl:zT,maximumImpl:BT,minimumImpl:PT,multiplyImpl:WT,negImpl:VT,prodImpl:UT,rangeImpl:GT,rsqrtImpl:HT,simpleAbsImpl:jT,sliceImpl:qT,sparseFillEmptyRowsImpl:KT,sparseReshapeImpl:XT,stridedSliceImpl:YT,subImpl:JT,tileImpl:ZT,topKImpl:QT,transposeImpl:eE,uniqueImpl:tE}=KN;function nE(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function sE(e,t){return 1===t?[e]:nE(e,t)}class rE{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=sE("rc",t),s=kT(t),r=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let s="";for(let r=e-2;r<e;r++)s+=`${n[r]} >= ${t[r]}`,r<e-1&&(s+="||");return s}(t,e,n),a=function(e,t,n,s){if(1===e)return"";const r=s.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,s=function(e,t){const n=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let a=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let n=2;n<e;n++)a=`${t[t.length-1-n]},`+a;n.push(a)}return n}(n,t);if(1===n)return`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class aE{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s;this.userCode=`\n      ${s=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${GS(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${HS(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class iE{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=lE(t,n),r=uE(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=oE(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let i;return s===pS.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===pS.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===pS.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===pS.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===pS.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=lE(n,s),a=uE(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=oE(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=j().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function oE(e,t,n,s,r){const a=function(e,t){switch(e){case pS.PACKED_2X2_FLOAT32:return iT(t);case pS.PACKED_2X2_FLOAT16:return oT(t);case pS.UNPACKED_FLOAT32:return sT(t);case pS.UNPACKED_FLOAT16:return rT(t);case pS.PACKED_4X1_UNSIGNED_BYTE:return aT(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=mS(e[0],e[1]);i=t*n}else{const[t,n]=dS(e[0],e[1]);i=t*n}return i*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,a)}function lE(e,t){if(e===hS.UPLOAD)return pS.PACKED_2X2_FLOAT32;if(e===hS.RENDER||null==e)return function(e){return j().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?pS.PACKED_2X2_FLOAT32:pS.UNPACKED_FLOAT32:e?pS.PACKED_2X2_FLOAT16:pS.UNPACKED_FLOAT16}(t);if(e===hS.DOWNLOAD||e===hS.PIXELS)return pS.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function uE(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class cE{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const hE="return abs(x);";const pE="return x;";class dE{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class fE{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=sE("rc",t),s=kT(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const mE=Ic,gE={};class yE extends t{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!j().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const e=uS(j().getNumber("WEBGL_VERSION"));this.binaryCache=((n=j().getNumber("WEBGL_VERSION"))in gE||(gE[n]={}),gE[n]),this.gpgpu=new uT(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var n;this.textureManager=new iE(this.gpgpu),this.numMBBeforeWarning=null==j().global.screen?1024:j().global.screen.height*j().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new e(this,ii())}nextDataId(){return yE.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((j().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||j().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:hS.UPLOAD,refCount:1}),s}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,s,r){if(j().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:hS.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new dE(i,pE):new cE(i,pE);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=cs()),"complex64"===s){c=pp(this.readSync(r.real.dataId),this.readSync(r.imag.dataId))}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=cs()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new dE(s,pE):new cE(s,pE);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(!j().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===j().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&j().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture,...fS(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);u=pp(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=h(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}null!=l&&this.disposeIntermediateTensorInfo(l);const p=this.convertAndCacheOnCPU(e,u),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&ii().removeDataId(e,this),this.pendingDeletes--),p}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>ds(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return jr(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!bS(n)){if(j().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=h(t);if(j().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture,...fS(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=j().getBool("WEBGL_PACK")&&!0===s,i=a?FS(t):t,o=a?new YS(i):new XS(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}async time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=c(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=c(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);o.kernelMs=i(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:cs(),endMs:null}}endTimer(e){return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=cs(),e)}async getQueryTime(e){if(j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=128){return j().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&h(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){hp("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return mE(e.shape,t)}packedUnaryOp(e,t,n){const s=new dE(e.shape,t),r=this.compileAndRun(s,[e],n);return ii().makeTensorFromDataId(r.dataId,r.shape,r.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=jT(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(j().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,hE,e.dtype);const t=new cE(e.shape,hE),n=this.compileAndRun(t,[e]);return ii().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&T(n[0])){const r=n.map((e=>ps(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:s}=this.makeTensorInfo(e,t,n);return ii().makeTensorFromDataId(s,e,t,this)}unpackTensor(e){const t=new fE(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new rE(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[AS(e.shape),...RS(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[AS(t),...RS(t)],a=new aE(r,n),i=this.runWebGLProgram(a,[s],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:s,dtype:r}=t,a=FS(s);let i;i=n?new KS(a):new qS(a);return{dtype:r,shape:s,dataId:this.runWebGLProgram(i,[{shape:a,dtype:r,dataId:e}],r,null,!0).dataId}}runWebGLProgram(e,t,n,s,r=!1){const a=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(a.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===cS.DENSE){const t=fS(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===h(a.shape))return i.values=w(a.dtype,0),a;const o=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&h(t.shape)<=j().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),o.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!_S(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),o.push(t),n=this.texData.get(t.dataId),e.shape=s}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(a.dataId);const u={shape:a.shape,texData:i,isUniform:!1},c=function(e,t,n){let s="";t.concat(n).forEach((e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;s+=`${e.shape}_${n}_${t}`}));const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r,a}(e,l,u),p=this.getAndSaveBinary(c,(()=>function(e,t,n,s){const r=t.userCode,a=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),i=a.map((e=>e.shapeInfo)),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=hT(a,o,r,t.packedInputs),u=e.createProgram(l);let c=null;const h=e.getUniformLocation(u,"NAN",!1);1===j().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(u,"INFINITY",!1));const p={};for(let n=0;n<t.variableNames.length;n++){const s=t.variableNames[n],r=!1;p[s]=e.getUniformLocation(u,s,r),p[`offset${s}`]=e.getUniformLocation(u,`offset${s}`,r)}return{program:t,source:l,webGLProgram:u,uniformLocations:p,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,e,l,u))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),function(e,t,n,s,r){IT(t.inShapeInfos,n),IT([t.outShapeInfo],[s]);const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a,i[0],i[1]):e.setOutputMatrixTexture(a,i[0],i[1]),e.setProgram(t.webGLProgram),1===j().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const r=t.program.variableNames[s],a=t.uniformLocations[r],i=t.uniformLocations[`offset${r}`];if(null!=a)if(n.isUniform)if(h(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,a,s)})),null!=r&&r(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,p,l,u,s),o.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=j().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=cs();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!j().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===r){const e=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),e}return a}compileAndRun(e,t,n,s,r=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!j().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=ui((()=>{if(!j().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=j().getBool("DEBUG");j().set("DEBUG",!1);const t=this.abs(Uu(1e-8)).dataSync()[0];if(j().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:i,usage:o,isPacked:l}=t;if(null!=i)return;const u=null!=this.activeTimers;let c;u&&(c=cs());let p=t.texShape;if(null==p&&(p=function(e,t=!1){let n=j().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?a(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=x(e);e=t.newShape}let s=h(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=AS(e);let n=2,r=2;return e.length&&([n,r]=RS(e)),s=t*(n/2)*(r/2),f(s).map((e=>2*e))}return f(s)}(n,l),t.texShape=p),null!=r){const e=FS(n);let a,i=p[1],o=p[0];const h=r instanceof Uint8Array;l?([i,o]=mS(p[0],p[1]),a=new ZS(e,[o,i],h)):a=new JS(e,[o,i],h);const d=this.makeTensorInfo([o,i],s);this.texData.get(d.dataId).usage=h?hS.PIXELS:hS.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,o,r);const f=!0,m=this.runWebGLProgram(a,[d],s,null,f),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(d),this.texData.delete(m.dataId),t.values=null,u&&(this.uploadWaitMs+=cs()-c)}else{const e=this.acquireTexture(p,o,s,l);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*$(t)}}yE.nextDataId=0;Js()&&xi("webgl",(()=>new yE),2);class bE{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Lo(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class xE{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Lo(t,n);const r=this.outputShape.length;let a="";if(s)if(0===r||1===h(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${kT(r)} coords = getOutputCoords();\n        `,1===r)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=sE("coords",r);a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function wE(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const kE={kernelName:"Identity",backendName:"webgl",kernelFunc:wE};function vE(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=wE({inputs:{x:s},backend:n}),l=wE({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:l},a}const NE={kernelName:"Complex",backendName:"webgl",kernelFunc:vE},IE="return (a < 0.) ? b * a : a;",CE="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const $E={kernelName:"LeakyRelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",ls(a,"float32")),o=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new xE(CE,r.shape,i.shape):new bE(IE,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],r.dtype);return n.disposeIntermediateTensorInfo(i),l}},SE="return (a < 0.) ? b * a : a;",TE="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const EE={kernelName:"Prelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new xE(TE,s.shape,r.shape):new bE(SE,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}};function AE({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=j().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new dE(i.shape,t):new cE(i.shape,e),o.runWebGLProgram(u,[i],l)}}function RE({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new bE(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],Ms(n.dtype,s.dtype))})),a=vE({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||Ms(l.dtype,u.dtype);if(c.shouldExecuteOnCPU([l,u])&&null!=r){const e=c.texData.get(l.dataId),t=c.texData.get(u.dataId),[n,s]=r(l.shape,u.shape,e.values,t.values,h),a=c.makeTensorInfo(s,h);return c.texData.get(a.dataId).values=n,a}let p;return p=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new xE(t,l.shape,u.shape,n):new bE(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function FE(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?TE:SE;if("leakyrelu"===e)return t?CE:IE;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class DE{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const _E="return areal * breal - aimag * bimag;",OE="return areal * bimag + aimag * breal;";class ME{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Lo(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const LE="return a * b;";function zE(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=Ms(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new ME(_E,s.shape,r.shape),i=new ME(OE,s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=vE({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=WT(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new xE(LE,s.shape,r.shape):new bE(LE,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const BE={kernelName:"Multiply",backendName:"webgl",kernelFunc:zE};function PE(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,l=h(r.shape),u=y(a,l),c=h(u);o(l===c,(()=>`The new shape (${u}) has ${c} elements and the old shape (${r.shape}) has ${l} elements. The new shape and old shape must have the same number of elements.`));const p=i.texData.get(r.dataId);return!p.isPacked||_S(r.shape,u)||null!==p.texture&&_S(p.shape,u)?(i.incRef(r.dataId),{dataId:r.dataId,shape:u,dtype:r.dtype}):function(e,t,n){const s=[AS(e.shape),...RS(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[AS(t),...RS(t)],i=new aE(a,s),o=n.runWebGLProgram(i,[r],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(r,u,i)}const WE={kernelName:"Reshape",backendName:"webgl",kernelFunc:PE};class VE{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${d(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class UE{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function GE(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=sp(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new VE({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new VE({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new UE({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class HE{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=kT(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class jE{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=kT(this.rank),r=nE("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function qE(e,t,n){const s=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new jE(e.shape,t):new HE(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function KE(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=t,a=e.shape.length,i=b(r,e.shape);let o=i;const l=Fl(o,a),u=null!=l;let c=e;u&&(c=qE(e,l,s),o=_l(o.length,a)),Rl("sum",o,a);const[p,d]=El(c.shape,o);let f=p;n&&(f=Al(p,i));const m=h(d),g=PE({inputs:{x:c},attrs:{shape:[h(e.shape)/m,m]},backend:s}),y=GE(g,Ls(e.dtype),"sum",s),x=PE({inputs:{x:y},attrs:{shape:f},backend:s});return s.disposeIntermediateTensorInfo(g),s.disposeIntermediateTensorInfo(y),u&&s.disposeIntermediateTensorInfo(c),x}(r,a,i,n)}const XE={kernelName:"Sum",backendName:"webgl",kernelFunc:KE};function YE(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=r.shape[a[e]];let u;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=eE(e,r.shape,r.dtype,a,l);u=i.makeTensorInfo(l,r.dtype);i.texData.get(u.dataId).values=t}else u=qE(r,a,i);return u}const JE={kernelName:"Transpose",backendName:"webgl",kernelFunc:YE};function ZE({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:l=0,activation:u=null}){const c=e.shape.length,p=t.shape.length,d=n?e.shape[c-2]:e.shape[c-1],f=s?t.shape[p-1]:t.shape[p-2],m=n?e.shape[c-1]:e.shape[c-2],g=s?t.shape[p-2]:t.shape[p-1],y=e.shape.slice(0,-2),b=t.shape.slice(0,-2),x=h(y),w=h(b);o(c>=2&&p>=2&&(x===w||1===x||1===w),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${y}) and (${b}).`));const k=(x>w?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([m,g]);o(d===f,(()=>`Error in matMul: inner shapes (${d}) and (${f}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const v=n?[x,d,m]:[x,m,d],N=s?[w,g,f]:[w,f,g],I=PE({inputs:{x:e},backend:r,attrs:{shape:v}}),C=PE({inputs:{x:t},backend:r,attrs:{shape:N}}),$=[I,C],S=Math.max(x,w),T=n?I.shape[1]:I.shape[2],E=null!=a,A=null!=i,R="leakyrelu"===u,F=null!=u?FE(u,!0):null;let D;if((1===m||1===g)&&T>1e3&&!1===(E||A||R||null!=F)){let e=I,t=C;n&&(e=YE({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),$.push(e)),s&&(t=YE({inputs:{x:C},backend:r,attrs:{perm:[0,2,1]}}),$.push(t));const a=1===g;let i=e;1!==g&&(i=PE({inputs:{x:e},backend:r,attrs:{shape:[S,T,1]}}),$.push(i));const o=1===g?2:1;let l=t;a&&(l=PE({inputs:{x:t},backend:r,attrs:{shape:[S,1,T]}}),$.push(l));const u=zE({inputs:{a:i,b:l},backend:r});D=KE({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),$.push(u)}else{const o=Ms(e.dtype,t.dtype),u=new DE(v,N,[S,m,g],n,s,E,F,A,R),c=[I,C];if(null!=a&&c.push(a),A&&c.push(i),R){const e=r.makeTensorInfo([],"float32",ls(l,"float32"));c.push(e),$.push(e)}D=r.runWebGLProgram(u,c,o)}const _=PE({inputs:{x:D},backend:r,attrs:{shape:k}});$.push(D);for(const e of $)r.disposeIntermediateTensorInfo(e);return _}const QE={kernelName:"_FusedMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return ZE({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}};const eA={kernelName:"Abs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=jT(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=j().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new dE(s.shape,"return abs(x);"):new cE(s.shape,"return abs(x);"),n.runWebGLProgram(r,[s],s.dtype)}},tA={kernelName:"Acos",backendName:"webgl",kernelFunc:AE({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"})},nA={kernelName:"Acosh",backendName:"webgl",kernelFunc:AE({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"})},sA="return a + b;",rA=RE({opSnippet:sA,packedOpSnippet:sA,supportsComplex:!0,cpuKernelImpl:CT}),aA={kernelName:ee,backendName:"webgl",kernelFunc:rA};class iA{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class oA{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const lA={kernelName:"AddN",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return wE({inputs:{x:r[0]},backend:s});if(r.length>j().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map((e=>e.dtype)).reduce(((e,t)=>Ms(e,t))),i=r.map((e=>e.shape)),o=j().getBool("WEBGL_PACK")?new oA(r[0].shape,i):new iA(r[0].shape,i);return s.runWebGLProgram(o,r,a)}};const uA={kernelName:"All",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=b(a,r.shape);let u=l;const c=Fl(u,o);let p=r;null!=c&&(p=YE({inputs:{x:r},backend:n,attrs:{perm:c}}),u=_l(u.length,o)),Rl("all",u,o);const[d,f]=El(p.shape,u),m=PE({inputs:{x:p},backend:n,attrs:{shape:[-1,h(f)]}}),g=GE(m,m.dtype,"all",n);let y;if(i){y=PE({inputs:{x:g},backend:n,attrs:{shape:Al(d,l)}})}else y=PE({inputs:{x:g},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(p),y}};const cA={kernelName:"Any",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=b(a,r.shape);let u=l;const c=Fl(u,o);let p=r;null!=c&&(p=YE({inputs:{x:r},backend:n,attrs:{perm:c}}),u=_l(u.length,o)),Rl("any",u,o);const[d,f]=El(p.shape,u),m=PE({inputs:{x:p},backend:n,attrs:{shape:[-1,h(f)]}}),g=GE(m,m.dtype,"any",n);let y;if(i){y=PE({inputs:{x:g},backend:n,attrs:{shape:Al(d,l)}})}else y=PE({inputs:{x:g},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(p),y}};class hA{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class pA{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,o(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,l=i.length,u=kT(l),c=sE("coords",l);let h,p;if(1===a){p=l+1;const e=kT(p);h=`\n        ${e} sourceLocR = ${e}(${c.join()}, 0);\n        ++${c[l-1]};\n        ${e} sourceLocG = ${e}(${c.join()}, 0);\n        ++${c[l-2]};\n        ${e} sourceLocA = ${e}(${c.join()}, 0);\n        --${c[l-1]};\n        ${e} sourceLocB = ${e}(${c.join()}, 0);\n        --${c[l-2]};`}else p=l,h=`\n        ${u} sourceLocR = coords;\n        ++${c[l-1]};\n        ${u} sourceLocG = coords;\n        ++${c[l-2]};\n        ${u} sourceLocA = coords;\n        --${c[l-1]};\n        ${u} sourceLocB = coords;\n        --${c[l-2]};`;const d=["x","y","z","w","u","v"].slice(0,p),f="."+d[p-1],m=d.map((e=>"int "+e)),g=sE("sourceLocR",p-1).concat("inIdx.r"),y=sE("sourceLocG",p-1).concat("inIdx.g"),b=sE("sourceLocB",p-1).concat("inIdx.b"),x=sE("sourceLocA",p-1).concat("inIdx.a"),w="max"===n?"greaterThan":"lessThan",k=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,v=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,N=s?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${N}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[l-1]} < ${i[l-1]-1};\n        bool hasNextRow = ${c[l-2]} < ${i[l-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${k}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function dA(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=sp(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new hA(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=dA(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function fA(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=sp(r[r.length-1]),i=new pA(r,a,n,null==s),o=null==s?[t]:[t,s],l=e.runWebGLProgram(i,o,"int32");if(l.shape.length===t.shape.length){const s=fA(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function mA(e,t,n,s){const r=[n];if(Rl("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!j().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[a,i]=El(t.shape,r),o=h(i),l=PE({inputs:{x:t},backend:e,attrs:{shape:[-1,o]}});n.push(l);const u=dA(e,l,s);n.push(u);const c=PE({inputs:{x:u},backend:e,attrs:{shape:a}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),c}return fA(e,t,s)}const gA={kernelName:"ArgMax",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=b(a,r.shape);const o=Fl(i,r.shape.length);let l=r;const u=[];null!=o&&(l=YE({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=_l(i.length,l.shape.length)),Rl("argMax",[i[0]],l.shape.length);const c=mA(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const yA={kernelName:"ArgMin",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=b(a,r.shape);const o=Fl(i,r.shape.length);let l=r;const u=[];null!=o&&(l=YE({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=_l(i.length,l.shape.length)),Rl("argMin",[i[0]],l.shape.length);const c=mA(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},bA={kernelName:"Asin",backendName:"webgl",kernelFunc:AE({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"})},xA={kernelName:"Asinh",backendName:"webgl",kernelFunc:AE({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"})},wA={kernelName:"Atan",backendName:"webgl",kernelFunc:AE({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"})},kA={kernelName:"Atan2",backendName:"webgl",kernelFunc:RE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})},vA={kernelName:"Atanh",backendName:"webgl",kernelFunc:AE({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"})};class NA{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class IA{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const CA={kernelName:"AvgPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;WS(r,"avgPool");const{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=s;o(Yi(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=Pi(r.shape,a,i,1,l,u);if(1===c.filterWidth&&1===c.filterHeight&&p(c.inShape,c.outShape))return wE({inputs:{x:r},backend:n});const h=new NA(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};const $A={kernelName:"AvgPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=Wi(r.shape,a,i,[1,1,1],o,l,u),h=new IA(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class SA{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class TA{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const EA={kernelName:"AvgPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=Wi(i.shape,o,l,[1,1,1],u,c),p=new TA(h);return n.runWebGLProgram(p,[r],i.dtype)}};const AA={kernelName:"AvgPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;WS([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=Pi(i.shape,o,l,1,u),h=new SA(c);return n.runWebGLProgram(h,[r],i.dtype)}};const RA={kernelName:"BatchMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return ZE({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class FA{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Lo(e,t),Lo(e,n);let i="0.0";null!=s&&(Lo(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(Lo(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class DA{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Lo(e,t),Lo(e,n);let i="vec4(0.0)";null!=s&&(Lo(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(Lo(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const _A={kernelName:"FusedBatchNorm",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:l}=e;o(r.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),o(null==i||r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),o(null==l||r.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const c=[s,r,a];let h=null;null!=i&&(h=i.shape,c.push(i));let p=null;null!=l&&(p=l.shape,c.push(l));const d=j().getBool("WEBGL_PACK_NORMALIZATION")?new DA(s.shape,r.shape,a.shape,h,p,u):new FA(s.shape,r.shape,a.shape,h,p,u);return t.runWebGLProgram(d,c,c[0].dtype)}};class OA{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=kT(this.rank),n=`uniform int start[${this.rank}];`,s=function(e){if(1===e)return"sourceLoc";if(e<=6)return MA.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${MA[t]} = start[${t}] + coords.${MA[t]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const MA=["x","y","z","w","u","v"];class LA{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=kT(this.rank),n=sE("coords",this.rank),s=sE("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function zA(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=Va(r,a,i);if(Ta(r,o,l),0===h(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=qT(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=Pa(r.shape,o,l);if(u||!c){const e=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new LA(l):new OA(l),t=e.getCustomSetupFunc(o);return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=Wa(t,_(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const BA={kernelName:"Slice",backendName:"webgl",kernelFunc:zA},PA={kernelName:"BatchToSpaceND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;o(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const l=a.reduce(((e,t)=>e*t)),u=ap(r.shape,a,l),c=ip(u.length,a.length),h=op(r.shape,a,l),p=lp(i,a.length),d=up(h,i,a.length),f=[],m=PE({inputs:{x:r},backend:n,attrs:{shape:u}}),g=YE({inputs:{x:m},backend:n,attrs:{perm:c}}),y=PE({inputs:{x:g},backend:n,attrs:{shape:h}}),b=zA({inputs:{x:y},backend:n,attrs:{begin:p,size:d}});return f.push(m),f.push(g),f.push(y),f.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}};const WA={kernelName:"Bincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=$T(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}},VA=RE({opSnippet:"return float(a != b);",dtype:"bool"}),UA={kernelName:"NotEqual",backendName:"webgl",kernelFunc:VA};function GA(e){const{inputs:t,backend:n}=e,{input:s}=t;return wE({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const HA={kernelName:"Real",backendName:"webgl",kernelFunc:GA};const jA={kernelName:"Cast",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return wE({inputs:{x:a},backend:s});const t=Hl(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=vE({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=GA({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!I(a.dtype,i)){const e=wE({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new cE(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",w("bool",1)),t=VA({inputs:{a:a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},qA="return ceil(x);",KA={kernelName:"Ceil",backendName:"webgl",kernelFunc:AE({opSnippet:qA,packedOpSnippet:qA,cpuKernelImpl:TT})};class XA{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class YA{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}const JA={kernelName:"ClipByValue",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=j().getBool("WEBGL_PACK_CLIP")?new YA(r.shape):new XA(r.shape);const l=o.getCustomSetupFunc(a,i);return n.runWebGLProgram(o,[r],r.dtype,l)}};class ZA{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function QA(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const eR={kernelName:"ComplexAbs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new ZA(s.shape),i=[QA(s,r.complexTensorInfos.real),QA(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class tR{constructor(e){this.outputShape=[],this.outputShape=np(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class nR{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=np(e,t);const n=this.outputShape,s=n.length,r=kT(s),a=sE("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${sR(i,l,t)}),\n            vec2(${sR(u,l,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${sR(i,l,d)}),\n          vec2(${sR(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function sR(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function rR(e){const{inputs:t,backend:n}=e,{input:s}=t;return wE({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const aR={kernelName:"Imag",backendName:"webgl",kernelFunc:rR};function iR(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>GA({inputs:{input:e},backend:n}))),r=e.map((e=>rR({inputs:{input:e},backend:n}))),a=iR(s,t,n),i=iR(r,t,n),o=vE({inputs:{real:a,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}let r=n.shouldExecuteOnCPU(e);if("string"===s&&(r=!0),r){const r=e.map((e=>{const s=h(e.shape.slice(t));return PE({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})})),a=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),i=np(r.map((e=>e.shape)),1),o=1===r[0].shape[0],l=ET(a,i,s,o),u=np(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>j().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),r=iR(e.slice(0,s),t,n),a=iR(e.slice(s),t,n),i=iR([r,a],t,n);return n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}if(j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new nR(e.map((e=>e.shape)),t);return n.runWebGLProgram(r,e,s)}const{tensors2D:a,outShape:i}=function(e,t,n){const s=np(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>PE({inputs:{x:e},attrs:{shape:[-1,h(e.shape.slice(t))]},backend:n}))),outShape:s}}(e,t,n),o=new tR(a.map((e=>e.shape))),l=n.runWebGLProgram(o,a,s);a.forEach((e=>n.disposeIntermediateTensorInfo(e)));const u=PE({inputs:{x:l},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(l),u}function oR(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=b(r,t[0].shape)[0],i=np(t.map((e=>e.shape)),a);if(0===h(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>h(e.shape)>0));if(1===o.length)return wE({inputs:{x:o[0]},backend:n});return tp(o.map((e=>e.shape)),a),iR(o,a,n)}const lR={kernelName:"Concat",backendName:"webgl",kernelFunc:oR};class uR{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class cR{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class hR{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:s,inChannels:r,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=r*s,m=US(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let s=0;s<=1;s++)x+=`\n          blockIndex = rc.y + ${s};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${r}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${r}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+s}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+s}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function pR({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:l=null}){const u=e.shape,c=s.texData.get(e.dataId),h=n.inChannels,p=u[0]*u[1]*u[2],d=n.outChannels,f="channelsLast"===n.dataFormat;let m;const g=[],y=(1===p||1===d)&&h>1e3,b=u[2]%2!=0&&!!c.isPacked;if(!y&&j().getBool("WEBGL_LAZILY_UNPACK")&&j().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&b){const h=f?u[0]*u[1]*(u[2]+1):u[0]*u[2]*(u[3]+1),p={dataId:e.dataId,shape:[1,h,n.inChannels],dtype:e.dtype},d=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,o(_S(c.shape,p.shape),(()=>`packed reshape ${c.shape} to ${p.shape} isn't free`));const y=PE({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(y);const b=ZE({a:p,b:y,backend:s,transposeA:false,transposeB:false,bias:r,activation:l,preluActivationWeights:a,leakyreluAlpha:i}),x=s.texData.get(b.dataId);o(x.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=d,x.shape=n.outShape,m=wE({inputs:{x:b},backend:s}),m.shape=n.outShape,g.push(b)}else{const o=PE({inputs:{x:e},backend:s,attrs:{shape:[1,f?u[0]*u[1]*u[2]:u[0]*u[2]*u[3],n.inChannels]}}),c=PE({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=ZE({a:o,b:c,transposeA:false,transposeB:false,backend:s,bias:r,activation:l,preluActivationWeights:a,leakyreluAlpha:i});m=PE({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),g.push(o),g.push(c),g.push(h)}for(const e of g)s.disposeIntermediateTensorInfo(e);return m}function dR({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:p,outHeight:d,dataFormat:f}=n,m="channelsLast"===f,g=l*u*c,y=d*p,b=[g,y],x=[],w=PE({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),k=PE({inputs:{x:t},backend:s,attrs:{shape:[1,g,h(t.shape)/g]}});x.push(w),x.push(k);const v=new hR(b,w.shape,n),N=s.runWebGLProgram(v,[w],"float32"),I=PE({inputs:{x:N},backend:s,attrs:{shape:[1,b[0],b[1]]}});x.push(N),x.push(I);const C=null!=r,$=null!=a,S="leakyrelu"===o,T=o?FE(o,!0):null,E=new DE(I.shape,k.shape,[1,y,n.outChannels],!0,!1,C,T,$,S),A=[I,k];if(r&&A.push(r),$&&A.push(a),S){const e=s.makeTensorInfo([],"float32",ls(i,"float32"));A.push(e),x.push(e)}const R=s.runWebGLProgram(E,A,"float32"),F=PE({inputs:{x:R},backend:s,attrs:{shape:m?[1,d,p,n.outChannels]:[1,n.outChannels,d,p]}});x.push(R);for(const e of x)s.disposeIntermediateTensorInfo(e);return F}const fR={kernelName:"Conv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Ji(l),p=Vi(r.shape,a.shape,i,u,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(j().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])d=dR({x:r,filter:a,convInfo:p,backend:n});else{const e=new uR(p);d=n.runWebGLProgram(e,[r,a],"float32")}else d=pR({x:r,filter:a,convInfo:p,backend:n});const f=PE({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class mR{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class gR{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class yR{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class bR{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const xR={kernelName:"Conv2DBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Ji(l),p=Vi(r.shape,c,i,1,o,u,!1,h),d=new mR(p);return n.runWebGLProgram(d,[r,a],"float32")}};const wR={kernelName:"Conv2DBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Ji(u),p=Vi(i,a.shape,o,1,l,c,!1,h),d=new gR(p);return n.runWebGLProgram(d,[r,a],"float32")}};const kR={kernelName:"Conv3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=Ui(r.shape,a.shape,i,l,o),c=new cR(u);return n.runWebGLProgram(c,[r,a],"float32")}};const vR={kernelName:"Conv3DBackpropFilterV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=Ui(r.shape,l,i,1,o),c=new yR(u);return n.runWebGLProgram(c,[r,a],"float32")}};const NR={kernelName:"Conv3DBackpropInputV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=Ui(l,a.shape,o,1,i),c=new bR(u);return n.runWebGLProgram(c,[r,a],"float32")}},IR=AE({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),CR={kernelName:Re,backendName:"webgl",kernelFunc:IR},$R={kernelName:"Cosh",backendName:"webgl",kernelFunc:AE({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"})};class SR{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const TR={kernelName:"CropAndResize",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new SR(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};class ER{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const s=e.length,r=t?"0.0":`getX(${AR(s,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${kT(s)} coords = getOutputCoords();\n        int end = ${RR(s,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${RR(s,"coords")} = idx;\n          val += getX(${AR(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function AR(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function RR(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const FR={kernelName:"Cumsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s,l=r.shape.length,u=Fl([a],l);let c=r;null!=u&&(c=YE({inputs:{x:r},backend:n,attrs:{perm:u}}));const h=_l(1,l)[0];if(h!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${r.shape.length-1} but got axis=${a}`);const p=c.shape[h];let d=wE({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(p))-1;e++){const t=new ER(c.shape,!1,o),s=t.getCustomSetupFunc(e),r=d;d=n.runWebGLProgram(t,[d],d.dtype,s),n.disposeIntermediateTensorInfo(r)}if(i){const e=new ER(c.shape,i,o),t=d;d=n.runWebGLProgram(e,[d],d.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=YE({inputs:{x:d},backend:n,attrs:{perm:Dl(u)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),e}return d}};const DR={kernelName:"DenseBincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=$T(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=ST(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class _R{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const OR={kernelName:"DepthToSpace",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;o(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const l=r.shape[0],u="NHWC"===i?r.shape[1]:r.shape[2],c="NHWC"===i?r.shape[2]:r.shape[3],h="NHWC"===i?r.shape[3]:r.shape[1],p=u*a,d=c*a,f=h/(a*a),m=new _R("NHWC"===i?[l,p,d,f]:[l,f,p,d],a,i);return n.runWebGLProgram(m,[r],r.dtype)}};class MR{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${a}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class LR{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const i=e.outChannels/e.inChannels,o=e.inHeight,l=e.inWidth,u=e.padInfo.top,c=e.padInfo.left,h=e.strideHeight,p=e.strideWidth,d=e.dilationHeight,f=e.dilationWidth,m=e.filterHeight,g=e.filterWidth,y=g;let b="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<g;e++)b+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xC${e};`;for(let e=0;e<m;e++){for(let e=0;e<g;e++)b+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xC${e} = vec4(0.0);`;b+=`\n        xR = xRCorner + ${e*d};\n        if (xR >=0 && xR < ${o}) {\n      `;for(let t=0;t<(y+1)/2;t++){const n=2*t,s=n*f;if(b+=`\n          xC = xCCorner + ${s};\n          `,1===p){if(n<g&&(c%2==1?(b+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < ${l} && xTexelC${s}Ready == 0) {\n                  xTexelC${s} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${l}) {\n                    xTexelC${s}.zw = vec2(0.0);\n                  }\n                  xTexelC${s}Ready = 1;\n                }\n              `,b+=1===f&&s>0?`\n                xC${n} = vec4(xTexelC${s-2}.zw, xTexelC${s}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < ${l}) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${l}) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${n} = vec4(previous.zw, xTexelC${s}.xy);\n                  } else {\n                    xC${n} = vec4(0.0, 0.0, xTexelC${s}.xy);\n                  }\n                  `):b+=`\n                if (xC >= 0 && xC < ${l} && xTexelC${s}Ready == 0) {\n                  xTexelC${s} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${l}) {\n                    xTexelC${s}.zw = vec2(0.0);\n                  }\n                  xTexelC${s}Ready = 1;\n                }\n\n                xC${n} = xTexelC${s};\n                `,s+1<g)){const e=c%2==0?a(f):f;f%2==0&&c%2==1||f%2!=0&&c%2!=1?(b+=`\n                  xCOffset = xC + ${c%2} + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < ${l} && xTexelC${s+2}Ready == 0) {\n                    xTexelC${s+2} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${l}) {\n                      xTexelC${s+2}.zw = vec2(0.0);\n                    }\n                    xTexelC${s+2}Ready = 1;\n                  }\n                  `,f>1&&(b+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < ${l} && xTexelC${s}Ready == 0) {\n                      xTexelC${s} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${s}Ready = 1;\n                    }\n                    `),b+=`\n                  xC${n+1} = vec4(xTexelC${s}.zw, xTexelC${s+2}.xy);\n                  `):b+=1===e?`\n                    xC${n+1} = xTexelC${s};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < ${l} && xTexelC${s+2}Ready == 0) {\n                      xTexelC${s+2} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= ${l}) {\n                        xTexelC${s+2}.zw = vec2(0.0);\n                      }\n                      xTexelC${s+2}Ready = 1;\n                    }\n\n                    xC${n+1} = xTexelC${s+2};\n                    `}}else s<g&&(c%2==1?(b+=`\n                xCOffset = xC + 1 - ${p};\n                if(xCOffset >= 0 && xCOffset < ${l} && xTexelC${s}Ready == 0) {\n                  xTexelC${s} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${l}) {\n                    xTexelC${s}.zw = vec2(0.0);\n                  }\n                  xTexelC${s}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${l} && xTexelC${s+2}Ready == 0) {\n                  xTexelC${s+2} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= ${l}) {\n                    xTexelC${s+2}.zw = vec2(0.0);\n                  }\n                  xTexelC${s+2}Ready = 1;\n                }\n\n                xC${n} = vec4(xTexelC${s}.zw, xTexelC${s+2}.zw);\n              `,s+1<g&&(b+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + ${p};\n                  if(xCOffset >= 0 && xCOffset < ${l}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${n+1} = vec4(xTexelC${s+2}.xy, final.xy);\n                `)):(b+=`\n                if(xC >= 0 && xC < ${l} && xTexelC${s}Ready == 0) {\n                  xTexelC${s} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${l}) {\n                    xTexelC${s}.zw = vec2(0.0);\n                  }\n                  xTexelC${s}Ready = 1;\n                }\n\n                xCOffset = xC + ${p};\n                if(xCOffset >= 0 && xCOffset < ${l} && xTexelC${s+2}Ready == 0) {\n                  xTexelC${s+2} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= ${l}) {\n                    xTexelC${s+2}.zw = vec2(0.);\n                  }\n                  xTexelC${s+2}Ready = 1;\n                }\n\n                xC${n} = vec4(\n                  xTexelC${s}.xy, xTexelC${s+2}.xy);\n              `,s+1<g&&(b+=`\n                  xC${n+1} = vec4(xTexelC${s}.zw, xTexelC${s+2}.zw);\n                `)));n<g&&(b+=`\n            wTexel = getW(${e}, ${s}, d1, q);\n            dotProd += xC${n} * vec4(wTexel.xz, wTexel.xz);\n          `,s+1<g&&(b+=`\n              wTexel = getW(${e}, ${s+1}, d1, q);\n              dotProd += xC${n+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}b+="\n        }\n      "}let x="",w="";n&&(x=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${h}, ${p});\n      const ivec2 pads = ivec2(${u}, ${c});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${b}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}const zR={kernelName:"DepthwiseConv2dNative",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:l,dilations:u,dimRoundingMode:c}=s;let h=u;null==h&&(h=[1,1]),o(Yi(i,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${h}'`));const p=Vi(r.shape,a.shape,i,h,l,c,!0);let d;return d=j().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new LR(p):new MR(p),n.runWebGLProgram(d,[r,a],"float32")}};class BR{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class PR{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const WR={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=Vi(r.shape,c,i,o,l,u,!0),p=new BR(h);return n.runWebGLProgram(p,[r,a],"float32")}};const VR={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=Vi(c,a.shape,i,o,l,u,!0),p=new PR(h);return n.runWebGLProgram(p,[r,a],"float32")}};class UR{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const GR={kernelName:"Diag",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=h(s.shape),i=PE({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new UR(a),l=n.runWebGLProgram(o,[i],i.dtype),u=PE({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class HR{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const jR={kernelName:"Dilation2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=Bi(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new HR(u);c=n.runWebGLProgram(h,[r,a],"float32");const p=PE({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}};const qR={kernelName:"Einsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=kp(r,a.length);Np(i.length,l,a);const{path:u,steps:c}=Ip(o,l),h=c.length;let d=null,f=i.length;const m=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=vp(f,l[t]);let r;Cp(e)?r=a[t]:(r=YE({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),m.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);p(r.shape,i)||(r=PE({inputs:{x:r},backend:n,attrs:{shape:i}}),m.push(r)),null===d?d=r:(d=zE({inputs:{a:r,b:d},backend:n}),m.push(d))}e<h-1&&(u[e]>=0&&(d=KE({inputs:{x:d},backend:n,attrs:{axis:u[e]-(i.length-f),keepDims:!1}}),m.push(d)),f--)}for(const e of m)e!==d&&n.disposeIntermediateTensorInfo(e);return d}},KR=AE({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),XR={kernelName:je,backendName:"webgl",kernelFunc:KR},YR={kernelName:"EluGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new xE("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new bE("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},JR={kernelName:"Equal",backendName:"webgl",kernelFunc:RE({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"})},ZR=AE({opSnippet:'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n'}),QR={kernelName:Ke,backendName:"webgl",kernelFunc:ZR},eF="return exp(x);",tF=AE({opSnippet:eF,packedOpSnippet:eF,cpuKernelImpl:AT}),nF={kernelName:Ye,backendName:"webgl",kernelFunc:tF};function sF(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,l=a.shape.slice();let u=r;return r<0&&(o(-(i+1)<=r,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),u=i+r+1),l.splice(u,0,1),PE({inputs:{x:a},backend:s,attrs:{shape:l}})}const rF={kernelName:"ExpandDims",backendName:"webgl",kernelFunc:sF},aF="return exp(x) - 1.0;",iF={kernelName:"Expm1",backendName:"webgl",kernelFunc:AE({opSnippet:aF,packedOpSnippet:aF,cpuKernelImpl:RT})};class oF{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function lF(e,t,n){const s=n.texData.get(e.dataId),r=h(e.shape),a=e.shape[e.shape.length-1],i=PE({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new oF("real",o,t),u=new oF("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],p=n.runWebGLProgram(l,c,"float32"),d=n.runWebGLProgram(u,c,"float32"),f=vE({inputs:{real:p,imag:d},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d);const m=PE({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(f),m}const uF={kernelName:"FFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return lF(s,!1,n)}};class cF{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}function hF(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||R(r),"string"===a){const e=k(a,h(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new cF(s,r),n=e.getCustomSetupFunc(r);return t.runWebGLProgram(e,[],a,n)}}const pF={kernelName:"Fill",backendName:"webgl",kernelFunc:hF};class dF{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const fF={kernelName:"FlipLeftRight",backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new dF(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},mF="return floor(x);",gF={kernelName:"Floor",backendName:"webgl",kernelFunc:AE({opSnippet:mF,packedOpSnippet:mF,cpuKernelImpl:FT})},yF={kernelName:"FloorDiv",backendName:"webgl",kernelFunc:RE({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"})};class bF{constructor(e){this.variableNames=["A"];const t=US(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class xF{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=US(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const wF={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];(o||i)&&(null==kF&&(kF=document.createElement("canvas").getContext("2d")),kF.canvas.width=l,kF.canvas.height=u,kF.drawImage(r,0,0,l,u),r=kF.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=hS.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),r);const d=j().getBool("WEBGL_PACK")?new xF(h):new bF(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let kF;const vF={kernelName:"FusedConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=Ji(c),g=Vi(r.shape,a.shape,l,h,u,p,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(j().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])y=dR({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=null!=i,t=null!=o,s="leakyrelu"===d,l=d?FE(d,!1):null,u=new uR(g,e,l,t,s),c=[r,a];if(i&&c.push(i),o&&c.push(o),s){const e=n.makeTensorInfo([],"float32",ls(f,"float32"));c.push(e),b.push(e)}y=n.runWebGLProgram(u,c,"float32")}else y=pR({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const x=PE({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}};const NF={kernelName:"FusedDepthwiseConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:l}=t,{strides:u,pad:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=[];let g=h;null==g&&(g=[1,1]),o(Yi(u,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${g}'`));const y=Vi(r.shape,a.shape,u,g,c,p,!0),b=j().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,x=d?FE(d,b):null,w=[r,a],k=null!=i,v=null!=l,N="leakyrelu"===d;if(k&&w.push(i),v&&w.push(l),N){const e=n.makeTensorInfo([],"float32",ls(f,"float32"));w.push(e),m.push(e)}let I;I=b?new LR(y,k,x,v,N):new MR(y,k,x,v,N);const C=n.runWebGLProgram(I,w,"float32");return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),C}};class IF{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=kT(t.length),r=kT(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const CF={kernelName:"GatherNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],[o,l,u,c]=va(s,r),p=PE({inputs:{x:r},backend:n,attrs:{shape:[l,i]}}),d=PE({inputs:{x:s},backend:n,attrs:{shape:[h(s.shape)/u,u]}}),f=new IF(i,c,[l,u]),m=n.runWebGLProgram(f,[d,p],d.dtype),g=PE({inputs:{x:m},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class $F{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=kT(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("int(getIndices(resRC.x, resRC.z))"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}const SF={kernelName:"GatherV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=Ap(r,a,b(i,r.shape)[0],o),u=h(a.shape),c=[],p=PE({inputs:{x:r},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),d=PE({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,u/l.batchSize]}});c.push(p),c.push(d);const f=[l.batchSize,l.outerSize,u/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(d),t=n.bufferSync(p),s=DT(t,e,f);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(l.outputShape,s.dtype,s.values)}const m=new $F(p.shape,f),g=n.runWebGLProgram(m,[p,d],p.dtype);c.push(g);const y=PE({inputs:{x:g},backend:n,attrs:{shape:l.outputShape}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},TF={kernelName:"Greater",backendName:"webgl",kernelFunc:RE({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:_T,dtype:"bool"})},EF={kernelName:"GreaterEqual",backendName:"webgl",kernelFunc:RE({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"})};const AF={kernelName:"IFFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return lF(s,!0,n)}},RF={kernelName:"IsFinite",backendName:"webgl",kernelFunc:AE({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"})},FF={kernelName:"IsInf",backendName:"webgl",kernelFunc:AE({opSnippet:"return float(isinf(x));",dtype:"bool"})},DF={kernelName:"IsNan",backendName:"webgl",kernelFunc:AE({opSnippet:"return float(isnan(x));",dtype:"bool"})},_F={kernelName:"Less",backendName:"webgl",kernelFunc:RE({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:OT,dtype:"bool"})},OF={kernelName:"LessEqual",backendName:"webgl",kernelFunc:RE({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"})};const MF={kernelName:"LinSpace",backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=MT(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},LF=AE({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:LT}),zF={kernelName:xt,backendName:"webgl",kernelFunc:LF},BF={kernelName:"Log1p",backendName:"webgl",kernelFunc:AE({opSnippet:"return log(1.0 + x);"})},PF={kernelName:"LogicalAnd",backendName:"webgl",kernelFunc:RE({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"})},WF={kernelName:"LogicalNot",backendName:"webgl",kernelFunc:AE({opSnippet:"return float(!(x >= 1.0));"})},VF={kernelName:"LogicalOr",backendName:"webgl",kernelFunc:RE({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"})};class UF{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class GF{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const HF={kernelName:"LRN",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=j().getBool("WEBGL_PACK_NORMALIZATION")?new GF(r.shape,a,i,o,l):new UF(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class jF{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const qF={kernelName:"LRNGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new jF(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function KF(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=b(a,r.shape);let u=l;const c=Fl(u,o),p=null!=c,d=n.shouldExecuteOnCPU([r]);let f=r;if(p){if(d){const e=n.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const s=eE(e,r.shape,r.dtype,c,t);f=n.makeTensorInfo(t,r.dtype);n.texData.get(f.dataId).values=s}else f=qE(r,c,n);u=_l(u.length,o)}Rl("max",u,o);const[m,g]=El(f.shape,u);let y,x=m;if(i&&(x=Al(m,l)),d){const e=n.texData.get(f.dataId).values,t=zT(e,h(g),x,r.dtype);y=n.makeTensorInfo(x,r.dtype);n.texData.get(y.dataId).values=t}else y=function(e,t,n,s){const r=h(t),a=PE({inputs:{x:e},attrs:{shape:[h(e.shape)/r,r]},backend:s}),i=GE(a,e.dtype,"max",s),o=PE({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(f,g,x,n);return p&&n.disposeIntermediateTensorInfo(f),y}const XF={kernelName:"Max",backendName:"webgl",kernelFunc:KF},YF={kernelName:"Maximum",backendName:"webgl",kernelFunc:RE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:BT})};const JF={kernelName:"MaxPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;WS(r,"maxPool");const{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=s;o(Yi(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=Pi(r.shape,a,i,1,l,u);if(1===c.filterWidth&&1===c.filterHeight&&p(c.inShape,c.outShape))return wE({inputs:{x:r},backend:n});const h=new NA(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};const ZF={kernelName:"MaxPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=Wi(r.shape,a,i,[1,1,1],o,u,l),h=new IA(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class QF{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class eD{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const tD={kernelName:"MaxPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=Wi(i.shape,o,l,[1,1,1],u,c),p=new IA(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new eD(h),m=n.runWebGLProgram(f,[r,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}};const nD={kernelName:"MaxPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;WS([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Pi(o.shape,l,u,1,c,h),d=new NA(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new QF(p),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const sD={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:l}=t,u=n;o(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const c=[1,1];o(Yi(a,c),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`));const h=Pi(s.shape,r,a,c,i),[p,d]=function(e,t,n,s){let r=new NA(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new NA(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,l,h,u);return[p,d]}};const rD={kernelName:"Mean",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,i=n,o=s.shape.length,l=b(a,s.shape);let u=l;const c=Fl(u,o),p=null!=c,d=i.shouldExecuteOnCPU([s]),f=[];let m=s;if(p){if(d){const e=i.texData.get(m.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=eE(e,s.shape,s.dtype,c,t);m=i.makeTensorInfo(t,s.dtype);i.texData.get(m.dataId).values=n}else m=qE(s,c,i);f.push(m),u=_l(u.length,o)}Rl("sum",u,o);const[g,y]=El(m.shape,u);let x=g;r&&(x=Al(g,l));const w=function(e,t,n,s){const r=h(t),a=PE({inputs:{x:e},attrs:{shape:[h(e.shape)/r,r]},backend:s}),i=GE(a,"float32","mean",s),o=PE({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(m,y,x,i);for(const e of f)i.disposeIntermediateTensorInfo(e);return w}};const aD={kernelName:"Min",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=b(a,r.shape);let u=l;const c=Fl(u,o);let p=r;null!=c&&(p=YE({inputs:{x:r},backend:n,attrs:{perm:c}}),u=_l(u.length,r.shape.length)),Rl("min",u,o);const[d,f]=El(p.shape,u),m=PE({inputs:{x:p},backend:n,attrs:{shape:[-1,h(f)]}}),g=GE(m,m.dtype,"min",n);let y;if(i){y=PE({inputs:{x:g},backend:n,attrs:{shape:Al(d,l)}})}else y=PE({inputs:{x:g},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(p),y}},iD={kernelName:"Minimum",backendName:"webgl",kernelFunc:RE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:PT})};class oD{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=kT(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class lD{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=kT(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=sE("rc",s),l=sE("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const uD={kernelName:"MirrorPad",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new lD(s.shape,r,a):new oD(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},cD=RE({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),hD={kernelName:zt,backendName:"webgl",kernelFunc:cD};class pD{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}const dD=RE({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),fD={kernelName:"RealDiv",backendName:"webgl",kernelFunc:dD},mD="return a - b;",gD=RE({opSnippet:mD,packedOpSnippet:mD,supportsComplex:!0,cpuKernelImpl:JT}),yD={kernelName:_n,backendName:"webgl",kernelFunc:gD};function bD(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=b([a],r.shape),o=KF({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=Al(o.shape,i),u=PE({inputs:{x:o},backend:n,attrs:{shape:l}}),c=gD({inputs:{a:r,b:u},backend:n}),h=tF({inputs:{x:c},backend:n}),p=KE({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=PE({inputs:{x:p},backend:n,attrs:{shape:l}}),f=dD({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const xD={kernelName:"Softmax",backendName:"webgl",kernelFunc:bD};const wD={kernelName:"Multinomial",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:bD({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new pD(u,c,a),p=h.getCustomSetupFunc(i),d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}},kD="return -x;";const vD={kernelName:"Neg",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=VT(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=j().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new dE(s.shape,kD):new cE(s.shape,kD),n.runWebGLProgram(r,[s],s.dtype)}},ND=ah;const ID={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:function(e){hp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=ND(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},CD=ih;const $D={kernelName:"NonMaxSuppressionV4",backendName:"webgl",kernelFunc:function(e){hp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:p,validOutputs:d}=CD(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},SD=oh;const TD={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:function(e){hp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=SD(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class ED{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const AD={kernelName:"OneHot",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s,l=h(r.shape),u=new ED(l,a,i,o),c=PE({inputs:{x:r},backend:n,attrs:{shape:[l]}}),p=n.runWebGLProgram(u,[c],r.dtype);n.disposeIntermediateTensorInfo(c);const d=PE({inputs:{x:p},backend:n,attrs:{shape:[...r.shape,a]}});return n.disposeIntermediateTensorInfo(p),d}};function RD(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=GA({inputs:{input:s},backend:n}),t=RD({inputs:{x:e},backend:n}),r=rR({inputs:{input:s},backend:n}),a=RD({inputs:{x:r},backend:n}),i=vE({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return hF({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const FD={kernelName:"ZerosLike",backendName:"webgl",kernelFunc:RD};const DD={kernelName:"OnesLike",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=GA({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=rR({inputs:{input:r},backend:s}),i=RD({inputs:{x:a},backend:s}),o=vE({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return hF({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}};const _D={kernelName:"Pack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return sF({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{l(a,e.shape,"All tensors passed to stack must have matching shapes"),o(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],c=oR({inputs:t.map((e=>{const t=sF({inputs:{input:e},backend:n,attrs:{dim:r}});return u.push(t),t})),backend:n,attrs:{axis:r}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};class OD{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=kT(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n      uniform float value;\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n        uniform float value;\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}class MD{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=kT(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=sE("rc",s),l=sE("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n      uniform float value;\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}const LD=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s,o=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new MD(r.shape,a,i):new OD(r.shape,a,i),l=o.getCustomSetupFunc(i);return n.runWebGLProgram(o,[r],r.dtype,l)},zD={kernelName:"PadV2",backendName:"webgl",kernelFunc:LD},BD=RE({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),PD={kernelName:Jt,backendName:"webgl",kernelFunc:BD};const WD={kernelName:"Prod",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=b(a,r.shape);let c=u;const p=Fl(c,o);let d,f=r;if(null!=p&&(f=YE({inputs:{x:r},backend:n,attrs:{perm:p}}),c=_l(c.length,o),l.push(f)),Rl("prod",c,o),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:s,outDtype:r}=UT(f.shape,f.dtype,e,c);d=n.makeTensorInfo(s,r,t)}else{const[e,t]=El(f.shape,c),s=h(t),a=PE({inputs:{x:f},backend:n,attrs:{shape:[-1,s]}}),i=GE(a,Ls(r.dtype),"prod",n);d=PE({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(d);const e=Al(d.shape,u);d=PE({inputs:{x:d},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},VD=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=GT(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},UD={kernelName:"Range",backendName:"webgl",kernelFunc:VD},GD={kernelName:"Reciprocal",backendName:"webgl",kernelFunc:AE({opSnippet:"return 1.0 / x;"})},HD={kernelName:"Relu",backendName:"webgl",kernelFunc:AE({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})},jD={kernelName:"Relu6",backendName:"webgl",kernelFunc:AE({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})};class qD{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class KD{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const XD={kernelName:"ResizeBilinear",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=j().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new KD(r.shape,l,u,a,i):new qD(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class YD{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const JD={kernelName:"ResizeBilinearGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new YD(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class ZD{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class QD{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const e_={kernelName:"ResizeNearestNeighbor",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=j().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new QD(r.shape,l,u,a,i):new ZD(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class t_{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const n_={kernelName:"ResizeNearestNeighborGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new t_(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class s_{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=kT(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class r_{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=sE("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=kT(n);function o(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const a_={kernelName:"Reverse",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=b(a,r.shape);if(0===i)return wE({inputs:{x:r},backend:n});const l=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new r_(r.shape,o):new s_(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class i_{constructor(e,t){this.variableNames=["Image"],this.outputShape=[];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        uniform vec4 params;\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}getCustomSetupFunc(e,t,n,s){return(r,a)=>{null==this.paramsLoc&&(this.paramsLoc=r.getUniformLocationNoThrow(a,"params")),r.gl.uniform4f(this.paramsLoc,e,t,n,s)}}}const o_={kernelName:"RotateWithOffset",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new i_(s.shape,a),[u,c]=rp(i,s.shape[1],s.shape[2]),h=l.getCustomSetupFunc(u,c,Math.sin(r),Math.cos(r));return o.runWebGLProgram(l,[s],s.dtype,h)}},l_={kernelName:"Round",backendName:"webgl",kernelFunc:AE({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"})},u_={kernelName:"Rsqrt",backendName:"webgl",kernelFunc:AE({opSnippet:"return inversesqrt(x);",cpuKernelImpl:HT})};class c_{constructor(e,t,n,s,r,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=kT(r.length),l=kT(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const h_={kernelName:"ScatterNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=$a(0,r,i),p=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const d=PE({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=PE({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new c_(l,o,d.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=PE({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class p_{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=kT(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const d_={kernelName:"Select",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new p_(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],Ms(r.dtype,a.dtype))}},f_={kernelName:"Selu",backendName:"webgl",kernelFunc:AE({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = ${cp};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`})},m_={kernelName:"Sigmoid",backendName:"webgl",kernelFunc:AE({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"})},g_={kernelName:"Sign",backendName:"webgl",kernelFunc:AE({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"})},y_=AE({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),b_={kernelName:bn,backendName:"webgl",kernelFunc:y_},x_={kernelName:"Sinh",backendName:"webgl",kernelFunc:AE({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"})},w_={kernelName:"Softplus",backendName:"webgl",kernelFunc:AE({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"})},k_={kernelName:"SpaceToBatchND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;o(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const l=a.reduce(((e,t)=>e*t)),u=[[0,0]];u.push(...i);for(let e=1+a.length;e<r.shape.length;++e)u.push([0,0]);const c=[],h=LD({inputs:{x:r},backend:n,attrs:{paddings:u,constantValue:0}}),p=ap(h.shape,a,l,!1),d=ip(p.length,a.length,!1),f=op(h.shape,a,l,!1),m=PE({inputs:{x:h},backend:n,attrs:{shape:p}}),g=YE({inputs:{x:m},backend:n,attrs:{perm:d}}),y=PE({inputs:{x:g},backend:n,attrs:{shape:f}});return c.push(h),c.push(m),c.push(g),c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const v_={kernelName:"SparseFillEmptyRows",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(s.dataId),l=n.readSync(r.dataId),u=n.readSync(a.dataId),c=n.readSync(i.dataId)[0],[h,p,d,f,m]=KT(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};const N_={kernelName:"SparseReshape",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.readSync(r.dataId)),o=n.readSync(s.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,h]=XT(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};const I_={kernelName:"SparseToDense",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,strides:c,outputSize:h}=$a(0,r,o),p=new c_(u,l,r.shape.length,a.shape.length,c,[h,1],!1),d=n.runWebGLProgram(p,[a,r,i],a.dtype),f=PE({inputs:{x:d},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),f}};const C_={kernelName:"SplitV",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=b(i,r.shape)[0],l=Sp(r,a,o),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map((e=>{const t=[...h];t[o]=e;const s=zA({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s}))}},$_={kernelName:"Sqrt",backendName:"webgl",kernelFunc:AE({opSnippet:"return sqrt(x);"})},S_={kernelName:"Square",backendName:"webgl",kernelFunc:AE({opSnippet:"return x * x;"})},T_={kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:RE({opSnippet:"return (a - b) * (a - b);",packedOpSnippet:"return (a - b) * (a - b);"})};const E_={kernelName:"Step",backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new cE(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class A_{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=kT(n.length),a=kT(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const R_={kernelName:"StridedSlice",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s,{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=Ua(r.shape,a,i,o,l,u,c,h,p),x=PE({inputs:{x:r},backend:n,attrs:{shape:y}});let w;if(d){const e=zA({inputs:{x:x},backend:n,attrs:{begin:f,size:g}});w=PE({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,r.dtype,[]);else{if(n.shouldExecuteOnCPU([x])){const e=n.texData.get(x.dataId).values,t=jr(x.shape,x.dtype,e),s=YT(b,t,m,f);w=n.makeTensorInfo(b,x.dtype,s.values)}else{const e=new A_(f,m,b);w=n.runWebGLProgram(e,[x],x.dtype)}}const k=PE({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),k}},F_=AE({opSnippet:"return tan(x);"}),D_={kernelName:On,backendName:"webgl",kernelFunc:F_},__={kernelName:"Tanh",backendName:"webgl",kernelFunc:AE({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"})};class O_{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=kT(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function M_(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map((e=>ds(e))):e,s=jr(r.shape,r.dtype,t),i=ZT(s,a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new O_(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const L_={kernelName:"Tile",backendName:"webgl",kernelFunc:M_};const z_={kernelName:"TopK",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=n.readSync(r.dataId),[l,u]=QT(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}};class B_{constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(s){case"constant":o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4;break;default:o=1}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const P_={kernelName:"Transform",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,p,d]=r.shape,[f,m]=null!=u?u:[h,p],g=new B_(h,p,i,o,l,[c,f,m,d]);return n.runWebGLProgram(g,[r,a],"float32")}};const W_={kernelName:"Unique",backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;WS(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=tE(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}};const V_={kernelName:"Unpack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(u[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){p[a]=e;const t=zA({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=PE({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class U_{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const G_=[HF,qF,QE,eA,tA,nA,aA,lA,uA,cA,gA,yA,bA,xA,kA,wA,vA,$A,CA,EA,AA,RA,_A,PA,WA,jA,KA,JA,eR,NE,lR,xR,wR,fR,vR,NR,kR,CR,$R,TR,FR,DR,OR,WR,VR,zR,GR,jR,qR,XR,YR,JR,QR,nF,rF,iF,uF,pF,fF,gF,yF,wF,vF,NF,CF,SF,TF,EF,kE,AF,aR,RF,FF,DF,$E,_F,OF,MF,BF,zF,PF,WF,VF,XF,ZF,JF,tD,nD,sD,YF,rD,aD,iD,uD,hD,wD,BE,vD,ID,$D,TD,UA,AD,DD,_D,zD,PD,EE,WD,UD,HA,fD,GD,jD,HD,WE,XD,JD,e_,n_,a_,o_,l_,u_,h_,d_,f_,m_,g_,b_,x_,BA,xD,w_,k_,v_,N_,I_,C_,$_,S_,T_,E_,R_,yD,XE,D_,__,L_,z_,P_,JE,W_,V_,{kernelName:"UnsortedSegmentSum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=Fl([u],o);let p=r;null!=c&&(p=YE({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(p),u=_l(1,o)[0]);const d=Ep(p.shape,u,i),f=h([p.shape[u]]),m=PE({inputs:{x:p},backend:n,attrs:{shape:[-1,f]}});l.push(m);const g=Ls(r.dtype),y=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=Tp(o,a),c=new U_({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const p=VD({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=M_({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});l.push(p),l.push(d);return y(h,t,d,r,a)},b=PE({inputs:{x:y(m,"unsortedSegmentSum",a,g,i)},backend:n,attrs:{shape:d}});let x=b;if(null!=c){l.push(b);const e=Dl(c);x=YE({inputs:{x:x},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},FD];for(const e of G_)ns(e);const H_={"tfjs-core":"3.6.0","tfjs-backend-cpu":"3.6.0","tfjs-backend-webgl":"3.6.0","tfjs-data":"3.6.0","tfjs-layers":"3.6.0","tfjs-converter":"3.6.0",tfjs:"3.6.0"};export{J as Abs,Z as Acos,Q as Acosh,Gh as AdadeltaOptimizer,Hh as AdagradOptimizer,jh as AdamOptimizer,qh as AdamaxOptimizer,ee as Add,te as AddN,ne as All,se as Any,re as ArgMax,ae as ArgMin,ie as Asin,oe as Asinh,le as Atan,ce as Atan2,ue as Atanh,he as AvgPool,de as AvgPool3D,fe as AvgPool3DGrad,pe as AvgPoolGrad,me as BatchMatMul,ge as BatchToSpaceND,ye as Bincount,be as BroadcastTo,Zx as Callback,og as CallbackList,xe as Cast,we as Ceil,ke as ClipByValue,ve as Complex,Ne as ComplexAbs,Ie as Concat,Ce as Conv2D,$e as Conv2DBackpropFilter,Se as Conv2DBackpropInput,Te as Conv3D,Ee as Conv3DBackpropFilterV2,Ae as Conv3DBackpropInputV2,Re as Cos,Fe as Cosh,_e as CropAndResize,De as Cumsum,cg as CustomCallback,e as DataStorage,Oe as DenseBincount,Me as DepthToSpace,Le as DepthwiseConv2dNative,ze as DepthwiseConv2dNativeBackpropFilter,Be as DepthwiseConv2dNativeBackpropInput,Pe as Diag,We as Dilation2D,Ue as Dilation2DBackpropFilter,Ve as Dilation2DBackpropInput,K as ENV,tw as EarlyStopping,He as Einsum,je as Elu,qe as EluGrad,G as Environment,Xe as Equal,Ke as Erf,Ye as Exp,Je as ExpandDims,Ze as Expm1,Qe as FFT,et as Fill,tt as FlipLeftRight,nt as Floor,st as FloorDiv,jn as FromPixels,rt as FusedBatchNorm,Xn as FusedConv2D,Yn as FusedDepthwiseConv2D,it as GatherNd,at as GatherV2,gk as GraphModel,ot as Greater,lt as GreaterEqual,ug as History,ct as IFFT,ut as Identity,ht as Imag,Km as InputSpec,pt as IsFinite,dt as IsInf,ft as IsNan,t as KernelBackend,Ct as LRN,$t as LRNGrad,Hm as LayerVariable,vy as LayersModel,mt as LeakyRelu,gt as Less,yt as LessEqual,bt as LinSpace,xt as Log,wt as Log1p,It as LogSoftmax,kt as LogicalAnd,vt as LogicalNot,Nt as LogicalOr,St as Max,Et as MaxPool,Rt as MaxPool3D,Ft as MaxPool3DGrad,At as MaxPoolGrad,Dt as MaxPoolWithArgmax,Tt as Maximum,_t as Mean,Ot as Min,Mt as Minimum,Lt as MirrorPad,zt as Mod,Xh as MomentumOptimizer,Bt as Multinomial,Pt as Multiply,Wt as Neg,Ut as NonMaxSuppressionV3,Gt as NonMaxSuppressionV4,Ht as NonMaxSuppressionV5,Vt as NotEqual,ar as OP_SCOPE_SUFFIX,qt as OneHot,jt as OnesLike,Uh as Optimizer,Kt as Pack,Xt as PadV2,Yt as Pool,Jt as Pow,Zt as Prelu,Qt as Prod,Yh as RMSPropOptimizer,Ab as RNN,en as Range,As as Rank,tn as Real,Ge as RealDiv,nn as Reciprocal,Ch as Reduction,sn as Relu,cn as Relu6,rn as Reshape,ln as ResizeBilinear,un as ResizeBilinearGrad,an as ResizeNearestNeighbor,on as ResizeNearestNeighborGrad,hn as Reverse,qn as RotateWithOffset,pn as Round,dn as Rsqrt,Kh as SGDOptimizer,fn as ScatterNd,mn as Select,gn as Selu,Cy as Sequential,kn as Sigmoid,wn as Sign,bn as Sin,xn as Sinh,yn as Slice,Sn as Softmax,vn as Softplus,Cn as SpaceToBatchND,Tn as SparseFillEmptyRows,En as SparseReshape,An as SparseToDense,$n as SplitV,Nn as Sqrt,Fn as Square,Rn as SquaredDifference,Hn as Step,Dn as StridedSlice,_n as Sub,In as Sum,Xm as SymbolicTensor,On as Tan,Mn as Tanh,Ss as Tensor,Ns as TensorBuffer,Ln as Tile,zn as TopK,Bn as Transform,Pn as Transpose,Wn as Unique,Vn as Unpack,Un as UnsortedSegmentSum,Es as Variable,Gn as ZerosLike,Kn as _FusedMatMul,$i as abs,Si as acos,Ti as acosh,vi as add,Ei as addN,Ai as all,Ri as any,Fi as argMax,Di as argMin,_i as asin,Oi as asinh,Mi as atan,Li as atan2,zi as atanh,Qi as avgPool,eo as avgPool3d,wi as backend,_p as backend_util,ao as basicLSTMCell,oo as batchNorm,lo as batchNorm2d,uo as batchNorm3d,co as batchNorm4d,io as batchToSpaceND,ho as bincount,$c as booleanMaskAsync,po as broadcastTo,ka as browser,jr as buffer,nw as callbacks,qr as cast,fo as ceil,mo as clipByValue,Kr as clone,or as complex,to as concat,go as concat1d,yo as concat2d,bo as concat3d,xo as concat4d,Af as constraints,ko as conv1d,wo as conv2d,No as conv2dTranspose,Io as conv3d,$o as conv3dTranspose,is as copyRegisteredKernels,So as cos,To as cosh,Oc as cosineWindow,Eo as cumsum,bl as customGrad,wv as data,Ao as denseBincount,ri as deprecationWarn,Ro as depthToSpace,Fo as depthwiseConv2d,lw as deregisterOp,Zs as device_util,Do as diag,_o as dilation2d,si as disableDeprecationWarnings,ci as dispose,ai as disposeVariables,Ii as div,Wo as divNoNan,Vo as dot,Dc as dropout,Uo as einsum,Go as elu,ni as enableDebugMode,ti as enableProdMode,_c as enclosingPowerOfTwo,ii as engine,j as env,zo as equal,Ho as erf,jo as exp,qo as expandDims,Ko as expm1,Yo as eye,tc as fft,Jo as fill,yi as findBackend,bi as findBackendFactory,Zo as floor,Ni as floorDiv,qc as fused,Qo as gather,Fc as gatherND,Na as gather_util,mi as getBackend,es as getGradient,Qn as getKernel,ts as getKernelsForBackend,dl as grad,fl as grads,el as greater,tl as greaterEqual,nc as ifft,nl as imag,Bh as image,Mc as inTopKAsync,Om as initializers,Ey as input,ca as io,sc as irfft,sl as isFinite,rl as isInf,al as isNaN,hi as keep,Op as kernel_impls,Kx as layers,il as leakyRelu,ol as less,ll as lessEqual,Ph as linalg,ul as linspace,yk as loadGraphModel,Ty as loadLayersModel,cl as localResponseNormalization,hl as log,pl as log1p,vl as logSigmoid,$l as logSoftmax,Ol as logSumExp,Ml as logicalAnd,Ll as logicalNot,zl as logicalOr,Bl as logicalXor,Wh as losses,ha as matMul,ma as math,Nl as max,Pl as maxPool,Wl as maxPool3d,Vl as maxPoolWithArgmax,Ul as maximum,Gl as mean,oi as memory,ql as meshgrid,Xx as metrics,Kl as min,Xl as minimum,Yl as mirrorPad,Jl as mod,$y as model,Yx as models,Ql as moments,Ec as movingAverage,Ci as mul,eu as multiRNNCell,tu as multinomial,wl as neg,ep as nextFrame,Tc as norm,nu as notEqual,pa as oneHot,jl as ones,su as onesLike,ir as op,ru as outerProduct,au as pad,iu as pad1d,ou as pad2d,lu as pad3d,uu as pad4d,hu as pool,pu as pow,du as prelu,Xr as print,fu as prod,li as profile,mu as rand,Tu as randomGamma,Eu as randomNormal,Au as randomUniform,Ru as range,fi as ready,Fu as real,Du as reciprocal,xi as registerBackend,Ay as registerCallbackConstructor,ss as registerGradient,ns as registerKernel,iw as registerOp,Jx as regularizers,_u as relu,Ou as relu6,gi as removeBackend,Zi as reshape,Mu as reverse,Lu as reverse1d,zu as reverse2d,Bu as reverse3d,Pu as reverse4d,ac as rfft,Wu as round,Vu as rsqrt,Uu as scalar,Ac as scatterND,Sa as scatter_util,Gu as selu,Hu as separableConv2d,Sy as sequential,Ka as serialization,di as setBackend,ki as setPlatform,ju as setdiff1dAsync,no as sigmoid,qu as sign,zh as signal,Ku as sin,Xu as sinh,so as slice,Yu as slice1d,Ju as slice2d,Zu as slice3d,Qu as slice4d,Ga as slice_util,ec as softmax,kl as softplus,cu as spaceToBatchND,Vh as sparse,Rc as sparseToDense,Lh as spectral,rc as split,ic as sqrt,Zl as square,oc as squaredDifference,lc as squeeze,uc as stack,cc as step,hc as stridedSlice,Il as sub,Cl as sum,Ls as sumOutType,pc as tan,ro as tanh,ur as tensor,dc as tensor1d,fc as tensor2d,ga as tensor3d,mc as tensor4d,gc as tensor5d,yc as tensor6d,Us as tensor_util,Qa as test_util,ui as tidy,Xo as tile,pi as time,bc as topk,Zh as train,da as transpose,xc as truncatedNormal,wc as unique,as as unregisterGradient,rs as unregisterKernel,kc as unsortedSegmentSum,vc as unstack,Ms as upcastType,fs as util,ml as valueAndGrad,gl as valueAndGrads,Nc as variable,yl as variableGrads,H_ as version,bk as version_converter,ei as version_core,Kg as version_layers,Bo as where,Cc as whereAsync,Hl as zeros,Po as zerosLike};
//# sourceMappingURL=tf.fesm.min.js.map
