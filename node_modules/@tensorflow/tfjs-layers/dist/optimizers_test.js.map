{"version":3,"file":"optimizers_test.js","sourceRoot":"","sources":["../src/optimizers_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Unit tests for optimizers.ts.\n */\n\nimport {AdadeltaOptimizer, AdagradOptimizer, AdamaxOptimizer, AdamOptimizer, RMSPropOptimizer, SGDOptimizer} from '@tensorflow/tfjs-core';\n\nimport {getOptimizer} from './optimizers';\nimport {describeMathCPU} from './utils/test_utils';\n\ndescribeMathCPU('getOptimizer', () => {\n  // TODO(nsthorat): Assert defaults by getting config from the optimizer.\n\n  it(`can instantiate SGD`, () => {\n    const optimizer = getOptimizer('SGD');\n    expect(optimizer instanceof SGDOptimizer).toBe(true);\n  });\n  it(`can instantiate sgd`, () => {\n    const optimizer = getOptimizer('sgd');\n    expect(optimizer instanceof SGDOptimizer).toBe(true);\n  });\n  it(`can instantiate Adam`, () => {\n    const optimizer = getOptimizer('Adam');\n    expect(optimizer instanceof AdamOptimizer).toBe(true);\n  });\n  it(`can instantiate adam`, () => {\n    const optimizer = getOptimizer('adam');\n    expect(optimizer instanceof AdamOptimizer).toBe(true);\n  });\n  it(`can instantiate RMSProp`, () => {\n    const optimizer = getOptimizer('RMSProp');\n    expect(optimizer instanceof RMSPropOptimizer).toBe(true);\n  });\n  it(`can instantiate rmsprop`, () => {\n    const optimizer = getOptimizer('rmsprop');\n    expect(optimizer instanceof RMSPropOptimizer).toBe(true);\n  });\n  it(`can instantiate Adagrad`, () => {\n    const optimizer = getOptimizer('Adagrad');\n    expect(optimizer instanceof AdagradOptimizer).toBe(true);\n  });\n  it(`can instantiate adagrad`, () => {\n    const optimizer = getOptimizer('adagrad');\n    expect(optimizer instanceof AdagradOptimizer).toBe(true);\n  });\n  it(`can instantiate Adadelta`, () => {\n    const optimizer = getOptimizer('Adadelta');\n    expect(optimizer instanceof AdadeltaOptimizer).toBe(true);\n  });\n  it(`can instantiate adadelta`, () => {\n    const optimizer = getOptimizer('adadelta');\n    expect(optimizer instanceof AdadeltaOptimizer).toBe(true);\n  });\n  it(`can instantiate Adamax`, () => {\n    const optimizer = getOptimizer('Adamax');\n    expect(optimizer instanceof AdamaxOptimizer).toBe(true);\n  });\n  it(`can instantiate adamax`, () => {\n    const optimizer = getOptimizer('adamax');\n    expect(optimizer instanceof AdamaxOptimizer).toBe(true);\n  });\n  it('throws for non-existent optimizer', () => {\n    expect(() => getOptimizer('not an optimizer'))\n        .toThrowError(/Unknown Optimizer/);\n  });\n});\n"]}