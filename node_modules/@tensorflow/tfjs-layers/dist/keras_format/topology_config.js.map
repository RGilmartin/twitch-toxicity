{"version":3,"file":"topology_config.js","sourceRoot":"","sources":["../../src/keras_format/topology_config.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\n\nimport {Shape} from './common';\nimport {NodeConfig} from './node_config';\nimport {BaseSerialization, PyJson, PyJsonDict} from './types';\n\n/** Constructor arguments for Layer. */\nexport interface LayerConfig extends PyJsonDict {\n  input_shape?: Shape;\n  batch_input_shape?: Shape;\n  batch_size?: number;\n  dtype?: DataType;\n  name?: string;\n  trainable?: boolean;\n  input_dtype?: DataType;\n}\n\n/**\n * Converts a subtype of `LayerConfig` to a variant with restricted keys.\n *\n * This is a bit tricky because `keyof` obtains only local fields, not inherited\n * fields.  Thus, this type combines the keys from the `LayerConfig` supertype\n * with those of the specific subtype.\n *\n * See ./types.ts for an explanation of the PyJson type.\n */\nexport type JsonLayer<C extends LayerConfig> = C&LayerConfig&\n    PyJson<Extract<keyof C, string>|Extract<keyof LayerConfig, string>>;\n\n/**\n * A Keras JSON entry representing a layer.\n *\n * The Keras JSON convention is to provide the `class_name` (i.e., the layer\n * type) at the top level, and then to place the layer-specific configuration in\n * a `config` subtree.  These layer-specific configurations are provided by\n * subtypes of `LayerConfig`.  Thus, this `*Serialization` has a type parameter\n * giving the specific type of the wrapped `LayerConfig`.\n */\nexport interface BaseLayerSerialization<N extends string, C extends LayerConfig>\n    extends BaseSerialization<N, JsonLayer<C>> {\n  name: string;\n  inbound_nodes?: NodeConfig[];\n}\n"]}