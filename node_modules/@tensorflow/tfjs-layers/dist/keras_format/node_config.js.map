{"version":3,"file":"node_config.js","sourceRoot":"","sources":["../../src/keras_format/node_config.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {PyJsonDict} from './types';\n\n/**\n * The unique string name of a Layer.\n */\nexport type LayerName = string;\n\n/**\n * The index of a Node, identifying a specific invocation of a given Layer.\n */\nexport type NodeIndex = number;\n\n/**\n * The index of a Tensor output by a given Node of a given Layer.\n */\nexport type TensorIndex = number;\n\n/**\n * Arguments to the apply(...) method that produced a specific Node.\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface NodeArgs extends PyJsonDict {}\n\n/**\n * A reference to a specific Tensor, given by its Layer name, Node index, and\n * output index, including the apply() arguments associated with the Node.\n *\n * This is used in `NodeConfig` to specify the inputs to each Node.\n */\nexport type TensorKeyWithArgsArray =\n    [LayerName, NodeIndex, TensorIndex, NodeArgs];\n\n// TODO(soergel): verify behavior of Python Keras; maybe PR to standardize it.\n/**\n * A reference to a specific Tensor, given by its Layer name, Node index, and\n * output index.\n *\n * This does not include the apply() arguments associated with the Node.  It is\n * used in the LayersModel config to specify the inputLayers and outputLayers.\n * It seems to be an idiosyncrasy of Python Keras that the node arguments are\n * not included here.\n */\nexport type TensorKeyArray = [LayerName, NodeIndex, TensorIndex];\n\n/**\n * A Keras JSON entry representing a Node, i.e. a specific instance of a Layer.\n *\n * By Keras JSON convention, a Node is specified as an array of Tensor keys\n * (i.e., references to Tensors output by other Layers) providing the inputs to\n * this Layer in order.\n */\nexport type NodeConfig = TensorKeyWithArgsArray[];\n"]}