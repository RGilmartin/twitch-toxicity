{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/keras_format/utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAEH;;;;;;;;;;;;;;GAcG;AACH,MAAM,UAAU,kBAAkB,CAAmB,CAAM;IACzD,OAAO,CAAC,CAAC;AACX,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Infers a string union type from an array of string literals, and returns\n * the array as an array of that type.\n *\n * For instance:\n *\n * ```\n * const fruits = stringLiteralArray(['apple', 'banana', 'orange']);\n * type Fruit = typeof activationOptions[number];\n * ```\n *\n * now `Fruit` is the union type `'apple'|'banana'|'orange'`.\n *\n * https://stackoverflow.com/questions/52085454/typescript-define-a-union-type-from-an-array-of-strings/52085658\n */\nexport function stringLiteralArray<T extends string>(a: T[]) {\n  return a;\n}\n"]}