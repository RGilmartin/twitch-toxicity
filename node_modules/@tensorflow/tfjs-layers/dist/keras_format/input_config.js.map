{"version":3,"file":"input_config.js","sourceRoot":"","sources":["../../src/keras_format/input_config.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAwBH,4EAA4E;AAC5E,8EAA8E;AAE9E;;;;GAIG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAA0B;IACzD,YAAY;CACb,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\nimport {Shape} from './common';\nimport {BaseLayerSerialization} from './topology_config';\n\nexport type InputLayerConfig = {\n  name?: string;\n  input_shape?: Shape;\n  batch_size?: number;\n  batch_input_shape?: Shape;\n  dtype?: DataType;\n  sparse?: boolean;\n};\n\n// This really should be BaseSerialization because an input layer has no\n// inbound_nodes. But, that makes type safety more difficult.\n\n// Update inputLayerClassNames below in concert with this.\nexport type InputLayerSerialization =\n    BaseLayerSerialization<'InputLayer', InputLayerConfig>;\n\nexport type InputLayerClassName = InputLayerSerialization['class_name'];\n\n// We can't easily extract a string[] from the string union type, but we can\n// recapitulate the list, enforcing at compile time that the values are valid.\n\n/**\n * A string array of valid InputLayer class names.\n *\n * This is guaranteed to match the `InputLayerClassName` union type.\n */\nexport const inputLayerClassNames: InputLayerClassName[] = [\n  'InputLayer',\n];\n"]}