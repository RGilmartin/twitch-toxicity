{"version":3,"file":"recurrent_serialization.js","sourceRoot":"","sources":["../../../src/keras_format/layers/recurrent_serialization.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AA8GH,4EAA4E;AAC5E,8EAA8E;AAE9E;;;;GAIG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAA8B;IACjE,KAAK;IACL,MAAM;IACN,WAAW;CACZ,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {ActivationSerialization} from '../activation_config';\nimport {ConstraintSerialization} from '../constraint_config';\nimport {InitializerSerialization} from '../initializer_config';\nimport {RegularizerSerialization} from '../regularizer_config';\nimport {BaseLayerSerialization, LayerConfig} from '../topology_config';\nimport {BaseSerialization} from '../types';\n\nexport interface BaseRNNLayerConfig extends LayerConfig {\n  cell?: RNNCellSerialization|RNNCellSerialization[];\n  return_sequences?: boolean;\n  return_state?: boolean;\n  go_backwards?: boolean;\n  stateful?: boolean;\n  unroll?: boolean;\n  input_dim?: number;\n  input_length?: number;\n}\n\nexport interface SimpleRNNCellConfig extends LayerConfig {\n  units: number;\n  activation?: ActivationSerialization;\n  use_bias?: boolean;\n  kernel_initializer?: InitializerSerialization;\n  recurrent_initializer?: InitializerSerialization;\n  bias_initializer?: InitializerSerialization;\n  kernel_regularizer?: RegularizerSerialization;\n  recurrent_regularizer?: RegularizerSerialization;\n  bias_regularizer?: RegularizerSerialization;\n  kernel_constraint?: ConstraintSerialization;\n  recurrent_constraint?: ConstraintSerialization;\n  bias_constraint?: ConstraintSerialization;\n  dropout?: number;\n  recurrent_dropout?: number;\n}\n\nexport type SimpleRNNCellSerialization =\n    BaseSerialization<'SimpleRNNCell', SimpleRNNCellConfig>;\n\nexport interface SimpleRNNLayerConfig extends BaseRNNLayerConfig {\n  units: number;\n  activation?: ActivationSerialization;\n  use_bias?: boolean;\n  kernel_initializer?: InitializerSerialization;\n  recurrent_initializer?: InitializerSerialization;\n  bias_initializer?: InitializerSerialization;\n  kernel_regularizer?: RegularizerSerialization;\n  recurrent_regularizer?: RegularizerSerialization;\n  bias_regularizer?: RegularizerSerialization;\n  kernel_constraint?: ConstraintSerialization;\n  recurrent_constraint?: ConstraintSerialization;\n  bias_constraint?: ConstraintSerialization;\n  dropout?: number;\n  recurrent_dropout?: number;\n}\n\nexport type SimpleRNNLayerSerialization =\n    BaseLayerSerialization<'SimpleRNN', SimpleRNNLayerConfig>;\n\nexport interface GRUCellConfig extends SimpleRNNCellConfig {\n  recurrent_activation?: string;\n  implementation?: number;\n}\n\nexport type GRUCellSerialization = BaseSerialization<'GRUCell', GRUCellConfig>;\n\nexport interface GRULayerConfig extends SimpleRNNLayerConfig {\n  recurrent_activation?: ActivationSerialization;\n  implementation?: number;\n}\n\nexport type GRULayerSerialization =\n    BaseLayerSerialization<'GRU', GRULayerConfig>;\n\nexport interface LSTMCellConfig extends SimpleRNNCellConfig {\n  recurrent_activation?: ActivationSerialization;\n  unit_forget_bias?: boolean;\n  implementation?: number;\n}\n\nexport type LSTMCellSerialization =\n    BaseSerialization<'LSTMCell', LSTMCellConfig>;\n\nexport interface LSTMLayerConfig extends SimpleRNNLayerConfig {\n  recurrent_activation?: ActivationSerialization;\n  unit_forget_bias?: boolean;\n  implementation?: number;\n}\nexport type LSTMLayerSerialization =\n    BaseLayerSerialization<'LSTM', LSTMLayerConfig>;\n\nexport interface StackedRNNCellsConfig extends LayerConfig {\n  // TODO(soergel): consider whether we can avoid improperly mixing\n  // Simple / LSTM / GRU cells here and in the above Layer serializations.\n  cells: RNNCellSerialization[];\n}\n\nexport type StackedRNNCellsSerialization =\n    BaseSerialization<'StackedRNNCells', StackedRNNCellsConfig>;\n\nexport type RNNCellSerialization = SimpleRNNCellSerialization|\n    GRUCellSerialization|LSTMCellSerialization|StackedRNNCellsSerialization;\n\n// Update recurrentLayerClassNames below in concert with this.\nexport type RecurrentLayerSerialization =\n    SimpleRNNLayerSerialization|LSTMLayerSerialization|GRULayerSerialization;\n\nexport type RecurrentLayerClassName = RecurrentLayerSerialization['class_name'];\n\n// We can't easily extract a string[] from the string union type, but we can\n// recapitulate the list, enforcing at compile time that the values are valid.\n\n/**\n * A string array of valid RecurrentLayer class names.\n *\n * This is guaranteed to match the `RecurrentLayerClassName` union type.\n */\nexport const recurrentLayerClassNames: RecurrentLayerClassName[] = [\n  'GRU',\n  'LSTM',\n  'SimpleRNN',\n];\n"]}