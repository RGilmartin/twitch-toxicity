{"version":3,"file":"convolutional_serialization.js","sourceRoot":"","sources":["../../../src/keras_format/layers/convolutional_serialization.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AA4EH,4EAA4E;AAC5E,8EAA8E;AAE9E;;;;GAIG;AACH,MAAM,CAAC,MAAM,4BAA4B,GAAkC;IACzE,QAAQ;IACR,QAAQ;IACR,iBAAiB;IACjB,YAAY;IACZ,iBAAiB;IACjB,cAAc;CACf,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {DataFormatSerialization, PaddingMode} from '../common';\nimport {ConstraintSerialization} from '../constraint_config';\nimport {InitializerSerialization} from '../initializer_config';\nimport {RegularizerSerialization} from '../regularizer_config';\nimport {BaseLayerSerialization, LayerConfig} from '../topology_config';\n\nexport interface BaseConvLayerConfig extends LayerConfig {\n  kernel_size: number|number[];\n  strides?: number|number[];\n  padding?: PaddingMode;\n  data_format?: DataFormatSerialization;\n  dilation_rate?: number|[number]|[number, number];\n  activation?: string;\n  use_bias?: boolean;\n  kernel_initializer?: InitializerSerialization;\n  bias_initializer?: InitializerSerialization;\n  kernel_constraint?: ConstraintSerialization;\n  bias_constraint?: ConstraintSerialization;\n  kernel_regularizer?: RegularizerSerialization;\n  bias_regularizer?: RegularizerSerialization;\n  activity_regularizer?: RegularizerSerialization;\n}\n\nexport interface ConvLayerConfig extends BaseConvLayerConfig {\n  filters: number;\n}\n\nexport type Conv1DLayerSerialization =\n    BaseLayerSerialization<'Conv1D', ConvLayerConfig>;\n\nexport type Conv2DLayerSerialization =\n    BaseLayerSerialization<'Conv2D', ConvLayerConfig>;\n\nexport type Conv2DTransposeLayerSerialization =\n    BaseLayerSerialization<'Conv2DTranspose', ConvLayerConfig>;\n\nexport interface SeparableConvLayerConfig extends ConvLayerConfig {\n  depth_multiplier?: number;\n  depthwise_initializer?: InitializerSerialization;\n  pointwise_initializer?: InitializerSerialization;\n  depthwise_regularizer?: RegularizerSerialization;\n  pointwise_regularizer?: RegularizerSerialization;\n  depthwise_constraint?: ConstraintSerialization;\n  pointwise_constraint?: ConstraintSerialization;\n}\n\nexport type SeparableConv2DLayerSerialization =\n    BaseLayerSerialization<'SeparableConv2D', ConvLayerConfig>;\n\nexport interface Cropping2DLayerConfig extends LayerConfig {\n  cropping: number|[number, number]|[[number, number], [number, number]];\n  data_format?: DataFormatSerialization;\n}\n\nexport type Cropping2DLayerSerialization =\n    BaseLayerSerialization<'Cropping2D', Cropping2DLayerConfig>;\n\nexport interface UpSampling2DLayerConfig extends LayerConfig {\n  size?: number[];\n  data_format?: DataFormatSerialization;\n}\n\nexport type UpSampling2DLayerSerialization =\n    BaseLayerSerialization<'UpSampling2D', UpSampling2DLayerConfig>;\n\n// Update convolutionalLayerClassNames below in concert with this.\nexport type ConvolutionalLayerSerialization =\n    Conv1DLayerSerialization|Conv2DLayerSerialization|\n    Conv2DTransposeLayerSerialization|SeparableConv2DLayerSerialization|\n    Cropping2DLayerSerialization|UpSampling2DLayerSerialization;\n\nexport type ConvolutionalLayerClassName =\n    ConvolutionalLayerSerialization['class_name'];\n\n// We can't easily extract a string[] from the string union type, but we can\n// recapitulate the list, enforcing at compile time that the values are valid.\n\n/**\n * A string array of valid ConvolutionalLayer class names.\n *\n * This is guaranteed to match the `ConvolutionalLayerClassName` union type.\n */\nexport const convolutionalLayerClassNames: ConvolutionalLayerClassName[] = [\n  'Conv1D',\n  'Conv2D',\n  'Conv2DTranspose',\n  'Cropping2D',\n  'SeparableConv2D',\n  'UpSampling2D',\n];\n"]}