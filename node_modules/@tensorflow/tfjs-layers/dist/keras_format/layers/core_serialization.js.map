{"version":3,"file":"core_serialization.js","sourceRoot":"","sources":["../../../src/keras_format/layers/core_serialization.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAkFH,4EAA4E;AAC5E,8EAA8E;AAE9E;;;;GAIG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAyB;IACvD,YAAY;IACZ,OAAO;IACP,SAAS;IACT,SAAS;IACT,SAAS;IACT,cAAc;IACd,SAAS;CACV,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {ActivationSerialization} from '../activation_config';\nimport {Shape} from '../common';\nimport {ConstraintSerialization} from '../constraint_config';\nimport {InitializerSerialization} from '../initializer_config';\nimport {RegularizerSerialization} from '../regularizer_config';\nimport {BaseLayerSerialization, LayerConfig} from '../topology_config';\n\nexport interface DropoutLayerConfig extends LayerConfig {\n  rate: number;\n  noise_shape?: number[];\n  seed?: number;\n}\n\nexport type DropoutLayerSerialization =\n    BaseLayerSerialization<'Dropout', DropoutLayerConfig>;\n\nexport interface DenseLayerConfig extends LayerConfig {\n  units: number;\n  activation?: ActivationSerialization;\n  use_bias?: boolean;\n  input_dim?: number;\n  kernel_initializer?: InitializerSerialization;\n  bias_initializer?: InitializerSerialization;\n  kernel_constraint?: ConstraintSerialization;\n  bias_constraint?: ConstraintSerialization;\n  kernel_regularizer?: RegularizerSerialization;\n  bias_regularizer?: RegularizerSerialization;\n  activity_regularizer?: RegularizerSerialization;\n}\n\nexport type DenseLayerSerialization =\n    BaseLayerSerialization<'Dense', DenseLayerConfig>;\n\nexport type FlattenLayerSerialization =\n    BaseLayerSerialization<'Flatten', LayerConfig>;\n\nexport interface ActivationLayerConfig extends LayerConfig {\n  activation: ActivationSerialization;\n}\n\nexport type ActivationLayerSerialization =\n    BaseLayerSerialization<'Activation', ActivationLayerConfig>;\n\nexport interface RepeatVectorLayerConfig extends LayerConfig {\n  n: number;\n}\n\nexport type RepeatVectorLayerSerialization =\n    BaseLayerSerialization<'RepeatVector', RepeatVectorLayerConfig>;\n\nexport interface ReshapeLayerConfig extends LayerConfig {\n  target_shape: Shape;\n}\n\nexport type ReshapeLayerSerialization =\n    BaseLayerSerialization<'Reshape', ReshapeLayerConfig>;\n\nexport interface PermuteLayerConfig extends LayerConfig {\n  dims: number[];\n}\n\nexport type PermuteLayerSerialization =\n    BaseLayerSerialization<'Permute', PermuteLayerConfig>;\n\nexport interface MaskingLayerConfig extends LayerConfig {\n  maskValue: number;\n}\n\nexport type MaskingLayerSerialization =\n    BaseLayerSerialization<'Masking', MaskingLayerConfig>;\n\n// Update coreLayerClassNames below in concert with this.\nexport type CoreLayerSerialization =\n    DropoutLayerSerialization|DenseLayerSerialization|FlattenLayerSerialization|\n    ActivationLayerSerialization|RepeatVectorLayerSerialization|\n    ReshapeLayerSerialization|PermuteLayerSerialization|\n    MaskingLayerSerialization;\n\nexport type CoreLayerClassName = CoreLayerSerialization['class_name'];\n\n// We can't easily extract a string[] from the string union type, but we can\n// recapitulate the list, enforcing at compile time that the values are valid.\n\n/**\n * A string array of valid CoreLayer class names.\n *\n * This is guaranteed to match the `CoreLayerClassName` union type.\n */\nexport const coreLayerClassNames: CoreLayerClassName[] = [\n  'Activation',\n  'Dense',\n  'Dropout',\n  'Flatten',\n  'Permute',\n  'RepeatVector',\n  'Reshape',\n];\n"]}