{"version":3,"file":"models_test.js","sourceRoot":"","sources":["../src/models_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAEH,OAAO,EAAW,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,YAAY,EAAU,MAAM,EAAiB,GAAG,EAAU,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAC,MAAM,uBAAuB,CAAC;AAG5K,OAAO,KAAK,GAAG,MAAM,SAAS,CAAC;AAE/B,OAAO,EAAC,OAAO,EAAC,MAAM,eAAe,CAAC;AACtC,OAAO,EAAC,WAAW,EAAC,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAC,uBAAuB,EAAyB,aAAa,EAAC,MAAM,UAAU,CAAC;AACvF,OAAO,EAAC,mBAAmB,EAAE,mBAAmB,EAAC,MAAM,6BAA6B,CAAC;AACrF,OAAO,EAAC,eAAe,EAAE,qBAAqB,EAAE,kBAAkB,EAAC,MAAM,oBAAoB,CAAC;AAC9F,OAAO,EAAC,OAAO,IAAI,aAAa,EAAC,MAAM,WAAW,CAAC;AAEnD,MAAM,iBAAiB,GAAG,0BAA0B,CAAC;AACrD,MAAM,SAAS,GAAG,kBAAkB,CAAC;AAErC,eAAe,CAAC,uBAAuB,EAAE,GAAG,EAAE;IAC5C,EAAE,CAAC,oDAAoD,EAAE,IAAI,CAAC,EAAE;QAC9D,MAAM,WAAW,GAAG,GAAG,CAAC,UAAU,CAC9B,EAAC,MAAM,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAC/D,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACvB,MAAM,CAAC,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC,CAAW,CAAC;QAE3C,MAAM,WAAW,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QACrC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC7B,kBAAkB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAW,EAAE,CAAC,CAAC,CAAC;QAExD,MAAM,WAAW,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QACrC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC7B,kBAAkB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAW,EAAE,CAAC,CAAC,CAAC;QAExD,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzB,WAAW,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;QAClE,WAAW,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;aAClB,IAAI,CAAC,OAAO,CAAC,EAAE;YACd,MAAM,IAAI,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC,CAAW,CAAC;YAC9C,kBAAkB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAW,EAAE,IAAI,CAAC,CAAC;YAC3D,kBAAkB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAW,EAAE,IAAI,CAAC,CAAC;YAC3D,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,IAAI,CAAC,EAAE;QACpE,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QACtC,MAAM,MAAM,GACR,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAuB,CAAC;QACpE,MAAM,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAC,CAAC,CAAC;QAChE,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACvB,MAAM,CAAC,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC,CAAW,CAAC;QAE3C,MAAM,WAAW,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QACrC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC7B,kBAAkB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAW,EAAE,CAAC,CAAC,CAAC;QAExD,MAAM,WAAW,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QACrC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC7B,kBAAkB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAW,EAAE,CAAC,CAAC,CAAC;QAExD,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzB,WAAW,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;QAClE,WAAW,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;aAClB,IAAI,CAAC,OAAO,CAAC,EAAE;YACd,MAAM,IAAI,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC,CAAW,CAAC;YAC9C,kBAAkB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAW,EAAE,IAAI,CAAC,CAAC;YAC3D,kBAAkB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAW,EAAE,IAAI,CAAC,CAAC;YAC3D,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,IAAI,CAAC,EAAE;QAC/D,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAC7B,EAAC,MAAM,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAC/D,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACvB,MAAM,CAAC,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAW,CAAC;QAE1C,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAE9B,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAC7B,EAAC,MAAM,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAC5E,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC3B,kBAAkB,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAW,EAAE,CAAC,CAAC,CAAC;QAE3D,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzB,UAAU,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;QACjE,UAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;aACjB,IAAI,CAAC,OAAO,CAAC,EAAE;YACd,MAAM,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAW,CAAC;YAC7C,kBAAkB,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAW,EAAE,IAAI,CAAC,CAAC;YAC9D,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,IAAI,CAAC,EAAE;QAC/D,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAC7B,EAAC,MAAM,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAC/D,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACvB,MAAM,CAAC,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAW,CAAC;QAE1C,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAE9B,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;YAChC,MAAM,EAAE;gBACN,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAE,UAAU;gBACtE,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC;aAC1C;SACF,CAAC,CAAC;QACH,kBAAkB,CACd,UAAU,CAAC,OAAO,CAAC,KAAK,CAAW,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAE/D,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5B,UAAU,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;QACjE,UAAU,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;aACjB,IAAI,CAAC,OAAO,CAAC,EAAE;YACd,MAAM,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAW,CAAC;YAC7C,kBAAkB,CACd,UAAU,CAAC,OAAO,CAAC,KAAK,CAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClE,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;YAChC,MAAM,EAAE;gBACN,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;oBACf,KAAK,EAAE,CAAC;oBACR,UAAU,EAAE,CAAC,CAAC,CAAC;oBACf,UAAU,EAAE,MAAM;oBAClB,iBAAiB,EAAE,MAAM;oBACzB,eAAe,EAAE,MAAM;iBACxB,CAAC;gBACF,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;oBACf,KAAK,EAAE,CAAC;oBACR,UAAU,EAAE,MAAM;oBAClB,iBAAiB,EAAE,MAAM;oBACzB,eAAe,EAAE,MAAM;iBACxB,CAAC;aACH;SACF,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;YAChC,MAAM,EAAE;gBACN,UAAU;gBACV,GAAG,CAAC,MAAM,CAAC,KAAK,CACZ,EAAC,KAAK,EAAE,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,EAAC,CAAC;aACpE;SACF,CAAC,CAAC;QACH,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,YAAY,GAAG,CAAC,UAAU,CAAC;aACzD,OAAO,CAAC,IAAI,CAAC,CAAC;QACnB,4EAA4E;QAC5E,SAAS;QACT,kBAAkB,CACd,UAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,kBAAkB,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,sCAAsC;QACtC,MAAM,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;YAChC,MAAM,EAAE;gBACN,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;oBACf,KAAK,EAAE,CAAC;oBACR,UAAU,EAAE,CAAC,CAAC,CAAC;oBACf,UAAU,EAAE,MAAM;oBAClB,iBAAiB,EAAE,MAAM;oBACzB,eAAe,EAAE,MAAM;iBACxB,CAAC;gBACF,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;oBACf,KAAK,EAAE,CAAC;oBACR,UAAU,EAAE,MAAM;oBAClB,iBAAiB,EAAE,MAAM;oBACzB,eAAe,EAAE,MAAM;iBACxB,CAAC;aACH;SACF,CAAC,CAAC;QACH,MAAM,UAAU,GACZ,GAAG,CAAC,UAAU,CAAC,EAAC,MAAM,EAAE,CAAC,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QACzE,MAAM,OAAO,GAAG,UAAU,CAAC,UAAU,EAAE,CAAC;QACxC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;YAChC,MAAM,EAAE;gBACN,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;oBACf,KAAK,EAAE,CAAC;oBACR,UAAU,EAAE,CAAC,CAAC,CAAC;oBACf,UAAU,EAAE,MAAM;oBAClB,iBAAiB,EAAE,OAAO;oBAC1B,OAAO,EAAE,KAAK;iBACf,CAAC;aACH;SACF,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;YAChC,MAAM,EAAE;gBACN,UAAU;gBACV,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAC,CAAC;aACzE;SACF,CAAC,CAAC;QAEH,uDAAuD;QACvD,UAAU,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,kBAAkB,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7D,kBAAkB,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7D,kBAAkB,CACd,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAW,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;YAChC,MAAM,EAAE;gBACN,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;oBACf,KAAK,EAAE,CAAC;oBACR,UAAU,EAAE,CAAC,CAAC,CAAC;oBACf,UAAU,EAAE,MAAM;oBAClB,iBAAiB,EAAE,MAAM;oBACzB,eAAe,EAAE,MAAM;iBACxB,CAAC;gBACF,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;oBACf,KAAK,EAAE,CAAC;oBACR,UAAU,EAAE,MAAM;oBAClB,iBAAiB,EAAE,MAAM;oBACzB,eAAe,EAAE,MAAM;iBACxB,CAAC;aACH;SACF,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;YAChC,MAAM,EAAE;gBACN,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAE,UAAU;gBACtE,GAAG,CAAC,MAAM,CAAC,KAAK,CACZ,EAAC,KAAK,EAAE,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,EAAC,CAAC;aACpE;SACF,CAAC,CAAC;QACH,MAAM,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAW,CAAC;QAE1C,MAAM,SAAS,GAAO,IAAI,CAAC;QAC3B,MAAM,YAAY,GAAG,KAAK,CAAC;QAC3B,MAAM,cAAc,GAAG,UAAU,CAAC,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QAClE,MAAM,kBAAkB,GACpB,WAAW,CAAC,mBAAmB,CAAC,cAAc,CAAe,CAC/C,CAAC;QACnB,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;aACrD,OAAO,CAAC,cAAc,CAAC,CAAC;QAC7B,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAW,EAAE,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QACtC,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;YAC9B,KAAK,EAAE,CAAC;YACR,UAAU,EAAE,MAAM;YAClB,iBAAiB,EAAE,MAAM;YACzB,eAAe,EAAE,MAAM;SACxB,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;YAC9B,KAAK,EAAE,CAAC;YACR,UAAU,EAAE,MAAM;YAClB,iBAAiB,EAAE,MAAM;YACzB,eAAe,EAAE,MAAM;SACxB,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAuB,CAAC;QACvE,MAAM,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAC,CAAC,CAAC;QAC/D,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;YAChC,MAAM,EAAE;gBACN,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAE,UAAU;gBACtE,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC;aAC1C;SACF,CAAC,CAAC;QACH,MAAM,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAW,CAAC;QAE1C,MAAM,SAAS,GAAO,IAAI,CAAC;QAC3B,MAAM,YAAY,GAAG,KAAK,CAAC;QAC3B,MAAM,cAAc,GAAG,UAAU,CAAC,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QAClE,MAAM,kBAAkB,GACpB,WAAW,CAAC,mBAAmB,CAAC,cAAc,CAAe,CAC/C,CAAC;QACnB,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;aACrD,OAAO,CAAC,cAAc,CAAC,CAAC;QAC7B,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAW,EAAE,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QACvC,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QACvC,MAAM,MAAM,GACR,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAuB,CAAC;QAC3E,MAAM,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,OAAO,EAAE,MAAM,EAAC,CAAC,CAAC;QAE1E,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAEpC,wEAAwE;QACxE,QAAQ;QACR,MAAM,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;aACnC,YAAY,CAAC,mCAAmC,CAAC,CAAC;QAEvD,yEAAyE;QACzE,QAAQ;QACR,MAAM,WAAW,GAAG,GAAG,CAAC,UAAU,CAC9B,EAAC,MAAM,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAC/D,MAAM,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;aACpC,YAAY,CAAC,mCAAmC,CAAC,CAAC;QAEvD,wEAAwE;QACxE,uBAAuB;QACvB,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC;YAC1B,MAAM,EAAE,CAAC,UAAU,CAAC;SACrB,CAAC,CAAC,CAAC,YAAY,CAAC,mCAAmC,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC;QACvC,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAC/C,CAAC;QACvB,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAC/C,CAAC;QACvB,MAAM,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,EAAC,CAAC,CAAC;QAE3E,yEAAyE;QACzE,QAAQ;QACR,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QACpC,MAAM,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;aACnC,YAAY,CAAC,oCAAoC,CAAC,CAAC;QAExD,0EAA0E;QAC1E,QAAQ;QACR,MAAM,WAAW,GAAG,GAAG,CAAC,UAAU,CAC9B,EAAC,MAAM,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAC/D,MAAM,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;aACpC,YAAY,CAAC,oCAAoC,CAAC,CAAC;QAExD,yEAAyE;QACzE,uBAAuB;QACvB,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC;YAC1B,MAAM,EAAE,CAAC,UAAU,CAAC;SACrB,CAAC,CAAC,CAAC,YAAY,CAAC,oCAAoC,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,eAAe,CAAC,eAAe,EAAE,GAAG,EAAE;IACpC,EAAE,CAAC,oCAAoC,EAAE,IAAI,CAAC,EAAE;QAC9C;;;;;UAKE;QACF,aAAa,CAAC,mBAAmB,CAAC;aAC7B,IAAI,CAAC,KAAK,CAAC,EAAE;YACZ,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACnC,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAChC,kBAAkB,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAW,EAAE,QAAQ,CAAC,CAAC;YAC9D,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;aACD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACnE,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;QACrE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACnC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAe,CAAC;QAC5D,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAC1D,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,yEAAyE;IACzE;;;;;;;;SAQK;IAEL,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD;;;;;;;;;;;;;;;;;;;;;;;;;YAyBI;QACJ,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,sBAAsB,CAAC,CAAC;QAC1D,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAW,CAAC;QAClE,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD;;;;;;;;;;;;;;;;;UAiBE;QACF,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,cAAc,CAAC,CAAC;QAClD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAW,CAAC;QAClE,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,kBAAkB,CAAC,CAAC;QACtD,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,EAAY,CAAC;QACjD,wCAAwC;QACxC,MAAM,CAAC,OAAO,eAAe,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACjD,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QACjD,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;aAC7B,OAAO,CAAC,kBAAkB,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC;QAC7D,2DAA2D;QAC3D,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;aACzB,OAAO,CAAC,kBAAkB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,kBAAkB,CAAC,CAAC;QACtD,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAe,CAAC;QAChE,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;aAChC,OAAO,CAAC,kBAAkB,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;aAC5B,OAAO,CAAC,kBAAkB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,kBAAkB,CAAC,CAAC;QACtD,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAe,CAAC;QAChE,MAAM,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;aACnC,OAAO,CAAC,eAAe,aAAa,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,aAAa,GAAO;YACxB,YAAY,EAAE,YAAY;YAC1B,eAAe,EAAE,UAAU;YAC3B,QAAQ,EAAE;gBACR,MAAM,EAAE,kBAAkB;gBAC1B,QAAQ,EAAE,CAAC;wBACT,YAAY,EAAE,OAAO;wBACrB,QAAQ,EAAE;4BACR,oBAAoB,EAAE;gCACpB,YAAY,EAAE,iBAAiB;gCAC/B,QAAQ,EAAE;oCACR,cAAc,EAAE,SAAS;oCACzB,OAAO,EAAE,GAAG;oCACZ,MAAM,EAAE,IAAI;oCACZ,MAAM,EAAE,SAAS;iCAClB;6BACF;4BACD,MAAM,EAAE,SAAS;4BACjB,mBAAmB,EAAE,IAAI;4BACzB,kBAAkB,EAAE,IAAI;4BACxB,iBAAiB,EAAE,IAAI;4BACvB,OAAO,EAAE,SAAS;4BAClB,YAAY,EAAE,SAAS;4BACvB,WAAW,EAAE,IAAI;4BACjB,oBAAoB,EAAE,IAAI;4BAC1B,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;4BACzD,OAAO,EAAE,CAAC;4BACV,mBAAmB,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;4BAC9B,UAAU,EAAE,IAAI;4BAChB,sBAAsB,EAAE,IAAI;yBAC7B;qBACF,CAAC;aACH;YACD,SAAS,EAAE,YAAY;SACxB,CAAC;QACF,MAAM,KAAK,GAAG,WAAW,CACP,mBAAmB,CAAC,aAAa,CACT,CAAgB,CAAC;QAE3D,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC1D,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,eAAe,CAAC,0BAA0B,EAAE,GAAG,EAAE;IAC/C,MAAM,oBAAoB,GACtB,CAAC,aAC6D,EAAE,EAAE;QAChE,KAAK,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC;aACzB,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YACtC,OAAO,CAAC,IAAI,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;gBACxC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC;aAC/C,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC;IAEN,MAAM,yBAAyB,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAChD,MAAM,YAAY,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;IAClE,KAAK,MAAM,mBAAmB,IAAI,yBAAyB,EAAE;QAC3D,KAAK,MAAM,UAAU,IAAI,YAAY,EAAE;YACrC,EAAE,CAAC,cAAc,UAAU,EAAE,EAAE,IAAI,CAAC,EAAE;gBACpC,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,UAAU,CAAC,CAAC;oBACzB,GAAG,UAAU,WAAW,CAAC;gBAClE,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,UAAU,CAAC,CAAC;oBACzB,GAAG,UAAU,WAAW,CAAC;gBAClE,MAAM,aAAa,GAC6C,EAAE,CAAC;gBACnE,aAAa,CAAC,KAAK,CAAC;oBAChB,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,CAAC;gBACzD,aAAa,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,CAAC;gBACxE,oBAAoB,CAAC,aAAa,CAAC,CAAC;gBACpC,kEAAkE;gBAClE,mDAAmD;gBACnD,MAAM,cAAc,GAAG,SAAS,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC;gBAClE,MAAM,eAAe,GAA6B;oBAChD;wBACE,OAAO,EAAE,CAAC,UAAU,CAAC;wBACrB,SAAS,EAAE,CAAC;gCACV,MAAM,EAAE,GAAG,cAAc,SAAS;gCAClC,OAAO,EAAE,SAAS;gCAClB,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;6BAClB,CAAC;qBACH;oBACD;wBACE,OAAO,EAAE,CAAC,UAAU,CAAC;wBACrB,SAAS,EAAE,CAAC;gCACV,MAAM,EAAE,GAAG,cAAc,OAAO;gCAChC,OAAO,EAAE,SAAS;gCAClB,OAAO,EAAE,CAAC,EAAE,CAAC;6BACd,CAAC;qBACH;iBACF,CAAC;gBACF,6DAA6D;gBAC7D,IAAI,aAAa,GACb,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,aAAa,CAAC;gBAClE,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,GAAG,cAAc,CAAC;gBACxE,IAAI,mBAAmB,EAAE;oBACvB,wDAAwD;oBACxD,yDAAyD;oBACzD,aAAa,GAAG,EAAC,cAAc,EAAE,aAAa,EAAC,CAAC;iBACjD;gBACD,aAAa,CAAC,EAAC,aAAa,EAAE,eAAe,EAAE,UAAU,EAAC,CAAC;qBACtD,IAAI,CAAC,KAAK,CAAC,EAAE;oBACZ,kBAAkB,CACd,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;oBACxD,kBAAkB,CACd,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;gBACtD,CAAC,CAAC;qBACD,IAAI,CAAC,IAAI,CAAC;qBACV,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;SACJ;KACF;IAED,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;QAC1E,MAAM,aAAa,GACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,aAAa,CAAC;QAClE,MAAM,eAAe,GAA6B;YAChD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EACL,CAAC,EAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAC,CAAC;aACxE;YACD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EACL,CAAC,EAAC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;aAClE;SACF,CAAC;QAEF,KAAK,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;YAC3D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,IAAI,IAAI,KAAK,kBAAkB,EAAE;oBAC/B,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,SAAS,CAAC;wBACb,aAAa;wBACb,eAAe;qBAChB,CAAC,EACF,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,SAAS,EAAC,EAAC,CAAC,CAAC,CAAC;iBAChD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EACpD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EACjD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM;oBACL,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,CAAC;iBAC5C;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,MAAM,uBAAuB,CAAC,kBAAkB,CAAC,CAAC;QAChE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QACnD,MAAM,YAAY,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;QACxC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACpD,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8DAA8D,EAC9D,KAAK,IAAI,EAAE;QACT,MAAM,aAAa,GACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,aAAa,CAAC;QAClE,MAAM,eAAe,GAA6B;YAChD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EAAE;oBACT,EAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAC;iBAClE;aACF;YACD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EACL,CAAC,EAAC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;aAClE;SACF,CAAC;QAEF,KAAK,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;YAC3D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,IAAI,IAAI,KAAK,kBAAkB,EAAE;oBAC/B,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,SAAS,CAAC;wBACb,aAAa;wBACb,eAAe;qBAChB,CAAC,EACF,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,SAAS,EAAC,EAAC,CAAC,CAAC,CAAC;iBAChD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EACpD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EACjD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM;oBACL,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,CAAC;iBAC5C;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,iBAAiB,GAAa,EAAE,CAAC;QACvC,MAAM,KAAK,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC,kBAAkB,EAAE;YAC1D,UAAU,EAAE,CAAC,QAAgB,EAAE,EAAE;gBAC/B,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnC,CAAC;SACF,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QACnD,MAAM,YAAY,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;QACxC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACpD,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjD,kEAAkE;QAClE,yEAAyE;QACzE,kBAAkB;QAClB,MAAM,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,aAAa,GACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,aAAa,CAAC;QAClE,MAAM,eAAe,GAA6B;YAChD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EACL,CAAC,EAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAC,CAAC;aACxE;YACD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EACL,CAAC,EAAC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;aAClE;SACF,CAAC;QAEF,KAAK,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;YAC3D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,IAAI,IAAI,KAAK,iCAAiC,EAAE;oBAC9C,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,SAAS,CAAC;wBACb,aAAa;wBACb,eAAe;qBAChB,CAAC,EACF,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,SAAS,EAAC,EAAC,CAAC,CAAC,CAAC;iBAChD;qBAAM,IAAI,IAAI,KAAK,+BAA+B,EAAE;oBACnD,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EACpD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM,IAAI,IAAI,KAAK,+BAA+B,EAAE;oBACnD,OAAO,CAAC,IAAI,QAAQ,CAChB,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EACjD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM;oBACL,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,CAAC;iBAC5C;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,iBAAiB,GAAa,EAAE,CAAC;QACvC,MAAM,KAAK,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC,iCAAiC,EAAE;YACzE,UAAU,EAAE,CAAC,QAAgB,EAAE,EAAE;gBAC/B,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnC,CAAC;SACF,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QACnD,MAAM,YAAY,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;QACxC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACpD,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjD,2EAA2E;QAC3E,uEAAuE;QACvE,WAAW;QACX,MAAM,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;QACpE,MAAM,aAAa,GACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,aAAa,CAAC;QAClE,MAAM,eAAe,GAA6B;YAChD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EACL,CAAC,EAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAC,CAAC;aACxE;YACD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EACL,CAAC,EAAC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;aAClE;SACF,CAAC;QAEF,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,CAAC;QACxE,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,CAAC;QACnE,KAAK,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;YAC3D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,IAAI,IAAI,KAAK,kBAAkB,EAAE;oBAC/B,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,SAAS,CAAC;wBACb,aAAa;wBACb,eAAe;qBAChB,CAAC,EACF,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,SAAS,EAAC,EAAC,CAAC,CAAC,CAAC;iBAChD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,UAAU,EAAE,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACpE;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,QAAQ,EAAE,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBAClE;qBAAM;oBACL,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,CAAC;iBAC5C;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC;QACxC,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC;QAC7D,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC;QACxC,+DAA+D;QAC/D,6DAA6D;QAC7D,4BAA4B;QAC5B,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;QAE7C,MAAM,CAAC,OAAO,EAAE,CAAC;QACjB,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC;QACxC,kEAAkE;QAClE,mDAAmD;QACnD,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAC/D,KAAK,IAAI,EAAE;QACT,MAAM,aAAa,GACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,sCAAsC,CAAC,CAAC;aAC7D,aAAa,CAAC;QAEvB,MAAM,eAAe,GAA6B,CAAC;gBACjD,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EAAE;oBACT,EAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC;oBAC/D,EAAC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAC;oBAC1D,EAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC;oBAC/D,EAAC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAC;iBAC3D;aACF,CAAC,CAAC;QAEH,KAAK,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;YAC3D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,IAAI,IAAI,KAAK,kBAAkB,EAAE;oBAC/B,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,SAAS,CAAC;wBACb,aAAa;wBACb,eAAe;qBAChB,CAAC,EACF,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,SAAS,EAAC,EAAC,CAAC,CAAC,CAAC;iBAChD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAC5D,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM;oBACL,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,CAAC;iBAC5C;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC;QACxC,MAAM,KAAK,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC;QAC5D,MAAM,GAAG,GAAG,MAAM,MAAM,EAAE,CAAC;QAC3B,MAAM,WAAW,GAAG,GAAG,CAAC,UAAU,CAAC;QACnC,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;QAE7C,MAAM,aAAa,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;QACtC,MAAM,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACtD,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC;QACxC,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,yEAAyE,EACzE,KAAK,IAAI,EAAE;QACT,MAAM,aAAa,GACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC;aAClD,aAAa,CAAC;QACvB,MAAM,eAAe,GAA6B;YAChD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EAAE;oBACT,EAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC;iBACjE;aACF;YACD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EACL,CAAC,EAAC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC;aACjE;YACD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EAAE;oBACT,EAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC;iBAChE;aACF;YACD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EACL,CAAC,EAAC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC;aACjE;SACF,CAAC;QACF,KAAK,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;YAC3D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,IAAI,IAAI,KAAK,kBAAkB,EAAE;oBAC/B,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,SAAS,CAAC;wBACb,aAAa;wBACb,eAAe;qBAChB,CAAC,EACF,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,SAAS,EAAC,EAAC,CAAC,CAAC,CAAC;iBAChD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EACnD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EAChD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EACnD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EAC/C,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM;oBACL,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,CAAC;iBAC5C;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,MAAM,uBAAuB,CAAC,kBAAkB,CAAC,CAAC;QAChE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QAClD,MAAM,YAAY,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;QACxC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,aAAa,GACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,yCAAyC,CAAC,CAAC;aAChE,aAAa,CAAC;QACvB,MAAM,eAAe,GAA6B;YAChD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EACL,CAAC,EAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC,CAAC;aACvE;YACD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EAAE,CAAC,EAAC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC;aACxE;YACD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EACL,CAAC,EAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC;aACtE;YACD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EAAE,CAAC,EAAC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC;aACxE;SACF,CAAC;QACF,KAAK,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;YAC3D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,IAAI,IAAI,KAAK,kBAAkB,EAAE;oBAC/B,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,SAAS,CAAC;wBACb,aAAa;wBACb,eAAe;qBAChB,CAAC,EACF,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,SAAS,EAAC,EAAC,CAAC,CAAC,CAAC;iBAChD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EACnD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EAChD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EACnD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EAC/C,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM;oBACL,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,CAAC;iBAC5C;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,MAAM,uBAAuB,CAAC,kBAAkB,CAAC,CAAC;QAChE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC1D,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QAClD,MAAM,YAAY,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;QACxC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oEAAoE,EACpE,KAAK,IAAI,EAAE;QACT,MAAM,aAAa,GACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,aAAa,CAAC;QAClE,MAAM,eAAe,GAA6B;YAChD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EAAE;oBACT,EAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAC;iBAClE;aACF;YACD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EACL,CAAC,EAAC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;aAClE;SACF,CAAC;QAEF,MAAM,cAAc,GAAwC,EAAE,CAAC;QAC/D,MAAM,kBAAkB,GAAa,EAAE,CAAC;QACxC,KAAK,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC;aACzB,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,WAAyB,EAAE,EAAE;YACxD,IAAI,WAAW,IAAI,IAAI,EAAE;gBACvB,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,OAAa,CAAC,CAAC;gBAC/C,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;aAClD;YACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,IAAI,IAAI,KAAK,kBAAkB,EAAE;oBAC/B,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,SAAS,CAAC;wBACb,aAAa;wBACb,eAAe;qBAChB,CAAC,EACF,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,SAAS,EAAC,EAAC,CAAC,CAAC,CAAC;iBAChD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EACpD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM,IAAI,IAAI,KAAK,gBAAgB,EAAE;oBACpC,OAAO,CAAC,IAAI,QAAQ,CAChB,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EACjD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;iBACxD;qBAAM;oBACL,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,CAAC;iBAC5C;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEP,MAAM,KAAK,GAAG,MAAM,uBAAuB,CACvC,EAAE,CAAC,kBAAkB,CAAC,kBAAkB,EAAE;YACxC,WAAW,EAAE;gBACX,OAAO,EAAE,EAAC,cAAc,EAAE,gBAAgB,EAAC;gBAC3C,WAAW,EAAE,SAAS;aACvB;SACF,CAAC,CAAC,CAAC;QACR,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QACnD,MAAM,YAAY,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;QACxC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACpD,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAEjD,uDAAuD;QACvD,oBAAoB;QACpB,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC;YACzD,cAAc,EAAE,gBAAgB;SACjC,CAAC,CAAC,CAAC;QACJ,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC;YACzD,cAAc,EAAE,gBAAgB;SACjC,CAAC,CAAC,CAAC;QACJ,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC;YACzD,cAAc,EAAE,gBAAgB;SACjC,CAAC,CAAC,CAAC;QACJ,MAAM,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEN,MAAM,aAAa,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IAC9C,KAAK,MAAM,QAAQ,IAAI,aAAa,EAAE;QACpC,EAAE,CAAC,gDAAgD,QAAQ,OAAO,EAC/D,KAAK,IAAI,EAAE;YACT,MAAM,aAAa,GACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,aAAa,CAAC;YAClE,MAAM,eAAe,GAA6B;gBAChD;oBACE,OAAO,EAAE,CAAC,UAAU,CAAC;oBACrB,SAAS,EAAE;wBACT,EAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAC;qBAClE;iBACF;gBACD;oBACE,OAAO,EAAE,CAAC,UAAU,CAAC;oBACrB,SAAS,EACL,CAAC,EAAC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;iBAClE;aACF,CAAC;YACF,KAAK,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAY,EAAE,EAAE;gBAC3D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;oBACrC,IAAI,IAAI,KAAK,GAAG,QAAQ,kCAAkC,EAAE;wBAC1D,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,SAAS,CAAC;4BACb,aAAa;4BACb,eAAe;yBAChB,CAAC,EACF,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,SAAS,EAAC,EAAC,CAAC,CAAC,CAAC;qBAChD;yBAAM,IAAI,IAAI,KAAK,GAAG,QAAQ,gCAAgC,EAAE;wBAC/D,OAAO,CAAC,IAAI,QAAQ,CAChB,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EACpD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;qBACxD;yBAAM,IAAI,IAAI,KAAK,GAAG,QAAQ,gCAAgC,EAAE;wBAC/D,OAAO,CAAC,IAAI,QAAQ,CAChB,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB,EACjD,EAAC,SAAS,EAAE,EAAC,cAAc,EAAE,iBAAiB,EAAC,EAAC,CAAC,CAAC,CAAC;qBACxD;yBAAM;wBACL,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,CAAC;qBAC5C;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,MAAM,uBAAuB,CACvC,GAAG,QAAQ,kCAAkC,CAAC,CAAC;YACnD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;YACnD,MAAM,YAAY,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;YACxC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACvC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;YACpD,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;KACP;IAED,EAAE,CAAC,2CAA2C,EAAE,IAAI,CAAC,EAAE;QACrD,oBAAoB,CAAC;YACnB,YAAY,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB;YAClE,YAAY,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB;SAC/D,CAAC,CAAC;QACH,wEAAwE;QACxE,6CAA6C;QAC7C,MAAM,cAAc,GAAG,SAAS,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC;QAClE,MAAM,eAAe,GAA6B;YAChD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EAAE,CAAC;wBACV,MAAM,EAAE,GAAG,cAAc,SAAS;wBAClC,OAAO,EAAE,SAAS;wBAClB,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;qBAClB,CAAC;aACH;SACF,CAAC,CAAE,gBAAgB;QACpB,6DAA6D;QAC7D,MAAM,UAAU,GACZ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,aAAa,CAAC;QAClE,UAAU,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,GAAG,cAAc,CAAC;QACrE,aAAa,CAAC,EAAC,aAAa,EAAE,UAAU,EAAE,eAAe,EAAE,UAAU,EAAE,GAAG,EAAC,CAAC;aACvE,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;aACvB,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,oBAAoB,CAAC;YACnB,YAAY,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB;YAClE,YAAY,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,QAAQ,EAAkB;SAC/D,CAAC,CAAC;QACH,MAAM,cAAc,GAAG,iBAAiB,CAAC;QACzC,MAAM,eAAe,GAA6B;YAChD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EAAE,CAAC;wBACV,MAAM,EAAE,GAAG,cAAc,SAAS;wBAClC,OAAO,EAAE,SAAS;wBAClB,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;qBAClB,CAAC;aACH;YACD;gBACE,OAAO,EAAE,CAAC,UAAU,CAAC;gBACrB,SAAS,EAAE;oBACT,EAAC,MAAM,EAAE,GAAG,cAAc,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAC;iBACtE;aACF;SACF,CAAC;QACF,6DAA6D;QAC7D,MAAM,UAAU,GACZ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,aAAa,CAAC;QAClE,UAAU,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,GAAG,cAAc,CAAC;QACrE,MAAM,MAAM,GAAG,MAAM,aAAa,CAC9B,EAAC,aAAa,EAAE,UAAU,EAAE,eAAe,EAAE,UAAU,EAAE,GAAG,EAAC,CAAC,CAAC;QACnE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;QACjE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;QACzE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;QAC/D,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;QACvE,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;QACxE,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;QAEpE,mEAAmE;QACnE,iEAAiE;QACjE,4DAA4D;QAC5D,yDAAyD;QACzD,MAAM,MAAM,GAAG,MAAM,aAAa,CAC9B,EAAC,aAAa,EAAE,UAAU,EAAE,eAAe,EAAE,UAAU,EAAE,GAAG,EAAC,CAAC,CAAC;QACnE,qBAAqB;QACrB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;QACnE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;QACzE,qBAAqB;QACrB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;QACjE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;QACvE,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;QACxE,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,GAAG,CACN,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;QACvE,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,SAAS,EAAC,CAAC,CAAC,CAAC;QAChE,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACzC,MAAM,MAAM,GACR,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAA6B,CACvD,CAAC;QAChB,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACzC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,qBAAqB,CAAC,qCAAqC,EAAE,GAAG,EAAE;IAChE,EAAE,CAAC,KAAK,EAAE,KAAK,IAAI,EAAE;QACnB,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CACvB,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,YAAY,GAAG,IAAI,CAAC;QAC1B,MAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC1C,MAAM,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAC,CAAC,CAAC;QAEtD,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAEtC,IAAI,cAAiC,CAAC;QACtC,MAAM,MAAM,CAAC,IAAI,CACb,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,SAA4B,EAAE,EAAE;YACxD,cAAc,GAAG,SAAS,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,EACF,EAAC,gBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;QAE9B,MAAM,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC;QACrD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAE7D,MAAM,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;QAC/C,oDAAoD;QACpD,6CAA6C;QAC7C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC5C,uEAAuE;QACvE,kCAAkC;QAClC,sEAAsE;QACtE,+BAA+B;QAC/B,MAAM,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC;QAC7C,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAEzD,2CAA2C;QAC3C,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;QACxE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAE3E,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9D,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9D,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACjD,kBAAkB,CACd,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;SAC/D;QAED,mEAAmE;QACnE,qDAAqD;QACrD,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QACtD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACvB,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CACvB,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,YAAY,GAAG,IAAI,CAAC;QAC1B,MAAM,KAAK,GAAG,IAAI,CAAC;QACnB,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACrD,MAAM,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAC,CAAC,CAAC;QAEtD,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAEtC,IAAI,cAAiC,CAAC;QACtC,MAAM,MAAM,CAAC,IAAI,CACb,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,SAA4B,EAAE,EAAE;YACxD,cAAc,GAAG,SAAS,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,EACF,EAAC,gBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;QAE9B,MAAM,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC;QACrD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAE7D,MAAM,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;QAC/C,oDAAoD;QACpD,6CAA6C;QAC7C,yDAAyD;QACzD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC;QAClE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC;QAClE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC;QACvE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC;QACvE,uEAAuE;QACvE,kCAAkC;QAClC,sEAAsE;QACtE,+BAA+B;QAC/B,MAAM,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC;QAC7C,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAEjE,2CAA2C;QAC3C,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;QACxE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAC3E,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAE7D,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9D,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9D,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACjD,kBAAkB,CACd,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;SAC/D;QAED,mEAAmE;QACnE,qDAAqD;QACrD,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QACtD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;QACxB,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CACvB,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,YAAY,GAAG,IAAI,CAAC;QAC1B,MAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAC/C,MAAM,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAC,CAAC,CAAC;QAEtD,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAEtC,IAAI,cAAiC,CAAC;QACtC,MAAM,MAAM,CAAC,IAAI,CACb,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,SAA4B,EAAE,EAAE;YACxD,cAAc,GAAG,SAAS,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,EACF,EAAC,gBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;QAE9B,MAAM,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC;QACrD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAE7D,MAAM,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;QAC/C,oDAAoD;QACpD,6CAA6C;QAC7C,yDAAyD;QACzD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,aAAa,CAAC,CAAC;QACzE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,aAAa,CAAC,CAAC;QACzE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC,CAAC;QACxE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC,CAAC;QACxE,uEAAuE;QACvE,kCAAkC;QAClC,sEAAsE;QACtE,+BAA+B;QAC/B,MAAM,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC;QAC7C,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAEjE,2CAA2C;QAC3C,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;QACxE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAE3E,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9D,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9D,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACjD,kBAAkB,CACd,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;SAC/D;QAED,mEAAmE;QACnE,qDAAqD;QACrD,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QACtD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;QACvB,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CACvB,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,YAAY,GAAG,IAAI,CAAC;QAC1B,MAAM,uBAAuB,GAAG,IAAI,CAAC;QACrC,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,uBAAuB,CAAC,CAAC;QACvE,MAAM,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAC,CAAC,CAAC;QAEtD,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAEtC,IAAI,cAAiC,CAAC;QACtC,MAAM,MAAM,CAAC,IAAI,CACb,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,SAA4B,EAAE,EAAE;YACxD,cAAc,GAAG,SAAS,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,EACF,EAAC,gBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;QAE9B,MAAM,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC;QACrD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAE7D,MAAM,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;QAC/C,oDAAoD;QACpD,6CAA6C;QAC7C,wDAAwD;QACxD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,cAAc,CAAC,CAAC;QAC1E,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,cAAc,CAAC,CAAC;QAC1E,uEAAuE;QACvE,kCAAkC;QAClC,sEAAsE;QACtE,+BAA+B;QAC/B,MAAM,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC;QAC7C,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAEjE,2CAA2C;QAC3C,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;QACxE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAC3E,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,yBAAyB,CAAC,CAAC;aAC1D,OAAO,CAAC,uBAAuB,CAAC,CAAC;QAEtC,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9D,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9D,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACjD,kBAAkB,CACd,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;SAC/D;QAED,mEAAmE;QACnE,qDAAqD;QACrD,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QACtD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CACvB,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,YAAY,GAAG,IAAI,CAAC;QAC1B,MAAM,KAAK,GAAG,IAAI,CAAC;QACnB,MAAM,KAAK,GAAG,IAAI,CAAC;QACnB,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACzD,MAAM,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAC,CAAC,CAAC;QAEtD,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAEtC,IAAI,cAAiC,CAAC;QACtC,MAAM,MAAM,CAAC,IAAI,CACb,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,SAA4B,EAAE,EAAE;YACxD,cAAc,GAAG,SAAS,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,EACF,EAAC,gBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;QAE9B,MAAM,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC;QACrD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAE7D,MAAM,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;QAC/C,oDAAoD;QACpD,6CAA6C;QAC7C,yDAAyD;QACzD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;QAChE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;QAChE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;QAChE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;QAChE,uEAAuE;QACvE,kCAAkC;QAClC,sEAAsE;QACtE,+BAA+B;QAC/B,MAAM,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC;QAC7C,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAEjE,2CAA2C;QAC3C,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;QACxE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAC3E,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7D,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAE7D,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9D,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9D,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACjD,kBAAkB,CACd,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;SAC/D;QAED,mEAAmE;QACnE,qDAAqD;QACrD,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QACtD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACnC,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CACvB,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAE,MAAM,EAAC,CAAC,CAAC;QAE9D,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAEtC,IAAI,cAAiC,CAAC;QACtC,MAAM,MAAM,CAAC,IAAI,CACb,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,SAA4B,EAAE,EAAE;YACxD,cAAc,GAAG,SAAS,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,EACF,EAAC,gBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;QAE9B,MAAM,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC;QACrD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAE7D,MAAM,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;QAC/C,oDAAoD;QACpD,6CAA6C;QAC7C,yDAAyD;QACzD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;QAChE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;QAChE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;QAChE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;QAChE,uEAAuE;QACvE,kCAAkC;QAClC,sEAAsE;QACtE,+BAA+B;QAC/B,MAAM,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC;QAC7C,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAEjE,2CAA2C;QAC3C,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;QACxE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEnE,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9D,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9D,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACjD,kBAAkB,CACd,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;SAC/D;QAED,mEAAmE;QACnE,qDAAqD;QACrD,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QACtD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;QACxB,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CACvB,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,YAAY,GAAG,IAAI,CAAC;QAC1B,MAAM,QAAQ,GAAG,IAAI,CAAC;QACtB,MAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QACzD,MAAM,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAC,CAAC,CAAC;QAEtD,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAEtC,IAAI,cAAiC,CAAC;QACtC,MAAM,MAAM,CAAC,IAAI,CACb,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,SAA4B,EAAE,EAAE;YACxD,cAAc,GAAG,SAAS,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,EACF,EAAC,gBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;QAE9B,MAAM,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC;QACrD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAE7D,MAAM,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;QAC/C,oDAAoD;QACpD,6CAA6C;QAC7C,yDAAyD;QACzD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC;QACvE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC;QACvE,uEAAuE;QACvE,kCAAkC;QAClC,sEAAsE;QACtE,+BAA+B;QAC/B,MAAM,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC;QAC7C,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAEjE,2CAA2C;QAC3C,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;QACxE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAE3E,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9D,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC9D,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACjD,kBAAkB,CACd,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;SAC/D;QAED,mEAAmE;QACnE,qDAAqD;QACrD,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QACtD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;YAC1B,KAAK,EAAE,CAAC;YACR,UAAU,EAAE,CAAC,CAAC,CAAC;YACf,iBAAiB,EAAE,MAAM;YACzB,UAAU,EAAE,SAAS;SACtB,CAAC,CAAC,CAAC;QACJ,MAAM,CAAC,OAAO,CACV,EAAC,IAAI,EAAE,yBAAyB,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,KAAK,CAAC,EAAC,CAAC,CAAC;QAE5E,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAClE,IAAI,CAAC,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACjD,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEnC,IAAI,cAAiC,CAAC;QACtC,MAAM,MAAM,CAAC,IAAI,CACb,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,SAA4B,EAAE,EAAE;YACxD,cAAc,GAAG,SAAS,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,EACF,EAAC,gBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;QAE9B,MAAM,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC;QACrD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;QACnE,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAEnD,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;QACxE,CAAC,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;YAC1B,KAAK,EAAE,CAAC;YACR,UAAU,EAAE,CAAC,CAAC,CAAC;YACf,iBAAiB,EAAE,MAAM;YACzB,UAAU,EAAE,SAAS;SACtB,CAAC,CAAC,CAAC;QACJ,MAAM,CAAC,OAAO,CACV,EAAC,IAAI,EAAE,yBAAyB,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,KAAK,CAAC,EAAC,CAAC,CAAC;QAE5E,IAAI,cAAiC,CAAC;QACtC,MAAM,MAAM,CAAC,IAAI,CACb,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,SAA4B,EAAE,EAAE;YACxD,cAAc,GAAG,SAAS,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,EACF,EAAC,gBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;QAE9B,MAAM,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC;QACrD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;QACnE,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAEnD,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;QAExE,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAClE,MAAM,CAAC,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAChD,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACjD,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;QACjE,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QACtC,MAAM,CAAC,GACH,GAAG,CAAC,MAAM;aACL,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAC,CAAC;aAChE,KAAK,CAAC,KAAK,CAAuB,CAAC;QAC5C,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAC9B,EAAC,KAAK,EAAE,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAC,CAAC,CAAC;QAClE,MAAM,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAuB,CAAC;QACpD,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAC9B,EAAC,KAAK,EAAE,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAC,CAAC,CAAC;QAClE,MAAM,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAuB,CAAC;QACpD,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAC,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC;YACb,IAAI,EAAE,CAAC,yBAAyB,EAAE,oBAAoB,CAAC;YACvD,SAAS,EAAE,MAAM;YACjB,OAAO,EAAE,CAAC,KAAK,CAAC;SACjB,CAAC,CAAC;QAEH,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAE3C,IAAI,CAAC,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAEtD,IAAI,cAAiC,CAAC;QACtC,MAAM,MAAM,CAAC,IAAI,CACb,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,SAA4B,EAAE,EAAE;YACxD,cAAc,GAAG,SAAS,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,EACF,EAAC,gBAAgB,EAAE,IAAI,EAAC,CAAC,CAAC;QAE9B,MAAM,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC;QACrD,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;YACrC,0BAA0B,EAAE,qBAAqB;SAClD,CAAC,CAAC;QACH,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAEnD,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;QAExE,CAAC,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAClD,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAEhD,MAAM,QAAQ,GAAG,GAAG,SAAS,CAAC,IAAI,OAAO,CAAC;QAC1C,MAAM,WAAW,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAa,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,QAAQ,GAAG,GAAG,SAAS,CAAC,IAAI,OAAO,CAAC;QAC1C,MAAM,WAAW,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAa,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAEhD,MAAM,UAAU,GAAG,GAAG,SAAS,CAAC,IAAI,MAAM,CAAC;QAC3C,MAAM,aAAa,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,CAAa,CAAC;QACxD,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACpC,MAAM,UAAU,GAAG,GAAG,SAAS,CAAC,IAAI,MAAM,CAAC;QAC3C,MAAM,aAAa,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,CAAa,CAAC;QACxD,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,eAAe,CAAC,gCAAgC,EAAE,GAAG,EAAE;IACrD,0EAA0E;IAC1E,QAAQ;IACR,EAAE;IACF,YAAY;IACZ,eAAe;IACf,6BAA6B;IAC7B,mEAAmE;IACnE,KAAK;IACL,yBAAyB;IACzB,MAAM;IACN,MAAM,aAAa,GAAO;QACxB,YAAY,EAAE,YAAY;QAC1B,eAAe,EAAE,OAAO;QACxB,QAAQ,EAAE,CAAC;gBACT,YAAY,EAAE,OAAO;gBACrB,QAAQ,EAAE;oBACR,oBAAoB,EAAE;wBACpB,YAAY,EAAE,iBAAiB;wBAC/B,QAAQ,EAAE;4BACR,cAAc,EAAE,SAAS;4BACzB,OAAO,EAAE,GAAG;4BACZ,MAAM,EAAE,IAAI;4BACZ,MAAM,EAAE,SAAS;yBAClB;qBACF;oBACD,MAAM,EAAE,SAAS;oBACjB,mBAAmB,EAAE,IAAI;oBACzB,kBAAkB,EAAE,IAAI;oBACxB,iBAAiB,EAAE,IAAI;oBACvB,OAAO,EAAE,SAAS;oBAClB,YAAY,EAAE,SAAS;oBACvB,WAAW,EAAE,IAAI;oBACjB,oBAAoB,EAAE,IAAI;oBAC1B,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;oBACzD,OAAO,EAAE,CAAC;oBACV,mBAAmB,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;oBAC9B,UAAU,EAAE,IAAI;oBAChB,sBAAsB,EAAE,IAAI;iBAC7B;aACF,CAAC;QACF,SAAS,EAAE,YAAY;KACxB,CAAC;IACF,MAAM,WAAW,GAA8B;QAC7C;YACE,IAAI,EAAE,gBAAgB;YACtB,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;YACb,KAAK,EAAE,SAAS;SACjB;QACD;YACE,IAAI,EAAE,cAAc;YACpB,KAAK,EAAE,CAAC,CAAC,CAAC;YACV,KAAK,EAAE,SAAS;SACjB;KACF,CAAC;IACF,MAAM,UAAU,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC;IAEtE,qEAAqE;IACrE,2BAA2B;IAC3B,MAAM,gBAAgB;QAGpB,YAAY,cAAc,GAAG,IAAI;YAC/B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACvC,CAAC;QAED,KAAK,CAAC,IAAI;YACR,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAC,aAAa,EAAE,WAAW,EAAE,UAAU,EAAC,CAAC,CAAC;gBAC1C,EAAC,aAAa,EAAC,CAAC;QAC/C,CAAC;KACF;IAED,wEAAwE;IACxE,yEAAyE;IACzE,QAAQ;IACR,MAAM,oBAAoB;QACxB,gBAAe,CAAC;KACjB;IAED,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,KAAK,GAAG,MAAM,uBAAuB,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;QACxE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QAClD,MAAM,YAAY,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;QACxC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE,KAAK,IAAI,EAAE;QAClC,MAAM,KAAK,GAAG,MAAM,uBAAuB,CAAC,IAAI,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;QACzE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;QAC5D,uBAAuB,CAAC,IAAI,oBAAoB,EAAE,CAAC;aAC9C,IAAI,CAAC,KAAK,CAAC,EAAE;YACZ,IAAI,CAAC,IAAI,CACL,0DAA0D;gBAC1D,eAAe,CAAC,CAAC;QACvB,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,CAAC,EAAE;YACX,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;YAC7D,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,qBAAqB,CAAC,YAAY,EAAE,GAAG,EAAE;IACvC,MAAM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1B,MAAM,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAC/C,MAAM,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5B,MAAM,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7B,MAAM,MAAM,GAAG;QACb,IAAI,OAAO,CAAC,EAAC,WAAW,EAAE,YAAY,EAAE,eAAe,EAAE,IAAI,EAAE,QAAQ,EAAC,CAAC;QACzE,IAAI,OAAO,CAAC,EAAC,WAAW,EAAE,aAAa,EAAE,IAAI,EAAE,QAAQ,EAAC,CAAC;KAC1D,CAAC;IAEF,SAAS,SAAS;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC;IAC/B,CAAC;IAED,SAAS,kBAAkB;QACzB,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;IACzC,CAAC;IAED,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;QACtE,MAAM,KAAK,GAAG,IAAI,OAAO,CAAC,EAAC,WAAW,EAAE,YAAY,EAAC,CAAC,CAAC;QACvD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,EAAC,MAAM,EAAE,CAAC,KAAK,CAAC,EAAC,CAAC,CAAC;aAC1C,YAAY,CACT,gEAAgE,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;QACxB,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAC/B,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YAC1B,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAClB;QACD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;QACxB,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC;QACvC,KAAK,CAAC,GAAG,EAAE,CAAC;QACZ,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,IAAI,mBAA2B,CAAC;QAChC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC;aACjB,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAe,EAAE,EAAE,CAAC,mBAAmB,GAAG,OAAO,CAAC,CAAC;QACtE,GAAG,CAAC,UAAU,CAAC;YACb,MAAM,EAAE;gBACN,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC;gBAC1D,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC;aAC9C;SACF,CAAC,CAAC;QACH,MAAM,CAAC,mBAAmB,CAAC;aACtB,OAAO,CAAC,2DAA2D,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,IAAI,mBAA2B,CAAC;QAChC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC;aACjB,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAe,EAAE,EAAE,CAAC,mBAAmB,GAAG,OAAO,CAAC,CAAC;QACtE,GAAG,CAAC,UAAU,CAAC;YACb,MAAM,EAAE;gBACN,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC;gBAC1D,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC;aACjD;SACF,CAAC,CAAC;QACH,MAAM,CAAC,mBAAmB,CAAC;aACtB,OAAO,CAAC,8CAA8C,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,IAAI,mBAA2B,CAAC;QAChC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC;aACjB,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAe,EAAE,EAAE,CAAC,mBAAmB,GAAG,OAAO,CAAC,CAAC;QACtE,GAAG,CAAC,UAAU,CAAC;YACb,MAAM,EAAE;gBACN,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC;gBAC1D,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC;aAC9C;SACF,CAAC,CAAC;QACH,MAAM,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAC/B,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,YAAY,CAAC,kCAAkC,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAC/B,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;YAC9B,OAAO,EAAE,CAAC;YACV,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;YACpB,OAAO,EAAE,CAAC;YACV,OAAO,EAAE,OAAO;YAChB,UAAU,EAAE,cAAc;YAC1B,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACtB,CAAC,CAAC;QACH,gEAAgE;QAChE,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,yBAAyB,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACrE,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAC/B,KAAK,CAAC,GAAG,CACL,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,EAAC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;QACxE,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;YAC9B,OAAO,EAAE,CAAC;YACV,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;YACpB,OAAO,EAAE,CAAC;YACV,OAAO,EAAE,OAAO;YAChB,UAAU,EAAE,cAAc;SAC3B,CAAC,CAAC;QACH,gEAAgE;QAChE,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,yBAAyB,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC;QACvC,kBAAkB,CACd,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,CAAW,EAAE,kBAAkB,EAAE,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC;QACvC,kBAAkB,CACd,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,CAAW,EAAE,kBAAkB,EAAE,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,MAAM,MAAM,GAAe,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAChD,4EAA4E;IAC5E,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;QAC1B,EAAE,CAAC,oCAAoC,KAAK,GAAG,EAAE,GAAG,EAAE;YACpD,MAAM,QAAQ,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;YAClC,QAAQ,CAAC,GAAG,CACR,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,EAAC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC;YACzE,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAW,CAAC;YACxC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,KAAK,GAAG,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,QAAQ,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;YAClC,QAAQ,CAAC,GAAG,CACR,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,EAAC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC;YACzE,QAAQ,CAAC,OAAO,CAAC,EAAC,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,kBAAkB,EAAC,CAAC,CAAC;YAC/D,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACzC,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YACzD,MAAM,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;KACJ;IAED,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,MAAM,SAAS,GAAG,EAAE,CAAC;QACrB,MAAM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1B,MAAM,eAAe,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACvD,MAAM,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5B,MAAM,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7B,MAAM,MAAM,GAAG;YACb,IAAI,OAAO,CAAC,EAAC,WAAW,EAAE,YAAY,EAAE,eAAe,EAAE,IAAI,EAAE,QAAQ,EAAC,CAAC;YACzE,IAAI,OAAO,CAAC,EAAC,WAAW,EAAE,aAAa,EAAE,IAAI,EAAE,QAAQ,EAAC,CAAC;SAC1D,CAAC;QACF,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;QACxD,MAAM,cAAc,GAAG,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;QAC/D,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC;QACvC,kBAAkB,CACd,KAAK,CAAC,cAAc,CAAC,UAAU,CAAW,EAAE,cAAc,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QACvC,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QACvC,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,SAAS,EAAC,CAAC,CAAC;QACnE,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAuB,CAAC;QACtD,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,SAAS,EAAC,CAAC,CAAC;QACnE,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAuB,CAAC;QACtD,MAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAuB,CAAC;QACzE,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;QAEhE,MAAM,SAAS,GAAG,CAAC,CAAC;QACpB,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,GAAG,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAW,CAAC;QACrD,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACnC,MAAM,SAAS,GAAG,CAAC,CAAC;QACpB,MAAM,SAAS,GAAG,CAAC,CAAC;QACpB,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QACxC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;YACnC,KAAK,EAAE,CAAC;YACR,OAAO,EAAE,KAAK;YACd,iBAAiB,EAAE,MAAM;YACzB,UAAU,EAAE,CAAC,SAAS,CAAC;SACxB,CAAC,CAAC;QACH,MAAM,WAAW,GACb,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,iBAAiB,EAAE,MAAM,EAAC,CAAC,CAAC;QAC5E,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC,EAAC,MAAM,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,EAAC,CAAC,CAAC;QACnE,KAAK,CAAC,OAAO,CAAC,EAAC,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,kBAAkB,EAAC,CAAC,CAAC;QAC5D,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,SAAS,EAAE,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAChE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,SAAS,GAAG,CAAC,CAAC;QACpB,MAAM,SAAS,GAAG,CAAC,CAAC;QACpB,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QACxC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,SAAS,CAAC,EAAC,CAAC,CAAC;QAC1E,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC;QACjD,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC,EAAC,MAAM,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,EAAC,CAAC,CAAC;QACnE,KAAK,CAAC,OAAO,CAAC,EAAC,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,kBAAkB,EAAC,CAAC,CAAC;QAC5D,oEAAoE;QACpE,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,SAAS,EAAE,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAE3D,IAAI,WAAkB,CAAC;QACvB,IAAI;YACF,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;SACzB;QAAC,OAAO,GAAG,EAAE;YACZ,WAAW,GAAG,GAAG,CAAC;SACnB;QACD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC;aACtB,OAAO,CACJ,8DAA8D,CAAC,CAAC;QACxE,MAAM,QAAQ,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,SAAS,GAAG,CAAC,CAAC;QACpB,MAAM,SAAS,GAAG,CAAC,CAAC;QACpB,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QACxC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,SAAS,CAAC,EAAC,CAAC,CAAC;QAC1E,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC;QACjD,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC,EAAC,MAAM,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,EAAC,CAAC,CAAC;QACnE,KAAK,CAAC,OAAO,CAAC,EAAC,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,kBAAkB,EAAC,CAAC,CAAC;QAE5D,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,MAAM,MAAM,GAAG,CAAC,CAAC;QACjB,MAAM,cAAc,GAAG,CAAC,CAAC;QACzB,IAAI,OAAO,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE;YACpC,MAAM;YACN,SAAS,EAAE;gBACT,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;oBAChC,aAAa,EAAE,CAAC;oBAChB,IAAI,KAAK,KAAK,cAAc,EAAE;wBAC5B,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC;qBAC3B;gBACH,CAAC;aACF;SACF,CAAC,CAAC;QACH,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;QAEhE,iEAAiE;QACjE,OAAO,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,SAAS,GAAG,CAAC,CAAC;QACpB,MAAM,SAAS,GAAG,CAAC,CAAC;QACpB,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,SAAS,CAAC,EAAC,CAAC,CAAC;QAC1E,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC,EAAC,MAAM,EAAE,CAAC,WAAW,CAAC,EAAC,CAAC,CAAC;QACtD,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QACxC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;aAC/B,YAAY,CAAC,6BAA6B,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,MAAM,SAAS,GAAG,CAAC,CAAC;QACpB,MAAM,SAAS,GAAG,CAAC,CAAC;QACpB,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QACxC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;YACnC,KAAK,EAAE,CAAC;YACR,OAAO,EAAE,KAAK;YACd,iBAAiB,EAAE,MAAM;YACzB,UAAU,EAAE,CAAC,SAAS,CAAC;SACxB,CAAC,CAAC;QACH,MAAM,WAAW,GACb,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,iBAAiB,EAAE,MAAM,EAAC,CAAC,CAAC;QAC5E,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC,EAAC,MAAM,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,EAAC,CAAC,CAAC;QACnE,KAAK,CAAC,OAAO,CAAC,EAAC,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,kBAAkB,EAAC,CAAC,CAAC;QAC5D,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,SAAS,EAAC,CAAW,CAAC;QAC7D,kBAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC;QACvC,MAAM,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QACjC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,eAAe;AAEf,MAAM,mBAAmB,GAA0B;IACjD,aAAa,EAAE;QACb,YAAY,EAAE,OAAO;QACrB,eAAe,EAAE,OAAO;QACxB,QAAQ,EAAE;YACR,QAAQ,EAAE;gBACR;oBACE,YAAY,EAAE,YAAY;oBAC1B,QAAQ,EAAE;wBACR,OAAO,EAAE,SAAS;wBAClB,mBAAmB,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;wBAC/B,MAAM,EAAE,SAAS;wBACjB,QAAQ,EAAE,KAAK;qBAChB;oBACD,eAAe,EAAE,EAAE;oBACnB,MAAM,EAAE,SAAS;iBAClB;gBACD;oBACE,YAAY,EAAE,OAAO;oBACrB,QAAQ,EAAE;wBACR,OAAO,EAAE,EAAE;wBACX,iBAAiB,EAAE,IAAI;wBACvB,UAAU,EAAE,IAAI;wBAChB,oBAAoB,EAAE;4BACpB,YAAY,EAAE,iBAAiB;4BAC/B,QAAQ,EAAE;gCACR,cAAc,EAAE,SAAS;gCACzB,OAAO,EAAE,CAAC;gCACV,MAAM,EAAE,IAAI;gCACZ,MAAM,EAAE,SAAS;6BAClB;yBACF;wBACD,YAAY,EAAE,QAAQ;wBACtB,kBAAkB,EAAE,IAAI;wBACxB,sBAAsB,EAAE,IAAI;wBAC5B,WAAW,EAAE,IAAI;wBACjB,mBAAmB,EAAE,IAAI;wBACzB,oBAAoB,EAAE,IAAI;wBAC1B,MAAM,EAAE,SAAS;wBACjB,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;qBAC1D;oBACD,eAAe,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC1C,MAAM,EAAE,SAAS;iBAClB;aACF;YACD,cAAc,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACnC,eAAe,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,EAAE,MAAM;SACf;QACD,SAAS,EAAE,YAAY;KACxB;CACF,CAAC;AAEF,MAAM,sCAAsC,GAA0B;IACpE,aAAa,EAAE;QACb,eAAe,EAAE,OAAO;QACxB,SAAS,EAAE,YAAY;QACvB,cAAc,EAAE;YACd,YAAY,EAAE,OAAO;YACrB,QAAQ,EAAE;gBACR,MAAM,EAAE,SAAS;gBACjB,QAAQ,EAAE;oBACR;wBACE,MAAM,EAAE,eAAe;wBACvB,YAAY,EAAE,YAAY;wBAC1B,QAAQ,EAAE;4BACR,mBAAmB,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;4BAC9B,OAAO,EAAE,SAAS;4BAClB,QAAQ,EAAE,KAAK;4BACf,MAAM,EAAE,eAAe;yBACxB;wBACD,eAAe,EAAE,EAAE;qBACpB;oBACD;wBACE,MAAM,EAAE,SAAS;wBACjB,YAAY,EAAE,OAAO;wBACrB,QAAQ,EAAE;4BACR,MAAM,EAAE,SAAS;4BACjB,WAAW,EAAE,IAAI;4BACjB,mBAAmB,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;4BAC9B,OAAO,EAAE,SAAS;4BAClB,OAAO,EAAE,CAAC;4BACV,YAAY,EAAE,MAAM;4BACpB,UAAU,EAAE,IAAI;4BAChB,oBAAoB,EAAE;gCACpB,YAAY,EAAE,iBAAiB;gCAC/B,QAAQ,EAAE;oCACR,OAAO,EAAE,GAAG;oCACZ,MAAM,EAAE,SAAS;oCACjB,cAAc,EAAE,SAAS;oCACzB,MAAM,EAAE,IAAI;iCACb;6BACF;4BACD,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;4BACzD,oBAAoB,EAAE,IAAI;4BAC1B,kBAAkB,EAAE,IAAI;4BACxB,sBAAsB,EAAE,IAAI;4BAC5B,mBAAmB,EAAE,IAAI;4BACzB,iBAAiB,EAAE,IAAI;yBACxB;wBACD,eAAe,EAAE,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;qBACjD;oBACD;wBACE,MAAM,EAAE,cAAc;wBACtB,YAAY,EAAE,YAAY;wBAC1B,QAAQ,EAAE;4BACR,MAAM,EAAE,cAAc;4BACtB,QAAQ,EAAE,CAAC;oCACT,YAAY,EAAE,OAAO;oCACrB,QAAQ,EAAE;wCACR,MAAM,EAAE,SAAS;wCACjB,WAAW,EAAE,IAAI;wCACjB,mBAAmB,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;wCAC9B,OAAO,EAAE,SAAS;wCAClB,OAAO,EAAE,CAAC;wCACV,YAAY,EAAE,SAAS;wCACvB,UAAU,EAAE,IAAI;wCAChB,oBAAoB,EAAE;4CACpB,YAAY,EAAE,iBAAiB;4CAC/B,QAAQ,EAAE;gDACR,OAAO,EAAE,GAAG;gDACZ,MAAM,EAAE,SAAS;gDACjB,cAAc,EAAE,SAAS;gDACzB,MAAM,EAAE,IAAI;6CACb;yCACF;wCACD,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;wCACzD,oBAAoB,EAAE,IAAI;wCAC1B,kBAAkB,EAAE,IAAI;wCACxB,sBAAsB,EAAE,IAAI;wCAC5B,mBAAmB,EAAE,IAAI;wCACzB,iBAAiB,EAAE,IAAI;qCACxB;iCACF,CAAC;yBACH;wBACD,eAAe,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;qBAC3C;iBACF;gBACD,cAAc,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzC,eAAe,EAAE,CAAC,CAAC,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;aAC1C;SACF;KACF;CACF,CAAC;AAEF,MAAM,2BAA2B,GAA0B;IACzD,aAAa,EAAE;QACb,SAAS,EAAE,YAAY;QACvB,eAAe,EAAE,OAAO;QACxB,cAAc,EAAE;YACd,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE;gBACR;oBACE,YAAY,EAAE,OAAO;oBACrB,QAAQ,EAAE;wBACR,oBAAoB,EAAE;4BACpB,YAAY,EAAE,iBAAiB;4BAC/B,QAAQ,EAAE;gCACR,cAAc,EAAE,SAAS;gCACzB,OAAO,EAAE,GAAG;gCACZ,MAAM,EAAE,IAAI;gCACZ,MAAM,EAAE,SAAS;6BAClB;yBACF;wBACD,MAAM,EAAE,SAAS;wBACjB,mBAAmB,EAAE,IAAI;wBACzB,kBAAkB,EAAE,IAAI;wBACxB,iBAAiB,EAAE,IAAI;wBACvB,OAAO,EAAE,SAAS;wBAClB,YAAY,EAAE,MAAM;wBACpB,WAAW,EAAE,IAAI;wBACjB,oBAAoB,EAAE,IAAI;wBAC1B,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;wBACzD,OAAO,EAAE,CAAC;wBACV,mBAAmB,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;wBAC/B,UAAU,EAAE,IAAI;wBAChB,sBAAsB,EAAE,IAAI;qBAC7B;iBACF;gBACD;oBACE,YAAY,EAAE,OAAO;oBACrB,QAAQ,EAAE;wBACR,oBAAoB,EAAE;4BACpB,YAAY,EAAE,iBAAiB;4BAC/B,QAAQ,EAAE;gCACR,cAAc,EAAE,SAAS;gCACzB,OAAO,EAAE,GAAG;gCACZ,MAAM,EAAE,IAAI;gCACZ,MAAM,EAAE,SAAS;6BAClB;yBACF;wBACD,MAAM,EAAE,SAAS;wBACjB,mBAAmB,EAAE,IAAI;wBACzB,kBAAkB,EAAE,IAAI;wBACxB,iBAAiB,EAAE,IAAI;wBACvB,YAAY,EAAE,SAAS;wBACvB,WAAW,EAAE,IAAI;wBACjB,oBAAoB,EAAE,IAAI;wBAC1B,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;wBACzD,OAAO,EAAE,CAAC;wBACV,UAAU,EAAE,IAAI;wBAChB,sBAAsB,EAAE,IAAI;qBAC7B;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,MAAM,yCAAyC,GAA0B;IACvE,aAAa,EAAE;QACb,SAAS,EAAE,YAAY;QACvB,eAAe,EAAE,UAAU;QAC3B,cAAc,EAAE;YACd,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE;gBACR,MAAM,EAAE,kBAAkB;gBAC1B,QAAQ,EAAE;oBACR;wBACE,YAAY,EAAE,OAAO;wBACrB,QAAQ,EAAE;4BACR,oBAAoB,EAAE;gCACpB,YAAY,EAAE,iBAAiB;gCAC/B,QAAQ,EAAE;oCACR,cAAc,EAAE,SAAS;oCACzB,OAAO,EAAE,GAAG;oCACZ,MAAM,EAAE,IAAI;oCACZ,MAAM,EAAE,SAAS;iCAClB;6BACF;4BACD,MAAM,EAAE,SAAS;4BACjB,mBAAmB,EAAE,IAAI;4BACzB,kBAAkB,EAAE,IAAI;4BACxB,iBAAiB,EAAE,IAAI;4BACvB,OAAO,EAAE,SAAS;4BAClB,YAAY,EAAE,MAAM;4BACpB,WAAW,EAAE,IAAI;4BACjB,oBAAoB,EAAE,IAAI;4BAC1B,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;4BACzD,OAAO,EAAE,CAAC;4BACV,mBAAmB,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;4BAC/B,UAAU,EAAE,IAAI;4BAChB,sBAAsB,EAAE,IAAI;yBAC7B;qBACF;oBACD;wBACE,YAAY,EAAE,OAAO;wBACrB,QAAQ,EAAE;4BACR,oBAAoB,EAAE;gCACpB,YAAY,EAAE,iBAAiB;gCAC/B,QAAQ,EAAE;oCACR,cAAc,EAAE,SAAS;oCACzB,OAAO,EAAE,GAAG;oCACZ,MAAM,EAAE,IAAI;oCACZ,MAAM,EAAE,SAAS;iCAClB;6BACF;4BACD,MAAM,EAAE,SAAS;4BACjB,mBAAmB,EAAE,IAAI;4BACzB,kBAAkB,EAAE,IAAI;4BACxB,iBAAiB,EAAE,IAAI;4BACvB,YAAY,EAAE,SAAS;4BACvB,WAAW,EAAE,IAAI;4BACjB,oBAAoB,EAAE,IAAI;4BAC1B,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;4BACzD,OAAO,EAAE,CAAC;4BACV,UAAU,EAAE,IAAI;4BAChB,sBAAsB,EAAE,IAAI;yBAC7B;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,2EAA2E;AAC3E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgHI;AAEJ,MAAM,sBAAsB,GAA0B;IACpD,aAAa,EAAE;QACb,SAAS,EAAE,YAAY;QACvB,YAAY,EAAE,OAAO;QACrB,eAAe,EAAE,OAAO;QACxB,QAAQ,EAAE;YACR,MAAM,EAAE,OAAO;YACf,eAAe,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACrC,QAAQ,EAAE;gBACR;oBACE,YAAY,EAAE,YAAY;oBAC1B,MAAM,EAAE,SAAS;oBACjB,eAAe,EAAE,EAAE;oBACnB,QAAQ,EAAE;wBACR,mBAAmB,EAAE,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;wBACtC,QAAQ,EAAE,KAAK;wBACf,MAAM,EAAE,SAAS;wBACjB,OAAO,EAAE,SAAS;qBACnB;iBACF;gBACD;oBACE,YAAY,EAAE,QAAQ;oBACtB,MAAM,EAAE,WAAW;oBACnB,eAAe,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC1C,QAAQ,EAAE;wBACR,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;wBACzD,SAAS,EAAE,OAAO;wBAClB,UAAU,EAAE,IAAI;wBAChB,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACjB,kBAAkB,EAAE,IAAI;wBACxB,sBAAsB,EAAE,IAAI;wBAC5B,oBAAoB,EAAE;4BACpB,YAAY,EAAE,iBAAiB;4BAC/B,QAAQ,EAAE;gCACR,cAAc,EAAE,SAAS;gCACzB,OAAO,EAAE,GAAG;gCACZ,MAAM,EAAE,SAAS;gCACjB,MAAM,EAAE,IAAI;6BACb;yBACF;wBACD,aAAa,EAAE,eAAe;wBAC9B,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACvB,mBAAmB,EAAE,IAAI;wBACzB,oBAAoB,EAAE,IAAI;wBAC1B,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACrB,YAAY,EAAE,MAAM;wBACpB,MAAM,EAAE,WAAW;wBACnB,SAAS,EAAE,EAAE;wBACb,WAAW,EAAE,IAAI;wBACjB,iBAAiB,EAAE,IAAI;qBACxB;iBACF;gBACD;oBACE,YAAY,EAAE,QAAQ;oBACtB,MAAM,EAAE,WAAW;oBACnB,eAAe,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC5C,QAAQ,EAAE;wBACR,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;wBACzD,SAAS,EAAE,OAAO;wBAClB,UAAU,EAAE,IAAI;wBAChB,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACjB,kBAAkB,EAAE,IAAI;wBACxB,sBAAsB,EAAE,IAAI;wBAC5B,oBAAoB,EAAE;4BACpB,YAAY,EAAE,iBAAiB;4BAC/B,QAAQ,EAAE;gCACR,cAAc,EAAE,SAAS;gCACzB,OAAO,EAAE,GAAG;gCACZ,MAAM,EAAE,SAAS;gCACjB,MAAM,EAAE,IAAI;6BACb;yBACF;wBACD,aAAa,EAAE,eAAe;wBAC9B,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACvB,mBAAmB,EAAE,IAAI;wBACzB,oBAAoB,EAAE,IAAI;wBAC1B,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACrB,YAAY,EAAE,MAAM;wBACpB,MAAM,EAAE,WAAW;wBACnB,SAAS,EAAE,EAAE;wBACb,WAAW,EAAE,IAAI;wBACjB,iBAAiB,EAAE,IAAI;qBACxB;iBACF;gBACD;oBACE,YAAY,EAAE,cAAc;oBAC5B,MAAM,EAAE,iBAAiB;oBACzB,eAAe,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC5C,QAAQ,EAAE;wBACR,SAAS,EAAE,OAAO;wBAClB,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACjB,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACnB,aAAa,EAAE,eAAe;wBAC9B,MAAM,EAAE,iBAAiB;wBACzB,WAAW,EAAE,IAAI;qBAClB;iBACF;gBACD;oBACE,YAAY,EAAE,SAAS;oBACvB,MAAM,EAAE,YAAY;oBACpB,eAAe,EAAE,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAClD,QAAQ,EAAE;wBACR,MAAM,EAAE,IAAI;wBACZ,aAAa,EAAE,IAAI;wBACnB,MAAM,EAAE,YAAY;wBACpB,WAAW,EAAE,IAAI;wBACjB,MAAM,EAAE,IAAI;qBACb;iBACF;gBACD;oBACE,YAAY,EAAE,SAAS;oBACvB,MAAM,EAAE,WAAW;oBACnB,eAAe,EAAE,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC7C,QAAQ,EAAE,EAAC,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,IAAI,EAAC;iBACnD;gBACD;oBACE,YAAY,EAAE,OAAO;oBACrB,MAAM,EAAE,UAAU;oBAClB,eAAe,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC5C,QAAQ,EAAE;wBACR,UAAU,EAAE,IAAI;wBAChB,kBAAkB,EAAE,IAAI;wBACxB,oBAAoB,EAAE;4BACpB,YAAY,EAAE,iBAAiB;4BAC/B,QAAQ,EAAE;gCACR,cAAc,EAAE,SAAS;gCACzB,OAAO,EAAE,GAAG;gCACZ,MAAM,EAAE,SAAS;gCACjB,MAAM,EAAE,IAAI;6BACb;yBACF;wBACD,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;wBACzD,mBAAmB,EAAE,IAAI;wBACzB,iBAAiB,EAAE,IAAI;wBACvB,oBAAoB,EAAE,IAAI;wBAC1B,YAAY,EAAE,MAAM;wBACpB,MAAM,EAAE,UAAU;wBAClB,sBAAsB,EAAE,IAAI;wBAC5B,WAAW,EAAE,IAAI;wBACjB,OAAO,EAAE,GAAG;qBACb;iBACF;gBACD;oBACE,YAAY,EAAE,SAAS;oBACvB,MAAM,EAAE,YAAY;oBACpB,eAAe,EAAE,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC3C,QAAQ,EAAE;wBACR,MAAM,EAAE,GAAG;wBACX,aAAa,EAAE,IAAI;wBACnB,MAAM,EAAE,YAAY;wBACpB,WAAW,EAAE,IAAI;wBACjB,MAAM,EAAE,IAAI;qBACb;iBACF;gBACD;oBACE,YAAY,EAAE,OAAO;oBACrB,MAAM,EAAE,UAAU;oBAClB,eAAe,EAAE,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC7C,QAAQ,EAAE;wBACR,UAAU,EAAE,IAAI;wBAChB,kBAAkB,EAAE,IAAI;wBACxB,oBAAoB,EAAE;4BACpB,YAAY,EAAE,iBAAiB;4BAC/B,QAAQ,EAAE;gCACR,cAAc,EAAE,SAAS;gCACzB,OAAO,EAAE,GAAG;gCACZ,MAAM,EAAE,SAAS;gCACjB,MAAM,EAAE,IAAI;6BACb;yBACF;wBACD,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;wBACzD,mBAAmB,EAAE,IAAI;wBACzB,iBAAiB,EAAE,IAAI;wBACvB,oBAAoB,EAAE,IAAI;wBAC1B,YAAY,EAAE,SAAS;wBACvB,MAAM,EAAE,UAAU;wBAClB,sBAAsB,EAAE,IAAI;wBAC5B,WAAW,EAAE,IAAI;wBACjB,OAAO,EAAE,EAAE;qBACZ;iBACF;aACF;YACD,cAAc,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SACpC;KACF;CACF,CAAC;AAEF,MAAM,cAAc,GAA0B;IAC5C,aAAa,EAAE;QACb,SAAS,EAAE,YAAY;QACvB,QAAQ,EAAE;YACR;gBACE,QAAQ,EAAE;oBACR,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;oBACrB,UAAU,EAAE,IAAI;oBAChB,mBAAmB,EAAE,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;oBACtC,SAAS,EAAE,EAAE;oBACb,oBAAoB,EAAE,IAAI;oBAC1B,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;oBACvB,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;oBACjB,SAAS,EAAE,OAAO;oBAClB,iBAAiB,EAAE,IAAI;oBACvB,mBAAmB,EAAE,IAAI;oBACzB,aAAa,EAAE,eAAe;oBAC9B,WAAW,EAAE,IAAI;oBACjB,YAAY,EAAE,MAAM;oBACpB,OAAO,EAAE,SAAS;oBAClB,kBAAkB,EAAE,EAAC,QAAQ,EAAE,EAAE,EAAE,YAAY,EAAE,OAAO,EAAC;oBACzD,kBAAkB,EAAE,IAAI;oBACxB,MAAM,EAAE,UAAU;oBAClB,oBAAoB,EAAE;wBACpB,QAAQ,EAAE;4BACR,OAAO,EAAE,GAAG;4BACZ,MAAM,EAAE,SAAS;4BACjB,MAAM,EAAE,IAAI;4BACZ,cAAc,EAAE,SAAS;yBAC1B;wBACD,YAAY,EAAE,iBAAiB;qBAChC;oBACD,sBAAsB,EAAE,IAAI;iBAC7B;gBACD,YAAY,EAAE,QAAQ;aACvB;YACD;gBACE,QAAQ,EAAE;oBACR,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;oBACrB,UAAU,EAAE,IAAI;oBAChB,SAAS,EAAE,EAAE;oBACb,oBAAoB,EAAE,IAAI;oBAC1B,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;oBACvB,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;oBACjB,SAAS,EAAE,OAAO;oBAClB,iBAAiB,EAAE,IAAI;oBACvB,aAAa,EAAE,eAAe;oBAC9B,WAAW,EAAE,IAAI;oBACjB,YAAY,EAAE,MAAM;oBACpB,mBAAmB,EAAE,IAAI;oBACzB,kBAAkB,EAAE,EAAC,QAAQ,EAAE,EAAE,EAAE,YAAY,EAAE,OAAO,EAAC;oBACzD,kBAAkB,EAAE,IAAI;oBACxB,MAAM,EAAE,UAAU;oBAClB,oBAAoB,EAAE;wBACpB,QAAQ,EAAE;4BACR,OAAO,EAAE,GAAG;4BACZ,MAAM,EAAE,SAAS;4BACjB,MAAM,EAAE,IAAI;4BACZ,cAAc,EAAE,SAAS;yBAC1B;wBACD,YAAY,EAAE,iBAAiB;qBAChC;oBACD,sBAAsB,EAAE,IAAI;iBAC7B;gBACD,YAAY,EAAE,QAAQ;aACvB;YACD;gBACE,QAAQ,EAAE;oBACR,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;oBACjB,SAAS,EAAE,OAAO;oBAClB,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;oBACnB,aAAa,EAAE,eAAe;oBAC9B,WAAW,EAAE,IAAI;oBACjB,MAAM,EAAE,iBAAiB;iBAC1B;gBACD,YAAY,EAAE,cAAc;aAC7B;YACD;gBACE,QAAQ,EAAE;oBACR,MAAM,EAAE,IAAI;oBACZ,MAAM,EAAE,WAAW;oBACnB,WAAW,EAAE,IAAI;oBACjB,aAAa,EAAE,IAAI;oBACnB,MAAM,EAAE,IAAI;iBACb;gBACD,YAAY,EAAE,SAAS;aACxB;YACD;gBACE,QAAQ,EAAE,EAAC,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,IAAI,EAAC;gBAClD,YAAY,EAAE,SAAS;aACxB;YACD;gBACE,QAAQ,EAAE;oBACR,UAAU,EAAE,IAAI;oBAChB,OAAO,EAAE,GAAG;oBACZ,kBAAkB,EAAE,EAAC,QAAQ,EAAE,EAAE,EAAE,YAAY,EAAE,OAAO,EAAC;oBACzD,oBAAoB,EAAE,IAAI;oBAC1B,kBAAkB,EAAE,IAAI;oBACxB,WAAW,EAAE,IAAI;oBACjB,YAAY,EAAE,MAAM;oBACpB,iBAAiB,EAAE,IAAI;oBACvB,mBAAmB,EAAE,IAAI;oBACzB,MAAM,EAAE,SAAS;oBACjB,oBAAoB,EAAE;wBACpB,QAAQ,EAAE;4BACR,OAAO,EAAE,GAAG;4BACZ,MAAM,EAAE,SAAS;4BACjB,MAAM,EAAE,IAAI;4BACZ,cAAc,EAAE,SAAS;yBAC1B;wBACD,YAAY,EAAE,iBAAiB;qBAChC;oBACD,sBAAsB,EAAE,IAAI;iBAC7B;gBACD,YAAY,EAAE,OAAO;aACtB;YACD;gBACE,QAAQ,EAAE;oBACR,MAAM,EAAE,IAAI;oBACZ,MAAM,EAAE,WAAW;oBACnB,WAAW,EAAE,IAAI;oBACjB,aAAa,EAAE,IAAI;oBACnB,MAAM,EAAE,GAAG;iBACZ;gBACD,YAAY,EAAE,SAAS;aACxB;YACD;gBACE,QAAQ,EAAE;oBACR,UAAU,EAAE,IAAI;oBAChB,OAAO,EAAE,EAAE;oBACX,kBAAkB,EAAE,EAAC,QAAQ,EAAE,EAAE,EAAE,YAAY,EAAE,OAAO,EAAC;oBACzD,oBAAoB,EAAE,IAAI;oBAC1B,kBAAkB,EAAE,IAAI;oBACxB,WAAW,EAAE,IAAI;oBACjB,YAAY,EAAE,SAAS;oBACvB,iBAAiB,EAAE,IAAI;oBACvB,mBAAmB,EAAE,IAAI;oBACzB,MAAM,EAAE,SAAS;oBACjB,oBAAoB,EAAE;wBACpB,QAAQ,EAAE;4BACR,OAAO,EAAE,GAAG;4BACZ,MAAM,EAAE,SAAS;4BACjB,MAAM,EAAE,IAAI;4BACZ,cAAc,EAAE,SAAS;yBAC1B;wBACD,YAAY,EAAE,iBAAiB;qBAChC;oBACD,sBAAsB,EAAE,IAAI;iBAC7B;gBACD,YAAY,EAAE,OAAO;aACtB;SACF;QACD,eAAe,EAAE,OAAO;QACxB,YAAY,EAAE,YAAY;KAC3B;CACF,CAAC;AAEF,MAAM,kBAAkB,GAA0B;IAChD,aAAa,EAAE;QACb,SAAS,EAAE,YAAY;QACvB,YAAY,EAAE,OAAO;QACrB,eAAe,EAAE,OAAO;QACxB,QAAQ,EAAE;YACR,MAAM,EAAE,OAAO;YACf,eAAe,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACrC,QAAQ,EAAE;gBACR;oBACE,YAAY,EAAE,YAAY;oBAC1B,MAAM,EAAE,SAAS;oBACjB,eAAe,EAAE,EAAE;oBACnB,QAAQ,EAAE;wBACR,mBAAmB,EAAE,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;wBACtC,QAAQ,EAAE,KAAK;wBACf,MAAM,EAAE,SAAS;wBACjB,OAAO,EAAE,SAAS;qBACnB;iBACF;gBACD;oBACE,YAAY,EAAE,QAAQ;oBACtB,MAAM,EAAE,WAAW;oBACnB,eAAe,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC1C,QAAQ,EAAE;wBACR,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;wBACzD,SAAS,EAAE,OAAO;wBAClB,UAAU,EAAE,IAAI;wBAChB,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACjB,kBAAkB,EAAE,IAAI;wBACxB,sBAAsB,EAAE,IAAI;wBAC5B,oBAAoB,EAAE;4BACpB,YAAY,EAAE,iBAAiB;4BAC/B,QAAQ,EAAE;gCACR,cAAc,EAAE,SAAS;gCACzB,OAAO,EAAE,GAAG;gCACZ,MAAM,EAAE,SAAS;gCACjB,MAAM,EAAE,IAAI;6BACb;yBACF;wBACD,aAAa,EAAE,eAAe;wBAC9B,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACvB,mBAAmB,EAAE,IAAI;wBACzB,oBAAoB,EAAE,IAAI;wBAC1B,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACrB,YAAY,EAAE,MAAM;wBACpB,MAAM,EAAE,WAAW;wBACnB,SAAS,EAAE,EAAE;wBACb,WAAW,EAAE,IAAI;wBACjB,iBAAiB,EAAE,IAAI;qBACxB;iBACF;gBACD;oBACE,YAAY,EAAE,QAAQ;oBACtB,MAAM,EAAE,WAAW;oBACnB,eAAe,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC5C,QAAQ,EAAE;wBACR,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;wBACzD,SAAS,EAAE,OAAO;wBAClB,UAAU,EAAE,IAAI;wBAChB,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACjB,kBAAkB,EAAE,IAAI;wBACxB,sBAAsB,EAAE,IAAI;wBAC5B,oBAAoB,EAAE;4BACpB,YAAY,EAAE,iBAAiB;4BAC/B,QAAQ,EAAE;gCACR,cAAc,EAAE,SAAS;gCACzB,OAAO,EAAE,GAAG;gCACZ,MAAM,EAAE,SAAS;gCACjB,MAAM,EAAE,IAAI;6BACb;yBACF;wBACD,aAAa,EAAE,eAAe;wBAC9B,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACvB,mBAAmB,EAAE,IAAI;wBACzB,oBAAoB,EAAE,IAAI;wBAC1B,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACrB,YAAY,EAAE,MAAM;wBACpB,MAAM,EAAE,WAAW;wBACnB,SAAS,EAAE,EAAE;wBACb,WAAW,EAAE,IAAI;wBACjB,iBAAiB,EAAE,IAAI;qBACxB;iBACF;gBACD;oBACE,YAAY,EAAE,cAAc;oBAC5B,MAAM,EAAE,iBAAiB;oBACzB,eAAe,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC5C,QAAQ,EAAE;wBACR,SAAS,EAAE,OAAO;wBAClB,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACjB,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;wBACnB,aAAa,EAAE,eAAe;wBAC9B,MAAM,EAAE,iBAAiB;wBACzB,WAAW,EAAE,IAAI;qBAClB;iBACF;gBACD;oBACE,YAAY,EAAE,SAAS;oBACvB,MAAM,EAAE,YAAY;oBACpB,eAAe,EAAE,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAClD,QAAQ,EAAE;wBACR,MAAM,EAAE,IAAI;wBACZ,aAAa,EAAE,IAAI;wBACnB,MAAM,EAAE,YAAY;wBACpB,WAAW,EAAE,IAAI;wBACjB,MAAM,EAAE,IAAI;qBACb;iBACF;gBACD;oBACE,YAAY,EAAE,SAAS;oBACvB,MAAM,EAAE,WAAW;oBACnB,eAAe,EAAE,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC7C,QAAQ,EAAE,EAAC,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,IAAI,EAAC;iBACnD;gBACD;oBACE,YAAY,EAAE,OAAO;oBACrB,MAAM,EAAE,UAAU;oBAClB,eAAe,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC5C,QAAQ,EAAE;wBACR,UAAU,EAAE,IAAI;wBAChB,kBAAkB,EAAE,IAAI;wBACxB,oBAAoB,EAAE;4BACpB,YAAY,EAAE,iBAAiB;4BAC/B,QAAQ,EAAE;gCACR,cAAc,EAAE,SAAS;gCACzB,OAAO,EAAE,GAAG;gCACZ,MAAM,EAAE,SAAS;gCACjB,MAAM,EAAE,IAAI;6BACb;yBACF;wBACD,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;wBACzD,mBAAmB,EAAE,IAAI;wBACzB,iBAAiB,EAAE,IAAI;wBACvB,oBAAoB,EAAE,IAAI;wBAC1B,YAAY,EAAE,MAAM;wBACpB,MAAM,EAAE,UAAU;wBAClB,sBAAsB,EAAE,IAAI;wBAC5B,WAAW,EAAE,IAAI;wBACjB,OAAO,EAAE,GAAG;qBACb;iBACF;gBACD;oBACE,YAAY,EAAE,SAAS;oBACvB,MAAM,EAAE,YAAY;oBACpB,eAAe,EAAE,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC3C,QAAQ,EAAE;wBACR,MAAM,EAAE,GAAG;wBACX,aAAa,EAAE,IAAI;wBACnB,MAAM,EAAE,YAAY;wBACpB,WAAW,EAAE,IAAI;wBACjB,MAAM,EAAE,IAAI;qBACb;iBACF;gBACD;oBACE,YAAY,EAAE,OAAO;oBACrB,MAAM,EAAE,UAAU;oBAClB,eAAe,EAAE,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC7C,QAAQ,EAAE;wBACR,UAAU,EAAE,IAAI;wBAChB,kBAAkB,EAAE,IAAI;wBACxB,oBAAoB,EAAE;4BACpB,YAAY,EAAE,iBAAiB;4BAC/B,QAAQ,EAAE;gCACR,cAAc,EAAE,SAAS;gCACzB,OAAO,EAAE,GAAG;gCACZ,MAAM,EAAE,SAAS;gCACjB,MAAM,EAAE,IAAI;6BACb;yBACF;wBACD,kBAAkB,EAAE,EAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAC;wBACzD,mBAAmB,EAAE,IAAI;wBACzB,iBAAiB,EAAE,IAAI;wBACvB,oBAAoB,EAAE,IAAI;wBAC1B,YAAY,EAAE,SAAS;wBACvB,MAAM,EAAE,UAAU;wBAClB,sBAAsB,EAAE,IAAI;wBAC5B,WAAW,EAAE,IAAI;wBACjB,OAAO,EAAE,EAAE;qBACZ;iBACF;aACF;YACD,cAAc,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SACpC;KACF;CACF,CAAC;AAEF,eAAe,CAAC,qCAAqC,EAAE,GAAG,EAAE;IAC1D,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC;QAC1C,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC;QAE1C,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QACvD,MAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,CAAuB,CAAC;QAC5D,MAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,CAAuB,CAAC;QAE5D,MAAM,MAAM,GACR,GAAG,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,EAAC,CAAC,CAAC;QAEvE,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAe,CAAC;QAC5D,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,EAAC,aAAa,EAAE,UAAU,EAAC,CAAC,CAAC;QAEhE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC3D,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAC/D,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAC/D,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7D,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACjE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACjE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAEvD,MAAM,EAAE,GAAG,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACnC,MAAM,EAAE,GAAG,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACnC,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAa,CAAC;QAE/C,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAa,CAAC;QAE/C,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACnC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;QACjE,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAC7C,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAC1B,EAAC,KAAK,EAAE,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,EAAC,CAAC,CAAC;QACpE,IAAI,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAuB,CAAC;QACtD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;YAC1B,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAuB,CAAC;SACpD;QACD,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAC,CAAC,CAAC;QAE3D,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,EAAE,CAAW,CAAC;QAEzC,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAe,CAAC;QAC5D,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,EAAC,aAAa,EAAE,UAAU,EAAC,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAEvD,MAAM,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,EAAE,CAAW,CAAC;QACzC,kBAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACrD,qDAAqD;QACrD,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK;QACxB,2CAA2C;QAC3C,mxBAAmxB,CAAC,CAAC;QACzxB,MAAM,aAAa,GAAG,SAAS,CAAC,aAAa,CAAC;QAC9C,MAAM,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,EAAC,aAAa,EAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;QACpC,qDAAqD;QACrD,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK;QACxB,2CAA2C;QAC3C,8/QAA8/Q,CAAC,CAAC;QACpgR,MAAM,aAAa,GAAG,SAAS,CAAC,aAAa,CAAC;QAC9C,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,EAAC,aAAa,EAAC,CAAC,CAAC;QAEnD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QACtD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACzC,KAAK,MAAM,MAAM,IAAI,KAAK,CAAC,OAAO,EAAE;YAClC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;SAC1C;QACD,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;aACzC,OAAO,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEtD,MAAM,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QACpC,MAAM,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAChC,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAa,CAAC;QACpD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {DataType, env, io, memory, ones, randomNormal, Scalar, scalar, serialization, sum, Tensor, tensor1d, tensor2d, tensor3d, train, zeros} from '@tensorflow/tfjs-core';\n\nimport {LayersModel} from './engine/training';\nimport * as tfl from './index';\nimport {PyJsonDict} from './keras_format/types';\nimport {Reshape} from './layers/core';\nimport {deserialize} from './layers/serialization';\nimport {loadLayersModelInternal, ModelAndWeightsConfig, modelFromJSON} from './models';\nimport {convertPythonicToTs, convertTsToPythonic} from './utils/serialization_utils';\nimport {describeMathCPU, describeMathCPUAndGPU, expectTensorsClose} from './utils/test_utils';\nimport {version as layersVersion} from './version';\n\nconst OCTET_STREAM_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\n\ndescribeMathCPU('Nested model topology', () => {\n  it('Nested Sequential model: Sequential as first layer', done => {\n    const modelLevel1 = tfl.sequential(\n        {layers: [tfl.layers.dense({units: 2, inputShape: [3]})]});\n    const x = ones([1, 3]);\n    const y = modelLevel1.predict(x) as Tensor;\n\n    const modelLevel2 = tfl.sequential();\n    modelLevel2.add(modelLevel1);\n    expectTensorsClose(modelLevel2.predict(x) as Tensor, y);\n\n    const modelLevel3 = tfl.sequential();\n    modelLevel3.add(modelLevel2);\n    expectTensorsClose(modelLevel3.predict(x) as Tensor, y);\n\n    const xs = ones([8, 3]);\n    const ys = zeros([8, 2]);\n    modelLevel3.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n    modelLevel3.fit(xs, ys)\n        .then(history => {\n          const newY = modelLevel1.predict(x) as Tensor;\n          expectTensorsClose(modelLevel2.predict(x) as Tensor, newY);\n          expectTensorsClose(modelLevel3.predict(x) as Tensor, newY);\n          done();\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  it('Nested Sequential model: Functional model as first layer', done => {\n    const input = tfl.input({shape: [3]});\n    const output =\n        tfl.layers.dense({units: 2}).apply(input) as tfl.SymbolicTensor;\n    const modelLevel1 = tfl.model({inputs: input, outputs: output});\n    const x = ones([1, 3]);\n    const y = modelLevel1.predict(x) as Tensor;\n\n    const modelLevel2 = tfl.sequential();\n    modelLevel2.add(modelLevel1);\n    expectTensorsClose(modelLevel2.predict(x) as Tensor, y);\n\n    const modelLevel3 = tfl.sequential();\n    modelLevel3.add(modelLevel2);\n    expectTensorsClose(modelLevel3.predict(x) as Tensor, y);\n\n    const xs = ones([8, 3]);\n    const ys = zeros([8, 2]);\n    modelLevel3.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n    modelLevel3.fit(xs, ys)\n        .then(history => {\n          const newY = modelLevel1.predict(x) as Tensor;\n          expectTensorsClose(modelLevel2.predict(x) as Tensor, newY);\n          expectTensorsClose(modelLevel3.predict(x) as Tensor, newY);\n          done();\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  it('Nested Sequential model: Sequential as second layer', done => {\n    const innerModel = tfl.sequential(\n        {layers: [tfl.layers.dense({units: 2, inputShape: [4]})]});\n    const x = ones([1, 4]);\n    const y = innerModel.predict(x) as Tensor;\n\n    const x2By2 = ones([1, 2, 2]);\n\n    const outerModel = tfl.sequential(\n        {layers: [tfl.layers.reshape({targetShape: [4], inputShape: [2, 2]})]});\n    outerModel.add(innerModel);\n    expectTensorsClose(outerModel.predict(x2By2) as Tensor, y);\n\n    const xs = ones([8, 2, 2]);\n    const ys = zeros([8, 2]);\n    outerModel.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n    outerModel.fit(xs, ys)\n        .then(history => {\n          const newY = innerModel.predict(x) as Tensor;\n          expectTensorsClose(outerModel.predict(x2By2) as Tensor, newY);\n          done();\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  it('Nested Sequential model: Sequential as middle layer', done => {\n    const innerModel = tfl.sequential(\n        {layers: [tfl.layers.dense({units: 4, inputShape: [4]})]});\n    const x = ones([1, 4]);\n    const y = innerModel.predict(x) as Tensor;\n\n    const x2By2 = ones([1, 2, 2]);\n\n    const outerModel = tfl.sequential({\n      layers: [\n        tfl.layers.reshape({targetShape: [4], inputShape: [2, 2]}), innerModel,\n        tfl.layers.reshape({targetShape: [2, 2]})\n      ]\n    });\n    expectTensorsClose(\n        outerModel.predict(x2By2) as Tensor, y.reshape([1, 2, 2]));\n\n    const xs = ones([8, 2, 2]);\n    const ys = zeros([8, 2, 2]);\n    outerModel.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n    outerModel.fit(xs, ys)\n        .then(history => {\n          const newY = innerModel.predict(x) as Tensor;\n          expectTensorsClose(\n              outerModel.predict(x2By2) as Tensor, newY.reshape([1, 2, 2]));\n          done();\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  it('getLayer() works for nested sequential model', () => {\n    const innerModel = tfl.sequential({\n      layers: [\n        tfl.layers.dense({\n          units: 4,\n          inputShape: [4],\n          activation: 'relu',\n          kernelInitializer: 'ones',\n          biasInitializer: 'ones'\n        }),\n        tfl.layers.dense({\n          units: 2,\n          activation: 'tanh',\n          kernelInitializer: 'ones',\n          biasInitializer: 'ones'\n        })\n      ]\n    });\n    const outerModel = tfl.sequential({\n      layers: [\n        innerModel,\n        tfl.layers.dense(\n            {units: 1, kernelInitializer: 'ones', biasInitializer: 'ones'})\n      ]\n    });\n    expect(outerModel.getLayer(null, 0) instanceof tfl.Sequential)\n        .toEqual(true);\n    // Expect all-one values based on the kernel and bias initializers specified\n    // above.\n    expectTensorsClose(\n        outerModel.getLayer(null, 1).getWeights()[0], ones([2, 1]));\n    expectTensorsClose(outerModel.getLayer(null, 1).getWeights()[1], ones([1]));\n    // Expect there to be only two layers.\n    expect(() => outerModel.getLayer(null, 2)).toThrow();\n  });\n\n  it('getWeights() works for nested sequential model', () => {\n    const innerModel = tfl.sequential({\n      layers: [\n        tfl.layers.dense({\n          units: 4,\n          inputShape: [4],\n          activation: 'relu',\n          kernelInitializer: 'ones',\n          biasInitializer: 'ones'\n        }),\n        tfl.layers.dense({\n          units: 2,\n          activation: 'tanh',\n          kernelInitializer: 'ones',\n          biasInitializer: 'ones'\n        })\n      ]\n    });\n    const outerModel =\n        tfl.sequential({layers: [innerModel, tfl.layers.dense({units: 1})]});\n    const weights = outerModel.getWeights();\n    expect(weights.length).toEqual(6);\n    expect(weights[0].shape).toEqual([4, 4]);\n    expect(weights[1].shape).toEqual([4]);\n    expect(weights[2].shape).toEqual([4, 2]);\n    expect(weights[3].shape).toEqual([2]);\n    expect(weights[4].shape).toEqual([2, 1]);\n    expect(weights[5].shape).toEqual([1]);\n  });\n\n  it('setWeights() works for nested sequential model', () => {\n    const innerModel = tfl.sequential({\n      layers: [\n        tfl.layers.dense({\n          units: 2,\n          inputShape: [3],\n          activation: 'relu',\n          kernelInitializer: 'zeros',\n          useBias: false\n        }),\n      ]\n    });\n    const outerModel = tfl.sequential({\n      layers: [\n        innerModel,\n        tfl.layers.dense({units: 1, kernelInitializer: 'zeros', useBias: false})\n      ]\n    });\n\n    // The kernel start off as zeros. Set them all to ones.\n    outerModel.setWeights([ones([3, 2]), ones([2, 1])]);\n    expectTensorsClose(outerModel.getWeights()[0], ones([3, 2]));\n    expectTensorsClose(outerModel.getWeights()[1], ones([2, 1]));\n    expectTensorsClose(\n        outerModel.predict(ones([1, 3])) as Tensor, tensor2d([[6]]));\n  });\n\n  it('Sequential as layer: save-load round trip', () => {\n    const innerModel = tfl.sequential({\n      layers: [\n        tfl.layers.dense({\n          units: 4,\n          inputShape: [4],\n          activation: 'relu',\n          kernelInitializer: 'ones',\n          biasInitializer: 'ones'\n        }),\n        tfl.layers.dense({\n          units: 4,\n          activation: 'tanh',\n          kernelInitializer: 'ones',\n          biasInitializer: 'ones'\n        })\n      ]\n    });\n    const outerModel = tfl.sequential({\n      layers: [\n        tfl.layers.reshape({targetShape: [4], inputShape: [2, 2]}), innerModel,\n        tfl.layers.dense(\n            {units: 1, kernelInitializer: 'ones', biasInitializer: 'ones'})\n      ]\n    });\n    const x = randomNormal([1, 2, 2]);\n    const y = outerModel.predict(x) as Tensor;\n\n    const unusedArg: {} = null;\n    const returnString = false;\n    const outerModelJSON = outerModel.toJSON(unusedArg, returnString);\n    const reconstructedModel =\n        deserialize(convertPythonicToTs(outerModelJSON) as PyJsonDict) as\n        tfl.Sequential;\n    expect(reconstructedModel.toJSON(unusedArg, returnString))\n        .toEqual(outerModelJSON);\n    expectTensorsClose(reconstructedModel.predict(x) as Tensor, y);\n  });\n\n  it('Functional model as layer: save-load round trip', () => {\n    const input = tfl.input({shape: [4]});\n    const layer1 = tfl.layers.dense({\n      units: 4,\n      activation: 'relu',\n      kernelInitializer: 'ones',\n      biasInitializer: 'ones'\n    });\n    const layer2 = tfl.layers.dense({\n      units: 4,\n      activation: 'tanh',\n      kernelInitializer: 'ones',\n      biasInitializer: 'ones'\n    });\n    const output = layer2.apply(layer1.apply(input)) as tfl.SymbolicTensor;\n    const innerModel = tfl.model({inputs: input, outputs: output});\n    const outerModel = tfl.sequential({\n      layers: [\n        tfl.layers.reshape({targetShape: [4], inputShape: [2, 2]}), innerModel,\n        tfl.layers.reshape({targetShape: [2, 2]})\n      ]\n    });\n    const x = randomNormal([1, 2, 2]);\n    const y = outerModel.predict(x) as Tensor;\n\n    const unusedArg: {} = null;\n    const returnString = false;\n    const outerModelJSON = outerModel.toJSON(unusedArg, returnString);\n    const reconstructedModel =\n        deserialize(convertPythonicToTs(outerModelJSON) as PyJsonDict) as\n        tfl.Sequential;\n    expect(reconstructedModel.toJSON(unusedArg, returnString))\n        .toEqual(outerModelJSON);\n    expectTensorsClose(reconstructedModel.predict(x) as Tensor, y);\n  });\n\n  it('Attempt to nest two-input functional model fails', () => {\n    const input1 = tfl.input({shape: [4]});\n    const input2 = tfl.input({shape: [5]});\n    const output =\n        tfl.layers.concatenate().apply([input1, input2]) as tfl.SymbolicTensor;\n    const innerModel = tfl.model({inputs: [input1, input2], outputs: output});\n\n    const outerModel = tfl.sequential();\n\n    // Adding the two-input model as the first layer of the new model should\n    // fail.\n    expect(() => outerModel.add(innerModel))\n        .toThrowError(/should have a single input tensor/);\n\n    // Adding the two-input model as the second layer of the new model should\n    // fail.\n    const outerModel2 = tfl.sequential(\n        {layers: [tfl.layers.dense({units: 4, inputShape: [8]})]});\n    expect(() => outerModel2.add(innerModel))\n        .toThrowError(/should have a single input tensor/);\n\n    // Creating a sequential model consisting of only the two-input model as\n    // a layer should fail.\n    expect(() => tfl.sequential({\n      layers: [innerModel]\n    })).toThrowError(/should have a single input tensor/);\n  });\n\n  it('Attempt to nest two-output functional model fails', () => {\n    const input = tfl.input({shape: [12]});\n    const output1 = tfl.layers.reshape({targetShape: [2, 6]}).apply(input) as\n        tfl.SymbolicTensor;\n    const output2 = tfl.layers.reshape({targetShape: [3, 4]}).apply(input) as\n        tfl.SymbolicTensor;\n    const innerModel = tfl.model({inputs: input, outputs: [output1, output2]});\n\n    // Adding the two-output model as the first layer of the new model should\n    // fail.\n    const outerModel = tfl.sequential();\n    expect(() => outerModel.add(innerModel))\n        .toThrowError(/should have a single output tensor/);\n\n    // Adding the two-output model as the second layer of the new model should\n    // fail.\n    const outerModel2 = tfl.sequential(\n        {layers: [tfl.layers.dense({units: 4, inputShape: [8]})]});\n    expect(() => outerModel2.add(innerModel))\n        .toThrowError(/should have a single output tensor/);\n\n    // Creating a sequential model consisting of only the two-output model as\n    // a layer should fail.\n    expect(() => tfl.sequential({\n      layers: [innerModel]\n    })).toThrowError(/should have a single output tensor/);\n  });\n});\n\ndescribeMathCPU('modelFromJSON', () => {\n  it('reconstitutes pythonic json string', done => {\n    /* python generating code\n        a=Input(shape=(32,))\n        b=Dense(32)(a)\n        model = Model(inputs=a, outputs=b, name=\"test\")\n        model.to_json())\n    */\n    modelFromJSON(fakeSequentialModel)\n        .then(model => {\n          expect(model.name).toEqual('test');\n          const allZeros = zeros([1, 32]);\n          expectTensorsClose(model.apply(allZeros) as Tensor, allZeros);\n          done();\n        })\n        .catch(done.fail);\n  });\n\n  it('modelFromJSON with only model topology (no weights)', async () => {\n    const model = await modelFromJSON(fakeSequentialModel.modelTopology);\n    expect(model.name).toEqual('test');\n    expect(model.layers.length).toEqual(2);\n    expect(model.inputs.length).toEqual(1);\n    expect(model.inputs[0].shape).toEqual([null, 32]);\n    expect(model.outputs.length).toEqual(1);\n    expect(model.outputs[0].shape).toEqual([null, 32]);\n  });\n\n  it('toJSON and modelFromJSON', async () => {\n    const model1 = tfl.sequential();\n    model1.add(tfl.layers.repeatVector({inputShape: [2], n: 4}));\n    const model1JSON = model1.toJSON(null, false) as PyJsonDict;\n    const model2 = await tfl.models.modelFromJSON(model1JSON);\n    expect(model2.toJSON(null, false)).toEqual(model1JSON);\n  });\n\n  // TODO(bileschi): Uncomment once we are able to load the full RNN model.\n  /*\n  it('reconstitutes rnn model', done => {\n    modelFromJSON(fakeRNNModel)\n        .then(model => {\n          console.log(model);\n          done();\n        })\n        .catch(done.fail);\n  });*/\n\n  it('reconstitutes mnist non-sequential mode.', async () => {\n    /*\n    input_shape = (28,28,1)\n    num_classes=10\n\n    input_layer= Input(shape=input_shape)\n    layer1 = Conv2D(32, kernel_size=(3, 3),\n                     activation='relu',\n                     input_shape=input_shape)\n    layer1_result = layer1(input_layer)\n    layer2= Conv2D(64, (3,3), activation='relu')\n    layer2_result = layer2(layer1_result)\n    layer3 = MaxPooling2D(pool_size=(2, 2))\n    layer3_result = layer3(layer2_result)\n    layer4 = Dropout(0.25)\n    layer4_result = layer4(layer3_result)\n    layer5 = Flatten()\n    layer5_result = layer5(layer4_result)\n    layer6 = Dense(128, activation='relu')\n    layer6_result = layer6(layer5_result)\n    layer7=Dropout(0.5)\n    layer7_result = layer7(layer6_result)\n    layer8=Dense(num_classes, activation='softmax')\n    layer8_result = layer8(layer7_result)\n    model = Model(inputs=input_layer, outputs=layer8_result, name='mnist')\n    model.to_json()\n      */\n    const model = await modelFromJSON(fakeNonSequentialModel);\n    expect(model.name).toEqual('mnist');\n    expect(model.layers.length).toEqual(9);\n    const prediction = model.predict(zeros([1, 28, 28, 1])) as Tensor;\n    expect(prediction.shape).toEqual([1, 10]);\n    expect(sum(prediction).dataSync()).toBeCloseTo(1);\n  });\n  it('reconstitutes mnist sequential mode.', async () => {\n    /*\n    input_shape = (28,28,1)\n    num_classes = 10\n\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3),\n                     activation='relu',\n                     input_shape=input_shape))\n    model.add(Conv2D(64, (3,3), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n    model.add(Flatten())\n    model.add(Dense(128, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(num_classes, activation='softmax'))\n\n    model.to_json())\n    */\n    const model = await modelFromJSON(fakeMnistModel);\n    expect(model.layers.length).toEqual(8);\n    const prediction = model.predict(zeros([1, 28, 28, 1])) as Tensor;\n    expect(prediction.shape).toEqual([1, 10]);\n    expect(sum(prediction).dataSync()).toBeCloseTo(1);\n  });\n\n  it('Serialization round-tripping', async () => {\n    const model = await modelFromJSON(fakeRoundtripModel);\n    const serializedModel = model.toJSON() as string;\n    // toJSON() returns a string by default.\n    expect(typeof serializedModel).toEqual('string');\n    const reparsedJson = JSON.parse(serializedModel);\n    expect(reparsedJson['class_name'])\n        .toEqual(fakeRoundtripModel.modelTopology['class_name']);\n    // Intentionally skipping backend and keras_version fields.\n    expect(reparsedJson['config'])\n        .toEqual(fakeRoundtripModel.modelTopology['config']);\n  });\n\n  it('toJSON with returnString = false', async () => {\n    const model = await modelFromJSON(fakeRoundtripModel);\n    const serializedModel = model.toJSON(null, false) as PyJsonDict;\n    expect(serializedModel['class_name'])\n        .toEqual(fakeRoundtripModel.modelTopology['class_name']);\n    expect(serializedModel['config'])\n        .toEqual(fakeRoundtripModel.modelTopology['config']);\n  });\n\n  it('toJSON return value includes correct versions', async () => {\n    const model = await modelFromJSON(fakeRoundtripModel);\n    const serializedModel = model.toJSON(null, false) as PyJsonDict;\n    expect(serializedModel['keras_version'])\n        .toEqual(`tfjs-layers ${layersVersion}`);\n  });\n\n  it('Load sequential model with non-array config', async () => {\n    const modelTopology: {} = {\n      'class_name': 'Sequential',\n      'keras_version': '2.1.6-tf',\n      'config': {\n        'name': 'BarSequential123',\n        'layers': [{\n          'class_name': 'Dense',\n          'config': {\n            'kernel_initializer': {\n              'class_name': 'VarianceScaling',\n              'config': {\n                'distribution': 'uniform',\n                'scale': 1.0,\n                'seed': null,\n                'mode': 'fan_avg'\n              }\n            },\n            'name': 'dense_1',\n            'kernel_constraint': null,\n            'bias_regularizer': null,\n            'bias_constraint': null,\n            'dtype': 'float32',\n            'activation': 'sigmoid',\n            'trainable': true,\n            'kernel_regularizer': null,\n            'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n            'units': 1,\n            'batch_input_shape': [null, 4],\n            'use_bias': true,\n            'activity_regularizer': null\n          }\n        }]\n      },\n      'backend': 'tensorflow'\n    };\n    const model = deserialize(\n                      convertPythonicToTs(modelTopology) as\n                      serialization.ConfigDict) as LayersModel;\n\n    expect(model.name.indexOf('BarSequential123')).toEqual(0);\n    expect(model.inputs.length).toEqual(1);\n    expect(model.inputs[0].shape).toEqual([null, 4]);\n    expect(model.outputs.length).toEqual(1);\n    expect(model.outputs[0].shape).toEqual([null, 1]);\n  });\n});\n\ndescribeMathCPU('loadLayersModel from URL', () => {\n  const setupFakeWeightFiles =\n      (fileBufferMap:\n           {[filename: string]: Float32Array|Int32Array|ArrayBuffer}) => {\n        spyOn(env().platform, 'fetch')\n            .and.callFake((path: string) => new Promise(resolve => {\n                            resolve(new Response(fileBufferMap[path], {\n                              'headers': {'Content-Type': OCTET_STREAM_TYPE}\n                            }));\n                          }));\n      };\n\n  const isModelConfigNestedValues = [false, true];\n  const pathPrefixes = ['.', './', './model-home', './model-home/'];\n  for (const isModelConfigNested of isModelConfigNestedValues) {\n    for (const pathPrefix of pathPrefixes) {\n      it(`pathPrefix=${pathPrefix}`, done => {\n        const path0 = pathPrefix.endsWith('/') ? `${pathPrefix}weight_0` :\n                                                 `${pathPrefix}/weight_0`;\n        const path1 = pathPrefix.endsWith('/') ? `${pathPrefix}weight_1` :\n                                                 `${pathPrefix}/weight_1`;\n        const fileBufferMap:\n            {[filename: string]: Float32Array|Int32Array|ArrayBuffer} = {};\n        fileBufferMap[path0] =\n            ones([32, 32], 'float32').dataSync() as Float32Array;\n        fileBufferMap[path1] = ones([32], 'float32').dataSync() as Float32Array;\n        setupFakeWeightFiles(fileBufferMap);\n        // Use a randomly generated layer name to prevent interaction with\n        // other unit tests that load the same sample JSON.\n        const denseLayerName = `dense_${Math.floor(Math.random() * 1e9)}`;\n        const weightsManifest: io.WeightsManifestConfig = [\n          {\n            'paths': ['weight_0'],\n            'weights': [{\n              'name': `${denseLayerName}/kernel`,\n              'dtype': 'float32',\n              'shape': [32, 32]\n            }],\n          },\n          {\n            'paths': ['weight_1'],\n            'weights': [{\n              'name': `${denseLayerName}/bias`,\n              'dtype': 'float32',\n              'shape': [32]\n            }],\n          }\n        ];\n        // JSON.parse and stringify to deep copy fakeSequentialModel.\n        let modelTopology =\n            JSON.parse(JSON.stringify(fakeSequentialModel)).modelTopology;\n        modelTopology['config']['layers'][1]['config']['name'] = denseLayerName;\n        if (isModelConfigNested) {\n          // Simulate case in which `configJson` contains not only\n          // `model_config`, but also other data, such as training.\n          modelTopology = {'model_config': modelTopology};\n        }\n        modelFromJSON({modelTopology, weightsManifest, pathPrefix})\n            .then(model => {\n              expectTensorsClose(\n                  model.weights[0].read(), ones([32, 32], 'float32'));\n              expectTensorsClose(\n                  model.weights[1].read(), ones([32], 'float32'));\n            })\n            .then(done)\n            .catch(done.fail);\n      });\n    }\n  }\n\n  it('load topology and weights from implicit relative http path', async () => {\n    const modelTopology =\n        JSON.parse(JSON.stringify(fakeSequentialModel)).modelTopology;\n    const weightsManifest: io.WeightsManifestConfig = [\n      {\n        'paths': ['weight_0'],\n        'weights':\n            [{'name': `dense_6/kernel`, 'dtype': 'float32', 'shape': [32, 32]}],\n      },\n      {\n        'paths': ['weight_1'],\n        'weights':\n            [{'name': `dense_6/bias`, 'dtype': 'float32', 'shape': [32]}],\n      }\n    ];\n\n    spyOn(env().platform, 'fetch').and.callFake((path: string) => {\n      return new Promise((resolve, reject) => {\n        if (path === 'model/model.json') {\n          resolve(new Response(\n              JSON.stringify({\n                modelTopology,\n                weightsManifest,\n              }),\n              {'headers': {'Content-Type': JSON_TYPE}}));\n        } else if (path === 'model/weight_0') {\n          resolve(new Response(\n              ones([32, 32], 'float32').dataSync() as Float32Array,\n              {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n        } else if (path === 'model/weight_1') {\n          resolve(new Response(\n              zeros([32], 'float32').dataSync() as Float32Array,\n              {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n        } else {\n          reject(new Error(`Invalid path: ${path}`));\n        }\n      });\n    });\n\n    const model = await loadLayersModelInternal('model/model.json');\n    expect(model.layers.length).toEqual(2);\n    expect(model.inputs.length).toEqual(1);\n    expect(model.inputs[0].shape).toEqual([null, 32]);\n    expect(model.outputs.length).toEqual(1);\n    expect(model.outputs[0].shape).toEqual([null, 32]);\n    const weightValues = model.getWeights();\n    expect(weightValues.length).toEqual(2);\n    expectTensorsClose(weightValues[0], ones([32, 32]));\n    expectTensorsClose(weightValues[1], zeros([32]));\n  });\n\n  it('loadLayersModel: with onProgress callback from relative path',\n     async () => {\n       const modelTopology =\n           JSON.parse(JSON.stringify(fakeSequentialModel)).modelTopology;\n       const weightsManifest: io.WeightsManifestConfig = [\n         {\n           'paths': ['weight_0'],\n           'weights': [\n             {'name': `dense_6/kernel`, 'dtype': 'float32', 'shape': [32, 32]}\n           ],\n         },\n         {\n           'paths': ['weight_1'],\n           'weights':\n               [{'name': `dense_6/bias`, 'dtype': 'float32', 'shape': [32]}],\n         }\n       ];\n\n       spyOn(env().platform, 'fetch').and.callFake((path: string) => {\n         return new Promise((resolve, reject) => {\n           if (path === 'model/model.json') {\n             resolve(new Response(\n                 JSON.stringify({\n                   modelTopology,\n                   weightsManifest,\n                 }),\n                 {'headers': {'Content-Type': JSON_TYPE}}));\n           } else if (path === 'model/weight_0') {\n             resolve(new Response(\n                 ones([32, 32], 'float32').dataSync() as Float32Array,\n                 {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n           } else if (path === 'model/weight_1') {\n             resolve(new Response(\n                 zeros([32], 'float32').dataSync() as Float32Array,\n                 {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n           } else {\n             reject(new Error(`Invalid path: ${path}`));\n           }\n         });\n       });\n\n       const progressFractions: number[] = [];\n       const model = await tfl.loadLayersModel('model/model.json', {\n         onProgress: (fraction: number) => {\n           progressFractions.push(fraction);\n         }\n       });\n       expect(model.layers.length).toEqual(2);\n       expect(model.inputs.length).toEqual(1);\n       expect(model.inputs[0].shape).toEqual([null, 32]);\n       expect(model.outputs.length).toEqual(1);\n       expect(model.outputs[0].shape).toEqual([null, 32]);\n       const weightValues = model.getWeights();\n       expect(weightValues.length).toEqual(2);\n       expectTensorsClose(weightValues[0], ones([32, 32]));\n       expectTensorsClose(weightValues[1], zeros([32]));\n       // There are three files: a JSON file and two weight files. So the\n       // progress callback should have been called four times (twice the weight\n       // files' number).\n       expect(progressFractions).toEqual([0.25, 0.5, 0.75, 1]);\n     });\n\n  it('loadLayersModel: with onProgress callback from URL', async () => {\n    const modelTopology =\n        JSON.parse(JSON.stringify(fakeSequentialModel)).modelTopology;\n    const weightsManifest: io.WeightsManifestConfig = [\n      {\n        'paths': ['weight_0'],\n        'weights':\n            [{'name': `dense_6/kernel`, 'dtype': 'float32', 'shape': [32, 32]}],\n      },\n      {\n        'paths': ['weight_1'],\n        'weights':\n            [{'name': `dense_6/bias`, 'dtype': 'float32', 'shape': [32]}],\n      }\n    ];\n\n    spyOn(env().platform, 'fetch').and.callFake((path: string) => {\n      return new Promise((resolve, reject) => {\n        if (path === 'https://url/to/model/model.json') {\n          resolve(new Response(\n              JSON.stringify({\n                modelTopology,\n                weightsManifest,\n              }),\n              {'headers': {'Content-Type': JSON_TYPE}}));\n        } else if (path === 'https://url/to/model/weight_0') {\n          resolve(new Response(\n              ones([32, 32], 'float32').dataSync() as Float32Array,\n              {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n        } else if (path === 'https://url/to/model/weight_1') {\n          resolve(new Response(\n              zeros([32], 'float32').dataSync() as Float32Array,\n              {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n        } else {\n          reject(new Error(`Invalid path: ${path}`));\n        }\n      });\n    });\n\n    const progressFractions: number[] = [];\n    const model = await tfl.loadLayersModel('https://url/to/model/model.json', {\n      onProgress: (fraction: number) => {\n        progressFractions.push(fraction);\n      }\n    });\n    expect(model.layers.length).toEqual(2);\n    expect(model.inputs.length).toEqual(1);\n    expect(model.inputs[0].shape).toEqual([null, 32]);\n    expect(model.outputs.length).toEqual(1);\n    expect(model.outputs[0].shape).toEqual([null, 32]);\n    const weightValues = model.getWeights();\n    expect(weightValues.length).toEqual(2);\n    expectTensorsClose(weightValues[0], ones([32, 32]));\n    expectTensorsClose(weightValues[1], zeros([32]));\n    // There are three files: a JSON file and two weight files. So the progress\n    // callback should have been called four times (twice the weight files'\n    // number).\n    expect(progressFractions).toEqual([0.25, 0.5, 0.75, 1]);\n  });\n\n  it('loadLayersModel: no memory leak during model loading', async () => {\n    const modelTopology =\n        JSON.parse(JSON.stringify(fakeSequentialModel)).modelTopology;\n    const weightsManifest: io.WeightsManifestConfig = [\n      {\n        'paths': ['weight_0'],\n        'weights':\n            [{'name': `dense_6/kernel`, 'dtype': 'float32', 'shape': [32, 32]}],\n      },\n      {\n        'paths': ['weight_1'],\n        'weights':\n            [{'name': `dense_6/bias`, 'dtype': 'float32', 'shape': [32]}],\n      }\n    ];\n\n    const kernelData = ones([32, 32], 'float32').dataSync() as Float32Array;\n    const biasData = zeros([32], 'float32').dataSync() as Float32Array;\n    spyOn(env().platform, 'fetch').and.callFake((path: string) => {\n      return new Promise((resolve, reject) => {\n        if (path === 'model/model.json') {\n          resolve(new Response(\n              JSON.stringify({\n                modelTopology,\n                weightsManifest,\n              }),\n              {'headers': {'Content-Type': JSON_TYPE}}));\n        } else if (path === 'model/weight_0') {\n          resolve(new Response(\n              kernelData, {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n        } else if (path === 'model/weight_1') {\n          resolve(new Response(\n              biasData, {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n        } else {\n          reject(new Error(`Invalid path: ${path}`));\n        }\n      });\n    });\n\n    const numTensors0 = memory().numTensors;\n    const model1 = await tfl.loadLayersModel('model/model.json');\n    const numTensors1 = memory().numTensors;\n    // The increase in the number of tensors should be equal to the\n    // number of weights possessed by the model. No extra tensors\n    // should have been created.\n    expect(numTensors1).toEqual(numTensors0 + 2);\n\n    model1.dispose();\n    const numTensors2 = memory().numTensors;\n    // The dispose() call should have brought us to the initial number\n    // of tensors (i.e., before the model was created).\n    expect(numTensors2).toEqual(numTensors0);\n  });\n\n  it('loadLayersModel: no memory leak with nested LayersModel layer',\n     async () => {\n       const modelTopology =\n           JSON.parse(JSON.stringify(fakeSequentialModelWithNestedContainer))\n               .modelTopology;\n\n       const weightsManifest: io.WeightsManifestConfig = [{\n         'paths': ['weight_0'],\n         'weights': [\n           {'name': `dense_1/kernel`, 'dtype': 'float32', 'shape': [4, 2]},\n           {'name': `dense_1/bias`, 'dtype': 'float32', 'shape': [2]},\n           {'name': `dense_2/kernel`, 'dtype': 'float32', 'shape': [2, 1]},\n           {'name': `dense_2/bias`, 'dtype': 'float32', 'shape': [1]}\n         ],\n       }];\n\n       spyOn(env().platform, 'fetch').and.callFake((path: string) => {\n         return new Promise((resolve, reject) => {\n           if (path === 'model/model.json') {\n             resolve(new Response(\n                 JSON.stringify({\n                   modelTopology,\n                   weightsManifest,\n                 }),\n                 {'headers': {'Content-Type': JSON_TYPE}}));\n           } else if (path === 'model/weight_0') {\n             resolve(new Response(\n                 new Float32Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n                 {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n           } else {\n             reject(new Error(`Invalid path: ${path}`));\n           }\n         });\n       });\n\n       const numTensors0 = memory().numTensors;\n       const model = await tfl.loadLayersModel('model/model.json');\n       const mem = await memory();\n       const numTensors1 = mem.numTensors;\n       expect(numTensors1).toEqual(numTensors0 + 4);\n\n       const disposeResult = model.dispose();\n       expect(disposeResult.numDisposedVariables).toEqual(4);\n       const numTensors2 = memory().numTensors;\n       expect(numTensors2).toEqual(numTensors0);\n     });\n\n  it('load topology and weights from implicit relative http path: HDF5 format',\n     async () => {\n       const modelTopology =\n           JSON.parse(JSON.stringify(fakeSequentialModelFromHDF5))\n               .modelTopology;\n       const weightsManifest: io.WeightsManifestConfig = [\n         {\n           'paths': ['weight_0'],\n           'weights': [\n             {'name': `dense_1/kernel`, 'dtype': 'float32', 'shape': [10, 2]}\n           ],\n         },\n         {\n           'paths': ['weight_1'],\n           'weights':\n               [{'name': `dense_1/bias`, 'dtype': 'float32', 'shape': [2]}],\n         },\n         {\n           'paths': ['weight_2'],\n           'weights': [\n             {'name': `dense_2/kernel`, 'dtype': 'float32', 'shape': [2, 1]}\n           ],\n         },\n         {\n           'paths': ['weight_3'],\n           'weights':\n               [{'name': `dense_2/bias`, 'dtype': 'float32', 'shape': [1]}],\n         }\n       ];\n       spyOn(env().platform, 'fetch').and.callFake((path: string) => {\n         return new Promise((resolve, reject) => {\n           if (path === 'model/model.json') {\n             resolve(new Response(\n                 JSON.stringify({\n                   modelTopology,\n                   weightsManifest,\n                 }),\n                 {'headers': {'Content-Type': JSON_TYPE}}));\n           } else if (path === 'model/weight_0') {\n             resolve(new Response(\n                 ones([10, 2], 'float32').dataSync() as Float32Array,\n                 {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n           } else if (path === 'model/weight_1') {\n             resolve(new Response(\n                 zeros([2], 'float32').dataSync() as Float32Array,\n                 {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n           } else if (path === 'model/weight_2') {\n             resolve(new Response(\n                 zeros([2, 1], 'float32').dataSync() as Float32Array,\n                 {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n           } else if (path === 'model/weight_3') {\n             resolve(new Response(\n                 ones([1], 'float32').dataSync() as Float32Array,\n                 {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n           } else {\n             reject(new Error(`Invalid path: ${path}`));\n           }\n         });\n       });\n\n       const model = await loadLayersModelInternal('model/model.json');\n       expect(model.layers.length).toEqual(2);\n       expect(model.inputs.length).toEqual(1);\n       expect(model.inputs[0].shape).toEqual([null, 10]);\n       expect(model.outputs.length).toEqual(1);\n       expect(model.outputs[0].shape).toEqual([null, 1]);\n       const weightValues = model.getWeights();\n       expect(weightValues.length).toEqual(4);\n       expectTensorsClose(weightValues[0], ones([10, 2]));\n       expectTensorsClose(weightValues[1], zeros([2]));\n       expectTensorsClose(weightValues[2], zeros([2, 1]));\n       expectTensorsClose(weightValues[3], ones([1]));\n     });\n\n  it('load topology and weights: non-array Sequential config', async () => {\n    const modelTopology =\n        JSON.parse(JSON.stringify(fakeNonArrayConfigSequentialModelFromHDF5))\n            .modelTopology;\n    const weightsManifest: io.WeightsManifestConfig = [\n      {\n        'paths': ['weight_0'],\n        'weights':\n            [{'name': `dense_1/kernel`, 'dtype': 'float32', 'shape': [10, 2]}],\n      },\n      {\n        'paths': ['weight_1'],\n        'weights': [{'name': `dense_1/bias`, 'dtype': 'float32', 'shape': [2]}],\n      },\n      {\n        'paths': ['weight_2'],\n        'weights':\n            [{'name': `dense_2/kernel`, 'dtype': 'float32', 'shape': [2, 1]}],\n      },\n      {\n        'paths': ['weight_3'],\n        'weights': [{'name': `dense_2/bias`, 'dtype': 'float32', 'shape': [1]}],\n      }\n    ];\n    spyOn(env().platform, 'fetch').and.callFake((path: string) => {\n      return new Promise((resolve, reject) => {\n        if (path === 'model/model.json') {\n          resolve(new Response(\n              JSON.stringify({\n                modelTopology,\n                weightsManifest,\n              }),\n              {'headers': {'Content-Type': JSON_TYPE}}));\n        } else if (path === 'model/weight_0') {\n          resolve(new Response(\n              ones([10, 2], 'float32').dataSync() as Float32Array,\n              {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n        } else if (path === 'model/weight_1') {\n          resolve(new Response(\n              zeros([2], 'float32').dataSync() as Float32Array,\n              {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n        } else if (path === 'model/weight_2') {\n          resolve(new Response(\n              zeros([2, 1], 'float32').dataSync() as Float32Array,\n              {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n        } else if (path === 'model/weight_3') {\n          resolve(new Response(\n              ones([1], 'float32').dataSync() as Float32Array,\n              {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n        } else {\n          reject(new Error(`Invalid path: ${path}`));\n        }\n      });\n    });\n\n    const model = await loadLayersModelInternal('model/model.json');\n    expect(model.name.indexOf('Foo123Sequential')).toEqual(0);\n    expect(model.layers.length).toEqual(2);\n    expect(model.inputs.length).toEqual(1);\n    expect(model.inputs[0].shape).toEqual([null, 10]);\n    expect(model.outputs.length).toEqual(1);\n    expect(model.outputs[0].shape).toEqual([null, 1]);\n    const weightValues = model.getWeights();\n    expect(weightValues.length).toEqual(4);\n    expectTensorsClose(weightValues[0], ones([10, 2]));\n    expectTensorsClose(weightValues[1], zeros([2]));\n    expectTensorsClose(weightValues[2], zeros([2, 1]));\n    expectTensorsClose(weightValues[3], ones([1]));\n  });\n\n  it('load topology and weights with browserHTTPRequest with requestInit',\n     async () => {\n       const modelTopology =\n           JSON.parse(JSON.stringify(fakeSequentialModel)).modelTopology;\n       const weightsManifest: io.WeightsManifestConfig = [\n         {\n           'paths': ['weight_0'],\n           'weights': [\n             {'name': `dense_6/kernel`, 'dtype': 'float32', 'shape': [32, 32]}\n           ],\n         },\n         {\n           'paths': ['weight_1'],\n           'weights':\n               [{'name': `dense_6/bias`, 'dtype': 'float32', 'shape': [32]}],\n         }\n       ];\n\n       const requestHeaders: Array<{[key: string]: string | {}}> = [];\n       const requestCredentials: string[] = [];\n       spyOn(env().platform, 'fetch')\n           .and.callFake((path: string, requestInit?: RequestInit) => {\n             if (requestInit != null) {\n               requestHeaders.push(requestInit.headers as {});\n               requestCredentials.push(requestInit.credentials);\n             }\n             return new Promise((resolve, reject) => {\n               if (path === 'model/model.json') {\n                 resolve(new Response(\n                     JSON.stringify({\n                       modelTopology,\n                       weightsManifest,\n                     }),\n                     {'headers': {'Content-Type': JSON_TYPE}}));\n               } else if (path === 'model/weight_0') {\n                 resolve(new Response(\n                     ones([32, 32], 'float32').dataSync() as Float32Array,\n                     {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n               } else if (path === 'model/weight_1') {\n                 resolve(new Response(\n                     zeros([32], 'float32').dataSync() as Float32Array,\n                     {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n               } else {\n                 reject(new Error(`Invalid path: ${path}`));\n               }\n             });\n           });\n\n       const model = await loadLayersModelInternal(\n           io.browserHTTPRequest('model/model.json', {\n             requestInit: {\n               headers: {'header_key_1': 'header_value_1'},\n               credentials: 'include',\n             }\n           }));\n       expect(model.layers.length).toEqual(2);\n       expect(model.inputs.length).toEqual(1);\n       expect(model.inputs[0].shape).toEqual([null, 32]);\n       expect(model.outputs.length).toEqual(1);\n       expect(model.outputs[0].shape).toEqual([null, 32]);\n       const weightValues = model.getWeights();\n       expect(weightValues.length).toEqual(2);\n       expectTensorsClose(weightValues[0], ones([32, 32]));\n       expectTensorsClose(weightValues[1], zeros([32]));\n\n       // Verify that the headers and credentials are sent via\n       // `fetch` properly.\n       expect(requestHeaders[0]).toEqual(jasmine.objectContaining({\n         'header_key_1': 'header_value_1'\n       }));\n       expect(requestHeaders[1]).toEqual(jasmine.objectContaining({\n         'header_key_1': 'header_value_1'\n       }));\n       expect(requestHeaders[2]).toEqual(jasmine.objectContaining({\n         'header_key_1': 'header_value_1'\n       }));\n       expect(requestCredentials).toEqual(['include', 'include', 'include']);\n     });\n\n  const httpProtocols = ['http://', 'https://'];\n  for (const protocol of httpProtocols) {\n    it(`load topology and weights: explicit relative ${protocol} path`,\n       async () => {\n         const modelTopology =\n             JSON.parse(JSON.stringify(fakeSequentialModel)).modelTopology;\n         const weightsManifest: io.WeightsManifestConfig = [\n           {\n             'paths': ['weight_0'],\n             'weights': [\n               {'name': `dense_6/kernel`, 'dtype': 'float32', 'shape': [32, 32]}\n             ],\n           },\n           {\n             'paths': ['weight_1'],\n             'weights':\n                 [{'name': `dense_6/bias`, 'dtype': 'float32', 'shape': [32]}],\n           }\n         ];\n         spyOn(env().platform, 'fetch').and.callFake((path: string) => {\n           return new Promise((resolve, reject) => {\n             if (path === `${protocol}localhost:8888/models/model.json`) {\n               resolve(new Response(\n                   JSON.stringify({\n                     modelTopology,\n                     weightsManifest,\n                   }),\n                   {'headers': {'Content-Type': JSON_TYPE}}));\n             } else if (path === `${protocol}localhost:8888/models/weight_0`) {\n               resolve(new Response(\n                   ones([32, 32], 'float32').dataSync() as Float32Array,\n                   {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n             } else if (path === `${protocol}localhost:8888/models/weight_1`) {\n               resolve(new Response(\n                   zeros([32], 'float32').dataSync() as Float32Array,\n                   {'headers': {'Content-Type': OCTET_STREAM_TYPE}}));\n             } else {\n               reject(new Error(`Invalid path: ${path}`));\n             }\n           });\n         });\n\n         const model = await loadLayersModelInternal(\n             `${protocol}localhost:8888/models/model.json`);\n         expect(model.layers.length).toEqual(2);\n         expect(model.inputs.length).toEqual(1);\n         expect(model.inputs[0].shape).toEqual([null, 32]);\n         expect(model.outputs.length).toEqual(1);\n         expect(model.outputs[0].shape).toEqual([null, 32]);\n         const weightValues = model.getWeights();\n         expect(weightValues.length).toEqual(2);\n         expectTensorsClose(weightValues[0], ones([32, 32]));\n         expectTensorsClose(weightValues[1], zeros([32]));\n       });\n  }\n\n  it('Missing weight in manifest leads to error', done => {\n    setupFakeWeightFiles({\n      './weight_0': ones([32, 32], 'float32').dataSync() as Float32Array,\n      './weight_1': ones([32], 'float32').dataSync() as Float32Array,\n    });\n    // Use a randomly generated layer name to prevent interaction with other\n    // unit tests that load the same sample JSON.\n    const denseLayerName = `dense_${Math.floor(Math.random() * 1e9)}`;\n    const weightsManifest: io.WeightsManifestConfig = [\n      {\n        'paths': ['weight_0'],\n        'weights': [{\n          'name': `${denseLayerName}/kernel`,\n          'dtype': 'float32',\n          'shape': [32, 32]\n        }],\n      },\n    ];  // Missing bias.\n    // JSON.parse and stringify to deep copy fakeSequentialModel.\n    const configJson =\n        JSON.parse(JSON.stringify(fakeSequentialModel)).modelTopology;\n    configJson['config']['layers'][1]['config']['name'] = denseLayerName;\n    modelFromJSON({modelTopology: configJson, weightsManifest, pathPrefix: '.'})\n        .then(() => done.fail())\n        .catch(() => done());\n  });\n\n  it('Loads weights despite uniqueified tensor names', async () => {\n    setupFakeWeightFiles({\n      './weight_0': ones([32, 32], 'float32').dataSync() as Float32Array,\n      './weight_1': ones([32], 'float32').dataSync() as Float32Array,\n    });\n    const denseLayerName = 'dense_uniqueify';\n    const weightsManifest: io.WeightsManifestConfig = [\n      {\n        'paths': ['weight_0'],\n        'weights': [{\n          'name': `${denseLayerName}/kernel`,\n          'dtype': 'float32',\n          'shape': [32, 32]\n        }],\n      },\n      {\n        'paths': ['weight_1'],\n        'weights': [\n          {'name': `${denseLayerName}/bias`, 'dtype': 'float32', 'shape': [32]}\n        ],\n      }\n    ];\n    // JSON.parse and stringify to deep copy fakeSequentialModel.\n    const configJson =\n        JSON.parse(JSON.stringify(fakeSequentialModel)).modelTopology;\n    configJson['config']['layers'][1]['config']['name'] = denseLayerName;\n    const model1 = await modelFromJSON(\n        {modelTopology: configJson, weightsManifest, pathPrefix: '.'});\n    expect(model1.weights[0].name).toEqual('dense_uniqueify/kernel');\n    expect(model1.weights[0].originalName).toEqual('dense_uniqueify/kernel');\n    expect(model1.weights[1].name).toEqual('dense_uniqueify/bias');\n    expect(model1.weights[1].originalName).toEqual('dense_uniqueify/bias');\n    expectTensorsClose(model1.weights[0].read(), ones([32, 32], 'float32'));\n    expectTensorsClose(model1.weights[1].read(), ones([32], 'float32'));\n\n    // On the second load, the variable names will be uniqueified. This\n    // test succeeds only because we maintain the name mapping, so we\n    // can load weights--keyed by non-unique names in the weight\n    // manifest--into variables with newly uniqueified names.\n    const model2 = await modelFromJSON(\n        {modelTopology: configJson, weightsManifest, pathPrefix: '.'});\n    // note unique suffix\n    expect(model2.weights[0].name).toEqual('dense_uniqueify/kernel_1');\n    expect(model2.weights[0].originalName).toEqual('dense_uniqueify/kernel');\n    // note unique suffix\n    expect(model2.weights[1].name).toEqual('dense_uniqueify/bias_1');\n    expect(model2.weights[1].originalName).toEqual('dense_uniqueify/bias');\n    expectTensorsClose(model2.weights[0].read(), ones([32, 32], 'float32'));\n    expectTensorsClose(model2.weights[1].read(), ones([32], 'float32'));\n  });\n\n  it('Repeated saving and loading of LayersModel works', () => {\n    const model1 = tfl.sequential();\n    model1.add(\n        tfl.layers.dense({units: 3, inputShape: [4], activation: 'relu'}));\n    model1.add(tfl.layers.dense({units: 1, activation: 'sigmoid'}));\n    const json1 = model1.toJSON(null, false);\n    const model2 =\n        deserialize(convertPythonicToTs(json1) as serialization.ConfigDict) as\n        LayersModel;\n    const json2 = model2.toJSON(null, false);\n    expect(json2).toEqual(json1);\n  });\n});\n\ndescribeMathCPUAndGPU('Saving+loading model with optimizer', () => {\n  it('SGD', async () => {\n    const model1 = tfl.sequential();\n    model1.add(tfl.layers.dense(\n        {units: 1, inputShape: [8], kernelInitializer: 'ones'}));\n    const learningRate = 0.02;\n    const optimizer = train.sgd(learningRate);\n    model1.compile({loss: 'meanSquaredError', optimizer});\n\n    const xs = ones([4, 8]);\n    const ys = zeros([4, 1]);\n    await model1.fit(xs, ys, {epochs: 1});\n\n    let savedArtifacts: io.ModelArtifacts;\n    await model1.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return null;\n        }),\n        {includeOptimizer: true});\n\n    const trainingConfig = savedArtifacts.trainingConfig;\n    expect(trainingConfig['loss']).toEqual('mean_squared_error');\n\n    const weightSpecs = savedArtifacts.weightSpecs;\n    // The first two weights belong to the model proper.\n    // The next weight is the iterations counter.\n    expect(weightSpecs.length).toEqual(2 + 1);\n    expect(weightSpecs[2].name).toEqual('iter');\n    // The first part comes from the kernel of the dense layer, which has a\n    // 8 elements and each is 4 bytes.\n    // The second part comes from the bias of the dense layer, which has 1\n    // element and is also 4 bytes.\n    const weightData = savedArtifacts.weightData;\n    expect(weightData.byteLength).toEqual(4 * 8 + 4 * 1 + 4);\n\n    // Load the model back, with the optimizer.\n    const model2 = await tfl.loadLayersModel(io.fromMemory(savedArtifacts));\n    expect(model2.optimizer.getConfig()['learningRate']).toEqual(learningRate);\n\n    const optimizer1Weights = await model1.optimizer.getWeights();\n    const optimizer2Weights = await model2.optimizer.getWeights();\n    expect(optimizer2Weights.length).toEqual(optimizer1Weights.length);\n    for (let i = 0; i < optimizer1Weights.length; ++i) {\n      expectTensorsClose(\n          optimizer2Weights[i].tensor, optimizer1Weights[i].tensor);\n    }\n\n    // Call fit() on the loaded model and assert that the effect is the\n    // same as calling fit() again on the original model.\n    const history = await model2.fit(xs, ys, {epochs: 1});\n    expect(history.history.loss[0]).toBeCloseTo(26.2144);\n  });\n\n  it('RMSProp', async () => {\n    const model1 = tfl.sequential();\n    model1.add(tfl.layers.dense(\n        {units: 1, inputShape: [8], kernelInitializer: 'ones'}));\n    const learningRate = 0.02;\n    const decay = 0.95;\n    const optimizer = train.rmsprop(learningRate, decay);\n    model1.compile({loss: 'meanSquaredError', optimizer});\n\n    const xs = ones([4, 8]);\n    const ys = zeros([4, 1]);\n    await model1.fit(xs, ys, {epochs: 1});\n\n    let savedArtifacts: io.ModelArtifacts;\n    await model1.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return null;\n        }),\n        {includeOptimizer: true});\n\n    const trainingConfig = savedArtifacts.trainingConfig;\n    expect(trainingConfig['loss']).toEqual('mean_squared_error');\n\n    const weightSpecs = savedArtifacts.weightSpecs;\n    // The first two weights belong to the model proper.\n    // The next weight is the iterations counter.\n    // The last four weights belong to the rmsprop optimizer.\n    expect(weightSpecs.length).toEqual(2 + 1 + 2 * 2);\n    expect(weightSpecs[2].name).toEqual('iter');\n    expect(weightSpecs[3].name).toEqual(`${weightSpecs[0].name}/rms`);\n    expect(weightSpecs[4].name).toEqual(`${weightSpecs[1].name}/rms`);\n    expect(weightSpecs[5].name).toEqual(`${weightSpecs[0].name}/momentum`);\n    expect(weightSpecs[6].name).toEqual(`${weightSpecs[1].name}/momentum`);\n    // The first part comes from the kernel of the dense layer, which has a\n    // 8 elements and each is 4 bytes.\n    // The second part comes from the bias of the dense layer, which has 1\n    // element and is also 4 bytes.\n    const weightData = savedArtifacts.weightData;\n    expect(weightData.byteLength).toEqual(4 + 4 * 8 * 3 + 4 * 1 * 3);\n\n    // Load the model back, with the optimizer.\n    const model2 = await tfl.loadLayersModel(io.fromMemory(savedArtifacts));\n    expect(model2.optimizer.getConfig()['learningRate']).toEqual(learningRate);\n    expect(model2.optimizer.getConfig()['decay']).toEqual(decay);\n\n    const optimizer1Weights = await model1.optimizer.getWeights();\n    const optimizer2Weights = await model2.optimizer.getWeights();\n    expect(optimizer2Weights.length).toEqual(optimizer1Weights.length);\n    for (let i = 0; i < optimizer1Weights.length; ++i) {\n      expectTensorsClose(\n          optimizer2Weights[i].tensor, optimizer1Weights[i].tensor);\n    }\n\n    // Call fit() on the loaded model and assert that the effect is the\n    // same as calling fit() again on the original model.\n    const history = await model2.fit(xs, ys, {epochs: 1});\n    expect(history.history.loss[0]).toBeCloseTo(51.768246);\n  });\n\n  it('Adadelta', async () => {\n    const model1 = tfl.sequential();\n    model1.add(tfl.layers.dense(\n        {units: 1, inputShape: [8], kernelInitializer: 'ones'}));\n    const learningRate = 0.02;\n    const optimizer = train.adadelta(learningRate);\n    model1.compile({loss: 'meanSquaredError', optimizer});\n\n    const xs = ones([4, 8]);\n    const ys = zeros([4, 1]);\n    await model1.fit(xs, ys, {epochs: 1});\n\n    let savedArtifacts: io.ModelArtifacts;\n    await model1.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return null;\n        }),\n        {includeOptimizer: true});\n\n    const trainingConfig = savedArtifacts.trainingConfig;\n    expect(trainingConfig['loss']).toEqual('mean_squared_error');\n\n    const weightSpecs = savedArtifacts.weightSpecs;\n    // The first two weights belong to the model proper.\n    // The next weight is the iterations counter.\n    // The last four weights belong to the rmsprop optimizer.\n    expect(weightSpecs.length).toEqual(2 + 1 + 2 * 2);\n    expect(weightSpecs[2].name).toEqual('iter');\n    expect(weightSpecs[3].name).toEqual(`${weightSpecs[0].name}/accum_grad`);\n    expect(weightSpecs[4].name).toEqual(`${weightSpecs[1].name}/accum_grad`);\n    expect(weightSpecs[5].name).toEqual(`${weightSpecs[0].name}/accum_var`);\n    expect(weightSpecs[6].name).toEqual(`${weightSpecs[1].name}/accum_var`);\n    // The first part comes from the kernel of the dense layer, which has a\n    // 8 elements and each is 4 bytes.\n    // The second part comes from the bias of the dense layer, which has 1\n    // element and is also 4 bytes.\n    const weightData = savedArtifacts.weightData;\n    expect(weightData.byteLength).toEqual(4 + 4 * 8 * 3 + 4 * 1 * 3);\n\n    // Load the model back, with the optimizer.\n    const model2 = await tfl.loadLayersModel(io.fromMemory(savedArtifacts));\n    expect(model2.optimizer.getConfig()['learningRate']).toEqual(learningRate);\n\n    const optimizer1Weights = await model1.optimizer.getWeights();\n    const optimizer2Weights = await model2.optimizer.getWeights();\n    expect(optimizer2Weights.length).toEqual(optimizer1Weights.length);\n    for (let i = 0; i < optimizer1Weights.length; ++i) {\n      expectTensorsClose(\n          optimizer2Weights[i].tensor, optimizer1Weights[i].tensor);\n    }\n\n    // Call fit() on the loaded model and assert that the effect is the\n    // same as calling fit() again on the original model.\n    const history = await model2.fit(xs, ys, {epochs: 1});\n    expect(history.history.loss[0]).toBeCloseTo(26.2144);\n  });\n\n  it('Adagrad', async () => {\n    const model1 = tfl.sequential();\n    model1.add(tfl.layers.dense(\n        {units: 1, inputShape: [8], kernelInitializer: 'ones'}));\n    const learningRate = 0.02;\n    const initialAccumulatorValue = 0.15;\n    const optimizer = train.adagrad(learningRate, initialAccumulatorValue);\n    model1.compile({loss: 'meanSquaredError', optimizer});\n\n    const xs = ones([4, 8]);\n    const ys = zeros([4, 1]);\n    await model1.fit(xs, ys, {epochs: 1});\n\n    let savedArtifacts: io.ModelArtifacts;\n    await model1.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return null;\n        }),\n        {includeOptimizer: true});\n\n    const trainingConfig = savedArtifacts.trainingConfig;\n    expect(trainingConfig['loss']).toEqual('mean_squared_error');\n\n    const weightSpecs = savedArtifacts.weightSpecs;\n    // The first two weights belong to the model proper.\n    // The next weight is the iterations counter.\n    // The last two weights belong to the rmsprop optimizer.\n    expect(weightSpecs.length).toEqual(2 + 1 + 2);\n    expect(weightSpecs[2].name).toEqual('iter');\n    expect(weightSpecs[3].name).toEqual(`${weightSpecs[0].name}/accumulator`);\n    expect(weightSpecs[4].name).toEqual(`${weightSpecs[1].name}/accumulator`);\n    // The first part comes from the kernel of the dense layer, which has a\n    // 8 elements and each is 4 bytes.\n    // The second part comes from the bias of the dense layer, which has 1\n    // element and is also 4 bytes.\n    const weightData = savedArtifacts.weightData;\n    expect(weightData.byteLength).toEqual(4 + 4 * 8 * 2 + 4 * 1 * 2);\n\n    // Load the model back, with the optimizer.\n    const model2 = await tfl.loadLayersModel(io.fromMemory(savedArtifacts));\n    expect(model2.optimizer.getConfig()['learningRate']).toEqual(learningRate);\n    expect(model2.optimizer.getConfig()['initialAccumulatorValue'])\n        .toEqual(initialAccumulatorValue);\n\n    const optimizer1Weights = await model1.optimizer.getWeights();\n    const optimizer2Weights = await model2.optimizer.getWeights();\n    expect(optimizer2Weights.length).toEqual(optimizer1Weights.length);\n    for (let i = 0; i < optimizer1Weights.length; ++i) {\n      expectTensorsClose(\n          optimizer2Weights[i].tensor, optimizer1Weights[i].tensor);\n    }\n\n    // Call fit() on the loaded model and assert that the effect is the\n    // same as calling fit() again on the original model.\n    const history = await model2.fit(xs, ys, {epochs: 1});\n    expect(history.history.loss[0]).toBeCloseTo(61.153225);\n  });\n\n  it('Adam as explicit object', async () => {\n    const model1 = tfl.sequential();\n    model1.add(tfl.layers.dense(\n        {units: 1, inputShape: [8], kernelInitializer: 'ones'}));\n    const learningRate = 0.02;\n    const beta1 = 0.95;\n    const beta2 = 0.98;\n    const optimizer = train.adam(learningRate, beta1, beta2);\n    model1.compile({loss: 'meanSquaredError', optimizer});\n\n    const xs = ones([4, 8]);\n    const ys = zeros([4, 1]);\n    await model1.fit(xs, ys, {epochs: 1});\n\n    let savedArtifacts: io.ModelArtifacts;\n    await model1.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return null;\n        }),\n        {includeOptimizer: true});\n\n    const trainingConfig = savedArtifacts.trainingConfig;\n    expect(trainingConfig['loss']).toEqual('mean_squared_error');\n\n    const weightSpecs = savedArtifacts.weightSpecs;\n    // The first two weights belong to the model proper.\n    // The next weight is the iterations counter.\n    // The last four weights belong to the rmsprop optimizer.\n    expect(weightSpecs.length).toEqual(2 + 1 + 2 * 2);\n    expect(weightSpecs[2].name).toEqual('iter');\n    expect(weightSpecs[3].name).toEqual(`${weightSpecs[0].name}/m`);\n    expect(weightSpecs[4].name).toEqual(`${weightSpecs[1].name}/m`);\n    expect(weightSpecs[5].name).toEqual(`${weightSpecs[0].name}/v`);\n    expect(weightSpecs[6].name).toEqual(`${weightSpecs[1].name}/v`);\n    // The first part comes from the kernel of the dense layer, which has a\n    // 8 elements and each is 4 bytes.\n    // The second part comes from the bias of the dense layer, which has 1\n    // element and is also 4 bytes.\n    const weightData = savedArtifacts.weightData;\n    expect(weightData.byteLength).toEqual(4 + 4 * 8 * 3 + 4 * 1 * 3);\n\n    // Load the model back, with the optimizer.\n    const model2 = await tfl.loadLayersModel(io.fromMemory(savedArtifacts));\n    expect(model2.optimizer.getConfig()['learningRate']).toEqual(learningRate);\n    expect(model2.optimizer.getConfig()['beta1']).toEqual(beta1);\n    expect(model2.optimizer.getConfig()['beta2']).toEqual(beta2);\n\n    const optimizer1Weights = await model1.optimizer.getWeights();\n    const optimizer2Weights = await model2.optimizer.getWeights();\n    expect(optimizer2Weights.length).toEqual(optimizer1Weights.length);\n    for (let i = 0; i < optimizer1Weights.length; ++i) {\n      expectTensorsClose(\n          optimizer2Weights[i].tensor, optimizer1Weights[i].tensor);\n    }\n\n    // Call fit() on the loaded model and assert that the effect is the\n    // same as calling fit() again on the original model.\n    const history = await model2.fit(xs, ys, {epochs: 1});\n    expect(history.history.loss[0]).toBeCloseTo(61.1524);\n  });\n\n  it('Adam as string name', async () => {\n    const model1 = tfl.sequential();\n    model1.add(tfl.layers.dense(\n        {units: 1, inputShape: [8], kernelInitializer: 'ones'}));\n    model1.compile({loss: 'meanSquaredError', optimizer: 'adam'});\n\n    const xs = ones([4, 8]);\n    const ys = zeros([4, 1]);\n    await model1.fit(xs, ys, {epochs: 1});\n\n    let savedArtifacts: io.ModelArtifacts;\n    await model1.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return null;\n        }),\n        {includeOptimizer: true});\n\n    const trainingConfig = savedArtifacts.trainingConfig;\n    expect(trainingConfig['loss']).toEqual('mean_squared_error');\n\n    const weightSpecs = savedArtifacts.weightSpecs;\n    // The first two weights belong to the model proper.\n    // The next weight is the iterations counter.\n    // The last four weights belong to the rmsprop optimizer.\n    expect(weightSpecs.length).toEqual(2 + 1 + 2 * 2);\n    expect(weightSpecs[2].name).toEqual('iter');\n    expect(weightSpecs[3].name).toEqual(`${weightSpecs[0].name}/m`);\n    expect(weightSpecs[4].name).toEqual(`${weightSpecs[1].name}/m`);\n    expect(weightSpecs[5].name).toEqual(`${weightSpecs[0].name}/v`);\n    expect(weightSpecs[6].name).toEqual(`${weightSpecs[1].name}/v`);\n    // The first part comes from the kernel of the dense layer, which has a\n    // 8 elements and each is 4 bytes.\n    // The second part comes from the bias of the dense layer, which has 1\n    // element and is also 4 bytes.\n    const weightData = savedArtifacts.weightData;\n    expect(weightData.byteLength).toEqual(4 + 4 * 8 * 3 + 4 * 1 * 3);\n\n    // Load the model back, with the optimizer.\n    const model2 = await tfl.loadLayersModel(io.fromMemory(savedArtifacts));\n    expect(model2.optimizer.getConfig()['learningRate']).toEqual(1e-3);\n\n    const optimizer1Weights = await model1.optimizer.getWeights();\n    const optimizer2Weights = await model2.optimizer.getWeights();\n    expect(optimizer2Weights.length).toEqual(optimizer1Weights.length);\n    for (let i = 0; i < optimizer1Weights.length; ++i) {\n      expectTensorsClose(\n          optimizer2Weights[i].tensor, optimizer1Weights[i].tensor);\n    }\n\n    // Call fit() on the loaded model and assert that the effect is the\n    // same as calling fit() again on the original model.\n    const history = await model2.fit(xs, ys, {epochs: 1});\n    expect(history.history.loss[0]).toBeCloseTo(63.8561);\n  });\n\n  it('Momentum', async () => {\n    const model1 = tfl.sequential();\n    model1.add(tfl.layers.dense(\n        {units: 1, inputShape: [8], kernelInitializer: 'ones'}));\n    const learningRate = 0.02;\n    const momentum = 0.91;\n    const optimizer = train.momentum(learningRate, momentum);\n    model1.compile({loss: 'meanSquaredError', optimizer});\n\n    const xs = ones([4, 8]);\n    const ys = zeros([4, 1]);\n    await model1.fit(xs, ys, {epochs: 1});\n\n    let savedArtifacts: io.ModelArtifacts;\n    await model1.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return null;\n        }),\n        {includeOptimizer: true});\n\n    const trainingConfig = savedArtifacts.trainingConfig;\n    expect(trainingConfig['loss']).toEqual('mean_squared_error');\n\n    const weightSpecs = savedArtifacts.weightSpecs;\n    // The first two weights belong to the model proper.\n    // The next weight is the iterations counter.\n    // The last four weights belong to the rmsprop optimizer.\n    expect(weightSpecs.length).toEqual(2 + 1 + 2);\n    expect(weightSpecs[2].name).toEqual('iter');\n    expect(weightSpecs[3].name).toEqual(`${weightSpecs[0].name}/momentum`);\n    expect(weightSpecs[4].name).toEqual(`${weightSpecs[1].name}/momentum`);\n    // The first part comes from the kernel of the dense layer, which has a\n    // 8 elements and each is 4 bytes.\n    // The second part comes from the bias of the dense layer, which has 1\n    // element and is also 4 bytes.\n    const weightData = savedArtifacts.weightData;\n    expect(weightData.byteLength).toEqual(4 + 4 * 8 * 2 + 4 * 1 * 2);\n\n    // Load the model back, with the optimizer.\n    const model2 = await tfl.loadLayersModel(io.fromMemory(savedArtifacts));\n    expect(model2.optimizer.getConfig()['learningRate']).toEqual(learningRate);\n\n    const optimizer1Weights = await model1.optimizer.getWeights();\n    const optimizer2Weights = await model2.optimizer.getWeights();\n    expect(optimizer2Weights.length).toEqual(optimizer1Weights.length);\n    for (let i = 0; i < optimizer1Weights.length; ++i) {\n      expectTensorsClose(\n          optimizer2Weights[i].tensor, optimizer1Weights[i].tensor);\n    }\n\n    // Call fit() on the loaded model and assert that the effect is the\n    // same as calling fit() again on the original model.\n    const history = await model2.fit(xs, ys, {epochs: 1});\n    expect(history.history.loss[0]).toBeCloseTo(26.2144);\n  });\n\n  it('Saving model with metrics', async () => {\n    const model1 = tfl.sequential();\n    model1.add(tfl.layers.dense({\n      units: 3,\n      inputShape: [8],\n      kernelInitializer: 'ones',\n      activation: 'softmax'\n    }));\n    model1.compile(\n        {loss: 'categoricalCrossentropy', optimizer: 'adam', metrics: ['acc']});\n\n    const xs = ones([4, 8]);\n    const ys = tensor2d([[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]]);\n    let h = await model1.fit(xs, ys, {epochs: 1});\n    expect(h.history.loss[0]).toBeCloseTo(1.0986123);\n    expect(h.history.acc).toEqual([0]);\n\n    let savedArtifacts: io.ModelArtifacts;\n    await model1.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return null;\n        }),\n        {includeOptimizer: true});\n\n    const trainingConfig = savedArtifacts.trainingConfig;\n    expect(trainingConfig['loss']).toEqual('categorical_crossentropy');\n    expect(trainingConfig['metrics']).toEqual(['acc']);\n\n    const model2 = await tfl.loadLayersModel(io.fromMemory(savedArtifacts));\n    h = await model2.fit(xs, ys, {epochs: 1});\n    expect(h.history.loss.length).toEqual(1);\n    expect(h.history.loss[0]).toBeCloseTo(1.086648);\n    expect(h.history.acc).toEqual([1]);\n  });\n\n  it('Saving model without calling fit first', async () => {\n    const model1 = tfl.sequential();\n    model1.add(tfl.layers.dense({\n      units: 3,\n      inputShape: [8],\n      kernelInitializer: 'ones',\n      activation: 'softmax'\n    }));\n    model1.compile(\n        {loss: 'categoricalCrossentropy', optimizer: 'adam', metrics: ['acc']});\n\n    let savedArtifacts: io.ModelArtifacts;\n    await model1.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return null;\n        }),\n        {includeOptimizer: true});\n\n    const trainingConfig = savedArtifacts.trainingConfig;\n    expect(trainingConfig['loss']).toEqual('categorical_crossentropy');\n    expect(trainingConfig['metrics']).toEqual(['acc']);\n\n    const model2 = await tfl.loadLayersModel(io.fromMemory(savedArtifacts));\n\n    const xs = ones([4, 8]);\n    const ys = tensor2d([[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]]);\n    const h = await model2.fit(xs, ys, {epochs: 1});\n    expect(h.history.loss.length).toEqual(1);\n    expect(h.history.loss[0]).toBeCloseTo(1.0986123);\n    expect(h.history.acc).toEqual([0]);\n    expect(model2.optimizer.iterations).toEqual(1);\n  });\n\n  it('Saving functional model with more than one output', async () => {\n    const input = tfl.input({shape: [8]});\n    const x =\n        tfl.layers\n            .dense({units: 5, kernelInitializer: 'ones', activation: 'relu'})\n            .apply(input) as tfl.SymbolicTensor;\n    const outLayer1 = tfl.layers.dense(\n        {units: 3, kernelInitializer: 'ones', activation: 'softmax'});\n    const y1 = outLayer1.apply(x) as tfl.SymbolicTensor;\n    const outLayer2 = tfl.layers.dense(\n        {units: 1, kernelInitializer: 'ones', activation: 'sigmoid'});\n    const y2 = outLayer2.apply(x) as tfl.SymbolicTensor;\n    const model1 = tfl.model({inputs: input, outputs: [y1, y2]});\n    model1.compile({\n      loss: ['categoricalCrossentropy', 'binaryCrossentropy'],\n      optimizer: 'adam',\n      metrics: ['acc']\n    });\n\n    const xs = ones([4, 8]);\n    const ys1 = tensor2d([[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]]);\n    const ys2 = tensor2d([[1], [1], [1], [1]]);\n\n    let h = await model1.fit(xs, [ys1, ys2], {epochs: 1});\n\n    let savedArtifacts: io.ModelArtifacts;\n    await model1.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return null;\n        }),\n        {includeOptimizer: true});\n\n    const trainingConfig = savedArtifacts.trainingConfig;\n    expect(trainingConfig['loss']).toEqual([\n      'categorical_crossentropy', 'binary_crossentropy'\n    ]);\n    expect(trainingConfig['metrics']).toEqual(['acc']);\n\n    const model2 = await tfl.loadLayersModel(io.fromMemory(savedArtifacts));\n\n    h = await model2.fit(xs, [ys1, ys2], {epochs: 1});\n    expect(h.history.loss.length).toEqual(1);\n    expect(h.history.loss[0]).toBeCloseTo(1.044699);\n\n    const lossKey1 = `${outLayer1.name}_loss`;\n    const outputLoss1 = h.history[lossKey1] as number[];\n    expect(outputLoss1.length).toEqual(1);\n    expect(outputLoss1[0]).toBeCloseTo(1.0446988);\n    const lossKey2 = `${outLayer2.name}_loss`;\n    const outputLoss2 = h.history[lossKey2] as number[];\n    expect(outputLoss2.length).toEqual(1);\n    expect(outputLoss2[0]).toBeCloseTo(1.936124e-7);\n\n    const metricKey1 = `${outLayer1.name}_acc`;\n    const metricValues1 = h.history[metricKey1] as number[];\n    expect(metricValues1.length).toEqual(1);\n    expect(metricValues1[0]).toEqual(1);\n    const metricKey2 = `${outLayer2.name}_acc`;\n    const metricValues2 = h.history[metricKey2] as number[];\n    expect(metricValues2.length).toEqual(1);\n    expect(metricValues2[0]).toBeCloseTo(1);\n  });\n});\n\ndescribeMathCPU('loadLayersModel from IOHandler', () => {\n  // The model topology JSON can be obtained with the following Python Keras\n  // code:\n  //\n  // ```python\n  // import keras\n  // model = keras.Sequential([\n  //     keras.layers.Dense(1, input_shape=[4], activation='sigmoid')\n  // ])\n  // print(model.to_json())\n  // ```\n  const modelTopology: {} = {\n    'class_name': 'Sequential',\n    'keras_version': '2.1.4',\n    'config': [{\n      'class_name': 'Dense',\n      'config': {\n        'kernel_initializer': {\n          'class_name': 'VarianceScaling',\n          'config': {\n            'distribution': 'uniform',\n            'scale': 1.0,\n            'seed': null,\n            'mode': 'fan_avg'\n          }\n        },\n        'name': 'dense_1',\n        'kernel_constraint': null,\n        'bias_regularizer': null,\n        'bias_constraint': null,\n        'dtype': 'float32',\n        'activation': 'sigmoid',\n        'trainable': true,\n        'kernel_regularizer': null,\n        'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n        'units': 1,\n        'batch_input_shape': [null, 4],\n        'use_bias': true,\n        'activity_regularizer': null\n      }\n    }],\n    'backend': 'tensorflow'\n  };\n  const weightSpecs: io.WeightsManifestEntry[] = [\n    {\n      name: 'dense_1/kernel',\n      shape: [4, 1],\n      dtype: 'float32',\n    },\n    {\n      name: 'dense_1/bias',\n      shape: [1],\n      dtype: 'float32',\n    }\n  ];\n  const weightData = new Float32Array([1.1, 2.2, 3.3, 4.4, 5.5]).buffer;\n\n  // A dummy IOHandler that returns hard-coded model artifacts when its\n  // `load` method is called.\n  class IOHandlerForTest implements io.IOHandler {\n    private readonly includeWeights: boolean;\n\n    constructor(includeWeights = true) {\n      this.includeWeights = includeWeights;\n    }\n\n    async load(): Promise<io.ModelArtifacts> {\n      return this.includeWeights ? {modelTopology, weightSpecs, weightData} :\n                                   {modelTopology};\n    }\n  }\n\n  // A dummy IOHandler that doesn't have the `load` method implemented and\n  // is expected to cause `loadLayersModel` or `loadLayersModelInternal` to\n  // fail.\n  class IOHandlerWithoutLoad implements io.IOHandler {\n    constructor() {}\n  }\n\n  it('load topology and weights', async () => {\n    const model = await loadLayersModelInternal(new IOHandlerForTest(true));\n    expect(model.layers.length).toEqual(1);\n    expect(model.inputs.length).toEqual(1);\n    expect(model.inputs[0].shape).toEqual([null, 4]);\n    expect(model.outputs.length).toEqual(1);\n    expect(model.outputs[0].shape).toEqual([null, 1]);\n    const weightValues = model.getWeights();\n    expect(weightValues.length).toEqual(2);\n    expectTensorsClose(weightValues[0], tensor2d([1.1, 2.2, 3.3, 4.4], [4, 1]));\n    expectTensorsClose(weightValues[1], tensor1d([5.5]));\n  });\n\n  it('load topology only', async () => {\n    const model = await loadLayersModelInternal(new IOHandlerForTest(false));\n    expect(model.layers.length).toEqual(1);\n    expect(model.inputs.length).toEqual(1);\n    expect(model.inputs[0].shape).toEqual([null, 4]);\n    expect(model.outputs.length).toEqual(1);\n    expect(model.outputs[0].shape).toEqual([null, 1]);\n  });\n\n  it('IOHandler without load method causes error', async done => {\n    loadLayersModelInternal(new IOHandlerWithoutLoad())\n        .then(model => {\n          done.fail(\n              'Loading with an IOHandler without load method succeeded ' +\n              'unexpectedly.');\n        })\n        .catch(err => {\n          expect(err.message).toMatch(/does not have .*load.* method/);\n          done();\n        });\n  });\n});\n\ndescribeMathCPUAndGPU('Sequential', () => {\n  const inputShape = [1, 6];\n  const batchInputShape = [1].concat(inputShape);\n  const firstReshape = [2, 3];\n  const secondReshape = [3, 2];\n  const layers = [\n    new Reshape({targetShape: firstReshape, batchInputShape, name: 'layer1'}),\n    new Reshape({targetShape: secondReshape, name: 'layer2'})\n  ];\n\n  function getInputs(): Tensor {\n    return ones(batchInputShape);\n  }\n\n  function getExpectedOutputs(): Tensor {\n    return ones([1].concat(secondReshape));\n  }\n\n  it('throws an exception if the first layer is not an input layer', () => {\n    const layer = new Reshape({targetShape: firstReshape});\n    expect(() => tfl.sequential({layers: [layer]}))\n        .toThrowError(\n            /The first layer in a Sequential model must get an `inputShape`/);\n  });\n\n  it('can accept a list of layers in constructor', () => {\n    const model = tfl.sequential({layers});\n    expect(model.layers).toEqual(layers);\n  });\n\n  it('can add layers', () => {\n    const model = tfl.sequential();\n    for (const layer of layers) {\n      model.add(layer);\n    }\n    expect(model.layers).toEqual(layers);\n  });\n\n  it('can pop layers', () => {\n    const model = tfl.sequential({layers});\n    model.pop();\n    expect(model.layers).toEqual(layers.slice(0, 1));\n  });\n\n  it('Incompatible inputShape leads to warning', () => {\n    let recordedWarnMessage: string;\n    spyOn(console, 'warn')\n        .and.callFake((message: string) => recordedWarnMessage = message);\n    tfl.sequential({\n      layers: [\n        tfl.layers.reshape({targetShape: [8], inputShape: [2, 4]}),\n        tfl.layers.dense({units: 1, inputShape: [7]})\n      ]\n    });\n    expect(recordedWarnMessage)\n        .toMatch(/shape of the input tensor .*null,8.* not match .*null,7.*/);\n  });\n\n  it('Incompatible inputShape rank leads to warning', () => {\n    let recordedWarnMessage: string;\n    spyOn(console, 'warn')\n        .and.callFake((message: string) => recordedWarnMessage = message);\n    tfl.sequential({\n      layers: [\n        tfl.layers.reshape({targetShape: [8], inputShape: [2, 4]}),\n        tfl.layers.dense({units: 1, inputShape: [3, 7]})\n      ]\n    });\n    expect(recordedWarnMessage)\n        .toMatch(/rank .*null,8.* does not match .*null,3,7.* /);\n  });\n\n  it('Compatible inputShape leads to NO warning', () => {\n    let recordedWarnMessage: string;\n    spyOn(console, 'warn')\n        .and.callFake((message: string) => recordedWarnMessage = message);\n    tfl.sequential({\n      layers: [\n        tfl.layers.reshape({targetShape: [8], inputShape: [2, 4]}),\n        tfl.layers.dense({units: 1, inputShape: [8]})\n      ]\n    });\n    expect(recordedWarnMessage).toEqual(undefined);\n  });\n\n  it('throws error if try to pop too many layers', () => {\n    const model = tfl.sequential();\n    expect(() => model.pop()).toThrowError(/There are no layers in the model/);\n  });\n\n  it('throws error if first layer would result in negative shape', () => {\n    const model = tfl.sequential();\n    const layer = tfl.layers.conv2d({\n      filters: 1,\n      kernelSize: [10, 10],\n      strides: 1,\n      padding: 'valid',\n      dataFormat: 'channelsLast',\n      inputShape: [4, 4, 1]\n    });\n    // Adding the layer would result in a shpae of [null, -5, -5, 1]\n    expect(() => model.add(layer)).toThrowError(/Negative dimension size/);\n  });\n\n  it('throws error if adding layer would result in negative shape', () => {\n    const model = tfl.sequential();\n    model.add(\n        tfl.layers.activation({inputShape: [4, 4, 1], activation: 'relu'}));\n    const layer = tfl.layers.conv2d({\n      filters: 1,\n      kernelSize: [10, 10],\n      strides: 1,\n      padding: 'valid',\n      dataFormat: 'channelsLast',\n    });\n    // Adding the layer would result in a shpae of [null, -5, -5, 1]\n    expect(() => model.add(layer)).toThrowError(/Negative dimension size/);\n  });\n\n  it('apply() threads data through the model.', () => {\n    const model = tfl.sequential({layers});\n    expectTensorsClose(\n        model.apply(getInputs()) as Tensor, getExpectedOutputs());\n  });\n\n  it('predict() threads data through the model.', () => {\n    const model = tfl.sequential({layers});\n    expectTensorsClose(\n        model.predict(getInputs()) as Tensor, getExpectedOutputs());\n  });\n\n  const dtypes: DataType[] = ['int32', 'float32'];\n  // TODO(bileschi): Add test for casting incompatible types, once they exist.\n  for (const dtype of dtypes) {\n    it(`predict() works with input dtype ${dtype}.`, () => {\n      const embModel = tfl.sequential();\n      embModel.add(\n          tfl.layers.embedding({inputShape: [1], inputDim: 10, outputDim: 2}));\n      const x = tensor2d([[0], [0], [1]], [3, 1], dtype);\n      const y = embModel.predict(x) as Tensor;\n      expect(y.dtype).toBe('float32');\n    });\n\n    it(`fit() works with input dtype ${dtype}.`, async () => {\n      const embModel = tfl.sequential();\n      embModel.add(\n          tfl.layers.embedding({inputShape: [1], inputDim: 10, outputDim: 2}));\n      embModel.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n      const x = tensor2d([[0]], [1, 1], dtype);\n      const y = tensor3d([[[0.5, 0.5]]], [1, 1, 2], 'float32');\n      await embModel.fit(x, y);\n    });\n  }\n\n  it('predictOnBatch() threads data through the model.', () => {\n    const batchSize = 10;\n    const inputShape = [1, 6];\n    const batchInputShape = [batchSize].concat(inputShape);\n    const firstReshape = [2, 3];\n    const secondReshape = [3, 2];\n    const layers = [\n      new Reshape({targetShape: firstReshape, batchInputShape, name: 'layer1'}),\n      new Reshape({targetShape: secondReshape, name: 'layer2'})\n    ];\n    const inputBatch = ones([batchSize].concat(inputShape));\n    const expectedOutput = ones([batchSize].concat(secondReshape));\n    const model = tfl.sequential({layers});\n    expectTensorsClose(\n        model.predictOnBatch(inputBatch) as Tensor, expectedOutput);\n  });\n\n  it('predictOnBatch() works with multi-input model.', () => {\n    const input1 = tfl.input({shape: [3]});\n    const input2 = tfl.input({shape: [4]});\n    const dense1 = tfl.layers.dense({units: 1, activation: 'sigmoid'});\n    const y1 = dense1.apply(input1) as tfl.SymbolicTensor;\n    const dense2 = tfl.layers.dense({units: 1, activation: 'sigmoid'});\n    const y2 = dense2.apply(input2) as tfl.SymbolicTensor;\n    const y = tfl.layers.concatenate().apply([y1, y2]) as tfl.SymbolicTensor;\n    const model = tfl.model({inputs: [input1, input2], outputs: y});\n\n    const batchSize = 5;\n    const x1 = zeros([batchSize, 3]);\n    const x2 = ones([batchSize, 4]);\n    const out = model.predictOnBatch([x1, x2]) as Tensor;\n    expect(out.shape).toEqual([5, 2]);\n  });\n\n  it('compile() and fit()', async () => {\n    const batchSize = 5;\n    const inputSize = 4;\n    const xs = ones([batchSize, inputSize]);\n    const ys = ones([batchSize, 1]);\n    const denseLayer1 = tfl.layers.dense({\n      units: 3,\n      useBias: false,\n      kernelInitializer: 'ones',\n      inputShape: [inputSize]\n    });\n    const denseLayer2 =\n        tfl.layers.dense({units: 1, useBias: false, kernelInitializer: 'ones'});\n    const model = tfl.sequential({layers: [denseLayer1, denseLayer2]});\n    model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n    const history = await model.fit(xs, ys, {batchSize, epochs: 2});\n    expect(history.history['loss'][0]).toBeCloseTo(121);\n    expect(history.history['loss'][1]).toBeCloseTo(0.015178224071860313);\n  });\n\n  it('calling fit twice in a row leads to error', async () => {\n    const batchSize = 5;\n    const inputSize = 4;\n    const xs = ones([batchSize, inputSize]);\n    const ys = ones([batchSize, 1]);\n    const denseLayer1 = tfl.layers.dense({units: 3, inputShape: [inputSize]});\n    const denseLayer2 = tfl.layers.dense({units: 1});\n    const model = tfl.sequential({layers: [denseLayer1, denseLayer2]});\n    model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n    // Do not call `await` below, so the two fit() calls may interleave.\n    const firstFit = model.fit(xs, ys, {batchSize, epochs: 8});\n\n    let errorCaught: Error;\n    try {\n      await model.fit(xs, ys);\n    } catch (err) {\n      errorCaught = err;\n    }\n    expect(errorCaught.message)\n        .toEqual(\n            'Cannot start training because another fit() call is ongoing.');\n    await firstFit;\n  });\n\n  it('Stop Sequential.fit() using non-class callback function', async () => {\n    const batchSize = 5;\n    const inputSize = 4;\n    const xs = ones([batchSize, inputSize]);\n    const ys = ones([batchSize, 1]);\n    const denseLayer1 = tfl.layers.dense({units: 3, inputShape: [inputSize]});\n    const denseLayer2 = tfl.layers.dense({units: 1});\n    const model = tfl.sequential({layers: [denseLayer1, denseLayer2]});\n    model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n\n    let numEpochsDone = 0;\n    const epochs = 8;\n    const stopAfterEpoch = 3;\n    let history = await model.fit(xs, ys, {\n      epochs,\n      callbacks: {\n        onEpochEnd: async (epoch, logs) => {\n          numEpochsDone++;\n          if (epoch === stopAfterEpoch) {\n            model.stopTraining = true;\n          }\n        }\n      }\n    });\n    expect(numEpochsDone).toEqual(stopAfterEpoch + 1);\n    expect(history.history.loss.length).toEqual(stopAfterEpoch + 1);\n\n    // Check that model.fit can still be called after force stopping.\n    history = await model.fit(xs, ys, {epochs: 2});\n    expect(history.history.loss.length).toEqual(2);\n  });\n\n  it('Calling evaluate before compile leads to error', () => {\n    const batchSize = 5;\n    const inputSize = 4;\n    const denseLayer1 = tfl.layers.dense({units: 3, inputShape: [inputSize]});\n    const model = tfl.sequential({layers: [denseLayer1]});\n    const xs = ones([batchSize, inputSize]);\n    const ys = ones([batchSize, 1]);\n    expect(() => model.evaluate(xs, ys))\n        .toThrowError(/needs to be compiled before/);\n  });\n\n  it('compile() and evaluate()', () => {\n    const batchSize = 5;\n    const inputSize = 4;\n    const xs = ones([batchSize, inputSize]);\n    const ys = ones([batchSize, 1]);\n    const denseLayer1 = tfl.layers.dense({\n      units: 3,\n      useBias: false,\n      kernelInitializer: 'ones',\n      inputShape: [inputSize]\n    });\n    const denseLayer2 =\n        tfl.layers.dense({units: 1, useBias: false, kernelInitializer: 'ones'});\n    const model = tfl.sequential({layers: [denseLayer1, denseLayer2]});\n    model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n    const losses = model.evaluate(xs, ys, {batchSize}) as Scalar;\n    expectTensorsClose(losses, scalar(121));\n  });\n\n  it('getConfig returns an Array', () => {\n    const model = tfl.sequential({layers});\n    const config = model.getConfig();\n    expect(Array.isArray(config.layers)).toEqual(true);\n    expect(config.layers.length).toEqual(layers.length);\n  });\n});\n\n// Fake models.\n\nconst fakeSequentialModel: ModelAndWeightsConfig = {\n  modelTopology: {\n    'class_name': 'Model',\n    'keras_version': '2.0.7',\n    'config': {\n      'layers': [\n        {\n          'class_name': 'InputLayer',\n          'config': {\n            'dtype': 'float32',\n            'batch_input_shape': [null, 32],\n            'name': 'input_6',\n            'sparse': false\n          },\n          'inbound_nodes': [],\n          'name': 'input_6'\n        },\n        {\n          'class_name': 'Dense',\n          'config': {\n            'units': 32,\n            'bias_constraint': null,\n            'use_bias': true,\n            'kernel_initializer': {\n              'class_name': 'VarianceScaling',\n              'config': {\n                'distribution': 'uniform',\n                'scale': 1,\n                'seed': null,\n                'mode': 'fan_avg'\n              }\n            },\n            'activation': 'linear',\n            'bias_regularizer': null,\n            'activity_regularizer': null,\n            'trainable': true,\n            'kernel_constraint': null,\n            'kernel_regularizer': null,\n            'name': 'dense_6',\n            'bias_initializer': {'class_name': 'Zeros', 'config': {}}\n          },\n          'inbound_nodes': [[['input_6', 0, 0, {}]]],\n          'name': 'dense_6'\n        }\n      ],\n      'input_layers': [['input_6', 0, 0]],\n      'output_layers': [['dense_6', 0, 0]],\n      'name': 'test'\n    },\n    'backend': 'tensorflow'\n  }\n};\n\nconst fakeSequentialModelWithNestedContainer: ModelAndWeightsConfig = {\n  modelTopology: {\n    'keras_version': '2.2.4',\n    'backend': 'tensorflow',\n    'model_config': {\n      'class_name': 'Model',\n      'config': {\n        'name': 'model_1',\n        'layers': [\n          {\n            'name': 'dense_1_input',\n            'class_name': 'InputLayer',\n            'config': {\n              'batch_input_shape': [null, 4],\n              'dtype': 'float32',\n              'sparse': false,\n              'name': 'dense_1_input'\n            },\n            'inbound_nodes': []\n          },\n          {\n            'name': 'dense_1',\n            'class_name': 'Dense',\n            'config': {\n              'name': 'dense_1',\n              'trainable': true,\n              'batch_input_shape': [null, 4],\n              'dtype': 'float32',\n              'units': 2,\n              'activation': 'relu',\n              'use_bias': true,\n              'kernel_initializer': {\n                'class_name': 'VarianceScaling',\n                'config': {\n                  'scale': 1.0,\n                  'mode': 'fan_avg',\n                  'distribution': 'uniform',\n                  'seed': null\n                }\n              },\n              'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n              'kernel_regularizer': null,\n              'bias_regularizer': null,\n              'activity_regularizer': null,\n              'kernel_constraint': null,\n              'bias_constraint': null\n            },\n            'inbound_nodes': [[['dense_1_input', 0, 0, {}]]]\n          },\n          {\n            'name': 'sequential_2',\n            'class_name': 'Sequential',\n            'config': {\n              'name': 'sequential_2',\n              'layers': [{\n                'class_name': 'Dense',\n                'config': {\n                  'name': 'dense_2',\n                  'trainable': true,\n                  'batch_input_shape': [null, 2],\n                  'dtype': 'float32',\n                  'units': 1,\n                  'activation': 'softmax',\n                  'use_bias': true,\n                  'kernel_initializer': {\n                    'class_name': 'VarianceScaling',\n                    'config': {\n                      'scale': 1.0,\n                      'mode': 'fan_avg',\n                      'distribution': 'uniform',\n                      'seed': null\n                    }\n                  },\n                  'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n                  'kernel_regularizer': null,\n                  'bias_regularizer': null,\n                  'activity_regularizer': null,\n                  'kernel_constraint': null,\n                  'bias_constraint': null\n                }\n              }]\n            },\n            'inbound_nodes': [[['dense_1', 0, 0, {}]]]\n          }\n        ],\n        'input_layers': [['dense_1_input', 0, 0]],\n        'output_layers': [['sequential_2', 1, 0]]\n      }\n    }\n  }\n};\n\nconst fakeSequentialModelFromHDF5: ModelAndWeightsConfig = {\n  modelTopology: {\n    'backend': 'tensorflow',\n    'keras_version': '2.1.4',\n    'model_config': {\n      'class_name': 'Sequential',\n      'config': [\n        {\n          'class_name': 'Dense',\n          'config': {\n            'kernel_initializer': {\n              'class_name': 'VarianceScaling',\n              'config': {\n                'distribution': 'uniform',\n                'scale': 1.0,\n                'seed': null,\n                'mode': 'fan_avg'\n              }\n            },\n            'name': 'dense_1',\n            'kernel_constraint': null,\n            'bias_regularizer': null,\n            'bias_constraint': null,\n            'dtype': 'float32',\n            'activation': 'relu',\n            'trainable': true,\n            'kernel_regularizer': null,\n            'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n            'units': 2,\n            'batch_input_shape': [null, 10],\n            'use_bias': true,\n            'activity_regularizer': null\n          }\n        },\n        {\n          'class_name': 'Dense',\n          'config': {\n            'kernel_initializer': {\n              'class_name': 'VarianceScaling',\n              'config': {\n                'distribution': 'uniform',\n                'scale': 1.0,\n                'seed': null,\n                'mode': 'fan_avg'\n              }\n            },\n            'name': 'dense_2',\n            'kernel_constraint': null,\n            'bias_regularizer': null,\n            'bias_constraint': null,\n            'activation': 'sigmoid',\n            'trainable': true,\n            'kernel_regularizer': null,\n            'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n            'units': 1,\n            'use_bias': true,\n            'activity_regularizer': null\n          }\n        }\n      ]\n    },\n  }\n};\n\nconst fakeNonArrayConfigSequentialModelFromHDF5: ModelAndWeightsConfig = {\n  modelTopology: {\n    'backend': 'tensorflow',\n    'keras_version': '2.1.6-tf',\n    'model_config': {\n      'class_name': 'Sequential',\n      'config': {\n        'name': 'Foo123Sequential',\n        'layers': [\n          {\n            'class_name': 'Dense',\n            'config': {\n              'kernel_initializer': {\n                'class_name': 'VarianceScaling',\n                'config': {\n                  'distribution': 'uniform',\n                  'scale': 1.0,\n                  'seed': null,\n                  'mode': 'fan_avg'\n                }\n              },\n              'name': 'dense_1',\n              'kernel_constraint': null,\n              'bias_regularizer': null,\n              'bias_constraint': null,\n              'dtype': 'float32',\n              'activation': 'relu',\n              'trainable': true,\n              'kernel_regularizer': null,\n              'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n              'units': 2,\n              'batch_input_shape': [null, 10],\n              'use_bias': true,\n              'activity_regularizer': null\n            }\n          },\n          {\n            'class_name': 'Dense',\n            'config': {\n              'kernel_initializer': {\n                'class_name': 'VarianceScaling',\n                'config': {\n                  'distribution': 'uniform',\n                  'scale': 1.0,\n                  'seed': null,\n                  'mode': 'fan_avg'\n                }\n              },\n              'name': 'dense_2',\n              'kernel_constraint': null,\n              'bias_regularizer': null,\n              'bias_constraint': null,\n              'activation': 'sigmoid',\n              'trainable': true,\n              'kernel_regularizer': null,\n              'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n              'units': 1,\n              'use_bias': true,\n              'activity_regularizer': null\n            }\n          }\n        ]\n      },\n    }\n  }\n};\n\n// TODO(bileschi): Uncomment once we are able to load a model of this size.\n/*\nconst fakeRNNModel: ModelAndWeightsConfig = {\n  modelTopology: {\n    'keras_version': '2.1.5',\n    'training_config': {\n      'optimizer_config': {\n        'config': {\n          'rho': 0.8999999761581421,\n          'epsilon': 1e-07,\n          'lr': 0.009999999776482582,\n          'decay': 0.0\n        },\n        'class_name': 'RMSprop'\n      },\n      'loss': 'categorical_crossentropy',\n      'metrics': ['acc'],\n      'sample_weight_mode': null,\n      'loss_weights': null\n    },\n    'backend': 'tensorflow',\n    'model_config': {\n      'config': [\n        {\n          'config': {\n            'unroll': false,\n            'name': 'lstm_9',\n            'trainable': true,\n            'implementation': 1,\n            'recurrent_constraint': null,\n            'stateful': false,\n            'return_sequences': false,\n            'recurrent_initializer': {\n              'config': {'gain': 1.0, 'seed': null},\n              'class_name': 'Orthogonal'\n            },\n            'bias_regularizer': null,\n            'kernel_constraint': null,\n            'dtype': 'float32',\n            'bias_initializer': {'config': {}, 'class_name': 'Zeros'},\n            'kernel_regularizer': null,\n            'go_backwards': false,\n            'units': 256,\n            'recurrent_regularizer': null,\n            'kernel_initializer': {\n              'config': {\n                'distribution': 'uniform',\n                'scale': 1.0,\n                'mode': 'fan_avg',\n                'seed': null\n              },\n              'class_name': 'VarianceScaling'\n            },\n            'use_bias': true,\n            'bias_constraint': null,\n            'activation': 'tanh',\n            'recurrent_activation': 'hard_sigmoid',\n            'recurrent_dropout': 0.0,\n            'return_state': false,\n            'dropout': 0.0,\n            'batch_input_shape': [null, 10, 393],\n            'activity_regularizer': null,\n            'unit_forget_bias': true\n          },\n          'class_name': 'LSTM'\n        },\n        {\n          'config': {\n            'rate': 0.2,\n            'name': 'dropout_4',\n            'noise_shape': null,\n            'seed': null,\n            'trainable': true\n          },\n          'class_name': 'Dropout'\n        },\n        {\n          'config': {\n            'name': 'dense_4',\n            'trainable': true,\n            'use_bias': true,\n            'bias_constraint': null,\n            'units': 393,\n            'kernel_initializer': {\n              'config': {\n                'distribution': 'uniform',\n                'scale': 1.0,\n                'mode': 'fan_avg',\n                'seed': null\n              },\n              'class_name': 'VarianceScaling'\n            },\n            'activation': 'linear',\n            'bias_regularizer': null,\n            'kernel_constraint': null,\n            'bias_initializer': {'config': {}, 'class_name': 'Zeros'},\n            'activity_regularizer': null,\n            'kernel_regularizer': null\n          },\n          'class_name': 'Dense'\n        },\n        {\n          'config': {\n            'name': 'activation_4',\n            'trainable': true,\n            'activation': 'softmax'\n          },\n          'class_name': 'Activation'\n        }\n      ],\n      'class_name': 'Sequential'\n    }\n  }\n} */\n\nconst fakeNonSequentialModel: ModelAndWeightsConfig = {\n  modelTopology: {\n    'backend': 'tensorflow',\n    'class_name': 'Model',\n    'keras_version': '2.1.1',\n    'config': {\n      'name': 'mnist',\n      'output_layers': [['dense_16', 0, 0]],\n      'layers': [\n        {\n          'class_name': 'InputLayer',\n          'name': 'input_6',\n          'inbound_nodes': [],\n          'config': {\n            'batch_input_shape': [null, 28, 28, 1],\n            'sparse': false,\n            'name': 'input_6',\n            'dtype': 'float32'\n          }\n        },\n        {\n          'class_name': 'Conv2D',\n          'name': 'conv2d_15',\n          'inbound_nodes': [[['input_6', 0, 0, {}]]],\n          'config': {\n            'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n            'padding': 'valid',\n            'use_bias': true,\n            'strides': [1, 1],\n            'bias_regularizer': null,\n            'activity_regularizer': null,\n            'kernel_initializer': {\n              'class_name': 'VarianceScaling',\n              'config': {\n                'distribution': 'uniform',\n                'scale': 1.0,\n                'mode': 'fan_avg',\n                'seed': null\n              }\n            },\n            'data_format': 'channels_last',\n            'dilation_rate': [1, 1],\n            'kernel_constraint': null,\n            'kernel_regularizer': null,\n            'kernel_size': [3, 3],\n            'activation': 'relu',\n            'name': 'conv2d_15',\n            'filters': 32,\n            'trainable': true,\n            'bias_constraint': null\n          }\n        },\n        {\n          'class_name': 'Conv2D',\n          'name': 'conv2d_16',\n          'inbound_nodes': [[['conv2d_15', 0, 0, {}]]],\n          'config': {\n            'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n            'padding': 'valid',\n            'use_bias': true,\n            'strides': [1, 1],\n            'bias_regularizer': null,\n            'activity_regularizer': null,\n            'kernel_initializer': {\n              'class_name': 'VarianceScaling',\n              'config': {\n                'distribution': 'uniform',\n                'scale': 1.0,\n                'mode': 'fan_avg',\n                'seed': null\n              }\n            },\n            'data_format': 'channels_last',\n            'dilation_rate': [1, 1],\n            'kernel_constraint': null,\n            'kernel_regularizer': null,\n            'kernel_size': [3, 3],\n            'activation': 'relu',\n            'name': 'conv2d_16',\n            'filters': 64,\n            'trainable': true,\n            'bias_constraint': null\n          }\n        },\n        {\n          'class_name': 'MaxPooling2D',\n          'name': 'max_pooling2d_8',\n          'inbound_nodes': [[['conv2d_16', 0, 0, {}]]],\n          'config': {\n            'padding': 'valid',\n            'strides': [2, 2],\n            'pool_size': [2, 2],\n            'data_format': 'channels_last',\n            'name': 'max_pooling2d_8',\n            'trainable': true\n          }\n        },\n        {\n          'class_name': 'Dropout',\n          'name': 'dropout_15',\n          'inbound_nodes': [[['max_pooling2d_8', 0, 0, {}]]],\n          'config': {\n            'rate': 0.25,\n            'noise_shape': null,\n            'name': 'dropout_15',\n            'trainable': true,\n            'seed': null\n          }\n        },\n        {\n          'class_name': 'Flatten',\n          'name': 'flatten_8',\n          'inbound_nodes': [[['dropout_15', 0, 0, {}]]],\n          'config': {'name': 'flatten_8', 'trainable': true}\n        },\n        {\n          'class_name': 'Dense',\n          'name': 'dense_15',\n          'inbound_nodes': [[['flatten_8', 0, 0, {}]]],\n          'config': {\n            'use_bias': true,\n            'bias_regularizer': null,\n            'kernel_initializer': {\n              'class_name': 'VarianceScaling',\n              'config': {\n                'distribution': 'uniform',\n                'scale': 1.0,\n                'mode': 'fan_avg',\n                'seed': null\n              }\n            },\n            'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n            'kernel_constraint': null,\n            'bias_constraint': null,\n            'kernel_regularizer': null,\n            'activation': 'relu',\n            'name': 'dense_15',\n            'activity_regularizer': null,\n            'trainable': true,\n            'units': 128\n          }\n        },\n        {\n          'class_name': 'Dropout',\n          'name': 'dropout_16',\n          'inbound_nodes': [[['dense_15', 0, 0, {}]]],\n          'config': {\n            'rate': 0.5,\n            'noise_shape': null,\n            'name': 'dropout_16',\n            'trainable': true,\n            'seed': null\n          }\n        },\n        {\n          'class_name': 'Dense',\n          'name': 'dense_16',\n          'inbound_nodes': [[['dropout_16', 0, 0, {}]]],\n          'config': {\n            'use_bias': true,\n            'bias_regularizer': null,\n            'kernel_initializer': {\n              'class_name': 'VarianceScaling',\n              'config': {\n                'distribution': 'uniform',\n                'scale': 1.0,\n                'mode': 'fan_avg',\n                'seed': null\n              }\n            },\n            'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n            'kernel_constraint': null,\n            'bias_constraint': null,\n            'kernel_regularizer': null,\n            'activation': 'softmax',\n            'name': 'dense_16',\n            'activity_regularizer': null,\n            'trainable': true,\n            'units': 10\n          }\n        }\n      ],\n      'input_layers': [['input_6', 0, 0]]\n    }\n  }\n};\n\nconst fakeMnistModel: ModelAndWeightsConfig = {\n  modelTopology: {\n    'backend': 'tensorflow',\n    'config': [\n      {\n        'config': {\n          'kernel_size': [3, 3],\n          'use_bias': true,\n          'batch_input_shape': [null, 28, 28, 1],\n          'filters': 32,\n          'kernel_regularizer': null,\n          'dilation_rate': [1, 1],\n          'strides': [1, 1],\n          'padding': 'valid',\n          'bias_constraint': null,\n          'kernel_constraint': null,\n          'data_format': 'channels_last',\n          'trainable': true,\n          'activation': 'relu',\n          'dtype': 'float32',\n          'bias_initializer': {'config': {}, 'class_name': 'Zeros'},\n          'bias_regularizer': null,\n          'name': 'conv2d_1',\n          'kernel_initializer': {\n            'config': {\n              'scale': 1.0,\n              'mode': 'fan_avg',\n              'seed': null,\n              'distribution': 'uniform'\n            },\n            'class_name': 'VarianceScaling'\n          },\n          'activity_regularizer': null\n        },\n        'class_name': 'Conv2D'\n      },\n      {\n        'config': {\n          'kernel_size': [3, 3],\n          'use_bias': true,\n          'filters': 64,\n          'kernel_regularizer': null,\n          'dilation_rate': [1, 1],\n          'strides': [1, 1],\n          'padding': 'valid',\n          'bias_constraint': null,\n          'data_format': 'channels_last',\n          'trainable': true,\n          'activation': 'relu',\n          'kernel_constraint': null,\n          'bias_initializer': {'config': {}, 'class_name': 'Zeros'},\n          'bias_regularizer': null,\n          'name': 'conv2d_2',\n          'kernel_initializer': {\n            'config': {\n              'scale': 1.0,\n              'mode': 'fan_avg',\n              'seed': null,\n              'distribution': 'uniform'\n            },\n            'class_name': 'VarianceScaling'\n          },\n          'activity_regularizer': null\n        },\n        'class_name': 'Conv2D'\n      },\n      {\n        'config': {\n          'strides': [2, 2],\n          'padding': 'valid',\n          'pool_size': [2, 2],\n          'data_format': 'channels_last',\n          'trainable': true,\n          'name': 'max_pooling2d_1'\n        },\n        'class_name': 'MaxPooling2D'\n      },\n      {\n        'config': {\n          'seed': null,\n          'name': 'dropout_1',\n          'trainable': true,\n          'noise_shape': null,\n          'rate': 0.25\n        },\n        'class_name': 'Dropout'\n      },\n      {\n        'config': {'name': 'flatten_1', 'trainable': true},\n        'class_name': 'Flatten'\n      },\n      {\n        'config': {\n          'use_bias': true,\n          'units': 128,\n          'bias_initializer': {'config': {}, 'class_name': 'Zeros'},\n          'kernel_regularizer': null,\n          'bias_regularizer': null,\n          'trainable': true,\n          'activation': 'relu',\n          'bias_constraint': null,\n          'kernel_constraint': null,\n          'name': 'dense_1',\n          'kernel_initializer': {\n            'config': {\n              'scale': 1.0,\n              'mode': 'fan_avg',\n              'seed': null,\n              'distribution': 'uniform'\n            },\n            'class_name': 'VarianceScaling'\n          },\n          'activity_regularizer': null\n        },\n        'class_name': 'Dense'\n      },\n      {\n        'config': {\n          'seed': null,\n          'name': 'dropout_2',\n          'trainable': true,\n          'noise_shape': null,\n          'rate': 0.5\n        },\n        'class_name': 'Dropout'\n      },\n      {\n        'config': {\n          'use_bias': true,\n          'units': 10,\n          'bias_initializer': {'config': {}, 'class_name': 'Zeros'},\n          'kernel_regularizer': null,\n          'bias_regularizer': null,\n          'trainable': true,\n          'activation': 'softmax',\n          'bias_constraint': null,\n          'kernel_constraint': null,\n          'name': 'dense_2',\n          'kernel_initializer': {\n            'config': {\n              'scale': 1.0,\n              'mode': 'fan_avg',\n              'seed': null,\n              'distribution': 'uniform'\n            },\n            'class_name': 'VarianceScaling'\n          },\n          'activity_regularizer': null\n        },\n        'class_name': 'Dense'\n      }\n    ],\n    'keras_version': '2.1.1',\n    'class_name': 'Sequential'\n  }\n};\n\nconst fakeRoundtripModel: ModelAndWeightsConfig = {\n  modelTopology: {\n    'backend': 'tensorflow',\n    'class_name': 'Model',\n    'keras_version': '2.1.1',\n    'config': {\n      'name': 'mnist',\n      'output_layers': [['dense_16', 0, 0]],\n      'layers': [\n        {\n          'class_name': 'InputLayer',\n          'name': 'input_6',\n          'inbound_nodes': [],\n          'config': {\n            'batch_input_shape': [null, 28, 28, 1],\n            'sparse': false,\n            'name': 'input_6',\n            'dtype': 'float32'\n          }\n        },\n        {\n          'class_name': 'Conv2D',\n          'name': 'conv2d_15',\n          'inbound_nodes': [[['input_6', 0, 0, {}]]],\n          'config': {\n            'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n            'padding': 'valid',\n            'use_bias': true,\n            'strides': [1, 1],\n            'bias_regularizer': null,\n            'activity_regularizer': null,\n            'kernel_initializer': {\n              'class_name': 'VarianceScaling',\n              'config': {\n                'distribution': 'uniform',\n                'scale': 1.0,\n                'mode': 'fan_avg',\n                'seed': null\n              }\n            },\n            'data_format': 'channels_last',\n            'dilation_rate': [1, 1],\n            'kernel_constraint': null,\n            'kernel_regularizer': null,\n            'kernel_size': [3, 3],\n            'activation': 'relu',\n            'name': 'conv2d_15',\n            'filters': 32,\n            'trainable': true,\n            'bias_constraint': null\n          }\n        },\n        {\n          'class_name': 'Conv2D',\n          'name': 'conv2d_16',\n          'inbound_nodes': [[['conv2d_15', 0, 0, {}]]],\n          'config': {\n            'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n            'padding': 'valid',\n            'use_bias': true,\n            'strides': [1, 1],\n            'bias_regularizer': null,\n            'activity_regularizer': null,\n            'kernel_initializer': {\n              'class_name': 'VarianceScaling',\n              'config': {\n                'distribution': 'uniform',\n                'scale': 1.0,\n                'mode': 'fan_avg',\n                'seed': null\n              }\n            },\n            'data_format': 'channels_last',\n            'dilation_rate': [1, 1],\n            'kernel_constraint': null,\n            'kernel_regularizer': null,\n            'kernel_size': [3, 3],\n            'activation': 'relu',\n            'name': 'conv2d_16',\n            'filters': 64,\n            'trainable': true,\n            'bias_constraint': null\n          }\n        },\n        {\n          'class_name': 'MaxPooling2D',\n          'name': 'max_pooling2d_8',\n          'inbound_nodes': [[['conv2d_16', 0, 0, {}]]],\n          'config': {\n            'padding': 'valid',\n            'strides': [2, 2],\n            'pool_size': [2, 2],\n            'data_format': 'channels_last',\n            'name': 'max_pooling2d_8',\n            'trainable': true\n          }\n        },\n        {\n          'class_name': 'Dropout',\n          'name': 'dropout_15',\n          'inbound_nodes': [[['max_pooling2d_8', 0, 0, {}]]],\n          'config': {\n            'rate': 0.25,\n            'noise_shape': null,\n            'name': 'dropout_15',\n            'trainable': true,\n            'seed': null\n          }\n        },\n        {\n          'class_name': 'Flatten',\n          'name': 'flatten_8',\n          'inbound_nodes': [[['dropout_15', 0, 0, {}]]],\n          'config': {'name': 'flatten_8', 'trainable': true}\n        },\n        {\n          'class_name': 'Dense',\n          'name': 'dense_15',\n          'inbound_nodes': [[['flatten_8', 0, 0, {}]]],\n          'config': {\n            'use_bias': true,\n            'bias_regularizer': null,\n            'kernel_initializer': {\n              'class_name': 'VarianceScaling',\n              'config': {\n                'distribution': 'uniform',\n                'scale': 1.0,\n                'mode': 'fan_avg',\n                'seed': null\n              }\n            },\n            'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n            'kernel_constraint': null,\n            'bias_constraint': null,\n            'kernel_regularizer': null,\n            'activation': 'relu',\n            'name': 'dense_15',\n            'activity_regularizer': null,\n            'trainable': true,\n            'units': 128\n          }\n        },\n        {\n          'class_name': 'Dropout',\n          'name': 'dropout_16',\n          'inbound_nodes': [[['dense_15', 0, 0, {}]]],\n          'config': {\n            'rate': 0.5,\n            'noise_shape': null,\n            'name': 'dropout_16',\n            'trainable': true,\n            'seed': null\n          }\n        },\n        {\n          'class_name': 'Dense',\n          'name': 'dense_16',\n          'inbound_nodes': [[['dropout_16', 0, 0, {}]]],\n          'config': {\n            'use_bias': true,\n            'bias_regularizer': null,\n            'kernel_initializer': {\n              'class_name': 'VarianceScaling',\n              'config': {\n                'distribution': 'uniform',\n                'scale': 1.0,\n                'mode': 'fan_avg',\n                'seed': null\n              }\n            },\n            'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n            'kernel_constraint': null,\n            'bias_constraint': null,\n            'kernel_regularizer': null,\n            'activation': 'softmax',\n            'name': 'dense_16',\n            'activity_regularizer': null,\n            'trainable': true,\n            'units': 10\n          }\n        }\n      ],\n      'input_layers': [['input_6', 0, 0]]\n    }\n  }\n};\n\ndescribeMathCPU('Functional-model saving and loading', () => {\n  it('Save-load round trip: multi-node layer', async () => {\n    const input1 = tfl.input({shape: [2, 3]});\n    const input2 = tfl.input({shape: [3, 2]});\n\n    const reshape = tfl.layers.reshape({targetShape: [6]});\n    const output1 = reshape.apply(input1) as tfl.SymbolicTensor;\n    const output2 = reshape.apply(input2) as tfl.SymbolicTensor;\n\n    const model1 =\n        tfl.model({inputs: [input1, input2], outputs: [output1, output2]});\n\n    const model1JSON = model1.toJSON(null, false) as PyJsonDict;\n    const model2 = await modelFromJSON({modelTopology: model1JSON});\n\n    expect(model2.inputs.length).toEqual(model1.inputs.length);\n    expect(model2.inputs[0].shape).toEqual(model1.inputs[0].shape);\n    expect(model2.inputs[1].shape).toEqual(model1.inputs[1].shape);\n    expect(model2.outputs.length).toEqual(model1.outputs.length);\n    expect(model2.outputs[0].shape).toEqual(model1.outputs[0].shape);\n    expect(model2.outputs[1].shape).toEqual(model1.outputs[1].shape);\n    expect(model2.toJSON(null, false)).toEqual(model1JSON);\n\n    const x1 = randomNormal([1, 2, 3]);\n    const x2 = randomNormal([1, 3, 2]);\n    const ys1 = model1.apply([x1, x2]) as Tensor[];\n\n    const ys2 = model2.apply([x1, x2]) as Tensor[];\n\n    expectTensorsClose(ys1[0], ys2[0]);\n    expectTensorsClose(ys1[1], ys2[1]);\n  });\n\n  it('Save-load round trip: layer with loopy invocation', async () => {\n    const input = tfl.layers.input({shape: [1]});\n    const dense = tfl.layers.dense(\n        {units: 1, kernelInitializer: 'ones', biasInitializer: 'ones'});\n    let output = dense.apply(input) as tfl.SymbolicTensor;\n    for (let i = 0; i < 3; ++i) {\n      output = dense.apply(output) as tfl.SymbolicTensor;\n    }\n    const model1 = tfl.model({inputs: input, outputs: output});\n\n    const xs = ones([10, 1]);\n    const ys1 = model1.predict(xs) as Tensor;\n\n    const model1JSON = model1.toJSON(null, false) as PyJsonDict;\n    const model2 = await modelFromJSON({modelTopology: model1JSON});\n    expect(model2.toJSON(null, false)).toEqual(model1JSON);\n\n    const ys2 = model2.predict(xs) as Tensor;\n    expectTensorsClose(ys1, ys2);\n  });\n\n  it('Deserialization with truncated_normal', async () => {\n    // From https://github.com/tensorflow/tfjs/issues/146\n    const modelJSON = JSON.parse(\n        // tslint:disable-next-line:max-line-length\n        `{\"modelTopology\":{\"class_name\":\"Sequential\",\"config\":[{\"class_name\":\"Dense\",\"config\":{\"units\":1,\"activation\":\"linear\",\"use_bias\":true,\"kernel_initializer\":{\"class_name\":\"VarianceScaling\",\"config\":{\"scale\":1,\"mode\":\"fan_avg\",\"distribution\":\"truncated_normal\",\"seed\":null}},\"bias_initializer\":{\"class_name\":\"Zeros\",\"config\":{}},\"kernel_regularizer\":null,\"bias_regularizer\":null,\"activity_regularizer\":null,\"kernel_constraint\":null,\"bias_constraint\":null,\"name\":\"dense_Dense1\",\"trainable\":true,\"batch_input_shape\":[null,1],\"dtype\":\"float32\"}}],\"keras_version\":\"tfjs-layers 1.0.2\",\"backend\":\"tensor_flow.js\"},\"weightsManifest\":[{\"paths\":[\"weights.bin\"],\"weights\":[{\"name\":\"dense_Dense1/kernel\",\"shape\":[1,1],\"dtype\":\"float32\"},{\"name\":\"dense_Dense1/bias\",\"shape\":[1],\"dtype\":\"float32\"}]}]}`);\n    const modelTopology = modelJSON.modelTopology;\n    expect(() => modelFromJSON({modelTopology})).not.toThrow();\n  });\n\n  it('Load attention model', async () => {\n    // From https://github.com/tensorflow/tfjs/issues/794\n    const modelJSON = JSON.parse(\n        // tslint:disable-next-line:max-line-length\n        `{\"modelTopology\":{\"keras_version\":\"2.1.6\",\"backend\":\"tensorflow\",\"model_config\":{\"class_name\":\"Model\",\"config\":{\"input_layers\":[[\"input_1\",0,0],[\"s0\",0,0],[\"c0\",0,0]],\"name\":\"model_1\",\"layers\":[{\"class_name\":\"InputLayer\",\"inbound_nodes\":[],\"name\":\"input_1\",\"config\":{\"dtype\":\"float32\",\"name\":\"input_1\",\"sparse\":false,\"batch_input_shape\":[null,30,38]}},{\"class_name\":\"InputLayer\",\"inbound_nodes\":[],\"name\":\"s0\",\"config\":{\"dtype\":\"float32\",\"name\":\"s0\",\"sparse\":false,\"batch_input_shape\":[null,64]}},{\"class_name\":\"Bidirectional\",\"inbound_nodes\":[[[\"input_1\",0,0,{}]]],\"name\":\"bidirectional_1\",\"config\":{\"trainable\":true,\"name\":\"bidirectional_1\",\"merge_mode\":\"concat\",\"layer\":{\"class_name\":\"LSTM\",\"config\":{\"stateful\":false,\"units\":32,\"activation\":\"tanh\",\"recurrent_activation\":\"hard_sigmoid\",\"dropout\":0,\"recurrent_dropout\":0,\"use_bias\":true,\"trainable\":true,\"recurrent_initializer\":{\"class_name\":\"Orthogonal\",\"config\":{\"seed\":null,\"gain\":1}},\"bias_constraint\":null,\"unroll\":false,\"kernel_initializer\":{\"class_name\":\"VarianceScaling\",\"config\":{\"seed\":null,\"distribution\":\"uniform\",\"mode\":\"fan_avg\",\"scale\":1}},\"unit_forget_bias\":true,\"bias_initializer\":{\"class_name\":\"Zeros\",\"config\":{}},\"kernel_constraint\":null,\"activity_regularizer\":null,\"return_sequences\":true,\"recurrent_constraint\":null,\"recurrent_regularizer\":null,\"bias_regularizer\":null,\"go_backwards\":false,\"implementation\":1,\"name\":\"lstm_2\",\"kernel_regularizer\":null,\"return_state\":false}}}},{\"class_name\":\"RepeatVector\",\"inbound_nodes\":[[[\"s0\",0,0,{}]],[[\"lstm_1\",0,0,{}]],[[\"lstm_1\",1,0,{}]],[[\"lstm_1\",2,0,{}]],[[\"lstm_1\",3,0,{}]],[[\"lstm_1\",4,0,{}]],[[\"lstm_1\",5,0,{}]],[[\"lstm_1\",6,0,{}]],[[\"lstm_1\",7,0,{}]],[[\"lstm_1\",8,0,{}]]],\"name\":\"repeat_vector_1\",\"config\":{\"n\":30,\"trainable\":true,\"name\":\"repeat_vector_1\"}},{\"class_name\":\"Concatenate\",\"inbound_nodes\":[[[\"bidirectional_1\",0,0,{}],[\"repeat_vector_1\",0,0,{}]],[[\"bidirectional_1\",0,0,{}],[\"repeat_vector_1\",1,0,{}]],[[\"bidirectional_1\",0,0,{}],[\"repeat_vector_1\",2,0,{}]],[[\"bidirectional_1\",0,0,{}],[\"repeat_vector_1\",3,0,{}]],[[\"bidirectional_1\",0,0,{}],[\"repeat_vector_1\",4,0,{}]],[[\"bidirectional_1\",0,0,{}],[\"repeat_vector_1\",5,0,{}]],[[\"bidirectional_1\",0,0,{}],[\"repeat_vector_1\",6,0,{}]],[[\"bidirectional_1\",0,0,{}],[\"repeat_vector_1\",7,0,{}]],[[\"bidirectional_1\",0,0,{}],[\"repeat_vector_1\",8,0,{}]],[[\"bidirectional_1\",0,0,{}],[\"repeat_vector_1\",9,0,{}]]],\"name\":\"concatenate_1\",\"config\":{\"trainable\":true,\"name\":\"concatenate_1\",\"axis\":-1}},{\"class_name\":\"Dense\",\"inbound_nodes\":[[[\"concatenate_1\",0,0,{}]],[[\"concatenate_1\",1,0,{}]],[[\"concatenate_1\",2,0,{}]],[[\"concatenate_1\",3,0,{}]],[[\"concatenate_1\",4,0,{}]],[[\"concatenate_1\",5,0,{}]],[[\"concatenate_1\",6,0,{}]],[[\"concatenate_1\",7,0,{}]],[[\"concatenate_1\",8,0,{}]],[[\"concatenate_1\",9,0,{}]]],\"name\":\"dense_1\",\"config\":{\"bias_constraint\":null,\"kernel_constraint\":null,\"units\":10,\"activity_regularizer\":null,\"use_bias\":true,\"bias_regularizer\":null,\"trainable\":true,\"activation\":\"tanh\",\"name\":\"dense_1\",\"kernel_initializer\":{\"class_name\":\"VarianceScaling\",\"config\":{\"seed\":null,\"distribution\":\"uniform\",\"mode\":\"fan_avg\",\"scale\":1}},\"kernel_regularizer\":null,\"bias_initializer\":{\"class_name\":\"Zeros\",\"config\":{}}}},{\"class_name\":\"Dense\",\"inbound_nodes\":[[[\"dense_1\",0,0,{}]],[[\"dense_1\",1,0,{}]],[[\"dense_1\",2,0,{}]],[[\"dense_1\",3,0,{}]],[[\"dense_1\",4,0,{}]],[[\"dense_1\",5,0,{}]],[[\"dense_1\",6,0,{}]],[[\"dense_1\",7,0,{}]],[[\"dense_1\",8,0,{}]],[[\"dense_1\",9,0,{}]]],\"name\":\"dense_2\",\"config\":{\"bias_constraint\":null,\"kernel_constraint\":null,\"units\":1,\"activity_regularizer\":null,\"use_bias\":true,\"bias_regularizer\":null,\"trainable\":true,\"activation\":\"relu\",\"name\":\"dense_2\",\"kernel_initializer\":{\"class_name\":\"VarianceScaling\",\"config\":{\"seed\":null,\"distribution\":\"uniform\",\"mode\":\"fan_avg\",\"scale\":1}},\"kernel_regularizer\":null,\"bias_initializer\":{\"class_name\":\"Zeros\",\"config\":{}}}},{\"class_name\":\"Activation\",\"inbound_nodes\":[[[\"dense_2\",0,0,{}]],[[\"dense_2\",1,0,{}]],[[\"dense_2\",2,0,{}]],[[\"dense_2\",3,0,{}]],[[\"dense_2\",4,0,{}]],[[\"dense_2\",5,0,{}]],[[\"dense_2\",6,0,{}]],[[\"dense_2\",7,0,{}]],[[\"dense_2\",8,0,{}]],[[\"dense_2\",9,0,{}]]],\"name\":\"attention_weights\",\"config\":{\"trainable\":true,\"activation\":\"softmax\",\"name\":\"attention_weights\"}},{\"class_name\":\"Dot\",\"inbound_nodes\":[[[\"attention_weights\",0,0,{}],[\"bidirectional_1\",0,0,{}]],[[\"attention_weights\",1,0,{}],[\"bidirectional_1\",0,0,{}]],[[\"attention_weights\",2,0,{}],[\"bidirectional_1\",0,0,{}]],[[\"attention_weights\",3,0,{}],[\"bidirectional_1\",0,0,{}]],[[\"attention_weights\",4,0,{}],[\"bidirectional_1\",0,0,{}]],[[\"attention_weights\",5,0,{}],[\"bidirectional_1\",0,0,{}]],[[\"attention_weights\",6,0,{}],[\"bidirectional_1\",0,0,{}]],[[\"attention_weights\",7,0,{}],[\"bidirectional_1\",0,0,{}]],[[\"attention_weights\",8,0,{}],[\"bidirectional_1\",0,0,{}]],[[\"attention_weights\",9,0,{}],[\"bidirectional_1\",0,0,{}]]],\"name\":\"dot_1\",\"config\":{\"trainable\":true,\"name\":\"dot_1\",\"normalize\":false,\"axes\":1}},{\"class_name\":\"InputLayer\",\"inbound_nodes\":[],\"name\":\"c0\",\"config\":{\"dtype\":\"float32\",\"name\":\"c0\",\"sparse\":false,\"batch_input_shape\":[null,64]}},{\"class_name\":\"LSTM\",\"inbound_nodes\":[[[\"dot_1\",0,0,{}],[\"s0\",0,0,{}],[\"c0\",0,0,{}]],[[\"dot_1\",1,0,{}],[\"lstm_1\",0,0,{}],[\"lstm_1\",0,2,{}]],[[\"dot_1\",2,0,{}],[\"lstm_1\",1,0,{}],[\"lstm_1\",1,2,{}]],[[\"dot_1\",3,0,{}],[\"lstm_1\",2,0,{}],[\"lstm_1\",2,2,{}]],[[\"dot_1\",4,0,{}],[\"lstm_1\",3,0,{}],[\"lstm_1\",3,2,{}]],[[\"dot_1\",5,0,{}],[\"lstm_1\",4,0,{}],[\"lstm_1\",4,2,{}]],[[\"dot_1\",6,0,{}],[\"lstm_1\",5,0,{}],[\"lstm_1\",5,2,{}]],[[\"dot_1\",7,0,{}],[\"lstm_1\",6,0,{}],[\"lstm_1\",6,2,{}]],[[\"dot_1\",8,0,{}],[\"lstm_1\",7,0,{}],[\"lstm_1\",7,2,{}]],[[\"dot_1\",9,0,{}],[\"lstm_1\",8,0,{}],[\"lstm_1\",8,2,{}]]],\"name\":\"lstm_1\",\"config\":{\"stateful\":false,\"units\":64,\"activation\":\"tanh\",\"recurrent_activation\":\"hard_sigmoid\",\"dropout\":0,\"recurrent_dropout\":0,\"use_bias\":true,\"trainable\":true,\"recurrent_initializer\":{\"class_name\":\"Orthogonal\",\"config\":{\"seed\":null,\"gain\":1}},\"bias_constraint\":null,\"unroll\":false,\"kernel_initializer\":{\"class_name\":\"VarianceScaling\",\"config\":{\"seed\":null,\"distribution\":\"uniform\",\"mode\":\"fan_avg\",\"scale\":1}},\"unit_forget_bias\":true,\"bias_initializer\":{\"class_name\":\"Zeros\",\"config\":{}},\"kernel_constraint\":null,\"activity_regularizer\":null,\"return_sequences\":false,\"recurrent_constraint\":null,\"recurrent_regularizer\":null,\"bias_regularizer\":null,\"go_backwards\":false,\"implementation\":1,\"name\":\"lstm_1\",\"kernel_regularizer\":null,\"return_state\":true}},{\"class_name\":\"Dense\",\"inbound_nodes\":[[[\"lstm_1\",0,0,{}]],[[\"lstm_1\",1,0,{}]],[[\"lstm_1\",2,0,{}]],[[\"lstm_1\",3,0,{}]],[[\"lstm_1\",4,0,{}]],[[\"lstm_1\",5,0,{}]],[[\"lstm_1\",6,0,{}]],[[\"lstm_1\",7,0,{}]],[[\"lstm_1\",8,0,{}]],[[\"lstm_1\",9,0,{}]]],\"name\":\"dense_3\",\"config\":{\"bias_constraint\":null,\"kernel_constraint\":null,\"units\":11,\"activity_regularizer\":null,\"use_bias\":true,\"bias_regularizer\":null,\"trainable\":true,\"activation\":\"softmax\",\"name\":\"dense_3\",\"kernel_initializer\":{\"class_name\":\"VarianceScaling\",\"config\":{\"seed\":null,\"distribution\":\"uniform\",\"mode\":\"fan_avg\",\"scale\":1}},\"kernel_regularizer\":null,\"bias_initializer\":{\"class_name\":\"Zeros\",\"config\":{}}}}],\"output_layers\":[[\"dense_3\",0,0],[\"dense_3\",1,0],[\"dense_3\",2,0],[\"dense_3\",3,0],[\"dense_3\",4,0],[\"dense_3\",5,0],[\"dense_3\",6,0],[\"dense_3\",7,0],[\"dense_3\",8,0],[\"dense_3\",9,0]]}},\"training_config\":{\"loss\":\"categorical_crossentropy\",\"sample_weight_mode\":null,\"metrics\":[\"accuracy\"],\"optimizer_config\":{\"class_name\":\"Adam\",\"config\":{\"beta_1\":0.8999999761581421,\"decay\":0.009999999776482582,\"beta_2\":0.9990000128746033,\"lr\":0.004999999888241291,\"amsgrad\":false,\"epsilon\":1e-7}},\"loss_weights\":null}},\"weightsManifest\":[{\"paths\":[\"group1-shard1of1\"],\"weights\":[{\"shape\":[38,128],\"dtype\":\"float32\",\"name\":\"bidirectional_1/forward_lstm_2/kernel\"},{\"shape\":[32,128],\"dtype\":\"float32\",\"name\":\"bidirectional_1/forward_lstm_2/recurrent_kernel\"},{\"shape\":[128],\"dtype\":\"float32\",\"name\":\"bidirectional_1/forward_lstm_2/bias\"},{\"shape\":[38,128],\"dtype\":\"float32\",\"name\":\"bidirectional_1/backward_lstm_2/kernel\"},{\"shape\":[32,128],\"dtype\":\"float32\",\"name\":\"bidirectional_1/backward_lstm_2/recurrent_kernel\"},{\"shape\":[128],\"dtype\":\"float32\",\"name\":\"bidirectional_1/backward_lstm_2/bias\"},{\"shape\":[128,10],\"dtype\":\"float32\",\"name\":\"dense_1/kernel\"},{\"shape\":[10],\"dtype\":\"float32\",\"name\":\"dense_1/bias\"},{\"shape\":[10,1],\"dtype\":\"float32\",\"name\":\"dense_2/kernel\"},{\"shape\":[1],\"dtype\":\"float32\",\"name\":\"dense_2/bias\"},{\"shape\":[64,11],\"dtype\":\"float32\",\"name\":\"dense_3/kernel\"},{\"shape\":[11],\"dtype\":\"float32\",\"name\":\"dense_3/bias\"},{\"shape\":[64,256],\"dtype\":\"float32\",\"name\":\"lstm_1/kernel\"},{\"shape\":[64,256],\"dtype\":\"float32\",\"name\":\"lstm_1/recurrent_kernel\"},{\"shape\":[256],\"dtype\":\"float32\",\"name\":\"lstm_1/bias\"}]}]}`);\n    const modelTopology = modelJSON.modelTopology;\n    const model = await modelFromJSON({modelTopology});\n\n    expect(model.inputs.length).toEqual(3);\n    expect(model.inputs[0].shape).toEqual([null, 30, 38]);\n    expect(model.inputs[1].shape).toEqual([null, 64]);\n    expect(model.inputs[2].shape).toEqual([null, 64]);\n    expect(model.outputs.length).toEqual(10);\n    for (const output of model.outputs) {\n      expect(output.shape).toEqual([null, 11]);\n    }\n    expect(convertTsToPythonic(model.getConfig()))\n        .toEqual(modelTopology['model_config']['config']);\n\n    const x = randomNormal([2, 30, 38]);\n    const s = randomNormal([2, 64]);\n    const c = randomNormal([2, 64]);\n    const output = model.predict([x, s, c]) as Tensor[];\n    expect(output.length).toEqual(10);\n  });\n});\n"]}