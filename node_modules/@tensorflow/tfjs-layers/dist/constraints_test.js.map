{"version":3,"file":"constraints_test.js","sourceRoot":"","sources":["../src/constraints_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAEH,gCAAgC;AAEhC,OAAO,EAA0B,QAAQ,EAAC,MAAM,uBAAuB,CAAC;AAExE,OAAO,EAAuB,qBAAqB,EAAE,aAAa,EAAE,mBAAmB,EAAC,MAAM,eAAe,CAAC;AAC9G,OAAO,KAAK,GAAG,MAAM,SAAS,CAAC;AAC/B,OAAO,EAAC,eAAe,EAAE,qBAAqB,EAAE,kBAAkB,EAAC,MAAM,oBAAoB,CAAC;AAE9F,eAAe,CAAC,sBAAsB,EAAE,GAAG,EAAE;IAC3C,IAAI,QAAkB,CAAC;IACvB,UAAU,CAAC,GAAG,EAAE;QACd,QAAQ,GAAG,QAAQ,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;QAChB,MAAM,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC3C,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,kBAAkB,CACd,cAAc,EAAE,QAAQ,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpE,qBAAqB,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;QACjB,MAAM,UAAU,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,kBAAkB,CAAC,cAAc,EAAE,QAAQ,CAAC,IAAI,YAAY,CAAC;YACxC,CAAC,YAAY,EAAE,YAAY,EAAE,CAAC,EAAE,YAAY;YAC5C,CAAC,WAAW,EAAE,WAAW;SAC1B,CAAC,CAAC,CAAC,CAAC;QACxB,qBAAqB,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;QAClB,MAAM,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC;QAC7C,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,kBAAkB,CAAC,cAAc,EAAE,QAAQ,CAAC,IAAI,YAAY,CAAC;YACxC,CAAC,YAAY,GAAG,CAAC,EAAE,YAAY,GAAG,CAAC,EAAE,CAAC;YACtC,YAAY,GAAG,CAAC,EAAE,CAAC,WAAW,GAAG,CAAC,EAAE,WAAW,GAAG,CAAC;SACpD,CAAC,CAAC,CAAC,CAAC;QACxB,qBAAqB,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;QACpB,MAAM,UAAU,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;QAC/C,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,kBAAkB,CAAC,cAAc,EAAE,QAAQ,CAAC,IAAI,YAAY,CAAC;YACxC,CAAC,YAAY,GAAG,CAAC,EAAE,YAAY,GAAG,CAAC,EAAE,CAAC;YACtC,YAAY,GAAG,CAAC,EAAE,CAAC,WAAW,GAAG,CAAC,EAAE,WAAW,GAAG,CAAC;SACpD,CAAC,CAAC,CAAC,CAAC;QACxB,qBAAqB,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,oBAAoB;IACpB,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;QAChB,MAAM,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC3C,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,kBAAkB,CACd,cAAc,EAAE,QAAQ,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;QACjB,MAAM,UAAU,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,kBAAkB,CAAC,cAAc,EAAE,QAAQ,CAAC,IAAI,YAAY,CAAC;YACxC,CAAC,YAAY,EAAE,YAAY,EAAE,CAAC,EAAE,YAAY;YAC5C,CAAC,WAAW,EAAE,WAAW;SAC1B,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;QAClB,MAAM,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC;QAC7C,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,kBAAkB,CAAC,cAAc,EAAE,QAAQ,CAAC,IAAI,YAAY,CAAC;YACxC,CAAC,YAAY,GAAG,CAAC,EAAE,YAAY,GAAG,CAAC,EAAE,CAAC;YACtC,YAAY,GAAG,CAAC,EAAE,CAAC,WAAW,GAAG,CAAC,EAAE,WAAW,GAAG,CAAC;SACpD,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;QACpB,MAAM,UAAU,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;QAC/C,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,kBAAkB,CAAC,cAAc,EAAE,QAAQ,CAAC,IAAI,YAAY,CAAC;YACxC,CAAC,YAAY,GAAG,CAAC,EAAE,YAAY,GAAG,CAAC,EAAE,CAAC;YACtC,YAAY,GAAG,CAAC,EAAE,CAAC,WAAW,GAAG,CAAC,EAAE,WAAW,GAAG,CAAC;SACpD,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,eAAe,CAAC,iBAAiB,EAAE,GAAG,EAAE;IACtC,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;QACnB,MAAM,UAAU,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,MAAM,GAAG,mBAAmB,CAAC,UAAU,CAA6B,CAAC;QAC3E,MAAM,YAAY,GAAG,MAAM,CAAC,MAAkC,CAAC;QAC/D,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC/B,MAAM,UAAU,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,MAAM,GAAG,mBAAmB,CAAC,UAAU,CAA6B,CAAC;QAC3E,MAAM,YAAY,GAAG,MAAM,CAAC,MAAkC,CAAC;QAC/D,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC5B,MAAM,cAAc,GAAG,GAAG,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;QAChD,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;QACxB,MAAM,cAAc,GAAG,GAAG,CAAC,WAAW,CAAC,UAAU,CAC7C,EAAC,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAC,CAAC,CAAC;QAClD,MAAM,UAAU,GAAG,aAAa,CAC5B,mBAAmB,CAAC,cAAc,CAA6B,CAAC,CAAC;QACrE,MAAM,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;aAClC,OAAO,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;QACnB,qCAAqC;QACrC,MAAM,WAAW,GAA2B;YAC1C,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,SAAS,EAAE,QAAQ;YAClE,UAAU,EAAE,YAAY;SACzB,CAAC;QACF,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE;YAC9B,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;YACvC,MAAM,MAAM,GACR,mBAAmB,CAAC,UAAU,CAA6B,CAAC;YAChE,MAAM,aAAa,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC;YACpD,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;SAC3C;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Unit tests for constraints */\n\nimport {serialization, Tensor1D, tensor1d} from '@tensorflow/tfjs-core';\n\nimport {ConstraintIdentifier, deserializeConstraint, getConstraint, serializeConstraint} from './constraints';\nimport * as tfl from './index';\nimport {describeMathCPU, expectNoLeakedTensors, expectTensorsClose} from './utils/test_utils';\n\ndescribeMathCPU('Built-in Constraints', () => {\n  let initVals: Tensor1D;\n  beforeEach(() => {\n    initVals = tensor1d(new Float32Array([-1, 2, 0, 4, -5, 6]));\n  });\n\n  it('NonNeg', () => {\n    const constraint = getConstraint('NonNeg');\n    const postConstraint = constraint.apply(initVals);\n    expectTensorsClose(\n        postConstraint, tensor1d(new Float32Array([0, 2, 0, 4, 0, 6])));\n    expectNoLeakedTensors(() => constraint.apply(initVals), 1);\n  });\n\n  it('MaxNorm', () => {\n    const constraint = getConstraint('MaxNorm');\n    const postConstraint = constraint.apply(initVals);\n    expectTensorsClose(postConstraint, tensor1d(new Float32Array([\n                         -0.2208630521, 0.4417261043, 0, 0.8834522086,\n                         -1.104315261, 1.325178313\n                       ])));\n    expectNoLeakedTensors(() => constraint.apply(initVals), 1);\n  });\n  it('UnitNorm', () => {\n    const constraint = getConstraint('UnitNorm');\n    const postConstraint = constraint.apply(initVals);\n    expectTensorsClose(postConstraint, tensor1d(new Float32Array([\n                         -0.2208630521 / 2, 0.4417261043 / 2, 0,\n                         0.8834522086 / 2, -1.104315261 / 2, 1.325178313 / 2\n                       ])));\n    expectNoLeakedTensors(() => constraint.apply(initVals), 1);\n  });\n  it('MinMaxNorm', () => {\n    const constraint = getConstraint('MinMaxNorm');\n    const postConstraint = constraint.apply(initVals);\n    expectTensorsClose(postConstraint, tensor1d(new Float32Array([\n                         -0.2208630521 / 2, 0.4417261043 / 2, 0,\n                         0.8834522086 / 2, -1.104315261 / 2, 1.325178313 / 2\n                       ])));\n    expectNoLeakedTensors(() => constraint.apply(initVals), 1);\n  });\n\n  // Lower camel case.\n  it('nonNeg', () => {\n    const constraint = getConstraint('nonNeg');\n    const postConstraint = constraint.apply(initVals);\n    expectTensorsClose(\n        postConstraint, tensor1d(new Float32Array([0, 2, 0, 4, 0, 6])));\n  });\n\n  it('maxNorm', () => {\n    const constraint = getConstraint('maxNorm');\n    const postConstraint = constraint.apply(initVals);\n    expectTensorsClose(postConstraint, tensor1d(new Float32Array([\n                         -0.2208630521, 0.4417261043, 0, 0.8834522086,\n                         -1.104315261, 1.325178313\n                       ])));\n  });\n  it('unitNorm', () => {\n    const constraint = getConstraint('unitNorm');\n    const postConstraint = constraint.apply(initVals);\n    expectTensorsClose(postConstraint, tensor1d(new Float32Array([\n                         -0.2208630521 / 2, 0.4417261043 / 2, 0,\n                         0.8834522086 / 2, -1.104315261 / 2, 1.325178313 / 2\n                       ])));\n  });\n  it('minMaxNorm', () => {\n    const constraint = getConstraint('minMaxNorm');\n    const postConstraint = constraint.apply(initVals);\n    expectTensorsClose(postConstraint, tensor1d(new Float32Array([\n                         -0.2208630521 / 2, 0.4417261043 / 2, 0,\n                         0.8834522086 / 2, -1.104315261 / 2, 1.325178313 / 2\n                       ])));\n  });\n});\n\ndescribeMathCPU('constraints.get', () => {\n  it('by string', () => {\n    const constraint = getConstraint('maxNorm');\n    const config = serializeConstraint(constraint) as serialization.ConfigDict;\n    const nestedConfig = config.config as serialization.ConfigDict;\n    expect(nestedConfig.maxValue).toEqual(2);\n    expect(nestedConfig.axis).toEqual(0);\n  });\n\n  it('by string, upper case', () => {\n    const constraint = getConstraint('maxNorm');\n    const config = serializeConstraint(constraint) as serialization.ConfigDict;\n    const nestedConfig = config.config as serialization.ConfigDict;\n    expect(nestedConfig.maxValue).toEqual(2);\n    expect(nestedConfig.axis).toEqual(0);\n  });\n\n  it('by existing object', () => {\n    const origConstraint = tfl.constraints.nonNeg();\n    expect(getConstraint(origConstraint)).toEqual(origConstraint);\n  });\n  it('by config dict', () => {\n    const origConstraint = tfl.constraints.minMaxNorm(\n        {minValue: 0, maxValue: 2, rate: 3, axis: 4});\n    const constraint = getConstraint(\n        serializeConstraint(origConstraint) as serialization.ConfigDict);\n    expect(serializeConstraint(constraint))\n        .toEqual(serializeConstraint(origConstraint));\n  });\n});\n\ndescribe('Constraints Serialization', () => {\n  it('Built-ins', () => {\n    // Test both types of captialization.\n    const constraints: ConstraintIdentifier[] = [\n      'maxNorm', 'nonNeg', 'unitNorm', 'minMaxNorm', 'MaxNorm', 'NonNeg',\n      'UnitNorm', 'MinMaxNorm'\n    ];\n    for (const name of constraints) {\n      const constraint = getConstraint(name);\n      const config =\n          serializeConstraint(constraint) as serialization.ConfigDict;\n      const reconstituted = deserializeConstraint(config);\n      expect(reconstituted).toEqual(constraint);\n    }\n  });\n});\n"]}