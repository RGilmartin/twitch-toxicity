{"version":3,"file":"user_defined_metadata.js","sourceRoot":"","sources":["../src/user_defined_metadata.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAEH,0DAA0D;AAE1D,iEAAiE;AACjE,gFAAgF;AAChF,UAAU;AACV,MAAM,CAAC,MAAM,2CAA2C,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;AAE3E;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,wBAAwB,CACpC,mBAAuB,EAAE,SAAiB,EAAE,SAAS,GAAG,KAAK;IAC/D,IAAI,mBAAmB,IAAI,IAAI;QAC3B,OAAO,mBAAmB,KAAK,QAAQ;QACvC,MAAM,CAAC,cAAc,CAAC,mBAAmB,CAAC,KAAK,MAAM,CAAC,SAAS;QAC/D,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,EAAE;QAC1C,MAAM,IAAI,KAAK,CACX,oEAAoE,CAAC,CAAC;KAC3E;IAED,IAAI,SAAS,EAAE;QACb,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAChD,IAAI,GAAG,CAAC,MAAM,GAAG,2CAA2C,EAAE;YAC5D,OAAO,CAAC,IAAI,CACR,mCAAmC,SAAS,oBAAoB;gBAChE,gBAAgB,GAAG,CAAC,MAAM,+BAA+B;gBACzD,oEAAoE;gBACpE,+CAA+C;gBAC/C,GAAG,2CAA2C,GAAG,CAAC,CAAC;SACxD;KACF;AACH,CAAC;AAED;;;;;;;;;GASG;AACH,kCAAkC;AAClC,MAAM,UAAU,gBAAgB,CAAC,CAAM;IACrC,IAAI,CAAC,KAAK,IAAI,EAAE;QACd,gEAAgE;QAChE,OAAO,IAAI,CAAC;KACb;SAAM,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;QAChC,IAAI,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,SAAS,EAAE;YACjD,0DAA0D;YAC1D,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;gBACtB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;oBAC3B,6BAA6B;oBAC7B,OAAO,KAAK,CAAC;iBACd;gBACD,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAG,kBAAkB;oBAClD,OAAO,KAAK,CAAC;iBACd;aACF;YACD,OAAO,IAAI,CAAC;SACb;aAAM;YACL,8DAA8D;YAC9D,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACpB,6BAA6B;gBAC7B,KAAK,MAAM,IAAI,IAAI,CAAC,EAAE;oBACpB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAG,kBAAkB;wBAChD,OAAO,KAAK,CAAC;qBACd;iBACF;gBACD,OAAO,IAAI,CAAC;aACb;iBAAM;gBACL,8DAA8D;gBAC9D,6DAA6D;gBAC7D,sBAAsB;gBACtB,OAAO,KAAK,CAAC;aACd;SACF;KACF;SAAM;QACL,4CAA4C;QAC5C,MAAM,KAAK,GAAG,OAAO,CAAC,CAAC;QACvB,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,SAAS,CAAC;KACxE;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/** Utility functions related to user-defined metadata. */\n\n// Maximum recommended serialized size for user-defined metadata.\n// Beyond this limit, a warning message will be printed during model loading and\n// saving.\nexport const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;\n\n/**\n * Check validity of user-defined metadata.\n *\n * @param userDefinedMetadata\n * @param modelName Name of the model that the user-defined metadata belongs to.\n *   Used during construction of error messages.\n * @param checkSize Whether to check the size of the metadata is under\n *   recommended limit. Default: `false`. If `true`, will try stringify the\n *   JSON object and print a console warning if the serialzied size is above the\n *   limit.\n * @throws Error if `userDefinedMetadata` is not a plain JSON object.\n */\nexport function checkUserDefinedMetadata(\n    userDefinedMetadata: {}, modelName: string, checkSize = false): void {\n  if (userDefinedMetadata == null ||\n      typeof userDefinedMetadata !== 'object' ||\n      Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype ||\n      !plainObjectCheck(userDefinedMetadata)) {\n    throw new Error(\n        'User-defined metadata is expected to be a JSON object, but is not.');\n  }\n\n  if (checkSize) {\n    const out = JSON.stringify(userDefinedMetadata);\n    if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) {\n      console.warn(\n          `User-defined metadata of model \"${modelName}\" is too large in ` +\n          `size (length=${out.length} when serialized). It is not ` +\n          `recommended to store such large objects in user-defined metadata. ` +\n          `Please make sure its serialized length is <= ` +\n          `${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`);\n    }\n  }\n}\n\n/**\n * Check if an input is plain JSON object or any valid subfield of it.\n *\n * @param x The input to be checked.\n * @param assertObject Whether to assert `x` is a JSON object, i.e., reject\n *   cases of arrays and primitives.\n * @return Returns `true` if and only if `x` is a plain JSON object,\n *   a JSON-valid primitive including string, number, boolean and null,\n *   or an array of the said types.\n */\n// tslint:disable-next-line:no-any\nexport function plainObjectCheck(x: any): boolean {\n  if (x === null) {\n    // Note: typeof `null` is 'object', and `null` is valid in JSON.\n    return true;\n  } else if (typeof x === 'object') {\n    if (Object.getPrototypeOf(x) === Object.prototype) {\n      // `x` is a JavaScript object and its prototype is Object.\n      const keys = Object.keys(x);\n      for (const key of keys) {\n        if (typeof key !== 'string') {\n          // JSON keys must be strings.\n          return false;\n        }\n        if (!plainObjectCheck(x[key])) {  // Recursive call.\n          return false;\n        }\n      }\n      return true;\n    } else {\n      // `x` is a JavaScript object but its prototype is not Object.\n      if (Array.isArray(x)) {\n        // `x` is a JavaScript array.\n        for (const item of x) {\n          if (!plainObjectCheck(item)) {  // Recursive call.\n            return false;\n          }\n        }\n        return true;\n      } else {\n        // `x` is a JavaScript object and its prototype is not Object,\n        // and it's not an Array. I.e., it's a complex object such as\n        // `Error` and `Date`.\n        return false;\n      }\n    }\n  } else {\n    // `x` is not a JavaScript object or `null`.\n    const xType = typeof x;\n    return xType === 'string' || xType === 'number' || xType === 'boolean';\n  }\n}\n"]}