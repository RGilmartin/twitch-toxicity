{"version":3,"file":"model_summary_test.js","sourceRoot":"","sources":["../src/model_summary_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n// Unit tests for tf.LayersModel.summary() and tf.Sequential.summary().\n\nimport * as tfl from './index';\nimport {describeMathCPU} from './utils/test_utils';\n\nfunction getRandomLayerOrModelName(length = 12) {\n  return 'L' + Math.random().toFixed(length - 1).slice(2);\n}\n\ndescribeMathCPU('LayersModel.summary', () => {\n  let consoleLogHistory: string[];\n\n  beforeEach(() => {\n    consoleLogHistory = [];\n    spyOn(console, 'log').and.callFake((message?: string) => {\n      consoleLogHistory.push(message);\n    });\n  });\n\n  afterEach(() => {\n    consoleLogHistory = [];\n  });\n\n  it('Sequential model: one layer', () => {\n    const layerName = getRandomLayerOrModelName();\n    const model = tfl.sequential({\n      layers: [tfl.layers.dense({units: 3, inputShape: [10], name: layerName})]\n    });\n    model.summary();\n    expect(consoleLogHistory).toEqual([\n      '_________________________________________________________________',\n      'Layer (type)                 Output shape              Param #   ',\n      '=================================================================',\n      `${layerName} (Dense)         [null,3]                  33        `,\n      '=================================================================',\n      'Total params: 33', 'Trainable params: 33', 'Non-trainable params: 0',\n      '_________________________________________________________________'\n    ]);\n  });\n\n  it('Sequential model: one layer: custom lineLength', () => {\n    const layerName = getRandomLayerOrModelName();\n    const model = tfl.sequential({\n      layers: [tfl.layers.dense({units: 3, inputShape: [10], name: layerName})]\n    });\n    const lineLength = 70;\n    model.summary(lineLength);\n    expect(consoleLogHistory).toEqual([\n      '______________________________________________________________________',\n      'Layer (type)                   Output shape                Param #    ',\n      '======================================================================',\n      `${layerName} (Dense)           [null,3]                    33         `,\n      '======================================================================',\n      'Total params: 33', 'Trainable params: 33', 'Non-trainable params: 0',\n      '______________________________________________________________________'\n    ]);\n  });\n\n  it('Sequential model: one layer: custom positions', () => {\n    const layerName = getRandomLayerOrModelName();\n    const model = tfl.sequential({\n      layers: [tfl.layers.dense({units: 3, inputShape: [10], name: layerName})]\n    });\n    const lineLength = 70;\n    const positions: number[] = [0.5, 0.8, 1.0];\n    model.summary(lineLength, positions);\n    expect(consoleLogHistory).toEqual([\n      '______________________________________________________________________',\n      'Layer (type)                       Output shape         Param #       ',\n      '======================================================================',\n      `${layerName} (Dense)               [null,3]             33            `,\n      '======================================================================',\n      'Total params: 33', 'Trainable params: 33', 'Non-trainable params: 0',\n      '______________________________________________________________________'\n    ]);\n  });\n\n  it('Sequential model: one layer: custom printFn', () => {\n    const layerName = getRandomLayerOrModelName();\n    const model = tfl.sequential({\n      layers: [tfl.layers.dense({units: 3, inputShape: [10], name: layerName})]\n    });\n\n    const messages: string[] = [];\n    // tslint:disable-next-line:no-any\n    function rerouteLog(message?: any, ...optionalParams: any[]) {\n      messages.push(message);\n    }\n\n    model.summary(null, null, rerouteLog);\n    expect(messages).toEqual([\n      '_________________________________________________________________',\n      'Layer (type)                 Output shape              Param #   ',\n      '=================================================================',\n      `${layerName} (Dense)         [null,3]                  33        `,\n      '=================================================================',\n      'Total params: 33', 'Trainable params: 33', 'Non-trainable params: 0',\n      '_________________________________________________________________'\n    ]);\n\n    // console.log should have received no calls.\n    expect(consoleLogHistory).toEqual([]);\n  });\n\n  it('Sequential model: three layers', () => {\n    const lyrName01 = getRandomLayerOrModelName();\n    const lyrName02 = getRandomLayerOrModelName();\n    const lyrName03 = getRandomLayerOrModelName();\n    const model = tfl.sequential({\n      layers: [\n        tfl.layers.flatten({inputShape: [2, 5], name: lyrName01}),\n        tfl.layers.dense({units: 3, name: lyrName02}),\n        tfl.layers.dense({units: 1, name: lyrName03}),\n      ]\n    });\n    model.summary();\n    expect(consoleLogHistory).toEqual([\n      '_________________________________________________________________',\n      'Layer (type)                 Output shape              Param #   ',\n      '=================================================================',\n      `${lyrName01} (Flatten)       [null,10]                 0         `,\n      '_________________________________________________________________',\n      `${lyrName02} (Dense)         [null,3]                  33        `,\n      '_________________________________________________________________',\n      `${lyrName03} (Dense)         [null,1]                  4         `,\n      '=================================================================',\n      'Total params: 37',\n      'Trainable params: 37',\n      'Non-trainable params: 0',\n      '_________________________________________________________________',\n    ]);\n  });\n\n  it('Sequential model: with non-trainable layers', () => {\n    const lyrName01 = getRandomLayerOrModelName();\n    const lyrName02 = getRandomLayerOrModelName();\n    const lyrName03 = getRandomLayerOrModelName();\n    const model = tfl.sequential({\n      layers: [\n        tfl.layers.flatten({inputShape: [2, 5], name: lyrName01}),\n        tfl.layers.dense({units: 3, name: lyrName02, trainable: false}),\n        tfl.layers.dense({units: 1, name: lyrName03}),\n      ]\n    });\n    model.summary();\n    expect(consoleLogHistory).toEqual([\n      '_________________________________________________________________',\n      'Layer (type)                 Output shape              Param #   ',\n      '=================================================================',\n      `${lyrName01} (Flatten)       [null,10]                 0         `,\n      '_________________________________________________________________',\n      `${lyrName02} (Dense)         [null,3]                  33        `,\n      '_________________________________________________________________',\n      `${lyrName03} (Dense)         [null,1]                  4         `,\n      '=================================================================',\n      'Total params: 37',\n      'Trainable params: 4',\n      'Non-trainable params: 33',\n      '_________________________________________________________________',\n    ]);\n    consoleLogHistory = [];\n\n    // Setting the entire model to non-trainable should be reflected\n    // in the summary.\n    model.trainable = false;\n    model.summary();\n    expect(consoleLogHistory).toEqual([\n      '_________________________________________________________________',\n      'Layer (type)                 Output shape              Param #   ',\n      '=================================================================',\n      `${lyrName01} (Flatten)       [null,10]                 0         `,\n      '_________________________________________________________________',\n      `${lyrName02} (Dense)         [null,3]                  33        `,\n      '_________________________________________________________________',\n      `${lyrName03} (Dense)         [null,1]                  4         `,\n      '=================================================================',\n      'Total params: 37',\n      'Trainable params: 0',\n      'Non-trainable params: 37',\n      '_________________________________________________________________',\n    ]);\n    consoleLogHistory = [];\n\n    // Setting the model's trainable property should be reflected in the\n    // new summary. But the initially untrainable layer should still stay\n    // untrainable.\n    model.trainable = true;\n    model.summary();\n    expect(consoleLogHistory).toEqual([\n      '_________________________________________________________________',\n      'Layer (type)                 Output shape              Param #   ',\n      '=================================================================',\n      `${lyrName01} (Flatten)       [null,10]                 0         `,\n      '_________________________________________________________________',\n      `${lyrName02} (Dense)         [null,3]                  33        `,\n      '_________________________________________________________________',\n      `${lyrName03} (Dense)         [null,1]                  4         `,\n      '=================================================================',\n      'Total params: 37',\n      'Trainable params: 4',\n      'Non-trainable params: 33',\n      '_________________________________________________________________',\n    ]);\n    consoleLogHistory = [];\n  });\n\n  it('Sequential model with Embedding layer', () => {\n    const lyrName01 = getRandomLayerOrModelName();\n    const lyrName02 = getRandomLayerOrModelName();\n    const model = tfl.sequential({\n      layers: [\n        tfl.layers.embedding({\n          inputDim: 10,\n          outputDim: 8,\n          inputShape: [null, 5],\n          name: lyrName01\n        }),\n        tfl.layers.dense({units: 3, name: lyrName02}),\n      ]\n    });\n    model.summary();\n    expect(consoleLogHistory).toEqual([\n      '_________________________________________________________________',\n      'Layer (type)                 Output shape              Param #   ',\n      '=================================================================',\n      `${lyrName01} (Embedding)     [null,null,5,8]           80        `,\n      '_________________________________________________________________',\n      `${lyrName02} (Dense)         [null,null,5,3]           27        `,\n      '=================================================================',\n      'Total params: 107', 'Trainable params: 107', 'Non-trainable params: 0',\n      '_________________________________________________________________'\n    ]);\n  });\n\n  it('Sequential model: nested', () => {\n    const mdlName01 = getRandomLayerOrModelName();\n    const innerModel = tfl.sequential({\n      layers: [tfl.layers.dense({units: 3, inputShape: [10]})],\n      name: mdlName01\n    });\n    const outerModel = tfl.sequential();\n    outerModel.add(innerModel);\n\n    const lyrName02 = getRandomLayerOrModelName();\n    outerModel.add(tfl.layers.dense({units: 1, name: lyrName02}));\n\n    outerModel.summary();\n    expect(consoleLogHistory).toEqual([\n      '_________________________________________________________________',\n      'Layer (type)                 Output shape              Param #   ',\n      '=================================================================',\n      `${mdlName01} (Sequential)    [null,3]                  33        `,\n      '_________________________________________________________________',\n      `${lyrName02} (Dense)         [null,1]                  4         `,\n      '=================================================================',\n      'Total params: 37',\n      'Trainable params: 37',\n      'Non-trainable params: 0',\n      '_________________________________________________________________',\n    ]);\n  });\n\n  it('Functional model', () => {\n    const lyrName01 = getRandomLayerOrModelName();\n    const input1 = tfl.input({shape: [3], name: lyrName01});\n    const lyrName02 = getRandomLayerOrModelName();\n    const input2 = tfl.input({shape: [4], name: lyrName02});\n    const lyrName03 = getRandomLayerOrModelName();\n    const input3 = tfl.input({shape: [5], name: lyrName03});\n    const lyrName04 = getRandomLayerOrModelName();\n    const concat1 =\n        tfl.layers.concatenate({name: lyrName04}).apply([input1, input2]) as\n        tfl.SymbolicTensor;\n    const lyrName05 = getRandomLayerOrModelName();\n    const output =\n        tfl.layers.concatenate({name: lyrName05}).apply([concat1, input3]) as\n        tfl.SymbolicTensor;\n    const model =\n        tfl.model({inputs: [input1, input2, input3], outputs: output});\n\n    const lineLength = 70;\n    const positions: number[] = [0.42, 0.64, 0.75, 1];\n    model.summary(lineLength, positions);\n    expect(consoleLogHistory).toEqual([\n      '______________________________________________________________________',\n      'Layer (type)                 Output shape   Param # Receives inputs   ',\n      '======================================================================',\n      `${lyrName01} (InputLayer)    [null,3]       0                         `,\n      '______________________________________________________________________',\n      `${lyrName02} (InputLayer)    [null,4]       0                         `,\n      '______________________________________________________________________',\n      `${lyrName04} (Concatenate)   [null,7]       0       ${lyrName01}[0][0]`,\n      `                                                    ${lyrName02}[0][0]`,\n      '______________________________________________________________________',\n      `${lyrName03} (InputLayer)    [null,5]       0                         `,\n      '______________________________________________________________________',\n      `${lyrName05} (Concatenate)   [null,12]      0       ${lyrName04}[0][0]`,\n      `                                                    ${lyrName03}[0][0]`,\n      '======================================================================',\n      'Total params: 0', 'Trainable params: 0', 'Non-trainable params: 0',\n      '______________________________________________________________________'\n    ]);\n  });\n\n  it('LayersModel with multiple outputs', () => {\n    const lyrName01 = getRandomLayerOrModelName();\n    const input1 = tfl.input({shape: [3, 4], name: lyrName01});\n    const lyrName02 = getRandomLayerOrModelName();\n    const outputs =\n        tfl.layers.simpleRNN({units: 2, returnState: true, name: lyrName02})\n            .apply(input1) as tfl.SymbolicTensor[];\n    const model = tfl.model({inputs: input1, outputs});\n    const lineLength = 70;\n    model.summary(lineLength);\n    expect(consoleLogHistory).toEqual([\n      '______________________________________________________________________',\n      'Layer (type)                   Output shape                Param #    ',\n      '======================================================================',\n      `${lyrName01} (InputLayer)      [null,3,4]                  0          `,\n      '______________________________________________________________________',\n      `${lyrName02} (SimpleRNN)       [[null,2],[null,2]]         14         `,\n      '======================================================================',\n      'Total params: 14', 'Trainable params: 14', 'Non-trainable params: 0',\n      '______________________________________________________________________'\n    ]);\n  });\n});\n"]}