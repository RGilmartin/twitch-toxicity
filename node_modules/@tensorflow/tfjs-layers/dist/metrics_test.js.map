{"version":3,"file":"metrics_test.js","sourceRoot":"","sources":["../src/metrics_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Unit tests for metrics.ts.\n */\n\nimport {scalar, Tensor, tensor, tensor1d, tensor2d} from '@tensorflow/tfjs-core';\n\nimport * as tfl from './index';\nimport {binaryAccuracy, categoricalAccuracy, get, getLossOrMetricName} from './metrics';\nimport {LossOrMetricFn} from './types';\nimport {describeMathCPUAndGPU, expectTensorsClose} from './utils/test_utils';\n\ndescribeMathCPUAndGPU('binaryAccuracy', () => {\n  it('1D exact', () => {\n    const x = tensor1d([1, 1, 1, 1, 0, 0, 0, 0]);\n    const y = tensor1d([1, 0, 1, 0, 0, 1, 0, 1]);\n    const accuracy = tfl.metrics.binaryAccuracy(x, y);\n    expectTensorsClose(accuracy, scalar(0.5));\n  });\n  it('2D thresholded', () => {\n    const x = tensor1d([1, 1, 1, 1, 0, 0, 0, 0]);\n    const y = tensor1d([0.2, 0.4, 0.6, 0.8, 0.2, 0.3, 0.4, 0.7]);\n    const accuracy = tfl.metrics.binaryAccuracy(x, y);\n    expectTensorsClose(accuracy, scalar(5 / 8));\n  });\n  it('2D exact', () => {\n    const x = tensor2d([[1, 1, 1, 1], [0, 0, 0, 0]], [2, 4]);\n    const y = tensor2d([[1, 0, 1, 0], [0, 0, 0, 1]], [2, 4]);\n    const accuracy = tfl.metrics.binaryAccuracy(x, y);\n    expectTensorsClose(accuracy, tensor1d([0.5, 0.75]));\n  });\n  it('2D thresholded', () => {\n    const x = tensor2d([[1, 1], [1, 1], [0, 0], [0, 0]], [4, 2]);\n    const y =\n        tensor2d([[0.2, 0.4], [0.6, 0.8], [0.2, 0.3], [0.4, 0.7]], [4, 2]);\n    const accuracy = tfl.metrics.binaryAccuracy(x, y);\n    expectTensorsClose(accuracy, tensor1d([0, 1, 1, 0.5]));\n  });\n});\n\ndescribeMathCPUAndGPU('sparseCategoricalAccuracy', () => {\n  it('1D float32 yTrue, 2D yPred', () => {\n    const yTrue = tensor1d([1, 1, 2, 2, 0]);\n    const yPred = tensor2d(\n        [[0, 1, 0], [1, 0, 0], [0, 0.4, 0.6], [0, 0.6, 0.4], [0.7, 0.3, 0]]);\n    const accuracy = tfl.metrics.sparseCategoricalAccuracy(yTrue, yPred);\n    expectTensorsClose(accuracy.toBool(), tensor1d([1, 0, 1, 0, 1], 'bool'));\n  });\n  it('1D int32 yTrue, 2D yPred', () => {\n    const yTrue = tensor1d([1, 1, 2, 2, 0], 'int32');\n    const yPred = tensor2d(\n        [[0, 1, 0], [1, 0, 0], [0, 0.4, 0.6], [0, 0.6, 0.4], [0.7, 0.3, 0]]);\n    const accuracy = tfl.metrics.sparseCategoricalAccuracy(yTrue, yPred);\n    expectTensorsClose(accuracy.toBool(), tensor1d([1, 0, 1, 0, 1], 'bool'));\n  });\n  it('2D int32 yTrue, 2D yPred', () => {\n    const yTrue = tensor2d([1, 1, 2, 2, 0], [5, 1], 'int32');\n    const yPred = tensor2d(\n        [[0, 1, 0], [1, 0, 0], [0, 0.4, 0.6], [0, 0.6, 0.4], [0.7, 0.3, 0]]);\n    const accuracy = tfl.metrics.sparseCategoricalAccuracy(yTrue, yPred);\n    expectTensorsClose(accuracy.toBool(), tensor1d([1, 0, 1, 0, 1], 'bool'));\n  });\n});\n\ndescribeMathCPUAndGPU('binaryCrossentropy', () => {\n  it('2D single-value yTrue', () => {\n    // Use the following Python code to generate the reference values:\n    // ```python\n    // import keras\n    // import numpy as np\n    // import tensorflow as tf\n    //\n    // with tf.Session() as sess:\n    //   x = tf.Variable(np.array(\n    //       [[0], [0], [0], [1], [1], [1]],\n    //       dtype=np.float32))\n    //   y = tf.Variable(np.array(\n    //       [[0], [0.5], [1], [0], [0.5], [1]],\n    //       dtype=np.float32))\n    //   z = keras.metrics.binary_crossentropy(x, y)\n    //\n    //   sess.run(tf.global_variables_initializer())\n    //   print(sess.run(z))\n    // ```\n    const x = tensor2d([[0], [0], [0], [1], [1], [1]]);\n    const y = tensor2d([[0], [0.5], [1], [0], [0.5], [1]]);\n    const accuracy = tfl.metrics.binaryCrossentropy(x, y);\n    expectTensorsClose(accuracy, tensor1d([\n                         1.00000015e-07, 6.93147182e-01, 1.59423847e+01,\n                         1.61180954e+01, 6.93147182e-01, 1.19209332e-07\n                       ]));\n  });\n  it('2D one-hot binary yTrue', () => {\n    // Use the following Python code to generate the reference values:\n    // ```python\n    // import keras\n    // import numpy as np\n    // import tensorflow as tf\n    //\n    // with tf.Session() as sess:\n    //   x = tf.Variable(np.array(\n    //       [[1, 0], [1, 0], [1, 0], [0, 1], [0, 1], [0, 1]],\n    //       dtype=np.float32))\n    //   y = tf.Variable(np.array(\n    //       [[1, 0], [0.5, 0.5], [0, 1], [1, 0], [0.5, 0.5], [0, 1]],\n    //       dtype=np.float32))\n    //   z = keras.metrics.binary_crossentropy(x, y)\n    //\n    //   sess.run(tf.global_variables_initializer())\n    //   print(sess.run(z))\n    // ```\n    const x = tensor2d([[1, 0], [1, 0], [1, 0], [0, 1], [0, 1], [0, 1]]);\n    const y =\n        tensor2d([[1, 0], [0.5, 0.5], [0, 1], [1, 0], [0.5, 0.5], [0, 1]]);\n    const accuracy = tfl.metrics.binaryCrossentropy(x, y);\n    expectTensorsClose(accuracy, tensor1d([\n                         1.0960467e-07, 6.9314718e-01, 1.6030239e+01,\n                         1.6030239e+01, 6.9314718e-01, 1.0960467e-07\n                       ]));\n  });\n});\n\ndescribeMathCPUAndGPU('categoricalAccuracy', () => {\n  it('1D', () => {\n    const x = tensor1d([0, 0, 0, 1]);\n    const y = tensor1d([0.1, 0.8, 0.05, 0.05]);\n    const accuracy = tfl.metrics.categoricalAccuracy(x, y);\n    expect(accuracy.dtype).toEqual('float32');\n    expect(accuracy.shape).toEqual([]);\n    expect(Array.from(accuracy.dataSync())).toEqual([0]);\n  });\n  it('2D', () => {\n    const x = tensor2d([[0, 0, 0, 1], [0, 0, 0, 1]], [2, 4]);\n    const y =\n        tensor2d([[0.1, 0.8, 0.05, 0.05], [0.1, 0.05, 0.05, 0.8]], [2, 4]);\n    const accuracy = tfl.metrics.categoricalAccuracy(x, y);\n    expect(accuracy.dtype).toEqual('float32');\n    expect(accuracy.shape).toEqual([2]);\n    expect(Array.from(accuracy.dataSync())).toEqual([0, 1]);\n  });\n});\n\ndescribeMathCPUAndGPU('categoricalCrossentropy metric', () => {\n  it('1D', () => {\n    const x = tensor1d([0, 0, 0, 1]);\n    const y = tensor1d([0.1, 0.8, 0.05, 0.05]);\n    const accuracy = tfl.metrics.categoricalCrossentropy(x, y);\n    expect(accuracy.dtype).toEqual('float32');\n    expectTensorsClose(accuracy, scalar(2.995732));\n  });\n  it('2D', () => {\n    const x = tensor2d([[0, 0, 0, 1], [0, 0, 0, 1]]);\n    const y = tensor2d([[0.1, 0.8, 0.05, 0.05], [0.1, 0.05, 0.05, 0.8]]);\n    const accuracy = tfl.metrics.categoricalCrossentropy(x, y);\n    expect(accuracy.dtype).toEqual('float32');\n    expectTensorsClose(accuracy, tensor1d([2.995732, 0.22314353]));\n  });\n});\n\ndescribeMathCPUAndGPU('precision metric', () => {\n  it('1D', () => {\n    const x = tensor1d([0, 0, 0, 1]);\n    const y = tensor1d([0, 0, 0, 1]);\n    const precision = tfl.metrics.precision(x, y);\n    expect(precision.dtype).toEqual('float32');\n    expectTensorsClose(precision, scalar(1));\n  });\n  it('2D', () => {\n    // Use the following Python code to generate the reference values:\n    // ```python\n    //\n    // import tensorflow as tf\n    // import numpy as np\n    //\n    // with tf.Session() as session:\n    //     labels = tf.constant([\n    //       [0, 0, 1],\n    //       [0, 0, 1],\n    //       [1, 0, 0],\n    //       [0, 1, 0]\n    //     ])\n    //     prediction = tf.constant([\n    //       [0, 0, 1],\n    //       [1, 0, 0],\n    //       [1, 0, 0],\n    //       [0, 1, 0]\n    //     ])\n    //\n    //     output = tf.metrics.precision(\n    //       labels,\n    //       prediction\n    //     )\n    //\n    //     init = tf.local_variables_initializer()\n    //     session.run(init)\n    //\n    //     result = session.run(output)\n    //     print(result[0])\n    // ```\n    const x = tensor2d([[0, 0, 1], [0, 0, 1], [1, 0, 0], [0, 1, 0]]);\n    const y = tensor2d([[0, 0, 1], [1, 0, 0], [1, 0, 0], [0, 1, 0]]);\n    const precision = tfl.metrics.precision(x, y);\n    expect(precision.dtype).toEqual('float32');\n    expectTensorsClose(precision, scalar(0.75));\n  });\n\n  it('2D edge case', () => {\n    const x = tensor2d([[0, 0, 1], [0, 0, 1], [1, 0, 0], [0, 1, 0]]);\n    const y = tensor2d([[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]);\n    const precision = tfl.metrics.precision(x, y);\n    expect(precision.dtype).toEqual('float32');\n    expectTensorsClose(precision, scalar(0));\n  });\n});\n\ndescribeMathCPUAndGPU('recall metric', () => {\n  it('1D', () => {\n    const x = tensor1d([1, 0, 1, 0, 0, 0, 1]);\n    const y = tensor1d([0, 0, 1, 1, 1, 1, 0]);\n    const recall = tfl.metrics.recall(x, y);\n    expect(recall.dtype).toEqual('float32');\n    expectTensorsClose(recall, scalar(0.33333334));\n  });\n  it('2D', () => {\n    // Use the following Python code to generate the reference values:\n    // ```python\n    //\n    // import tensorflow as tf\n    // import numpy as np\n    //\n    // with tf.Session() as session:\n    //     labels = tf.constant([\n    //       [0, 0, 1],\n    //       [0, 0, 1],\n    //       [1, 0, 0],\n    //       [0, 1, 0]\n    //     ])\n    //     prediction = tf.constant([\n    //       [0, 0, 1],\n    //       [1, 0, 0],\n    //       [1, 0, 0],\n    //       [0, 1, 0]\n    //     ])\n    //\n    //     output = tf.metrics.recall(\n    //       labels,\n    //       prediction\n    //     )\n    //\n    //     init = tf.local_variables_initializer()\n    //     session.run(init)\n    //\n    //     result = session.run(output)\n    //     print(result[0])\n    // ```\n    const x = tensor2d([[0, 0, 1], [0, 0, 1], [1, 0, 0], [0, 1, 0]]);\n    const y = tensor2d([[0, 0, 1], [1, 0, 0], [1, 0, 0], [0, 1, 0]]);\n    const recall = tfl.metrics.recall(x, y);\n    expect(recall.dtype).toEqual('float32');\n    expectTensorsClose(recall, scalar(0.75));\n  });\n\n  it('2D edge case', () => {\n    const x = tensor2d([[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]);\n    const y = tensor2d([[0, 0, 1], [1, 0, 0], [1, 0, 0], [0, 1, 0]]);\n    const recall = tfl.metrics.recall(x, y);\n    expect(recall.dtype).toEqual('float32');\n    expectTensorsClose(recall, scalar(0));\n  });\n});\n\ndescribe('metrics.get', () => {\n  it('valid name, not alias', () => {\n    expect(get('binaryAccuracy') === get('categoricalAccuracy')).toEqual(false);\n  });\n  it('valid name, alias', () => {\n    expect(get('mse') === get('MSE')).toEqual(true);\n  });\n  it('invalid name', () => {\n    expect(() => get('InvalidMetricName')).toThrowError(/Unknown metric/);\n  });\n  it('LossOrMetricFn input', () => {\n    expect(get(binaryAccuracy)).toEqual(binaryAccuracy);\n    expect(get(categoricalAccuracy)).toEqual(categoricalAccuracy);\n  });\n});\n\ndescribe('getLossOrMetricName', () => {\n  it('string short cut name', async () => {\n    const fnName = getLossOrMetricName('meanSquaredError');\n    expect(fnName).toEqual('meanSquaredError');\n  });\n\n  it('function included in losses map', async () => {\n    const fnName = getLossOrMetricName(tfl.metrics.meanSquaredError);\n    expect(fnName).toEqual('meanSquaredError');\n  });\n\n  it('function included in metrics map', async () => {\n    const fnName = getLossOrMetricName(tfl.metrics.categoricalAccuracy);\n    expect(fnName).toEqual('categoricalAccuracy');\n  });\n\n  it('function not included in losses map or metrics map', async () => {\n    const fakeMetric: LossOrMetricFn = (yTrue: Tensor, yPred: Tensor) =>\n        tensor([1]);\n    const fnName = getLossOrMetricName(fakeMetric);\n    expect(fnName).toEqual('fakeMetric');\n  });\n\n  it('throws null', async () => {\n    expect(() => getLossOrMetricName(null)).toThrowError();\n  });\n});\n"]}