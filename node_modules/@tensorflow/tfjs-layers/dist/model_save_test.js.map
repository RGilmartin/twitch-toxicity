{"version":3,"file":"model_save_test.js","sourceRoot":"","sources":["../src/model_save_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {io, linalg, randomNormal, Tensor, zeros} from '@tensorflow/tfjs-core';\n\nimport * as tfl from './index';\nimport * as initializers from './initializers';\n// tslint:disable-next-line:max-line-length\nimport {describeMathCPUAndGPU, describeMathGPU, expectTensorsClose} from './utils/test_utils';\nimport {version} from './version';\n\ndescribeMathCPUAndGPU('LayersModel.save', () => {\n  class IOHandlerForTest implements io.IOHandler {\n    savedArtifacts: io.ModelArtifacts;\n\n    async save(modelArtifacts: io.ModelArtifacts): Promise<io.SaveResult> {\n      this.savedArtifacts = modelArtifacts;\n      return {modelArtifactsInfo: null};\n    }\n  }\n\n  class EmptyIOHandler implements io.IOHandler {}\n\n  it('Model artifacts contains meta-information: Sequential', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.dense({units: 3, inputShape: [5]}));\n    const handler = new IOHandlerForTest();\n\n    await model.save(handler);\n    expect(handler.savedArtifacts.format).toEqual('layers-model');\n    expect(handler.savedArtifacts.generatedBy)\n        .toEqual(`TensorFlow.js tfjs-layers v${version}`);\n    expect(handler.savedArtifacts.convertedBy).toEqual(null);\n  });\n\n  it('Model artifacts contains meta-information: Functional', async () => {\n    const input = tfl.input({shape: [5]});\n    const output =\n        tfl.layers.dense({units: 3}).apply(input) as tfl.SymbolicTensor;\n    const model = tfl.model({inputs: input, outputs: output});\n    const handler = new IOHandlerForTest();\n\n    await model.save(handler);\n    expect(handler.savedArtifacts.format).toEqual('layers-model');\n    expect(handler.savedArtifacts.generatedBy)\n        .toEqual(`TensorFlow.js tfjs-layers v${version}`);\n    expect(handler.savedArtifacts.convertedBy).toEqual(null);\n  });\n\n  it('Saving all weights succeeds', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.dense({units: 3, inputShape: [5]}));\n    const handler = new IOHandlerForTest();\n\n    await model.save(handler);\n    expect(handler.savedArtifacts.modelTopology)\n        .toEqual(model.toJSON(null, false));\n    expect(handler.savedArtifacts.weightSpecs.length).toEqual(2);\n    expect(handler.savedArtifacts.weightSpecs[0].name.indexOf('/kernel'))\n        .toBeGreaterThan(0);\n    expect(handler.savedArtifacts.weightSpecs[0].shape).toEqual([5, 3]);\n    expect(handler.savedArtifacts.weightSpecs[0].dtype).toEqual('float32');\n    expect(handler.savedArtifacts.weightSpecs[1].name.indexOf('/bias'))\n        .toBeGreaterThan(0);\n    expect(handler.savedArtifacts.weightSpecs[1].shape).toEqual([3]);\n    expect(handler.savedArtifacts.weightSpecs[1].dtype).toEqual('float32');\n  });\n\n  it('Saving only trainable weights succeeds', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.dense({units: 3, inputShape: [5], trainable: false}));\n    model.add(tfl.layers.dense({units: 2}));\n    const handler = new IOHandlerForTest();\n\n    await model.save(handler, {trainableOnly: true});\n    expect(handler.savedArtifacts.modelTopology)\n        .toEqual(model.toJSON(null, false));\n    // Verify that only the trainable weights (i.e., weights from the\n    // 2nd, trainable Dense layer) are saved.\n    expect(handler.savedArtifacts.weightSpecs.length).toEqual(2);\n    expect(handler.savedArtifacts.weightSpecs[0].name.indexOf('/kernel'))\n        .toBeGreaterThan(0);\n    expect(handler.savedArtifacts.weightSpecs[0].shape).toEqual([3, 2]);\n    expect(handler.savedArtifacts.weightSpecs[0].dtype).toEqual('float32');\n    expect(handler.savedArtifacts.weightSpecs[1].name.indexOf('/bias'))\n        .toBeGreaterThan(0);\n    expect(handler.savedArtifacts.weightSpecs[1].shape).toEqual([2]);\n    expect(handler.savedArtifacts.weightSpecs[1].dtype).toEqual('float32');\n  });\n\n  it('Saving to a handler without save method fails', async done => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.dense({units: 3, inputShape: [5]}));\n    const handler = new EmptyIOHandler();\n    model.save(handler)\n        .then(saveResult => {\n          fail(\n              'Saving with an IOHandler without `save` succeeded ' +\n              'unexpectedly.');\n        })\n        .catch(err => {\n          expect(err.message)\n              .toEqual(\n                  'LayersModel.save() cannot proceed because the IOHandler ' +\n                  'provided does not have the `save` attribute defined.');\n          done();\n        });\n  });\n});\n\ndescribeMathGPU('Save-load round trips', () => {\n  it('Sequential model, Local storage', async () => {\n    const model1 = tfl.sequential();\n    model1.add(\n        tfl.layers.dense({units: 2, inputShape: [2], activation: 'relu'}));\n    model1.add(tfl.layers.dense({units: 1, useBias: false}));\n\n    // Use a randomly generated model path to prevent collision.\n    const path = `testModel${new Date().getTime()}_${Math.random()}`;\n\n    // First save the model to local storage.\n    const modelURL = `localstorage://${path}`;\n    await model1.save(modelURL);\n    // Once the saving succeeds, load the model back.\n    const model2 = await tfl.loadLayersModel(modelURL);\n    // Verify that the topology of the model is correct.\n    expect(model2.toJSON(null, false)).toEqual(model1.toJSON(null, false));\n\n    // Check the equality of the two models' weights.\n    const weights1 = model1.getWeights();\n    const weights2 = model2.getWeights();\n    expect(weights2.length).toEqual(weights1.length);\n    for (let i = 0; i < weights1.length; ++i) {\n      expectTensorsClose(weights1[i], weights2[i]);\n    }\n  });\n\n  it('Functional model, IndexedDB', async () => {\n    const input = tfl.input({shape: [2, 2]});\n    const layer1 = tfl.layers.flatten().apply(input);\n    const layer2 =\n        tfl.layers.dense({units: 2}).apply(layer1) as tfl.SymbolicTensor;\n    const model1 = tfl.model({inputs: input, outputs: layer2});\n    // Use a randomly generated model path to prevent collision.\n    const path = `testModel${new Date().getTime()}_${Math.random()}`;\n\n    // First save the model to local storage.\n    const modelURL = `indexeddb://${path}`;\n    await model1.save(modelURL);\n    // Once the saving succeeds, load the model back.\n    const model2 = await tfl.loadLayersModel(modelURL);\n    // Verify that the topology of the model is correct.\n    expect(model2.toJSON(null, false)).toEqual(model1.toJSON(null, false));\n\n    // Check the equality of the two models' weights.\n    const weights1 = model1.getWeights();\n    const weights2 = model2.getWeights();\n    expect(weights2.length).toEqual(weights1.length);\n    for (let i = 0; i < weights1.length; ++i) {\n      expectTensorsClose(weights1[i], weights2[i]);\n    }\n  });\n\n  it('Call predict() and fit() after load: conv2d model', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.conv2d({\n      filters: 8,\n      kernelSize: 4,\n      inputShape: [28, 28, 1],\n      padding: 'same',\n      activation: 'relu'\n    }));\n    model.add(tfl.layers.maxPooling2d({\n      poolSize: 2,\n      padding: 'same',\n    }));\n    model.add(tfl.layers.flatten());\n    model.add(tfl.layers.dense({units: 1}));\n\n    const x = randomNormal([1, 28, 28, 1]);\n    const y = model.predict(x) as Tensor;\n\n    const path = `testModel${new Date().getTime()}_${Math.random()}`;\n    const url = `indexeddb://${path}`;\n    await model.save(url);\n    // Load the model back.\n    const modelPrime = await tfl.loadLayersModel(url);\n    // Call predict() on the loaded model and assert the result\n    // equals the original predict() result.\n    const yPrime = modelPrime.predict(x) as Tensor;\n    expectTensorsClose(y, yPrime);\n\n    // Call compile and fit() on the loaded model.\n    modelPrime.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n    const trainExamples = 10;\n    await modelPrime.fit(\n        randomNormal([trainExamples, 28, 28, 1]),\n        randomNormal([trainExamples, 1]), {epochs: 4});\n  });\n\n  it('Call predict() and fit() after load: conv1d model', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.conv1d({\n      filters: 8,\n      kernelSize: 4,\n      inputShape: [100, 1],\n      padding: 'same',\n      activation: 'relu'\n    }));\n    model.add(tfl.layers.maxPooling1d({\n      poolSize: 2,\n      padding: 'same',\n    }));\n    model.add(tfl.layers.flatten());\n    model.add(tfl.layers.dense({units: 1}));\n\n    const x = randomNormal([1, 100, 1]);\n    const y = model.predict(x) as Tensor;\n\n    const path = `testModel${new Date().getTime()}_${Math.random()}`;\n    const url = `indexeddb://${path}`;\n    await model.save(url);\n    // Load the model back.\n    const modelPrime = await tfl.loadLayersModel(url);\n    // Call predict() on the loaded model and assert the\n    // result equals the original predict() result.\n    const yPrime = modelPrime.predict(x) as Tensor;\n    expectTensorsClose(y, yPrime);\n\n    // Call compile and fit() on the loaded model.\n    modelPrime.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n    const trainExamples = 10;\n    await modelPrime.fit(\n        randomNormal([trainExamples, 100, 1]), randomNormal([trainExamples, 1]),\n        {epochs: 4});\n  });\n\n  it('Call predict() and fit() after load: Bidirectional LSTM', async () => {\n    const model = tfl.sequential();\n    const lstmUnits = 3;\n    const sequenceLength = 4;\n    const inputDims = 5;\n    model.add(tfl.layers.bidirectional({\n      layer: tfl.layers.lstm({units: lstmUnits}) as tfl.RNN,\n      mergeMode: 'concat',\n      inputShape: [sequenceLength, inputDims]\n    }));\n\n    const x = randomNormal([2, 4, 5]);\n    const y = model.predict(x) as Tensor;\n\n    const path = `testModel${new Date().getTime()}_${Math.random()}`;\n    const url = `indexeddb://${path}`;\n    await model.save(url);\n    const modelPrime = await tfl.loadLayersModel(url);\n    const yPrime = modelPrime.predict(x) as Tensor;\n    expectTensorsClose(y, yPrime);\n\n    // Call compile and fit() on the loaded model.\n    modelPrime.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n    const trainExamples = 2;\n    await modelPrime.fit(\n        randomNormal([trainExamples, sequenceLength, inputDims]),\n        randomNormal([trainExamples, lstmUnits * 2]), {epochs: 2});\n  });\n\n  it('Load model: Fast init w/ weights: Sequential & LSTM', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.lstm({\n      units: 2,\n      inputShape: [3, 4],\n      recurrentInitializer: 'orthogonal',\n      kernelInitializer: 'orthogonal',\n      biasInitializer: 'randomNormal',\n    }));\n    let savedArtifacts: io.ModelArtifacts;\n    await model.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return {modelArtifactsInfo: null};\n        }));\n    const weights = model.getWeights();\n\n    const getInitSpy = spyOn(initializers, 'getInitializer').and.callThrough();\n    const gramSchmidtSpy = spyOn(linalg, 'gramSchmidt').and.callThrough();\n    const modelPrime = await tfl.loadLayersModel(io.fromMemory(savedArtifacts));\n    const weightsPrime = modelPrime.getWeights();\n    expect(weightsPrime.length).toEqual(weights.length);\n    for (let i = 0; i < weights.length; ++i) {\n      expectTensorsClose(weightsPrime[i], weights[i]);\n    }\n    // Assert that orthogonal initializer hasn't been obtained during\n    // the model loading.\n    expect(getInitSpy).toHaveBeenCalledWith('zeros');\n    expect(gramSchmidtSpy).not.toHaveBeenCalled();\n  });\n\n  it('Loading model: Fast init w/ weights: timeDistributed', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.timeDistributed({\n      inputShape: [3, 4],\n      layer: tfl.layers.dense(\n          {units: 4, kernelInitializer: 'orthogonal', useBias: false})\n    }));\n    let savedArtifacts: io.ModelArtifacts;\n    await model.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return {modelArtifactsInfo: null};\n        }));\n    const weights = model.getWeights();\n\n    const getInitSpy = spyOn(initializers, 'getInitializer').and.callThrough();\n    const gramSchmidtSpy = spyOn(linalg, 'gramSchmidt').and.callThrough();\n    const modelPrime = await tfl.loadLayersModel(io.fromMemory(savedArtifacts));\n    const weightsPrime = modelPrime.getWeights();\n    expect(weightsPrime.length).toEqual(weights.length);\n    for (let i = 0; i < weights.length; ++i) {\n      expectTensorsClose(weightsPrime[i], weights[i]);\n    }\n    // Assert that orthogonal initializer hasn't been obtained during\n    // the model loading.\n    expect(getInitSpy).toHaveBeenCalledWith('zeros');\n    expect(gramSchmidtSpy).not.toHaveBeenCalled();\n  });\n\n  it('Loading model: Fast init w/ weights: bidirectional', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.bidirectional({\n      inputShape: [3, 4],\n      mergeMode: 'concat',\n      layer: tfl.layers.lstm({\n        units: 4,\n        kernelInitializer: 'orthogonal',\n        recurrentInitializer: 'orthogonal',\n        biasInitializer: 'glorotNormal'\n      }) as tfl.RNN\n    }));\n    let savedArtifacts: io.ModelArtifacts;\n    await model.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return {modelArtifactsInfo: null};\n        }));\n    const weights = model.getWeights();\n\n    const getInitSpy = spyOn(initializers, 'getInitializer').and.callThrough();\n    const gramSchmidtSpy = spyOn(linalg, 'gramSchmidt').and.callThrough();\n    const modelPrime = await tfl.loadLayersModel(io.fromMemory(savedArtifacts));\n    const weightsPrime = modelPrime.getWeights();\n    expect(weightsPrime.length).toEqual(weights.length);\n    for (let i = 0; i < weights.length; ++i) {\n      expectTensorsClose(weightsPrime[i], weights[i]);\n    }\n    // Assert that orthogonal initializer hasn't been obtained during\n    // the model loading.\n    expect(getInitSpy).toHaveBeenCalledWith('zeros');\n    expect(gramSchmidtSpy).not.toHaveBeenCalled();\n  });\n\n  it('Loading model: Fast init w/ weights: functional model', async () => {\n    const input1 = tfl.input({shape: [3, 2]});\n    const input2 = tfl.input({shape: [3, 2]});\n    let y =\n        tfl.layers.concatenate().apply([input1, input2]) as tfl.SymbolicTensor;\n    y = tfl.layers\n            .lstm({\n              units: 4,\n              kernelInitializer: 'orthogonal',\n              recurrentInitializer: 'orthogonal',\n              biasInitializer: 'glorotNormal'\n            })\n            .apply(y) as tfl.SymbolicTensor;\n    const model = tfl.model({inputs: [input1, input2], outputs: y});\n    let savedArtifacts: io.ModelArtifacts;\n    await model.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return {modelArtifactsInfo: null};\n        }));\n    const weights = model.getWeights();\n\n    const getInitSpy = spyOn(initializers, 'getInitializer').and.callThrough();\n    const gramSchmidtSpy = spyOn(linalg, 'gramSchmidt').and.callThrough();\n    const modelPrime = await tfl.loadLayersModel(io.fromMemory(savedArtifacts));\n    const weightsPrime = modelPrime.getWeights();\n    expect(weightsPrime.length).toEqual(weights.length);\n    for (let i = 0; i < weights.length; ++i) {\n      expectTensorsClose(weightsPrime[i], weights[i]);\n    }\n    // Assert that orthogonal initializer hasn't been obtained during\n    // the model loading.\n    expect(getInitSpy).toHaveBeenCalledWith('zeros');\n    expect(gramSchmidtSpy).not.toHaveBeenCalled();\n  });\n\n  it('modelFromJSON calls correct weight initializers', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.lstm({\n      units: 2,\n      inputShape: [3, 4],\n      recurrentInitializer: 'orthogonal',\n      kernelInitializer: 'orthogonal',\n      biasInitializer: 'randomNormal',\n    }));\n    const modelJSON = model.toJSON(null, false);\n\n    const gramSchmidtSpy = spyOn(linalg, 'gramSchmidt').and.callThrough();\n    const modelPrime =\n        await tfl.models.modelFromJSON({modelTopology: modelJSON});\n    // Make sure modelPrime builds.\n    modelPrime.predict(zeros([2, 3, 4]));\n    // Assert the orthogonal initializer has been called.\n    expect(gramSchmidtSpy).toHaveBeenCalled();\n  });\n\n  it('Partial non-strict load calls weight initializers', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.lstm({\n      units: 2,\n      inputShape: [3, 4],\n      recurrentInitializer: 'orthogonal',\n      kernelInitializer: 'orthogonal',\n      biasInitializer: 'randomNormal',\n    }));\n    let savedArtifacts: io.ModelArtifacts;\n    await model.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return {modelArtifactsInfo: null};\n        }));\n    const weights = model.getWeights();\n\n    expect(savedArtifacts.weightSpecs.length).toEqual(3);\n    savedArtifacts.weightSpecs = savedArtifacts.weightSpecs.slice(0, 1);\n\n    const gramSchmidtSpy = spyOn(linalg, 'gramSchmidt').and.callThrough();\n    const strict = false;\n    const modelPrime =\n        await tfl.loadLayersModel(io.fromMemory(savedArtifacts), {strict});\n    const weightsPrime = modelPrime.getWeights();\n    expect(weightsPrime.length).toEqual(weights.length);\n    expectTensorsClose(weightsPrime[0], weights[0]);\n    // Assert the orthogonal initializer has been called.\n    expect(gramSchmidtSpy).toHaveBeenCalled();\n  });\n\n  it('loadLayersModel: non-strict load calls weight initializers', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.lstm({\n      units: 2,\n      inputShape: [3, 4],\n      recurrentInitializer: 'orthogonal',\n      kernelInitializer: 'orthogonal',\n      biasInitializer: 'randomNormal',\n    }));\n    let savedArtifacts: io.ModelArtifacts;\n    await model.save(\n        io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n          savedArtifacts = artifacts;\n          return {modelArtifactsInfo: null};\n        }));\n    const weights = model.getWeights();\n\n    expect(savedArtifacts.weightSpecs.length).toEqual(3);\n    savedArtifacts.weightSpecs = savedArtifacts.weightSpecs.slice(0, 1);\n\n    const gramSchmidtSpy = spyOn(linalg, 'gramSchmidt').and.callThrough();\n    const strict = false;\n    const modelPrime =\n        await tfl.loadLayersModel(io.fromMemory(savedArtifacts), {strict});\n    const weightsPrime = modelPrime.getWeights();\n    expect(weightsPrime.length).toEqual(weights.length);\n    expectTensorsClose(weightsPrime[0], weights[0]);\n    // Assert the orthogonal initializer has been called.\n    expect(gramSchmidtSpy).toHaveBeenCalled();\n  });\n\n  it('Load model artifact with ndarray-format scalar objects', async () => {\n    // The following model config contains a scalar parameter serialized in the\n    // ndarray-style format: `{\"type\": \"ndarray\", \"value\": 6}`.\n    const modelJSON = JSON.stringify({\n      'class_name': 'Sequential',\n      'keras_version': '2.2.4',\n      'config': {\n        'layers': [\n          {\n            'class_name': 'Dense',\n            'config': {\n              'kernel_initializer': {\n                'class_name': 'VarianceScaling',\n                'config': {\n                  'distribution': 'uniform',\n                  'scale': 1.0,\n                  'seed': null,\n                  'mode': 'fan_avg'\n                }\n              },\n              'name': 'dense_1',\n              'kernel_constraint': null,\n              'bias_regularizer': null,\n              'bias_constraint': null,\n              'dtype': 'float32',\n              'activation': 'linear',\n              'trainable': true,\n              'kernel_regularizer': null,\n              'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n              'units': 2,\n              'batch_input_shape': [null, 3],\n              'use_bias': true,\n              'activity_regularizer': null\n            }\n          },\n          {\n            'class_name': 'ReLU',\n            'config': {\n              'threshold': 0.0,\n              'max_value': {'type': 'ndarray', 'value': 6},\n              'trainable': true,\n              'name': 're_lu_1',\n              'negative_slope': 0.0\n            }\n          },\n          {\n            'class_name': 'Dense',\n            'config': {\n              'kernel_initializer': {\n                'class_name': 'VarianceScaling',\n                'config': {\n                  'distribution': 'uniform',\n                  'scale': 1.0,\n                  'seed': null,\n                  'mode': 'fan_avg'\n                }\n              },\n              'name': 'dense_2',\n              'kernel_constraint': null,\n              'bias_regularizer': null,\n              'bias_constraint': null,\n              'activation': 'linear',\n              'trainable': true,\n              'kernel_regularizer': null,\n              'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n              'units': 1,\n              'use_bias': true,\n              'activity_regularizer': null\n            }\n          }\n        ],\n        'name': 'sequential_1'\n      },\n      'backend': 'tensorflow'\n    });\n    const model =\n        await tfl.models.modelFromJSON({modelTopology: JSON.parse(modelJSON)});\n    expect(model.layers.length).toEqual(3);\n    expect(model.layers[1].getConfig().maxValue).toEqual(6);\n\n    const xs = randomNormal([5].concat(model.inputs[0].shape.slice(1)));\n    const ys = model.predict(xs) as Tensor;\n    expect(ys.shape).toEqual([5, 1]);\n  });\n\n  // TODO(cais): Test fast initialization of models consisting of\n  //   StackedRNN layers.\n});\n"]}