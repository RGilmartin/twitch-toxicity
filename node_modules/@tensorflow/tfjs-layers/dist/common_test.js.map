{"version":3,"file":"common_test.js","sourceRoot":"","sources":["../src/common_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Unit tests for common.ts.\n */\n\nimport {checkDataFormat, checkInterpolationFormat, checkPaddingMode, checkPoolMode, getUniqueTensorName, isValidTensorName} from './common';\nimport {VALID_DATA_FORMAT_VALUES, VALID_INTERPOLATION_FORMAT_VALUES, VALID_PADDING_MODE_VALUES, VALID_POOL_MODE_VALUES} from './keras_format/common';\n\ndescribe('checkDataFormat', () => {\n  it('Valid values', () => {\n    const extendedValues = VALID_DATA_FORMAT_VALUES.concat([undefined, null]);\n    for (const validValue of extendedValues) {\n      // Using implicit \"expect().toNotThrow()\" for valid values\n      checkDataFormat(validValue);\n    }\n  });\n  it('Invalid values', () => {\n    // Test invalid values are rejected, and reported in the error.\n    expect(() => checkDataFormat('foo')).toThrowError(/foo/);\n    try {\n      checkDataFormat('bad');\n    } catch (e) {\n      expect(e).toMatch('DataFormat');\n      // Test that the error message contains the list of valid values.\n      for (const validValue of VALID_DATA_FORMAT_VALUES) {\n        expect(e).toMatch(validValue);\n      }\n    }\n  });\n});\n\ndescribe('checkIntorpolationFormat', () => {\n  it('Valid values', () => {\n    const extendedValues =\n        VALID_INTERPOLATION_FORMAT_VALUES.concat([undefined, null]);\n    for (const validValue of extendedValues) {\n      // Using implicit \"expect().toNotThrow()\" for valid values\n      checkInterpolationFormat(validValue);\n    }\n  });\n  it('Invalid values', () => {\n    // Test invalid values are rejected, and reported in the error.\n    expect(() => checkInterpolationFormat('foo')).toThrowError(/foo/);\n    try {\n      checkInterpolationFormat('bad');\n    } catch (e) {\n      expect(e).toMatch('InterpolationFormat');\n      // Test that the error message contains the list of valid values.\n      for (const validValue of VALID_INTERPOLATION_FORMAT_VALUES) {\n        expect(e).toMatch(validValue);\n      }\n    }\n  });\n});\ndescribe('checkPaddingMode', () => {\n  it('Valid values', () => {\n    const extendedValues = VALID_PADDING_MODE_VALUES.concat([undefined, null]);\n    for (const validValue of extendedValues) {\n      // Using implicit \"expect().toNotThrow()\" for valid values\n      checkPaddingMode(validValue);\n    }\n  });\n  it('Invalid values', () => {\n    // Test invalid values are rejected, and reported in the error.\n    expect(() => checkPaddingMode('foo')).toThrowError(/foo/);\n    try {\n      checkPaddingMode('bad');\n    } catch (e) {\n      expect(e).toMatch('PaddingMode');\n      // Test that the error message contains the list of valid values.\n      for (const validValue of VALID_PADDING_MODE_VALUES) {\n        expect(e).toMatch(validValue);\n      }\n    }\n  });\n});\n\ndescribe('checkPoolMode', () => {\n  it('Valid values', () => {\n    const extendedValues = VALID_POOL_MODE_VALUES.concat([undefined, null]);\n    for (const validValue of extendedValues) {\n      // Using implicit \"expect().toNotThrow()\" for valid values\n      checkPoolMode(validValue);\n    }\n  });\n  it('Invalid values', () => {\n    // Test invalid values are rejected, and reported in the error.\n    expect(() => checkPoolMode('foo')).toThrowError(/foo/);\n    try {\n      checkPoolMode('bad');\n    } catch (e) {\n      expect(e).toMatch('PoolMode');\n      // Test that the error message contains the list of valid values.\n      for (const validValue of VALID_POOL_MODE_VALUES) {\n        expect(e).toMatch(validValue);\n      }\n    }\n  });\n});\n\ndescribe('isValidTensorName', () => {\n  it('Valid tensor names', () => {\n    expect(isValidTensorName('a')).toEqual(true);\n    expect(isValidTensorName('A')).toEqual(true);\n    expect(isValidTensorName('foo1')).toEqual(true);\n    expect(isValidTensorName('Foo2')).toEqual(true);\n    expect(isValidTensorName('n_1')).toEqual(true);\n    expect(isValidTensorName('n.1')).toEqual(true);\n    expect(isValidTensorName('n_1_2')).toEqual(true);\n    expect(isValidTensorName('n.1.2')).toEqual(true);\n    expect(isValidTensorName('a/B/c')).toEqual(true);\n    expect(isValidTensorName('z_1/z_2/z.3')).toEqual(true);\n    expect(isValidTensorName('z-1/z-2/z.3')).toEqual(true);\n    expect(isValidTensorName('1Qux')).toEqual(true);\n    expect(isValidTensorName('5-conv/kernel')).toEqual(true);\n  });\n\n  it('Invalid tensor names: empty', () => {\n    expect(isValidTensorName('')).toEqual(false);\n  });\n\n  it('Invalid tensor names: whitespaces', () => {\n    expect(isValidTensorName('a b')).toEqual(false);\n    expect(isValidTensorName('ab ')).toEqual(false);\n  });\n\n  it('Invalid tensor names: forbidden characters', () => {\n    expect(isValidTensorName('-foo1')).toEqual(false);\n    expect(isValidTensorName('-foo2-')).toEqual(false);\n    expect(isValidTensorName('bar3!4')).toEqual(false);\n  });\n\n  it('Invalid tensor names: invalid first characters', () => {\n    expect(isValidTensorName('/foo/bar')).toEqual(false);\n    expect(isValidTensorName('.baz')).toEqual(false);\n    expect(isValidTensorName('_baz')).toEqual(false);\n  });\n\n  it('Invalid tensor names: non-ASCII', () => {\n    expect(isValidTensorName('フ')).toEqual(false);\n    expect(isValidTensorName('ξ')).toEqual(false);\n  });\n});\n\ndescribe('getUniqueTensorName', () => {\n  it('Adds unique suffixes to tensor names', () => {\n    expect(getUniqueTensorName('xx')).toEqual('xx');\n    expect(getUniqueTensorName('xx')).toEqual('xx_1');\n    expect(getUniqueTensorName('xx')).toEqual('xx_2');\n    expect(getUniqueTensorName('xx')).toEqual('xx_3');\n  });\n\n  it('Correctly handles preexisting unique suffixes on tensor names', () => {\n    expect(getUniqueTensorName('yy')).toEqual('yy');\n    expect(getUniqueTensorName('yy')).toEqual('yy_1');\n    expect(getUniqueTensorName('yy_1')).toEqual('yy_1_1');\n    expect(getUniqueTensorName('yy')).toEqual('yy_2');\n    expect(getUniqueTensorName('yy_1')).toEqual('yy_1_2');\n    expect(getUniqueTensorName('yy_2')).toEqual('yy_2_1');\n    expect(getUniqueTensorName('yy')).toEqual('yy_3');\n    expect(getUniqueTensorName('yy_1_1')).toEqual('yy_1_1_1');\n  });\n});\n"]}