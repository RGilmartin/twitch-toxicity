{"version":3,"file":"initializers_test.js","sourceRoot":"","sources":["../src/initializers_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Unit tests for initializers.\n */\n\nimport {eye, randomNormal, serialization, Tensor, Tensor2D, tensor2d} from '@tensorflow/tfjs-core';\n\nimport * as tfl from './index';\nimport {checkDistribution, checkFanMode, getInitializer, serializeInitializer, VarianceScaling} from './initializers';\nimport {VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES} from './keras_format/initializer_config';\nimport {PyJsonDict} from './keras_format/types';\nimport {deserialize} from './layers/serialization';\nimport * as math_utils from './utils/math_utils';\nimport {convertPythonicToTs} from './utils/serialization_utils';\nimport {describeMathCPU, describeMathCPUAndGPU, expectNoLeakedTensors, expectTensorsClose, expectTensorsValuesInRange} from './utils/test_utils';\n\ndescribeMathCPU('Zeros initializer', () => {\n  it('1D', () => {\n    const init = getInitializer('zeros');\n    const weights = init.apply([3], 'float32');\n    expect(weights.shape).toEqual([3]);\n    expect(weights.dtype).toEqual('float32');\n    expect(weights.dataSync()).toEqual(new Float32Array([0, 0, 0]));\n  });\n\n  it('1D, upper case', () => {\n    const init = getInitializer('Zeros');\n    const weights = init.apply([3], 'float32');\n    expect(weights.shape).toEqual([3]);\n    expect(weights.dtype).toEqual('float32');\n    expect(weights.dataSync()).toEqual(new Float32Array([0, 0, 0]));\n  });\n\n  it('2D', () => {\n    const init = getInitializer('zeros');\n    const weights = init.apply([2, 2], 'float32');\n    expect(weights.shape).toEqual([2, 2]);\n    expect(weights.dtype).toEqual('float32');\n    expect(weights.dataSync()).toEqual(new Float32Array([0, 0, 0, 0]));\n  });\n\n  it('Does not leak', () => {\n    expectNoLeakedTensors(() => getInitializer('zeros').apply([3]), 1);\n  });\n});\n\ndescribeMathCPU('Ones initializer', () => {\n  it('1D', () => {\n    const init = getInitializer('ones');\n    const weights = init.apply([3], 'float32');\n    expect(weights.shape).toEqual([3]);\n    expect(weights.dtype).toEqual('float32');\n    expect(weights.dataSync()).toEqual(new Float32Array([1, 1, 1]));\n  });\n\n  it('1D, upper case', () => {\n    const init = getInitializer('Ones');\n    const weights = init.apply([3], 'float32');\n    expect(weights.shape).toEqual([3]);\n    expect(weights.dtype).toEqual('float32');\n    expect(weights.dataSync()).toEqual(new Float32Array([1, 1, 1]));\n  });\n\n  it('2D', () => {\n    const init = getInitializer('ones');\n    const weights = init.apply([2, 2], 'float32');\n    expect(weights.shape).toEqual([2, 2]);\n    expect(weights.dtype).toEqual('float32');\n    expect(weights.dataSync()).toEqual(new Float32Array([1, 1, 1, 1]));\n  });\n  it('Does not leak', () => {\n    expectNoLeakedTensors(() => getInitializer('ones').apply([3]), 1);\n  });\n});\n\ndescribeMathCPU('Constant initializer', () => {\n  it('1D, from config dict', () => {\n    const initializerConfig:\n        serialization.ConfigDict = {className: 'Constant', config: {value: 5}};\n    const init = getInitializer(initializerConfig);\n    const weights = init.apply([3], 'float32');\n    expect(weights.shape).toEqual([3]);\n    expect(weights.dtype).toEqual('float32');\n    expect(weights.dataSync()).toEqual(new Float32Array([5, 5, 5]));\n  });\n\n  it('1D, from builder function', () => {\n    const init = tfl.initializers.constant({value: 5});\n    const weights = init.apply([3], 'float32');\n    expect(weights.shape).toEqual([3]);\n    expect(weights.dtype).toEqual('float32');\n    expect(weights.dataSync()).toEqual(new Float32Array([5, 5, 5]));\n  });\n\n  it('1D, from builder function: passing a direct value throws error', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tfl.initializers.constant(5 as any))\n        .toThrowError(/Expected.*ConstantConfig/);\n  });\n\n  it('2D, from config dict', () => {\n    const initializerConfig:\n        serialization.ConfigDict = {className: 'Constant', config: {value: 5}};\n    const init = getInitializer(initializerConfig);\n    const weights = init.apply([2, 2], 'float32');\n    expect(weights.shape).toEqual([2, 2]);\n    expect(weights.dtype).toEqual('float32');\n    expect(weights.dataSync()).toEqual(new Float32Array([5, 5, 5, 5]));\n  });\n\n  it('Does not leak', () => {\n    const initializerConfig:\n        serialization.ConfigDict = {className: 'Constant', config: {value: 5}};\n    expectNoLeakedTensors(\n        () => getInitializer(initializerConfig).apply([3]), 1);\n  });\n});\n\ndescribeMathCPU('Identity initializer', () => {\n  it('1D', () => {\n    const initializerConfig:\n        serialization.ConfigDict = {className: 'Identity', config: {gain: 5}};\n    const init = getInitializer(initializerConfig);\n    expect(() => init.apply([4])).toThrowError(/2D square/);\n  });\n\n  it('1D, from config', () => {\n    const initializerConfig:\n        serialization.ConfigDict = {className: 'Identity', config: {gain: 5}};\n    const init = getInitializer(initializerConfig);\n    expect(() => init.apply([4])).toThrowError(/2D square/);\n  });\n\n  it('2D', () => {\n    const initializerConfig:\n        serialization.ConfigDict = {className: 'Identity', config: {gain: 5}};\n    const init = getInitializer(initializerConfig);\n    const weights = init.apply([2, 2], 'float32');\n    expect(weights.shape).toEqual([2, 2]);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsClose(weights, tensor2d([5, 0, 0, 5], [2, 2]));\n  });\n});\n\ndescribeMathCPU('RandomUniform initializer', () => {\n  const shape = [7, 2];\n  it('default', () => {\n    const init = getInitializer('randomUniform');\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsValuesInRange(weights, -0.05, 0.05);\n  });\n\n  it('default, upper case', () => {\n    const init = getInitializer('RandomUniform');\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsValuesInRange(weights, -0.05, 0.05);\n  });\n\n  it('with configured min max val', () => {\n    const initializerConfig: serialization.ConfigDict = {\n      className: 'RandomUniform',\n      config: {minval: 17, maxval: 47}\n    };\n    const init = getInitializer(initializerConfig);\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsValuesInRange(weights, 17, 47);\n  });\n  it('Does not leak', () => {\n    expectNoLeakedTensors(() => getInitializer('RandomUniform').apply([3]), 1);\n  });\n});\n\ndescribeMathCPU('RandomNormal initializer', () => {\n  const shape = [7, 2];\n  it('default', () => {\n    const init = getInitializer('randomNormal');\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    // TODO(bileschi): Add test to assert the values match expectations.\n  });\n\n  it('default, upper case', () => {\n    const init = getInitializer('RandomNormal');\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    // TODO(bileschi): Add test to assert the values match expectations.\n  });\n\n  it('with configured min max val', () => {\n    const initializerConfig: serialization.ConfigDict = {\n      className: 'RandomNormal',\n      config: {mean: 1.0, stddev: 0.001}\n    };\n    const init = getInitializer(initializerConfig);\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    // TODO(bileschi): Add test to assert the values match expectations.\n  });\n  it('Does not leak', () => {\n    expectNoLeakedTensors(() => getInitializer('RandomNormal').apply([3]), 1);\n  });\n});\n\ndescribeMathCPU('HeNormal initializer', () => {\n  const shape = [7, 2];\n  const stddev = Math.sqrt(2 / shape[0]);\n  it('default', () => {\n    const init = getInitializer('heNormal');\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsValuesInRange(weights, -2 * stddev, 2 * stddev);\n    expect(init.getClassName()).toEqual(VarianceScaling.className);\n  });\n\n  it('default, upper case', () => {\n    const init = getInitializer('HeNormal');\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsValuesInRange(weights, -2 * stddev, 2 * stddev);\n  });\n\n  it('Does not leak', () => {\n    expectNoLeakedTensors(() => getInitializer('HeNormal').apply([3]), 1);\n  });\n});\n\ndescribeMathCPU('HeUniform initializer', () => {\n  const shape = [7, 2];\n  const bound = Math.sqrt(6 / shape[0]);\n  it('default', () => {\n    const init = getInitializer('heUniform');\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsValuesInRange(weights, -bound, bound);\n    expect(init.getClassName()).toEqual(VarianceScaling.className);\n  });\n\n  it('default, upper case', () => {\n    const init = getInitializer('HeUniform');\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsValuesInRange(weights, -bound, bound);\n  });\n\n  it('Does not leak', () => {\n    expectNoLeakedTensors(() => getInitializer('heUniform').apply([3]), 1);\n  });\n});\n\ndescribeMathCPU('LecunNormal initializer', () => {\n  const shape = [7, 2];\n  const stddev = Math.sqrt(1 / shape[0]);\n  it('default', () => {\n    const init = getInitializer('leCunNormal');\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsValuesInRange(weights, -2 * stddev, 2 * stddev);\n    expect(init.getClassName()).toEqual(VarianceScaling.className);\n  });\n\n  it('default, upper case', () => {\n    const init = getInitializer('LeCunNormal');\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsValuesInRange(weights, -2 * stddev, 2 * stddev);\n  });\n\n  it('Does not leak', () => {\n    expectNoLeakedTensors(() => getInitializer('LeCunNormal').apply([3]), 1);\n  });\n});\n\ndescribeMathCPU('LeCunUniform initializer', () => {\n  const shape = [7, 2];\n  const bound = Math.sqrt(3 / shape[0]);\n  it('default', () => {\n    const init = getInitializer('leCunUniform');\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsValuesInRange(weights, -bound, bound);\n    expect(init.getClassName()).toEqual(VarianceScaling.className);\n  });\n\n  it('default, upper case', () => {\n    const init = getInitializer('LeCunUniform');\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsValuesInRange(weights, -bound, bound);\n  });\n\n  it('Does not leak', () => {\n    expectNoLeakedTensors(() => getInitializer('LeCunUniform').apply([3]), 1);\n  });\n});\n\ndescribeMathCPU('TruncatedNormal initializer', () => {\n  const shape = [7, 2];\n  it('default', () => {\n    const init = getInitializer('truncatedNormal');\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsValuesInRange(weights, -0.1, 0.1);\n  });\n\n  it('default, upper case', () => {\n    const init = getInitializer('TruncatedNormal');\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsValuesInRange(weights, -0.1, 0.1);\n  });\n\n  it('with configured min max val', () => {\n    const initializerConfig: serialization.ConfigDict = {\n      className: 'TruncatedNormal',\n      config: {mean: 1.0, stddev: 0.5}\n    };\n    const init = getInitializer(initializerConfig);\n    const weights = init.apply(shape, 'float32');\n    expect(weights.shape).toEqual(shape);\n    expect(weights.dtype).toEqual('float32');\n    expectTensorsValuesInRange(weights, 0.0, 2.0);\n  });\n  it('Does not leak', () => {\n    expectNoLeakedTensors(\n        () => getInitializer('TruncatedNormal').apply([3]), 1);\n  });\n});\n\ndescribeMathCPU('Glorot uniform initializer', () => {\n  ['glorotUniform', 'GlorotUniform'].forEach(initializer => {\n    it('1D ' + initializer, () => {\n      const init = getInitializer(initializer);\n      let weights = init.apply([3], 'float32');\n      expect(weights.shape).toEqual([3]);\n      expect(weights.dtype).toEqual('float32');\n      let scale = 1 / ((Math.sqrt(3) + Math.sqrt(3)) / 2);\n      let limit = Math.sqrt(3 * scale);\n      expect(math_utils.max(weights.dataSync() as Float32Array))\n          .toBeLessThan(limit);\n      expect(math_utils.min(weights.dataSync() as Float32Array))\n          .toBeGreaterThan(-limit);\n\n      weights = init.apply([30], 'float32');\n      expect(weights.shape).toEqual([30]);\n      expect(weights.dtype).toEqual('float32');\n      scale = 1 / ((Math.sqrt(30) + Math.sqrt(30)) / 2);\n      limit = Math.sqrt(3 * scale);\n      expect(math_utils.max(weights.dataSync() as Float32Array))\n          .toBeLessThan(limit);\n      expect(math_utils.min(weights.dataSync() as Float32Array))\n          .toBeGreaterThan(-limit);\n      expect(init.getClassName()).toEqual(VarianceScaling.className);\n    });\n\n    it('2D ' + initializer, () => {\n      const init = getInitializer(initializer);\n      let weights = init.apply([2, 2], 'float32');\n      expect(weights.shape).toEqual([2, 2]);\n      expect(weights.dtype).toEqual('float32');\n      let scale = 1 / ((Math.sqrt(2) + Math.sqrt(2)) / 2);\n      let limit = Math.sqrt(3 * scale);\n      expect(math_utils.max(weights.dataSync() as Float32Array))\n          .toBeLessThan(limit);\n      expect(math_utils.min(weights.dataSync() as Float32Array))\n          .toBeGreaterThan(-limit);\n\n      weights = init.apply([20, 20], 'float32');\n      expect(weights.shape).toEqual([20, 20]);\n      expect(weights.dtype).toEqual('float32');\n      scale = 1 / ((Math.sqrt(20) + Math.sqrt(20)) / 2);\n      limit = Math.sqrt(3 * scale);\n      expect(math_utils.max(weights.dataSync() as Float32Array))\n          .toBeLessThan(limit);\n      expect(math_utils.min(weights.dataSync() as Float32Array))\n          .toBeGreaterThan(-limit);\n    });\n  });\n  it('Does not leak', () => {\n    expectNoLeakedTensors(() => getInitializer('GlorotUniform').apply([3]), 1);\n  });\n});\n\ndescribeMathCPU('VarianceScaling initializer', () => {\n  ['varianceScaling', 'VarianceScaling'].forEach(initializer => {\n    it('Default argument values', () => {\n      const init = getInitializer(initializer);\n      const config = init.getConfig();\n      expect(config['scale']).toEqual(1);\n      expect(config['mode']).toEqual('fanIn');\n      expect(config['distribution']).toEqual('normal');\n      expect(config['seed']).toEqual(undefined);\n    });\n  });\n\n  ['uniform', 'normal', 'truncatedNormal'].forEach(distribution => {\n    it('Can be constructed from config dict', () => {\n      const baseInit = getInitializer('varianceScaling');\n      const baseConfig = baseInit.getConfig();\n      baseConfig.distribution = distribution;\n      const newInit = new VarianceScaling(baseConfig);\n      const newConfig = newInit.getConfig();\n      expect(newConfig['distribution']).toEqual(baseConfig['distribution']);\n    });\n  });\n});\n\ndescribeMathCPU('Glorot normal initializer', () => {\n  ['glorotNormal', 'GlorotNormal'].forEach(initializer => {\n    it('1D ' + initializer, () => {\n      const init = getInitializer(initializer);\n      const NUM_TRIALS = 4;\n      const varianceArr1: number[] = [];\n      const varianceArr2: number[] = [];\n\n      for (let i = 0; i < NUM_TRIALS; ++i) {\n        let weights = init.apply([30], 'float32');\n        expect(weights.shape).toEqual([30]);\n        expect(weights.dtype).toEqual('float32');\n        varianceArr1.push(\n            math_utils.variance(weights.dataSync() as Float32Array));\n\n        weights = init.apply([1200], 'float32');\n        expect(weights.shape).toEqual([1200]);\n        expect(weights.dtype).toEqual('float32');\n        varianceArr2.push(\n            math_utils.variance(weights.dataSync() as Float32Array));\n        expect(init.getClassName()).toEqual(VarianceScaling.className);\n      }\n\n      const variance1 = math_utils.median(varianceArr1);\n      const variance2 = math_utils.median(varianceArr2);\n      expect(variance2).toBeLessThan(variance1);\n    });\n\n    it('2D ' + initializer, () => {\n      const init = getInitializer(initializer);\n      const NUM_TRIALS = 4;\n      const varianceArr1: number[] = [];\n      const varianceArr2: number[] = [];\n\n      for (let i = 0; i < NUM_TRIALS; ++i) {\n        let weights = init.apply([5, 6], 'float32');\n        expect(weights.shape).toEqual([5, 6]);\n        expect(weights.dtype).toEqual('float32');\n        varianceArr1.push(\n            math_utils.variance(weights.dataSync() as Float32Array));\n\n        weights = init.apply([30, 50], 'float32');\n        expect(weights.shape).toEqual([30, 50]);\n        expect(weights.dtype).toEqual('float32');\n        varianceArr2.push(\n            math_utils.variance(weights.dataSync() as Float32Array));\n      }\n\n      const variance1 = math_utils.median(varianceArr1);\n      const variance2 = math_utils.median(varianceArr2);\n      expect(variance2).toBeLessThan(variance1);\n    });\n  });\n  it('Does not leak', () => {\n    expectNoLeakedTensors(() => getInitializer('GlorotNormal').apply([3]), 1);\n  });\n});\n\ndescribeMathCPU('initializers.get', () => {\n  it('by string', () => {\n    const initializer = getInitializer('glorotNormal');\n    const config =\n        serializeInitializer(initializer) as serialization.ConfigDict;\n    const nestedConfig = config.config as serialization.ConfigDict;\n    expect(nestedConfig.scale).toEqual(1.0);\n    expect(nestedConfig.mode).toEqual('fanAvg');\n    expect(nestedConfig.distribution).toEqual('normal');\n  });\n  it('by existing object', () => {\n    const origInit = tfl.initializers.zeros();\n    const initializer = getInitializer(origInit);\n    expect(initializer).toEqual(origInit);\n  });\n  it('by config dict', () => {\n    const origInit = tfl.initializers.glorotUniform({seed: 10});\n    const initializer = getInitializer(\n        serializeInitializer(origInit) as serialization.ConfigDict);\n    expect(serializeInitializer(initializer))\n        .toEqual(serializeInitializer(origInit));\n  });\n});\n\ndescribe('Invalid intializer identifier', () => {\n  it('Throws exception', () => {\n    expect(() => {\n      getInitializer('invalid_initializer_id');\n    }).toThrowError();\n  });\n});\n\ndescribe('checkFanMode', () => {\n  it('Valid values', () => {\n    const extendedValues = VALID_FAN_MODE_VALUES.concat([undefined, null]);\n    for (const validValue of extendedValues) {\n      // Using implicit \"expect().toNotThrow()\" for valid values\n      checkFanMode(validValue);\n    }\n  });\n  it('Invalid values', () => {\n    // Test invalid values are rejected, and reported in the error.\n    expect(() => checkFanMode('foo')).toThrowError(/foo/);\n    try {\n      checkFanMode('bad');\n    } catch (e) {\n      expect(e).toMatch('FanMode');\n      // Test that the error message contains the list of valid values.\n      for (const validValue of VALID_FAN_MODE_VALUES) {\n        expect(e).toMatch(validValue);\n      }\n    }\n  });\n});\n\ndescribe('checkDistribution', () => {\n  it('Valid values', () => {\n    const extendedValues = VALID_DISTRIBUTION_VALUES.concat([undefined, null]);\n    for (const validValue of extendedValues) {\n      // Using implicit \"expect().toNotThrow()\" for valid values\n      checkDistribution(validValue);\n    }\n  });\n  it('Invalid values', () => {\n    // Test invalid values are rejected, and reported in the error.\n    expect(() => checkDistribution('foo')).toThrowError(/foo/);\n    try {\n      checkDistribution('bad');\n    } catch (e) {\n      expect(e).toMatch('Distribution');\n      // Test that the error message contains the list of valid values.\n      for (const validValue of VALID_DISTRIBUTION_VALUES) {\n        expect(e).toMatch(validValue);\n      }\n    }\n  });\n});\n\ndescribeMathCPUAndGPU('Orthogonal Initializer', () => {\n  it('2x2', () => {\n    const init = getInitializer('Orthogonal');\n    const w = init.apply([2, 2], 'float32') as Tensor2D;\n    expect(w.shape).toEqual([2, 2]);\n    expect(w.dtype).toEqual('float32');\n    // Assert that columns of w are orthogonal (w is a unitary matrix).\n    expectTensorsClose(w.transpose().matMul(w), eye(2));\n  });\n\n  it('1x1 with gain', () => {\n    const init = tfl.initializers.orthogonal({gain: 3});\n    const w = init.apply([1, 1], 'float32') as Tensor2D;\n    expect(w.shape).toEqual([1, 1]);\n    expect(w.dtype).toEqual('float32');\n    // Assert that columns of w are orthogonal (w is a unitary matrix) and the\n    // gain has been reflected.\n    expectTensorsClose(w.transpose().matMul(w), tensor2d([[9]], [1, 1]));\n  });\n\n  it('4x2', () => {\n    const init = getInitializer('Orthogonal');\n    const w = init.apply([4, 2], 'float32') as Tensor2D;\n    expect(w.shape).toEqual([4, 2]);\n    expect(w.dtype).toEqual('float32');\n    // Assert that columns of w are orthogonal.\n    expectTensorsClose(w.transpose().matMul(w), eye(2));\n  });\n\n  it('2x4', () => {\n    const init = getInitializer('Orthogonal');\n    const w = init.apply([2, 4], 'float32') as Tensor2D;\n    expect(w.shape).toEqual([2, 4]);\n    expect(w.dtype).toEqual('float32');\n    const wT: Tensor2D = w.transpose();\n    // Assert that columns of w are orthogonal.\n    expectTensorsClose(w.matMul(wT), eye(2));\n  });\n\n  it('64x64', () => {\n    // Disable console warning during this test.\n    // Silence the large-size orthogonal matrix warnings.\n    spyOn(console, 'warn').and.callFake((message: string) => {});\n    const n = 64;\n    const init = getInitializer('Orthogonal');\n    const w = init.apply([n, n], 'float32') as Tensor2D;\n    expect(w.shape).toEqual([n, n]);\n    expect(w.dtype).toEqual('float32');\n    // Assert that columns of w are orthogonal.\n    const wT: Tensor2D = w.transpose();\n    expectTensorsClose(w.matMul(wT), eye(n));\n  });\n  it('Does not leak', () => {\n    const init = getInitializer('Orthogonal');\n    expectNoLeakedTensors(() => init.apply([3, 3]), 1);\n  });\n\n  it('Deserialize model containing GlorotUniform initializer', () => {\n    // From https://github.com/tensorflow/tfjs/issues/798\n    const testModelJSON =\n        // tslint:disable-next-line:max-line-length\n        `{\"modelTopology\": {\"keras_version\": \"2.1.6-tf\", \"backend\": \"tensorflow\", \"model_config\": {\"class_name\": \"Model\", \"config\": {\"name\": \"emoji_autoencoder\", \"layers\": [{\"name\": \"input_1\", \"class_name\": \"InputLayer\", \"config\": {\"batch_input_shape\": [null, 128, 128, 1], \"dtype\": \"float32\", \"sparse\": false, \"name\": \"input_1\"}, \"inbound_nodes\": []}, {\"name\": \"Encoder\", \"class_name\": \"Model\", \"config\": {\"name\": \"Encoder\", \"layers\": [{\"name\": \"input_128x128\", \"class_name\": \"InputLayer\", \"config\": {\"batch_input_shape\": [null, 128, 128, 1], \"dtype\": \"float32\", \"sparse\": false, \"name\": \"input_128x128\"}, \"inbound_nodes\": []}, {\"name\": \"Convolution1\", \"class_name\": \"Conv2D\", \"config\": {\"name\": \"Convolution1\", \"trainable\": true, \"dtype\": \"float32\", \"filters\": 16, \"kernel_size\": [5, 5], \"strides\": [1, 1], \"padding\": \"same\", \"data_format\": \"channels_last\", \"dilation_rate\": [1, 1], \"activation\": \"relu\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"GlorotUniform\", \"config\": {\"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {\"dtype\": \"float32\"}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"inbound_nodes\": [[[\"input_128x128\", 0, 0, {}]]]}, {\"name\": \"shrink_64x64\", \"class_name\": \"MaxPooling2D\", \"config\": {\"name\": \"shrink_64x64\", \"trainable\": true, \"dtype\": \"float32\", \"pool_size\": [2, 2], \"padding\": \"same\", \"strides\": [2, 2], \"data_format\": \"channels_last\"}, \"inbound_nodes\": [[[\"Convolution1\", 0, 0, {}]]]}, {\"name\": \"Convolution2\", \"class_name\": \"Conv2D\", \"config\": {\"name\": \"Convolution2\", \"trainable\": true, \"dtype\": \"float32\", \"filters\": 8, \"kernel_size\": [3, 3], \"strides\": [1, 1], \"padding\": \"same\", \"data_format\": \"channels_last\", \"dilation_rate\": [1, 1], \"activation\": \"relu\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"GlorotUniform\", \"config\": {\"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {\"dtype\": \"float32\"}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"inbound_nodes\": [[[\"shrink_64x64\", 0, 0, {}]]]}, {\"name\": \"shrink_32x32\", \"class_name\": \"MaxPooling2D\", \"config\": {\"name\": \"shrink_32x32\", \"trainable\": true, \"dtype\": \"float32\", \"pool_size\": [2, 2], \"padding\": \"same\", \"strides\": [2, 2], \"data_format\": \"channels_last\"}, \"inbound_nodes\": [[[\"Convolution2\", 0, 0, {}]]]}, {\"name\": \"Convolution3\", \"class_name\": \"Conv2D\", \"config\": {\"name\": \"Convolution3\", \"trainable\": true, \"dtype\": \"float32\", \"filters\": 8, \"kernel_size\": [3, 3], \"strides\": [1, 1], \"padding\": \"same\", \"data_format\": \"channels_last\", \"dilation_rate\": [1, 1], \"activation\": \"relu\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"GlorotUniform\", \"config\": {\"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {\"dtype\": \"float32\"}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"inbound_nodes\": [[[\"shrink_32x32\", 0, 0, {}]]]}, {\"name\": \"shrink_8x8\", \"class_name\": \"MaxPooling2D\", \"config\": {\"name\": \"shrink_8x8\", \"trainable\": true, \"dtype\": \"float32\", \"pool_size\": [4, 4], \"padding\": \"same\", \"strides\": [4, 4], \"data_format\": \"channels_last\"}, \"inbound_nodes\": [[[\"Convolution3\", 0, 0, {}]]]}, {\"name\": \"conv2d\", \"class_name\": \"Conv2D\", \"config\": {\"name\": \"conv2d\", \"trainable\": true, \"dtype\": \"float32\", \"filters\": 4, \"kernel_size\": [3, 3], \"strides\": [1, 1], \"padding\": \"same\", \"data_format\": \"channels_last\", \"dilation_rate\": [1, 1], \"activation\": \"relu\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"GlorotUniform\", \"config\": {\"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {\"dtype\": \"float32\"}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"inbound_nodes\": [[[\"shrink_8x8\", 0, 0, {}]]]}, {\"name\": \"shrink_4x4\", \"class_name\": \"MaxPooling2D\", \"config\": {\"name\": \"shrink_4x4\", \"trainable\": true, \"dtype\": \"float32\", \"pool_size\": [2, 2], \"padding\": \"same\", \"strides\": [2, 2], \"data_format\": \"channels_last\"}, \"inbound_nodes\": [[[\"conv2d\", 0, 0, {}]]]}, {\"name\": \"matrix-to-vector\", \"class_name\": \"Flatten\", \"config\": {\"name\": \"matrix-to-vector\", \"trainable\": true, \"dtype\": \"float32\", \"data_format\": \"channels_last\"}, \"inbound_nodes\": [[[\"shrink_4x4\", 0, 0, {}]]]}, {\"name\": \"link_flat_to_64x1\", \"class_name\": \"Dense\", \"config\": {\"name\": \"link_flat_to_64x1\", \"trainable\": true, \"dtype\": \"float32\", \"units\": 64, \"activation\": \"relu\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"GlorotUniform\", \"config\": {\"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {\"dtype\": \"float32\"}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"inbound_nodes\": [[[\"matrix-to-vector\", 0, 0, {}]]]}, {\"name\": \"output_8x1\", \"class_name\": \"Dense\", \"config\": {\"name\": \"output_8x1\", \"trainable\": true, \"dtype\": \"float32\", \"units\": 8, \"activation\": \"tanh\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"GlorotUniform\", \"config\": {\"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {\"dtype\": \"float32\"}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"inbound_nodes\": [[[\"link_flat_to_64x1\", 0, 0, {}]]]}], \"input_layers\": [[\"input_128x128\", 0, 0]], \"output_layers\": [[\"output_8x1\", 0, 0]]}, \"inbound_nodes\": [[[\"input_1\", 0, 0, {}]]]}, {\"name\": \"Decoder\", \"class_name\": \"Model\", \"config\": {\"name\": \"Decoder\", \"layers\": [{\"name\": \"input_8x1\", \"class_name\": \"InputLayer\", \"config\": {\"batch_input_shape\": [null, 8], \"dtype\": \"float32\", \"sparse\": false, \"name\": \"input_8x1\"}, \"inbound_nodes\": []}, {\"name\": \"activate_input\", \"class_name\": \"Dense\", \"config\": {\"name\": \"activate_input\", \"trainable\": true, \"dtype\": \"float32\", \"units\": 64, \"activation\": \"tanh\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"GlorotUniform\", \"config\": {\"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {\"dtype\": \"float32\"}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"inbound_nodes\": [[[\"input_8x1\", 0, 0, {}]]]}, {\"name\": \"link_reshape_64x1\", \"class_name\": \"Dense\", \"config\": {\"name\": \"link_reshape_64x1\", \"trainable\": true, \"dtype\": \"float32\", \"units\": 64, \"activation\": \"relu\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"GlorotUniform\", \"config\": {\"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {\"dtype\": \"float32\"}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"inbound_nodes\": [[[\"activate_input\", 0, 0, {}]]]}, {\"name\": \"reshape_8x8\", \"class_name\": \"Reshape\", \"config\": {\"name\": \"reshape_8x8\", \"trainable\": true, \"dtype\": \"float32\", \"target_shape\": [8, 8, 1]}, \"inbound_nodes\": [[[\"link_reshape_64x1\", 0, 0, {}]]]}, {\"name\": \"conv2d_1\", \"class_name\": \"Conv2D\", \"config\": {\"name\": \"conv2d_1\", \"trainable\": true, \"dtype\": \"float32\", \"filters\": 8, \"kernel_size\": [3, 3], \"strides\": [1, 1], \"padding\": \"same\", \"data_format\": \"channels_last\", \"dilation_rate\": [1, 1], \"activation\": \"relu\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"GlorotUniform\", \"config\": {\"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {\"dtype\": \"float32\"}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"inbound_nodes\": [[[\"reshape_8x8\", 0, 0, {}]]]}, {\"name\": \"grow_16x16\", \"class_name\": \"UpSampling2D\", \"config\": {\"name\": \"grow_16x16\", \"trainable\": true, \"dtype\": \"float32\", \"size\": [2, 2], \"data_format\": \"channels_last\"}, \"inbound_nodes\": [[[\"conv2d_1\", 0, 0, {}]]]}, {\"name\": \"conv2d_2\", \"class_name\": \"Conv2D\", \"config\": {\"name\": \"conv2d_2\", \"trainable\": true, \"dtype\": \"float32\", \"filters\": 8, \"kernel_size\": [3, 3], \"strides\": [1, 1], \"padding\": \"same\", \"data_format\": \"channels_last\", \"dilation_rate\": [1, 1], \"activation\": \"relu\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"GlorotUniform\", \"config\": {\"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {\"dtype\": \"float32\"}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"inbound_nodes\": [[[\"grow_16x16\", 0, 0, {}]]]}, {\"name\": \"grow_32x32\", \"class_name\": \"UpSampling2D\", \"config\": {\"name\": \"grow_32x32\", \"trainable\": true, \"dtype\": \"float32\", \"size\": [2, 2], \"data_format\": \"channels_last\"}, \"inbound_nodes\": [[[\"conv2d_2\", 0, 0, {}]]]}, {\"name\": \"conv2d_3\", \"class_name\": \"Conv2D\", \"config\": {\"name\": \"conv2d_3\", \"trainable\": true, \"dtype\": \"float32\", \"filters\": 8, \"kernel_size\": [3, 3], \"strides\": [1, 1], \"padding\": \"same\", \"data_format\": \"channels_last\", \"dilation_rate\": [1, 1], \"activation\": \"relu\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"GlorotUniform\", \"config\": {\"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {\"dtype\": \"float32\"}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"inbound_nodes\": [[[\"grow_32x32\", 0, 0, {}]]]}, {\"name\": \"grow_64x64\", \"class_name\": \"UpSampling2D\", \"config\": {\"name\": \"grow_64x64\", \"trainable\": true, \"dtype\": \"float32\", \"size\": [2, 2], \"data_format\": \"channels_last\"}, \"inbound_nodes\": [[[\"conv2d_3\", 0, 0, {}]]]}, {\"name\": \"conv2d_4\", \"class_name\": \"Conv2D\", \"config\": {\"name\": \"conv2d_4\", \"trainable\": true, \"dtype\": \"float32\", \"filters\": 16, \"kernel_size\": [3, 3], \"strides\": [1, 1], \"padding\": \"same\", \"data_format\": \"channels_last\", \"dilation_rate\": [1, 1], \"activation\": \"relu\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"GlorotUniform\", \"config\": {\"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {\"dtype\": \"float32\"}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"inbound_nodes\": [[[\"grow_64x64\", 0, 0, {}]]]}, {\"name\": \"grow_128x128\", \"class_name\": \"UpSampling2D\", \"config\": {\"name\": \"grow_128x128\", \"trainable\": true, \"dtype\": \"float32\", \"size\": [2, 2], \"data_format\": \"channels_last\"}, \"inbound_nodes\": [[[\"conv2d_4\", 0, 0, {}]]]}, {\"name\": \"output_128x128\", \"class_name\": \"Conv2D\", \"config\": {\"name\": \"output_128x128\", \"trainable\": true, \"dtype\": \"float32\", \"filters\": 1, \"kernel_size\": [5, 5], \"strides\": [1, 1], \"padding\": \"same\", \"data_format\": \"channels_last\", \"dilation_rate\": [1, 1], \"activation\": \"tanh\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"GlorotUniform\", \"config\": {\"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {\"dtype\": \"float32\"}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"inbound_nodes\": [[[\"grow_128x128\", 0, 0, {}]]]}], \"input_layers\": [[\"input_8x1\", 0, 0]], \"output_layers\": [[\"output_128x128\", 0, 0]]}, \"inbound_nodes\": [[[\"Encoder\", 1, 0, {}]]]}], \"input_layers\": [[\"input_1\", 0, 0]], \"output_layers\": [[\"Decoder\", 1, 0]]}}, \"training_config\": {\"optimizer_config\": {\"class_name\": \"Adadelta\", \"config\": {\"lr\": 1.0, \"rho\": 0.95, \"decay\": 0.0, \"epsilon\": 1e-07}}, \"loss\": \"mean_squared_error\", \"metrics\": [], \"weighted_metrics\": null, \"sample_weight_mode\": null, \"loss_weights\": null}}, \"weightsManifest\": [{\"paths\": [\"group1-shard1of1\"], \"weights\": [{\"name\": \"activate_input/kernel\", \"shape\": [8, 64], \"dtype\": \"float32\"}, {\"name\": \"activate_input/bias\", \"shape\": [64], \"dtype\": \"float32\"}, {\"name\": \"link_reshape_64x1/kernel\", \"shape\": [64, 64], \"dtype\": \"float32\"}, {\"name\": \"link_reshape_64x1/bias\", \"shape\": [64], \"dtype\": \"float32\"}, {\"name\": \"conv2d_1/kernel\", \"shape\": [3, 3, 1, 8], \"dtype\": \"float32\"}, {\"name\": \"conv2d_1/bias\", \"shape\": [8], \"dtype\": \"float32\"}, {\"name\": \"conv2d_2/kernel\", \"shape\": [3, 3, 8, 8], \"dtype\": \"float32\"}, {\"name\": \"conv2d_2/bias\", \"shape\": [8], \"dtype\": \"float32\"}, {\"name\": \"conv2d_3/kernel\", \"shape\": [3, 3, 8, 8], \"dtype\": \"float32\"}, {\"name\": \"conv2d_3/bias\", \"shape\": [8], \"dtype\": \"float32\"}, {\"name\": \"conv2d_4/kernel\", \"shape\": [3, 3, 8, 16], \"dtype\": \"float32\"}, {\"name\": \"conv2d_4/bias\", \"shape\": [16], \"dtype\": \"float32\"}, {\"name\": \"output_128x128/kernel\", \"shape\": [5, 5, 16, 1], \"dtype\": \"float32\"}, {\"name\": \"output_128x128/bias\", \"shape\": [1], \"dtype\": \"float32\"}, {\"name\": \"Convolution1/kernel\", \"shape\": [5, 5, 1, 16], \"dtype\": \"float32\"}, {\"name\": \"Convolution1/bias\", \"shape\": [16], \"dtype\": \"float32\"}, {\"name\": \"Convolution2/kernel\", \"shape\": [3, 3, 16, 8], \"dtype\": \"float32\"}, {\"name\": \"Convolution2/bias\", \"shape\": [8], \"dtype\": \"float32\"}, {\"name\": \"Convolution3/kernel\", \"shape\": [3, 3, 8, 8], \"dtype\": \"float32\"}, {\"name\": \"Convolution3/bias\", \"shape\": [8], \"dtype\": \"float32\"}, {\"name\": \"conv2d/kernel\", \"shape\": [3, 3, 8, 4], \"dtype\": \"float32\"}, {\"name\": \"conv2d/bias\", \"shape\": [4], \"dtype\": \"float32\"}, {\"name\": \"link_flat_to_64x1/kernel\", \"shape\": [64, 64], \"dtype\": \"float32\"}, {\"name\": \"link_flat_to_64x1/bias\", \"shape\": [64], \"dtype\": \"float32\"}, {\"name\": \"output_8x1/kernel\", \"shape\": [64, 8], \"dtype\": \"float32\"}, {\"name\": \"output_8x1/bias\", \"shape\": [8], \"dtype\": \"float32\"}]}]}`;\n    const modelConfig = convertPythonicToTs(\n        JSON.parse(testModelJSON).modelTopology.model_config);\n\n    const model = deserialize(modelConfig as PyJsonDict) as tfl.LayersModel;\n    expect(model.layers.length).toEqual(3);\n    expect(model.layers[0] instanceof tfl.LayersModel).toEqual(false);\n    expect(model.layers[1] instanceof tfl.LayersModel).toEqual(true);\n    expect(model.layers[2] instanceof tfl.LayersModel).toEqual(true);\n    expect(model.inputs[0].shape).toEqual([null, 128, 128, 1]);\n    expect(model.outputs[0].shape).toEqual([null, 128, 128, 1]);\n    expect((model.predict(randomNormal([1, 128, 128, 1])) as Tensor).shape)\n        .toEqual([1, 128, 128, 1]);\n  });\n});\n"]}