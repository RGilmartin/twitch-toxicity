{"version":3,"file":"generic_utils_test.js","sourceRoot":"","sources":["../../src/utils/generic_utils_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {AssertionError} from '../errors';\nimport {DataFormat, PaddingMode} from '../keras_format/common';\n\nimport * as utils from './generic_utils';\n\ndescribe('pyListRepeat() ', () => {\n  it('creates an empty array for 0 numValues', () => {\n    expect(utils.pyListRepeat(null, 0)).toEqual([]);\n  });\n\n  it('creates an array with 1 value for 1 numValues', () => {\n    const value = 'a';\n    expect(utils.pyListRepeat(value, 1)).toEqual([value]);\n  });\n\n  it('creates an array with 3 values for 3 numValues', () => {\n    const value = 'a';\n    const numValues = 3;\n    const expectedValue = [value, value, value];\n    expect(utils.pyListRepeat(value, numValues)).toEqual(expectedValue);\n  });\n\n  it('throws an exception when numValues <0', () => {\n    const fillFn = () => utils.pyListRepeat(null, -1);\n    expect(fillFn).toThrowError();\n  });\n\n  it('takes an existing array and replicates its contents.', () => {\n    const value = [1, 2];\n    const numValues = 2;\n    const expectedValue = [1, 2, 1, 2];\n    expect(utils.pyListRepeat(value, numValues)).toEqual(expectedValue);\n  });\n});\n\ndescribe('assert', () => {\n  for (const x of [false, null, undefined]) {\n    it('throws error for false conditions', () => {\n      expect(() => utils.assert(x)).toThrowError();\n    });\n  }\n\n  it('doesn\\'t throw error for true conditions', () => {\n    expect(() => utils.assert(true)).not.toThrowError();\n  });\n});\n\ndescribe('count', () => {\n  it('string array, non-empty', () => {\n    const array: string[] = ['foo', 'bar', 'foo'];\n    expect(utils.count(array, 'foo')).toEqual(2);\n    expect(utils.count(array, 'bar')).toEqual(1);\n    expect(utils.count(array, 'baz')).toEqual(0);\n    expect(utils.count(array, '')).toEqual(0);\n  });\n  it('number array, non-empty', () => {\n    const array: number[] = [-1, 1, 3, 3, 7, -1, 1.337, -1];\n    expect(utils.count(array, 1)).toEqual(1);\n    expect(utils.count(array, 3)).toEqual(2);\n    expect(utils.count(array, 1.337)).toEqual(1);\n    expect(utils.count(array, -1)).toEqual(3);\n    expect(utils.count(array, 0)).toEqual(0);\n  });\n  it('string array, empty', () => {\n    const array: string[] = [];\n    expect(utils.count(array, 'foo')).toEqual(0);\n    expect(utils.count(array, 'bar')).toEqual(0);\n    expect(utils.count(array, 'baz')).toEqual(0);\n    expect(utils.count(array, '')).toEqual(0);\n  });\n});\n\ndescribe('Compare functions', () => {\n  const inputs =\n      [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]];\n\n  for (const input of inputs) {\n    it('cmp sorts numbers in ascending order', () => {\n      const expected = [1, 2, 3];\n      expect(input.slice().sort(utils.numberCompare)).toEqual(expected);\n    });\n  }\n\n  for (const input of inputs) {\n    it('reverseCmp sorts numbers in ascending order', () => {\n      const expected = [3, 2, 1];\n      expect(input.slice().sort(utils.reverseNumberCompare)).toEqual(expected);\n    });\n  }\n});\n\ndescribe('toList', () => {\n  it('creates array from non-array.', () => {\n    const value = 1;\n    expect(utils.toList(value)).toEqual([value]);\n  });\n\n  it('returns array if passed an array.', () => {\n    const value = [1];\n    expect(utils.toList(value)).toEqual(value);\n  });\n});\n\ndescribe('toSnakeCase', () => {\n  for (const [inputString, expectedOutput] of [\n           ['', ''], ['A', 'a'], ['AA', 'aa'], ['AAA', 'aaa'], ['AAa', 'a_aa'],\n           ['AA0', 'a_a0'], ['aB', 'a_b'], ['aBC', 'a_bc'], ['aBc', 'a_bc'],\n           ['_', 'private_'], ['a', 'a'], ['_a', 'private_a']]) {\n    it('creates expected output', () => {\n      expect(utils.toSnakeCase(inputString)).toEqual(expectedOutput);\n    });\n  }\n});\n\ndescribe('toCamelCase', () => {\n  for (const [inputString, expectedOutput] of [\n           ['', ''], ['A', 'A'], ['aa', 'aa'], ['a_a', 'aA'], ['a_aa', 'aAa'],\n           ['aAa', 'aAa']]) {\n    it('creates expected output', () => {\n      expect(utils.toCamelCase(inputString)).toEqual(expectedOutput);\n    });\n  }\n});\n\ndescribe('stringsEqual', () => {\n  it('null and undefined', () => {\n    expect(utils.stringsEqual(null, null)).toEqual(true);\n    expect(utils.stringsEqual(undefined, undefined)).toEqual(true);\n    expect(utils.stringsEqual(undefined, null)).toEqual(false);\n    expect(utils.stringsEqual(undefined, [])).toEqual(false);\n    expect(utils.stringsEqual(null, [])).toEqual(false);\n    expect(utils.stringsEqual(null, ['a'])).toEqual(false);\n  });\n  it('Empty arrays', () => {\n    expect(utils.stringsEqual([], [])).toEqual(true);\n    expect(utils.stringsEqual([], ['a'])).toEqual(false);\n  });\n  it('Non-empty arrays', () => {\n    expect(utils.stringsEqual(['a', 'b', 'c', null], [\n      'a', 'b', 'c', null\n    ])).toEqual(true);\n    expect(utils.stringsEqual(['a', 'b', 'c', ''], [\n      'a', 'b', 'c', ''\n    ])).toEqual(true);\n    expect(utils.stringsEqual(['a', 'b', 'c', null], [\n      'a', 'b', 'c', undefined\n    ])).toEqual(false);\n    expect(utils.stringsEqual(['a', 'b', 'c', ''], [\n      'a', 'c', 'b', ''\n    ])).toEqual(false);\n  });\n});\n\ndescribe('unique', () => {\n  it('null or undefined', () => {\n    expect(utils.unique(null)).toEqual(null);\n    expect(utils.unique(undefined)).toEqual(undefined);\n  });\n  it('empty array', () => {\n    expect(utils.unique([])).toEqual([]);\n  });\n  it('Non-empty array: string', () => {\n    expect(utils.unique(['foo', 'bar', 'foo'])).toEqual(['foo', 'bar']);\n    expect(utils.unique(['foo', 'bar', ''])).toEqual(['foo', 'bar', '']);\n    expect(utils.unique(['foo', 'bar', null, ''])).toEqual([\n      'foo', 'bar', null, ''\n    ]);\n  });\n  it('Non-empty array: number', () => {\n    expect(utils.unique([1, 2, -1, 2])).toEqual([1, 2, -1]);\n    expect(utils.unique([2, 3, 2, null])).toEqual([2, 3, null]);\n  });\n});\n\ndescribe('isObjectEmpty', () => {\n  it('null or undefined', () => {\n    expect(() => utils.isObjectEmpty(null)).toThrowError();\n    expect(() => utils.isObjectEmpty(undefined)).toThrowError();\n  });\n  it('empty object', () => {\n    expect(utils.isObjectEmpty({})).toEqual(true);\n  });\n  it('Non-empty object', () => {\n    expect(utils.isObjectEmpty({'a': 12})).toEqual(false);\n    expect(utils.isObjectEmpty({'a': 12, 'b': 34})).toEqual(false);\n  });\n});\n\ndescribe('checkArrayTypeAndLength', () => {\n  it('checks types', () => {\n    // [1,2,3] is made of all 'number's.\n    expect(utils.checkArrayTypeAndLength([1, 2, 3], 'number')).toEqual(true);\n    // ['hello', 'world'] is made of all 'strings's.\n    expect(utils.checkArrayTypeAndLength(['hello', 'world'], 'string'))\n        .toEqual(true);\n    // [1,2,[3]] is not made of all 'number's.\n    expect(utils.checkArrayTypeAndLength([1, 2, [3]], 'number')).toEqual(false);\n  });\n  it('checks lengths', () => {\n    // length of [1,2,3] is >= 1.\n    expect(utils.checkArrayTypeAndLength([1, 2, 3], 'number', 1)).toEqual(true);\n    // length of [1,2,3] is >= 1 and <= 3.\n    expect(utils.checkArrayTypeAndLength([1, 2, 3], 'number', 1, 3))\n        .toEqual(true);\n    // length of [1,2,3,4,5] is not >= 1 and <= 3.\n    expect(utils.checkArrayTypeAndLength([1, 2, 3, 4, 5], 'number', 1, 3))\n        .toEqual(false);\n    // length of [1,2,3,4,5] is not >= 7 and <= 10.\n    expect(utils.checkArrayTypeAndLength([1, 2, 3, 4, 5], 'number', 7, 10))\n        .toEqual(false);\n    // Length of the empty array is >= 0 and <= 0.\n    expect(utils.checkArrayTypeAndLength([], 'does_not_matter', 0, 0))\n        .toEqual(true);\n  });\n  it('rejects negative length limits', () => {\n    expect(() => utils.checkArrayTypeAndLength([1, 2, 3], 'number', -1))\n        .toThrowError();\n  });\n  it('rejects maxLength < minLength', () => {\n    expect(() => utils.checkArrayTypeAndLength([1, 2, 3], 'number', 100, 2))\n        .toThrowError();\n  });\n});\n\ndescribe('formatValueAsFriendlyString', () => {\n  it('null input', () => {\n    expect(utils.formatAsFriendlyString(null)).toEqual('null');\n  });\n\n  it('string input', () => {\n    expect(utils.formatAsFriendlyString('')).toEqual('\\\"\\\"');\n    expect(utils.formatAsFriendlyString('foo')).toEqual('\\\"foo\\\"');\n  });\n\n  it('array input', () => {\n    expect(utils.formatAsFriendlyString([])).toEqual('[]');\n    expect(utils.formatAsFriendlyString([null, 3])).toEqual('[null,3]');\n    expect(utils.formatAsFriendlyString([1, 3, 3, 7])).toEqual('[1,3,3,7]');\n    expect(utils.formatAsFriendlyString([1, 3, 3, 'a'])).toEqual('[1,3,3,\"a\"]');\n    expect(utils.formatAsFriendlyString([\n      [1], 3, [3], 7\n    ])).toEqual('[[1],3,[3],7]');\n  });\n});\n\ndescribe('debouce', () => {\n  it('first call happens after waitMs', async () => {\n    const timestamps = [0, 1, 11, 12];\n    let counter = 0;\n    spyOn(util, 'now').and.callFake(() => timestamps[counter++]);\n    let numCalls = 0;\n    const f = () => numCalls++;\n    const waitMs = 10;\n    const f2 = utils.debounce(f, waitMs);\n    // The first call is ignored since waitMs hasn't passed yet.\n    f2();\n    expect(numCalls).toBe(0);\n    f2();\n    expect(numCalls).toBe(1);\n    // The second call is ignored.\n    f2();\n    expect(numCalls).toBe(1);\n  });\n\n  it('allows at most period/wait calls in a given period', async () => {\n    const timestamps = [0, 2, 4, 6, 8, 10];\n    let counter = 0;\n    spyOn(util, 'now').and.callFake(() => timestamps[counter++]);\n    let numCalls = 0;\n    const f = () => numCalls++;\n    const waitMs = 3;\n    const f2 = utils.debounce(f, waitMs);\n    // Call f2 5 times.\n    for (let i = 1; i < 5; i++) {\n      f2();\n    }\n    // Expect f to be called 2 times (between timestamps 4 and 2, and 8 and 4).\n    expect(numCalls).toBe(2);\n  });\n});\n\ndescribe('getCartesianProductOfValues', () => {\n  it('should return correct cartesian product of 2 group of values', () => {\n    const filters = [128, 256, 512];\n    const paddings: PaddingMode[] = ['same', 'valid'];\n\n    const product = utils.getCartesianProductOfValues(filters, paddings);\n\n    expect(Array.isArray(product)).toBe(true);\n    expect(product.length).toBe(6);\n    expect(product.sort()).toEqual([\n      [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n      [512, 'same'], [512, 'valid']\n    ].sort());\n  });\n\n  it('should return correct cartesian product of 3 group of values', () => {\n    const filters = [128, 256, 512];\n    const kernels = [3, 5, 7];\n    const paddings: PaddingMode[] = ['same', 'valid'];\n\n    const product =\n        utils.getCartesianProductOfValues(filters, kernels, paddings);\n\n    expect(Array.isArray(product)).toBe(true);\n    expect(product.length).toBe(18);\n    expect(product.sort()).toEqual([\n      [128, 3, 'same'], [128, 3, 'valid'], [128, 5, 'same'], [128, 5, 'valid'],\n      [128, 7, 'same'], [128, 7, 'valid'], [256, 3, 'same'], [256, 3, 'valid'],\n      [256, 5, 'same'], [256, 5, 'valid'], [256, 7, 'same'], [256, 7, 'valid'],\n      [512, 3, 'same'], [512, 3, 'valid'], [512, 5, 'same'], [512, 5, 'valid'],\n      [512, 7, 'same'], [512, 7, 'valid']\n    ].sort());\n  });\n\n  it('should return correct cartesian product of 5 group of values', () => {\n    const filters = [128, 256, 512];\n    const kernels = [3, 5, 7];\n    const paddings: PaddingMode[] = ['same', 'valid'];\n    const formats: DataFormat[] = ['channelsFirst', 'channelsLast'];\n    const dilation = [1, 2];\n\n    const product = utils.getCartesianProductOfValues(\n        filters, kernels, paddings, formats, dilation);\n\n    expect(Array.isArray(product)).toBe(true);\n    expect(product.length).toBe(72);\n    // expect(product[0].length).toBe(5);\n    expect(product.every(p => p.length === 5)).toBe(true);\n    expect(product[0].map(p => typeof p)).toEqual([\n      'number', 'number', 'string', 'string', 'number'\n    ]);\n  });\n\n  it('should raise AssertionError if array is not valid', () => {\n    expect(() => {\n      utils.getCartesianProductOfValues(undefined);\n    }).toThrowError(AssertionError);\n  });\n\n  it('should raise AssertionError if array is empty', () => {\n    expect(() => {\n      utils.getCartesianProductOfValues([]);\n    }).toThrowError(AssertionError);\n  });\n\n  it('should raise AssertionError if 1 group of values is empty', () => {\n    expect(() => {\n      const filters = [128, 256, 512];\n      const kernels: string[] = [];\n      const paddings: PaddingMode[] = ['same', 'valid'];\n\n      utils.getCartesianProductOfValues(filters, kernels, paddings);\n    }).toThrowError(AssertionError);\n  });\n});\n"]}