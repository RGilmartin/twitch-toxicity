{"version":3,"file":"variable_utils_test.js","sourceRoot":"","sources":["../../src/utils/variable_utils_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAEH,OAAO,EAAC,MAAM,EAAE,KAAK,EAAC,MAAM,uBAAuB,CAAC;AAEpD,OAAO,EAAC,aAAa,EAAC,MAAM,cAAc,CAAC;AAE3C,OAAO,KAAK,cAAc,MAAM,kBAAkB,CAAC;AAEnD,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;QACtB,MAAM,CAAC,cAAc,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC5B,MAAM,OAAO,GAAG,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,OAAO,GAAG,IAAI,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,OAAO,GAAG,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;QACtE,MAAM,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,OAAO,GAAG,IAAI,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9C,MAAM,OAAO,GAAG,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,OAAO,GAAG,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;QACtE,MAAM,CAAC,cAAc,CAAC,oBAAoB,CAAC;YACzC,OAAO,EAAE,OAAO,EAAE,OAAO;SAC1B,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {scalar, zeros} from '@tensorflow/tfjs-core';\n\nimport {LayerVariable} from '../variables';\n\nimport * as variable_utils from './variable_utils';\n\ndescribe('countParamsInWeights', () => {\n  it('Zero weights', () => {\n    expect(variable_utils.countParamsInWeights([])).toEqual(0);\n  });\n\n  it('One float32 weight', () => {\n    const weight1 = new LayerVariable(zeros([2, 3]));\n    expect(variable_utils.countParamsInWeights([weight1])).toEqual(6);\n  });\n\n  it('One float32 scalar weight', () => {\n    const weight1 = new LayerVariable(scalar(42));\n    expect(variable_utils.countParamsInWeights([weight1])).toEqual(1);\n  });\n\n  it('One int32 weight', () => {\n    const weight1 = new LayerVariable(zeros([1, 3, 4], 'int32'), 'int32');\n    expect(variable_utils.countParamsInWeights([weight1])).toEqual(12);\n  });\n\n  it('Two weights, mixed types and shapes', () => {\n    const weight1 = new LayerVariable(scalar(42));\n    const weight2 = new LayerVariable(zeros([2, 3]));\n    const weight3 = new LayerVariable(zeros([1, 3, 4], 'int32'), 'int32');\n    expect(variable_utils.countParamsInWeights([\n      weight1, weight2, weight3\n    ])).toEqual(19);\n  });\n});\n"]}