{"version":3,"file":"serialization_utils_test.js","sourceRoot":"","sources":["../../src/utils/serialization_utils_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Unit Tests for serialization_utils\n * Porting Note: serialization_utils is a tfjs-layers only file, not found\n * int the original PyKeras.\n */\nimport {serialization} from '@tensorflow/tfjs-core';\n\nimport {PyJsonValue} from '../keras_format/types';\n\nimport {convertPythonicToTs, convertTsToPythonic} from './serialization_utils';\n\ndescribe('convertPythonToTs', () => {\n  it('primitives', () => {\n    expect(convertPythonicToTs(null)).toEqual(null);\n    expect(convertPythonicToTs(true)).toEqual(true);\n    expect(convertPythonicToTs(false)).toEqual(false);\n    expect(convertPythonicToTs(4)).toEqual(4);\n  });\n  it('strings w/o name tags', () => {\n    expect(convertPythonicToTs('abc')).toEqual('abc');\n    expect(convertPythonicToTs('ABC')).toEqual('ABC');\n    expect(convertPythonicToTs('one_two')).toEqual('oneTwo');\n    expect(convertPythonicToTs('OneTwo')).toEqual('OneTwo');\n  });\n  it('simple arrays', () => {\n    expect(convertPythonicToTs([])).toEqual([]);\n    expect(convertPythonicToTs([null])).toEqual([null]);\n    expect(convertPythonicToTs(['one_two'])).toEqual(['oneTwo']);\n    expect(convertPythonicToTs([null, true, false, 4, 'abc'])).toEqual([\n      null, true, false, 4, 'abc'\n    ]);\n    expect(convertPythonicToTs([[[]]])).toEqual([[[]]]);\n  });\n  // We have to special case strings that are layer_names to not be converted\n  it('layer tuple (array) with key', () => {\n    for (const key of ['inboundNodes', 'inputLayers', 'outputLayers']) {\n      expect(convertPythonicToTs(['layer_name', 'meta_data', 0], key)).toEqual([\n        'layer_name', 'metaData', 0\n      ]);\n    }\n  });\n  it('dictionary', () => {\n    expect(convertPythonicToTs({})).toEqual({});\n    expect(convertPythonicToTs({key: null})).toEqual({key: null});\n    expect(convertPythonicToTs({key_one: 4})).toEqual({keyOne: 4});\n    expect(convertPythonicToTs({key_two: 'abc_def'})).toEqual({\n      keyTwo: 'abcDef'\n    });\n    expect(convertPythonicToTs({key_one: true, key_two: false}))\n        .toEqual({keyOne: true, keyTwo: false});\n    // values keyed by 'name' are special and don't get converted.\n    expect(convertPythonicToTs({name: 'layer_name'})).toEqual({\n      name: 'layer_name'\n    });\n  });\n  it('dictionary keys are passed down the stack', () => {\n    const dict: PyJsonValue = {inbound_nodes: ['DoNotChange_Me', 0, null]};\n    expect(convertPythonicToTs(dict)).toEqual({\n      inboundNodes: ['DoNotChange_Me', 0, null]\n    });\n  });\n  // We promote certan fields to enums\n  it('enum promotion', () => {\n    expect(convertPythonicToTs({mode: 'fan_out'})).toEqual({mode: 'fanOut'});\n    expect(convertPythonicToTs({distribution: 'normal'})).toEqual({\n      distribution: 'normal'\n    });\n    expect(convertPythonicToTs({data_format: 'channels_last'})).toEqual({\n      dataFormat: 'channelsLast'\n    });\n    expect(convertPythonicToTs({padding: 'valid'})).toEqual({padding: 'valid'});\n  });\n});\n\ndescribe('convertTsToPythonic', () => {\n  it('primitives', () => {\n    expect(convertTsToPythonic(null)).toEqual(null);\n    expect(convertTsToPythonic(true)).toEqual(true);\n    expect(convertTsToPythonic(false)).toEqual(false);\n    expect(convertTsToPythonic(4)).toEqual(4);\n  });\n  it('strings w/o name tags', () => {\n    expect(convertTsToPythonic('abc')).toEqual('abc');\n    expect(convertTsToPythonic('ABC')).toEqual('abc');\n    expect(convertTsToPythonic('oneTwo')).toEqual('one_two');\n    expect(convertTsToPythonic('OneTwo')).toEqual('one_two');\n  });\n  it('simple arrays', () => {\n    expect(convertTsToPythonic([])).toEqual([]);\n    expect(convertTsToPythonic([null])).toEqual([null]);\n    expect(convertTsToPythonic(['oneTwo'])).toEqual(['one_two']);\n    expect(convertTsToPythonic([null, true, false, 4, 'abc'])).toEqual([\n      null, true, false, 4, 'abc'\n    ]);\n    expect(convertTsToPythonic([[[]]])).toEqual([[[]]]);\n  });\n  // We have to special case strings that are layer_names to not be converted\n  it('layer tuple (array) with key', () => {\n    for (const key of ['inboundNodes', 'inputLayers', 'outputLayers']) {\n      expect(convertTsToPythonic(['layerName', 'metaData', 0], key)).toEqual([\n        'layerName', 'meta_data', 0\n      ]);\n    }\n  });\n  it('dictionary', () => {\n    expect(convertTsToPythonic({})).toEqual({});\n    expect(convertTsToPythonic({key: null})).toEqual({key: null});\n    expect(convertTsToPythonic({keyOne: 4})).toEqual({key_one: 4});\n    expect(convertTsToPythonic({keyTwo: 'abcDef'})).toEqual({\n      key_two: 'abc_def'\n    });\n    expect(convertTsToPythonic({keyOne: true, keyTwo: false}))\n        .toEqual({key_one: true, key_two: false});\n    // values keyed by 'name' are special and don't get converted.\n    expect(convertTsToPythonic({name: 'layerName'})).toEqual({\n      name: 'layerName'\n    });\n  });\n  it('dictionary keys are passed down the stack', () => {\n    const dict: serialization.ConfigDictValue = {\n      inboundNodes: ['DoNotChange_Me', 0, null]\n    };\n    expect(convertTsToPythonic(dict)).toEqual({\n      inbound_nodes: ['DoNotChange_Me', 0, null]\n    });\n  });\n  // We need to stringify our enums\n  it('enum promotion', () => {\n    expect(convertTsToPythonic({mode: 'fanOut'})).toEqual({mode: 'fan_out'});\n    expect(convertTsToPythonic({distribution: 'normal'})).toEqual({\n      distribution: 'normal'\n    });\n    expect(convertTsToPythonic({dataFormat: 'channelsLast'})).toEqual({\n      data_format: 'channels_last'\n    });\n    expect(convertTsToPythonic({padding: 'valid'})).toEqual({padding: 'valid'});\n  });\n});\n"]}