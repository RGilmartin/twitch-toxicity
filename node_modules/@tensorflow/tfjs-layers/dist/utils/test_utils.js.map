{"version":3,"file":"test_utils.js","sourceRoot":"","sources":["../../src/utils/test_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Testing utilities.\n */\n\nimport {memory, Tensor, test_util, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport {ALL_ENVS, describeWithFlags, registerTestEnv} from '@tensorflow/tfjs-core/dist/jasmine_util';\nimport {ValueError} from '../errors';\n\n// Register backends.\nregisterTestEnv({name: 'cpu', backendName: 'cpu'});\nregisterTestEnv({\n  name: 'webgl2',\n  backendName: 'webgl',\n  flags: {\n    'WEBGL_VERSION': 2,\n    'WEBGL_CPU_FORWARD': false,\n    'WEBGL_SIZE_UPLOAD_UNIFORM': 0\n  }\n});\n\n/**\n * Expect values are close between a Tensor or number array.\n * @param actual\n * @param expected\n */\nexport function expectTensorsClose(\n    actual: Tensor|number[], expected: Tensor|number[], epsilon?: number) {\n  if (actual == null) {\n    throw new ValueError(\n        'First argument to expectTensorsClose() is not defined.');\n  }\n  if (expected == null) {\n    throw new ValueError(\n        'Second argument to expectTensorsClose() is not defined.');\n  }\n  if (actual instanceof Tensor && expected instanceof Tensor) {\n    if (actual.dtype !== expected.dtype) {\n      throw new Error(\n          `Data types do not match. Actual: '${actual.dtype}'. ` +\n          `Expected: '${expected.dtype}'`);\n    }\n    if (!util.arraysEqual(actual.shape, expected.shape)) {\n      throw new Error(\n          `Shapes do not match. Actual: [${actual.shape}]. ` +\n          `Expected: [${expected.shape}].`);\n    }\n  }\n  const actualData = actual instanceof Tensor ? actual.dataSync() : actual;\n  const expectedData =\n      expected instanceof Tensor ? expected.dataSync() : expected;\n  test_util.expectArraysClose(actualData, expectedData, epsilon);\n}\n\n/**\n * Expect values in array are within a specified range, boundaries inclusive.\n * @param actual\n * @param expected\n */\nexport function expectTensorsValuesInRange(\n    actual: Tensor, low: number, high: number) {\n  if (actual == null) {\n    throw new ValueError(\n        'First argument to expectTensorsClose() is not defined.');\n  }\n  test_util.expectValuesInRange(actual.dataSync(), low, high);\n}\n\n/**\n * Describe tests to be run on CPU and GPU.\n * @param testName\n * @param tests\n */\nexport function describeMathCPUAndGPU(testName: string, tests: () => void) {\n  describeWithFlags(testName, ALL_ENVS, () => {\n    tests();\n  });\n}\n\n/**\n * Describe tests to be run on CPU only.\n * @param testName\n * @param tests\n */\nexport function describeMathCPU(testName: string, tests: () => void) {\n  describeWithFlags(\n      testName, {predicate: testEnv => testEnv.backendName === 'cpu'}, () => {\n        tests();\n      });\n}\n\n/**\n * Describe tests to be run on GPU only.\n * @param testName\n * @param tests\n */\nexport function describeMathGPU(testName: string, tests: () => void) {\n  describeWithFlags(\n      testName, {predicate: testEnv => testEnv.backendName === 'webgl'}, () => {\n        tests();\n      });\n}\n\n/**\n * Check that a function only generates the expected number of new Tensors.\n *\n * The test  function is called twice, once to prime any regular constants and\n * once to ensure that additional copies aren't created/tensors aren't leaked.\n *\n * @param testFunc A fully curried (zero arg) version of the function to test.\n * @param numNewTensors The expected number of new Tensors that should exist.\n */\nexport function expectNoLeakedTensors(\n    // tslint:disable-next-line:no-any\n    testFunc: () => any, numNewTensors: number) {\n  testFunc();\n  const numTensorsBefore = memory().numTensors;\n  testFunc();\n  const numTensorsAfter = memory().numTensors;\n  const actualNewTensors = numTensorsAfter - numTensorsBefore;\n  if (actualNewTensors !== numNewTensors) {\n    throw new ValueError(\n        `Created an unexpected number of new ` +\n        `Tensors.  Expected: ${numNewTensors}, created : ${\n            actualNewTensors}. ` +\n        `Please investigate the discrepency and/or use tidy.`);\n  }\n}\n"]}