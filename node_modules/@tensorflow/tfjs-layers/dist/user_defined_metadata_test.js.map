{"version":3,"file":"user_defined_metadata_test.js","sourceRoot":"","sources":["../src/user_defined_metadata_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAEH,OAAO,EAAC,EAAE,EAAE,KAAK,EAAC,MAAM,uBAAuB,CAAC;AAEhD,OAAO,KAAK,GAAG,MAAM,SAAS,CAAC;AAE/B,OAAO,EAAC,gBAAgB,EAAE,2CAA2C,EAAC,MAAM,yBAAyB,CAAC;AAEtG,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;QACpB,iCAAiC;QACjC,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACnD,wBAAwB;QACxB,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7C,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7C,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7C,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,MAAM,CAAC,gBAAgB,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACpD,MAAM,CAAC,gBAAgB,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;aAC7C,OAAO,CAAC,KAAK,CAAC,CAAC;QACpB,MAAM,CAAC,gBAAgB,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC5D,MAAM,CAAC,gBAAgB,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACrD,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC5B,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3C,MAAM,CAAC,gBAAgB,CAAC;YACtB,MAAM,EAAE,KAAK;YACb,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,KAAK;SACd,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,MAAM,CAAC,gBAAgB,CAAC;YACtB,MAAM,EAAE;gBACN,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBAC5B,QAAQ,EAAE,IAAI;gBACd,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,EAAC,KAAK,EAAE,GAAG,EAAC,CAAC;aACjD;YACD,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,KAAK;SACd,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,MAAM,CAAC,gBAAgB,CAAC;YACtB,MAAM,EAAE,IAAI,IAAI,EAAE;YAClB,MAAM,EAAE,IAAI;SACb,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACnB,MAAM,CAAC,gBAAgB,CAAC;YACtB,MAAM,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC;YAC1B,MAAM,EAAE,IAAI;SACb,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACnB,MAAM,CAAC,gBAAgB,CAAC;YACtB,MAAM,EAAE,KAAK;YACb,MAAM,EAAE,SAAS;SAClB,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACnB,MAAM,CAAC,gBAAgB,CAAC;YACtB,MAAM,EAAE,KAAK;YACb,MAAM,EAAE;gBACN,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACxB;SACF,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3C,MAAM,CAAC,gBAAgB,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjD,MAAM,CAAC,gBAAgB,CAAC,CAAC;gBACvB,MAAM,EAAE,KAAK;gBACb,MAAM,EAAE,IAAI;gBACZ,MAAM,EAAE,KAAK;aACd,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnB,MAAM,CAAC,gBAAgB,CAAC,CAAC;gBACvB,MAAM,EAAE;oBACN,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;oBACtB,QAAQ,EAAE,IAAI;oBACd,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,EAAC,KAAK,EAAE,GAAG,EAAC,CAAC;iBACjD;gBACD,MAAM,EAAE,IAAI;gBACZ,MAAM,EAAE,KAAK;aACd,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;IAEjD,SAAS,4BAA4B;QACnC,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAC/B,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;YACzB,KAAK,EAAE,CAAC;YACR,UAAU,EAAE,CAAC,EAAE,CAAC;YAChB,UAAU,EAAE,SAAS;SACtB,CAAC,CAAC,CAAC;QACJ,OAAO,KAAK,CAAC;IACf,CAAC;IAED,SAAS,4BAA4B;QACnC,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QACvC,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QACvC,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAC7D,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAC7D,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAuB,CAAC;QACtD,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAuB,CAAC;QACtD,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAChC,CAAC;QACvB,OAAO,GAAG,CAAC,KAAK,CAAC,EAAC,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,OAAO,EAAE,MAAM,EAAC,CAAC,CAAC;IAChE,CAAC;IAED,KAAK,MAAM,SAAS,IAAI,CAAC,YAAY,EAAE,YAAY,CAAC,EAAE;QACpD,EAAE,CAAC,2CAA2C,SAAS,EAAE,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,KAAK,GAAG,SAAS,KAAK,YAAY,CAAC,CAAC;gBACtC,4BAA4B,EAAE,CAAC,CAAC,CAAC,4BAA4B,EAAE,CAAC;YACpE,MAAM,mBAAmB,GAAG,EAAC,cAAc,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAAC,CAAC;YACpE,KAAK,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,CAAC;YAClD,MAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;YACpE,IAAI,cAAiC,CAAC;YACtC,MAAM,KAAK,CAAC,IAAI,CACZ,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,SAA4B,EAAE,EAAE;gBACxD,cAAc,GAAG,SAAS,CAAC;gBAC3B,OAAO,EAAC,kBAAkB,EAAE,IAAI,EAAC,CAAC;YACpC,CAAC,CAAC,CAAC,CAAC;YACR,MAAM,aAAa,GAAG,MAAM,GAAG,CAAC,eAAe,CAC3C,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,aAAa,CAAC,sBAAsB,EAAE,CAAC;iBACzC,OAAO,CAAC,mBAAmB,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;KACJ;IACD,KAAK,MAAM,SAAS,IAAI,CAAC,YAAY,EAAE,YAAY,CAAC,EAAE;QACpD,EAAE,CAAC,yCAAyC,SAAS,EAAE,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,KAAK,GAAG,SAAS,KAAK,YAAY,CAAC,CAAC;gBACtC,4BAA4B,EAAE,CAAC,CAAC,CAAC,4BAA4B,EAAE,CAAC;YACpE,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,sBAAsB,CACrC,IAAI,CAAC,SAAS,CAAC,EAAC,cAAc,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAAC,CAAC,CAAC,CAAC;iBACxD,YAAY,CAAC,6CAA6C,CAAC,CAAC;YACjE,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,sBAAsB,CACrC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;iBACtB,YAAY,CAAC,6CAA6C,CAAC,CAAC;YACjE,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,sBAAsB,CACrC,EAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,cAAc,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAAC,CAAC,CAAC;iBAC9D,YAAY,CAAC,6CAA6C,CAAC,CAAC;YACjE,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;iBAChD,YAAY,CAAC,6CAA6C,CAAC,CAAC;YACjE,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;iBAC3C,YAAY,CAAC,6CAA6C,CAAC,CAAC;YACjE,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;iBAC5C,YAAY,CAAC,6CAA6C,CAAC,CAAC;YACjE,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;iBAC3C,YAAY,CAAC,6CAA6C,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;KACJ;IACD,KAAK,MAAM,SAAS,IAAI,CAAC,YAAY,EAAE,YAAY,CAAC,EAAE;QACpD,EAAE,CAAC,yCAAyC,SAAS,EAAE,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,eAAe,GAAa,EAAE,CAAC;YACrC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAe,EAAE,EAAE;gBACtD,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;YACH,MAAM,aAAa,GAAO;gBACxB,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,2CAA2C,CAAC;aACpE,CAAC;YACF,MAAM,KAAK,GAAG,SAAS,KAAK,YAAY,CAAC,CAAC;gBACtC,4BAA4B,EAAE,CAAC,CAAC,CAAC,4BAA4B,EAAE,CAAC;YACpE,KAAK,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;YAC5C,MAAM,KAAK,CAAC,IAAI,CACZ,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,SAA4B,EAAE,EAAE;gBACxD,OAAO,EAAC,kBAAkB,EAAE,IAAI,EAAC,CAAC;YACpC,CAAC,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;KACJ;IACD,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,MAAM,CAAC,2CAA2C,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACvE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,2CAA2C,CAAC,CAAC;aAChE,OAAO,CAAC,IAAI,CAAC,CAAC;IAErB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {io, zeros} from '@tensorflow/tfjs-core';\n\nimport * as tfl from './index';\nimport {Sequential} from './models';\nimport {plainObjectCheck, MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH} from './user_defined_metadata';\n\ndescribe('plainObjectCheck', () => {\n  it('Primitives', () => {\n    // `undefined` is not valid JSON.\n    expect(plainObjectCheck(undefined)).toEqual(false);\n    // `null` is valid JSON.\n    expect(plainObjectCheck(null)).toEqual(true);\n    expect(plainObjectCheck(true)).toEqual(true);\n    expect(plainObjectCheck(1337)).toEqual(true);\n    expect(plainObjectCheck('foo')).toEqual(true);\n  });\n  it('Complex objects lead to false', () => {\n    expect(plainObjectCheck(new Date())).toEqual(false);\n    expect(plainObjectCheck(new Float32Array([1, 2])))\n        .toEqual(false);\n    expect(plainObjectCheck(new ArrayBuffer(4))).toEqual(false);\n    expect(plainObjectCheck(new Error())).toEqual(false);\n    expect(plainObjectCheck(zeros([2, 3]))).toEqual(false);\n  });\n  it('POJOs lead to true', () => {\n    expect(plainObjectCheck({})).toEqual(true);\n    expect(plainObjectCheck({\n      'key1': 'foo',\n      'key2': 1337,\n      'key3': false\n    })).toEqual(true);\n    expect(plainObjectCheck({\n      'key1': {\n        'key1_1': [1, 3, 3, 7, [42]],\n        'key1_2': null,\n        'key1_3': ['foo', 'bar', null, {}, {'qux': 233}],\n      },\n      'key2': 1337,\n      'key3': false\n    })).toEqual(true);\n  });\n  it('POJOs with invalid value types lead to false', () => {\n    expect(plainObjectCheck({\n      'key1': new Date(),\n      'key2': 1337\n    })).toEqual(false);\n    expect(plainObjectCheck({\n      'key1': new ArrayBuffer(3),\n      'key2': 1337\n    })).toEqual(false);\n    expect(plainObjectCheck({\n      'key1': 'foo',\n      'key2': undefined\n    })).toEqual(false);\n    expect(plainObjectCheck({\n      'key1': 'foo',\n      'key2': {\n        'tensor': zeros([2, 3])\n      }\n    })).toEqual(false);\n  });\n  it('Arrays of POJO lead to true', () => {\n    expect(plainObjectCheck([])).toEqual(true);\n    expect(plainObjectCheck([{}, {}])).toEqual(true);\n    expect(plainObjectCheck([{\n      'key1': 'foo',\n      'key2': 1337,\n      'key3': false\n    }])).toEqual(true);\n    expect(plainObjectCheck([{\n      'key1': {\n        'key1_1': [1, 3, 3, 7],\n        'key1_2': null,\n        'key1_3': ['foo', 'bar', null, {}, {'qux': 233}],\n      },\n      'key2': 1337,\n      'key3': false\n    }])).toEqual(true);\n  });\n});\n\ndescribe('Save and load model with metadata', () => {\n\n  function createSequentialModelForTest(): Sequential {\n    const model = tfl.sequential();\n    model.add(tfl.layers.dense({\n      units: 3,\n      inputShape: [10],\n      activation: 'softmax'\n    }));\n    return model;\n  }\n\n  function createFunctionalModelForTest(): tfl.LayersModel {\n    const input1 = tfl.input({shape: [3]});\n    const input2 = tfl.input({shape: [4]});\n    const dense1 = tfl.layers.dense({units: 2, inputShape: [3]});\n    const dense2 = tfl.layers.dense({units: 1, inputShape: [4]});\n    const y1 = dense1.apply(input1) as tfl.SymbolicTensor;\n    const y2 = dense2.apply(input2) as tfl.SymbolicTensor;\n    const output = tfl.layers.concatenate().apply([y1, y2]) as\n        tfl.SymbolicTensor;\n    return tfl.model({inputs: [input1, input2], outputs: output});\n  }\n\n  for (const modelType of ['sequential', 'functional']) {\n    it(`Valid user-defined metadata round trip: ${modelType}`, async () => {\n      const model = modelType === 'sequential' ?\n          createSequentialModelForTest() : createFunctionalModelForTest();\n      const userDefinedMetadata = {'outputLabels': ['foo', 'bar', 'baz']};\n      model.setUserDefinedMetadata(userDefinedMetadata);\n      expect(model.getUserDefinedMetadata()).toEqual(userDefinedMetadata);\n      let savedArtifacts: io.ModelArtifacts;\n      await model.save(\n          io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n            savedArtifacts = artifacts;\n            return {modelArtifactsInfo: null};\n          }));\n      const reloadedModel = await tfl.loadLayersModel(\n          io.fromMemory(savedArtifacts));\n      expect(reloadedModel.getUserDefinedMetadata())\n          .toEqual(userDefinedMetadata);\n    });\n  }\n  for (const modelType of ['sequential', 'functional']) {\n    it(`Invalid user metadata leads to error: ${modelType}`, async () => {\n      const model = modelType === 'sequential' ?\n          createSequentialModelForTest() : createFunctionalModelForTest();\n      expect(() => model.setUserDefinedMetadata(\n          JSON.stringify({'outputLabels': ['foo', 'bar', 'baz']})))\n          .toThrowError(/is expected to be a JSON object, but is not/);\n      expect(() => model.setUserDefinedMetadata(\n          ['foo', 'bar', 'baz']))\n          .toThrowError(/is expected to be a JSON object, but is not/);\n      expect(() => model.setUserDefinedMetadata(\n          {'foo': zeros([2, 3]), 'outputLabels': ['foo', 'bar', 'baz']}))\n          .toThrowError(/is expected to be a JSON object, but is not/);\n      expect(() => model.setUserDefinedMetadata(undefined))\n          .toThrowError(/is expected to be a JSON object, but is not/);\n      expect(() => model.setUserDefinedMetadata(null))\n          .toThrowError(/is expected to be a JSON object, but is not/);\n      expect(() => model.setUserDefinedMetadata('foo'))\n          .toThrowError(/is expected to be a JSON object, but is not/);\n      expect(() => model.setUserDefinedMetadata(1337))\n          .toThrowError(/is expected to be a JSON object, but is not/);\n    });\n  }\n  for (const modelType of ['sequential', 'functional']) {\n    it(`Large metadata size leads to warning: ${modelType}`, async () => {\n      const warningMessages: string[] = [];\n      spyOn(console, 'warn').and.callFake((message: string) => {\n        warningMessages.push(message);\n      });\n      const largeMetadata: {} = {\n        'metadata': 'x'.repeat(MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH)\n      };\n      const model = modelType === 'sequential' ?\n          createSequentialModelForTest() : createFunctionalModelForTest();\n      model.setUserDefinedMetadata(largeMetadata);\n      await model.save(\n          io.withSaveHandler(async (artifacts: io.ModelArtifacts) => {\n            return {modelArtifactsInfo: null};\n          }));\n      expect(warningMessages.length).toEqual(1);\n      expect(warningMessages).toMatch(/is too large in size/);\n    });\n  }\n  it('MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH value', () => {\n    expect(MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH).toBeGreaterThan(0);\n    expect(Number.isInteger(MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH))\n        .toEqual(true);\n\n  });\n});\n"]}