{"version":3,"file":"dataset_fakes_test.js","sourceRoot":"","sources":["../../src/engine/dataset_fakes_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport {describeMathCPUAndGPU} from '../utils/test_utils';\n\nimport {FakeNumericDataset} from './dataset_fakes';\n\ndescribeMathCPUAndGPU('FakeNumericDataset', () => {\n  it('1D features, 1D targets', async () => {\n    const dataset = new FakeNumericDataset(\n        {xShape: [3], yShape: [1], batchSize: 8, numBatches: 5});\n    for (let k = 0; k < 2; ++k) {\n      // Run twice to make sure that calling iteartor() multiple times works.\n      const iterator = await dataset.iterator();\n      for (let i = 0; i < 5; ++i) {\n        const result = await iterator.next();\n        expect((result.value.xs as Tensor).shape).toEqual([8, 3]);\n        expect((result.value.ys as Tensor).shape).toEqual([8, 1]);\n        expect(result.done).toEqual(false);\n      }\n      for (let i = 0; i < 3; ++i) {\n        const result = await iterator.next();\n        expect(result.value).toBeNull();\n        expect(result.done).toEqual(true);\n      }\n    }\n  });\n\n  it('2D features, 1D targets', async () => {\n    const dataset = new FakeNumericDataset(\n        {xShape: [3, 4], yShape: [2], batchSize: 8, numBatches: 5});\n    for (let k = 0; k < 2; ++k) {\n      // Run twice to make sure that calling iteartor() multiple times works.\n      const iterator = await dataset.iterator();\n      for (let i = 0; i < 5; ++i) {\n        const result = await iterator.next();\n        expect((result.value.xs as Tensor).shape).toEqual([8, 3, 4]);\n        expect((result.value.ys as Tensor).shape).toEqual([8, 2]);\n        expect(result.done).toEqual(false);\n      }\n      for (let i = 0; i < 3; ++i) {\n        const result = await iterator.next();\n        expect(result.value).toBeNull();\n        expect(result.done).toEqual(true);\n      }\n    }\n  });\n\n  it('Multiple 2D features, 1D targets', async () => {\n    const dataset = new FakeNumericDataset({\n      xShape: {'input1': [3, 4], 'input2': [2, 3]},\n      yShape: [2],\n      batchSize: 8,\n      numBatches: 5\n    });\n    for (let k = 0; k < 2; ++k) {\n      // Run twice to make sure that calling iteartor() multiple times works.\n      const iterator = await dataset.iterator();\n      for (let i = 0; i < 5; ++i) {\n        const result = await iterator.next();\n        const xs = result.value.xs as NamedTensorMap;\n        expect(xs['input1'].shape).toEqual([8, 3, 4]);\n        expect(xs['input2'].shape).toEqual([8, 2, 3]);\n        expect((result.value.ys as Tensor).shape).toEqual([8, 2]);\n        expect(result.done).toEqual(false);\n      }\n      for (let i = 0; i < 3; ++i) {\n        const result = await iterator.next();\n        expect(result.value).toBeNull();\n        expect(result.done).toEqual(true);\n      }\n    }\n  });\n\n  it('Invalid batchSize leads to Error', () => {\n    expect(\n        () => new FakeNumericDataset(\n            {xShape: [3], yShape: [1], batchSize: -8, numBatches: 5}))\n        .toThrow();\n    expect(\n        () => new FakeNumericDataset(\n            {xShape: [3], yShape: [1], batchSize: 8.5, numBatches: 5}))\n        .toThrow();\n    expect(\n        () => new FakeNumericDataset(\n            {xShape: [3], yShape: [1], batchSize: 0, numBatches: 5}))\n        .toThrow();\n    expect(\n        () => new FakeNumericDataset(\n            // tslint:disable-next-line:no-any\n            {xShape: [3], yShape: [1], batchSize: 'foo' as any, numBatches: 5}))\n        .toThrow();\n  });\n\n  it('Invalid numBatches leads to Error', () => {\n    expect(\n        () => new FakeNumericDataset(\n            {xShape: [3], yShape: [1], batchSize: 8, numBatches: -5}))\n        .toThrow();\n    expect(\n        () => new FakeNumericDataset(\n            {xShape: [3], yShape: [1], batchSize: 8, numBatches: 5.5}))\n        .toThrow();\n    expect(\n        () => new FakeNumericDataset(\n            {xShape: [3], yShape: [1], batchSize: 8, numBatches: 0}))\n        .toThrow();\n    expect(\n        () => new FakeNumericDataset(\n            // tslint:disable-next-line:no-any\n            {xShape: [3], yShape: [1], batchSize: 8, numBatches: 'foo' as any}))\n        .toThrow();\n  });\n});\n"]}