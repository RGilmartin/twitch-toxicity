{"version":3,"file":"training_utils_test.js","sourceRoot":"","sources":["../../src/engine/training_utils_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {memory, tensor1d, tensor2d} from '@tensorflow/tfjs-core';\n\nimport {describeMathCPU, expectTensorsClose} from '../utils/test_utils';\n\nimport {ClassWeight, ClassWeightMap, standardizeClassWeights, standardizeWeights} from './training_utils';\n\ndescribeMathCPU('standardizeWeights', () => {\n  it('classWeights with 1D class-index target', async () => {\n    const y = tensor1d([0, 1, 2, 1, 0]);\n    const classWeight: ClassWeight = {0: 10, 1: 1, 2: 0.1};\n    const numTensors0 = memory().numTensors;\n    const classSampleWeight = await standardizeWeights(y, null, classWeight);\n    // Assert no memory leak. The extra tensor is `classSampleWeight` itself.\n    expect(memory().numTensors).toEqual(numTensors0 + 1);\n    expectTensorsClose(classSampleWeight, tensor1d([10, 1, 0.1, 1, 10]));\n    expect(y.isDisposed).toEqual(false);\n  });\n\n  it('classWeights with 2D class-index target', async () => {\n    const y = tensor2d([[3], [2], [0]]);\n    const classWeight: ClassWeight = {0: 10, 1: 1, 2: 0.1, 3: 0.01};\n    const numTensors0 = memory().numTensors;\n    const classSampleWeight = await standardizeWeights(y, null, classWeight);\n    // Assert no memory leak. The extra tensor is `classSampleWeight` itself.\n    expect(memory().numTensors).toEqual(numTensors0 + 1);\n    expectTensorsClose(classSampleWeight, tensor1d([0.01, 0.1, 10]));\n    expect(y.isDisposed).toEqual(false);\n  });\n\n  it('classWeights with 2D one-hot target', async () => {\n    const y = tensor2d([[0, 0, 0, 1], [0, 0, 1, 0], [1, 0, 0, 0]]);\n    const classWeight: ClassWeight = {0: 10, 1: 1, 2: 0.1, 3: 0.01};\n    const numTensors0 = memory().numTensors;\n    const classSampleWeight = await standardizeWeights(y, null, classWeight);\n    // Assert no memory leak. The extra tensor is `classSampleWeight` itself.\n    expect(memory().numTensors).toEqual(numTensors0 + 1);\n    expectTensorsClose(classSampleWeight, tensor1d([0.01, 0.1, 10]));\n    expect(y.isDisposed).toEqual(false);\n  });\n\n  it('classWeights with 1D class-index target: Missing class', async () => {\n    const y = tensor1d([0, 1, 2, 3, 2, 1, 0]);\n    const classWeight: ClassWeight = {0: 10, 1: 1, 2: 0.1};\n\n    let caughtError: Error;\n    try {\n      await standardizeWeights(y, null, classWeight);\n    } catch (error) {\n      caughtError = error;\n    }\n    expect(caughtError.message)\n        .toMatch(/classWeight must contain all classes.* class 3 .*/);\n  });\n\n  it('classWeights with 2D class-index target: Missing class', async () => {\n    const y = tensor2d([[3], [2], [0], [4]]);\n    const classWeight: ClassWeight = {0: 10, 1: 1, 2: 0.1, 3: 0.01};\n\n    let caughtError: Error;\n    try {\n      await standardizeWeights(y, null, classWeight);\n    } catch (error) {\n      caughtError = error;\n    }\n    expect(caughtError.message)\n        .toMatch(/classWeight must contain all classes.* class 4 .*/);\n  });\n\n  it('classWeights with 2D one-hot target: missing weight', async () => {\n    const y = tensor2d([[0, 0, 0, 1], [0, 0, 1, 0], [1, 0, 0, 0]]);\n    const classWeight: ClassWeight = {0: 10, 1: 1, 3: 0.01};\n\n    let caughtError: Error;\n    try {\n      await standardizeWeights(y, null, classWeight);\n    } catch (error) {\n      caughtError = error;\n    }\n    expect(caughtError.message)\n        .toMatch(/classWeight must contain all classes.* class 2 .*/);\n  });\n});\n\ndescribe('standardizeClassWeights', () => {\n  it('One output, ClassWeight singleton', () => {\n    const outputNames = ['output1'];\n    const classWeight: ClassWeight = {0: 1, 1: 2};\n    const output = standardizeClassWeights(classWeight, outputNames);\n    expect(output).toEqual([{0: 1, 1: 2}]);\n  });\n\n  it('One output, ClassWeight array', () => {\n    const outputNames = ['output1'];\n    const classWeight: ClassWeight[] = [{0: 1, 1: 2}];\n    const output = standardizeClassWeights(classWeight, outputNames);\n    expect(output).toEqual([{0: 1, 1: 2}]);\n  });\n\n  it('One output, ClassWeight dict', () => {\n    const outputNames = ['output1'];\n    const classWeight: ClassWeightMap = {'output1': {0: 1, 1: 2}};\n    const output = standardizeClassWeights(classWeight, outputNames);\n    expect(output).toEqual([{0: 1, 1: 2}]);\n  });\n\n  it('Two outputs, ClassWeight array', () => {\n    const outputNames = ['output1', 'output2'];\n    const classWeight: ClassWeight[] = [{0: 1, 1: 2}, {0: 10, 1: 20}];\n    const output = standardizeClassWeights(classWeight, outputNames);\n    expect(output).toEqual([{0: 1, 1: 2}, {0: 10, 1: 20}]);\n  });\n\n  it('Two outputs, ClassWeight dict', () => {\n    const outputNames = ['output1', 'output2'];\n    const classWeight:\n        ClassWeightMap = {'output2': {0: 10, 1: 20}, 'output1': {0: 1, 1: 2}};\n    const output = standardizeClassWeights(classWeight, outputNames);\n    expect(output).toEqual([{0: 1, 1: 2}, {0: 10, 1: 20}]);\n  });\n\n  it('Two outputs, ClassWeight singleton leads to Error', () => {\n    const outputNames = ['output1', 'output2'];\n    const classWeight: ClassWeight = {0: 10, 1: 20};\n    expect(() => standardizeClassWeights(classWeight, outputNames))\n        .toThrowError(/.*has multiple \\(2\\) outputs.*/);\n  });\n\n  it('Three outputs, ClassWeight array missing element', () => {\n    const outputNames = ['output1', 'output2', 'output3'];\n    const classWeight: ClassWeight[] = [{0: 1, 1: 2}, {0: 10, 1: 20}];\n    expect(() => standardizeClassWeights(classWeight, outputNames))\n        .toThrowError(\n            /.*classWeight is an array of 2 element.* model has 3 outputs/);\n  });\n\n  it('Three outputs, ClassWeight dict missing element is okay', () => {\n    const outputNames = ['output1', 'output2', 'output3'];\n    const classWeight:\n        ClassWeightMap = {'output1': {0: 1, 1: 2}, 'output3': {0: 10, 1: 20}};\n    const output = standardizeClassWeights(classWeight, outputNames);\n    expect(output).toEqual([{0: 1, 1: 2}, null, {0: 10, 1: 20}]);\n  });\n});\n"]}