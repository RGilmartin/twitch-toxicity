{"version":3,"file":"executor_test.js","sourceRoot":"","sources":["../../src/engine/executor_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAEH;;GAEG;AAEH,OAAO,EAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAU,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAC,MAAM,uBAAuB,CAAC;AAEzG,OAAO,KAAK,GAAG,MAAM,UAAU,CAAC;AAChC,OAAO,EAAC,eAAe,EAAE,qBAAqB,EAAE,kBAAkB,EAAC,MAAM,qBAAqB,CAAC;AAE/F,OAAO,EAAC,OAAO,EAAkB,QAAQ,EAAE,+CAA+C,EAAC,MAAM,YAAY,CAAC;AAE9G,gBAAgB;AAEhB,eAAe,CAAC,UAAU,EAAE,GAAG,EAAE;IAC/B,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAC,CAAC,CAAC;IAC9D,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAC,CAAC,CAAC;IAC9D,MAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9B,MAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAE9B,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;QAEzD,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7C,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;IACpD,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,IAAI,GAAG,EAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC;QACrC,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,QAAQ,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAChC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEvC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEvC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7C,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAChC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAElD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAClD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,SAAS,GAAG,IAAI,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QAChD,MAAM,SAAS,GAAG,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC1C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC9C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAExC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QACzB,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC9C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAEhC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAC,CAAC,CAAC;QACrE,MAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,eAAe,CAAC,iDAAiD,EAAE,GAAG,EAAE;IACtE,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAC7B,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC;QACzC,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,KAAK,CAAuB,CAAC;QACnE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,EAAE,CAAuB,CAAC;QAC7D,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAuB,CAAC;QAC1E,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,EAAE,CAAuB,CAAC;QAEhE,MAAM,EAAC,MAAM,EAAE,YAAY,EAAC,GACxB,+CAA+C,CAAC,KAAK,EAAE,IAAI,QAAQ,EAAE,CAAC,CAAC;QAC3E,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;QACnD,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC;QACzC,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,KAAK,CAAuB,CAAC;QACnE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,EAAE,CAAuB,CAAC;QAC7D,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAuB,CAAC;QAC1E,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,EAAE,CAAuB,CAAC;QAC7D,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAuB,CAAC;QAC1E,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,EAAE,CAAuB,CAAC;QAE7D,MAAM,EAAC,MAAM,EAAE,YAAY,EAAC,GACxB,+CAA+C,CAAC,EAAE,EAAE,IAAI,QAAQ,EAAE,CAAC,CAAC;QACxE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QACxD,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,qBAAqB,CAAC,UAAU,EAAE,GAAG,EAAE;IACrC,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,IAAI,CAAqB,CAAC;QAC1B,IAAI,CAAK,CAAC;QACV,IAAI,CAAqB,CAAC;QAC1B,IAAI,CAAK,CAAC;QACV,IAAI,CAAK,CAAC;QAEV,UAAU,CAAC,GAAG,EAAE;YACd,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAC,CAAC,CAAC;YAChE,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAChC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,iBAAiB,EAAE,MAAM,EAAC,CAAC,CAAC;YACjE,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,SAAS,EAAC,CAAC,CAAC;YACjE,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAChC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,iBAAiB,EAAE,MAAM,EAAC,CAAC,CAAC;YACjE,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAChC,EAAC,KAAK,EAAE,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,iBAAiB,EAAE,MAAM,EAAC,CAAC,CAAC;YACjE,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAuB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;YAChC,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YAC/C,kBAAkB,CACd,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAW,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;YACxB,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;YACzD,kBAAkB,CACd,OAAO,CAAC,CAAuB,EAAE,QAAQ,CAAW,EACpD,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;YACzD,kBAAkB,CACd,OAAO,CAAC,CAAuB,EAAE,QAAQ,CAAW,EACpD,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,QAAQ,GACV,IAAI,QAAQ,CAAC,CAAC,EAAC,GAAG,EAAE,CAAuB,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;YAClE,kBAAkB,CACd,OAAO,CAAC,CAAuB,EAAE,QAAQ,CAAW,EACpD,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,kEAAkE,EAClE,GAAG,EAAE;YACH,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;YAChC,MAAM,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,CAAuB,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACrE,CAAC,CAAC,CAAC;QAEN,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC;YACzC,IAAI,CAAC,GAAuB,KAAK,CAAC;YAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE;gBAC3B,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC;qBACxD,KAAK,CAAC,CAAC,CAAuB,CAAC;aACzC;YACD,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;YACvE,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC;YACxC,MAAM,KAAK,GAAmB,EAAE,CAAC;YACjC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;YAC3C,yBAAyB;YACzB,MAAM,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YACjD,kEAAkE;YAClE,aAAa;YACb,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,mBAAmB,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;YAClE,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAC,CAAC,CAAC;YACtE,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;gBACnC,KAAK,EAAE,CAAC;gBACR,UAAU,EAAE,QAAQ;gBACpB,iBAAiB,EAAE,MAAM;gBACzB,IAAI,EAAE,aAAa;aACpB,CAAC,CAAC;YACH,MAAM,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;gBACnC,KAAK,EAAE,CAAC;gBACR,UAAU,EAAE,QAAQ;gBACpB,iBAAiB,EAAE,MAAM;gBACzB,IAAI,EAAE,aAAa;aACpB,CAAC,CAAC;YACH,MAAM,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;gBACnC,KAAK,EAAE,CAAC;gBACR,UAAU,EAAE,QAAQ;gBACpB,iBAAiB,EAAE,MAAM;gBACzB,IAAI,EAAE,aAAa;aACpB,CAAC,CAAC;YACH,MAAM,EAAE,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAuB,CAAC;YACtD,MAAM,EAAE,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAuB,CAAC;YAEtD,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;YACzD,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,WAAW,CAAC,WAAW,CAAC,GAAG,EAAE;gBAC3B,WAAW,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAa,CAAC;YACxD,kBAAkB,CACd,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACpE,kBAAkB,CACd,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Unit tests for executor_test.ts.\n */\n\nimport {dispose, memory, ones, Tensor, tensor1d, tensor2d, tensor3d, zeros} from '@tensorflow/tfjs-core';\n\nimport * as tfl from '../index';\nimport {describeMathCPU, describeMathCPUAndGPU, expectTensorsClose} from '../utils/test_utils';\n\nimport {execute, ExecutionProbe, FeedDict, getTopologicalSortAndRecipientCountsForOneFetch} from './executor';\n\n// tslint:enable\n\ndescribeMathCPU('FeedDict', () => {\n  const x = tfl.input({shape: [], name: 'x', dtype: 'float32'});\n  const y = tfl.input({shape: [], name: 'y', dtype: 'float32'});\n  const xValue = tensor1d([42]);\n  const yValue = tensor1d([21]);\n\n  it('FeedDict from a single Feed', () => {\n    const feedDict = new FeedDict([{key: x, value: xValue}]);\n\n    expect(feedDict.hasKey(x)).toBe(true);\n    expect(feedDict.hasKey(y)).toBe(false);\n    expect(feedDict.getValue(x)).toEqual(xValue);\n    expect(() => feedDict.getValue(y)).toThrowError();\n  });\n  it('FeedDict from duplicate Feeds throws error', () => {\n    const feed = {key: x, value: xValue};\n    expect(() => new FeedDict([feed, feed])).toThrowError(/Duplicate key/);\n  });\n  it('Add key and value', () => {\n    const feedDict = new FeedDict();\n    expect(feedDict.hasKey(x)).toBe(false);\n    expect(feedDict.hasKey(y)).toBe(false);\n\n    expect(feedDict.add(x, xValue)).toEqual(feedDict);\n    expect(feedDict.hasKey(x)).toBe(true);\n    expect(feedDict.hasKey(y)).toBe(false);\n\n    expect(feedDict.add(y, yValue)).toEqual(feedDict);\n    expect(feedDict.hasKey(x)).toBe(true);\n    expect(feedDict.hasKey(y)).toBe(true);\n    expect(feedDict.getValue(x)).toEqual(xValue);\n    expect(feedDict.getValue(y)).toEqual(yValue);\n  });\n  it('getValue by tensor name', () => {\n    const feedDict = new FeedDict();\n    expect(feedDict.add(x, xValue)).toEqual(feedDict);\n    expect(feedDict.add(y, yValue)).toEqual(feedDict);\n\n    expect(feedDict.getValue(x.name)).toEqual(xValue);\n    expect(feedDict.getValue(y.name)).toEqual(yValue);\n  });\n  it('Copy constructor', () => {\n    const feedDict1 = new FeedDict().add(x, xValue);\n    const feedDict2 = new FeedDict(feedDict1);\n    expect(feedDict2.hasKey(x)).toBe(true);\n    expect(feedDict2.getValue(x)).toEqual(xValue);\n    expect(feedDict2.hasKey(y)).toBe(false);\n\n    feedDict2.add(y, yValue);\n    expect(feedDict2.hasKey(y)).toBe(true);\n    expect(feedDict2.getValue(y)).toEqual(yValue);\n    expect(feedDict1.hasKey(y)).toBe(false);\n  });\n  it('Add duplicate key and value leads to error', () => {\n    const feedDict = new FeedDict();\n\n    expect(feedDict.add(x, xValue)).toEqual(feedDict);\n    expect(() => feedDict.add(x, xValue)).toThrowError(/Duplicate key/);\n  });\n  it('Feeding compatible value with undetermined dimension works', () => {\n    const s = tfl.input({shape: [null, 4], name: 's', dtype: 'float32'});\n    const sValue = tensor3d([1, 3, 3, 7], [1, 1, 4]);\n    const feedDict = new FeedDict([{key: s, value: sValue}]);\n    expect(feedDict.getValue(s)).toEqual(sValue);\n  });\n});\n\ndescribeMathCPU('getTopologicalSortAndRecipientCountsForOneFetch', () => {\n  it('Triangular topology', () => {\n    const input = tfl.input({shape: [2, 6]});\n    const f1 = tfl.layers.flatten().apply(input) as tfl.SymbolicTensor;\n    const r1 = tfl.layers.reLU().apply(f1) as tfl.SymbolicTensor;\n    const c1 = tfl.layers.concatenate().apply([f1, r1]) as tfl.SymbolicTensor;\n    const relu2 = tfl.layers.reLU().apply(c1) as tfl.SymbolicTensor;\n\n    const {sorted, recipientMap} =\n        getTopologicalSortAndRecipientCountsForOneFetch(relu2, new FeedDict());\n    expect(sorted).toEqual([input, f1, r1, c1, relu2]);\n    expect(recipientMap[input.name].size).toEqual(1);\n    expect(recipientMap[f1.name].size).toEqual(2);\n    expect(recipientMap[r1.name].size).toEqual(1);\n    expect(recipientMap[c1.name].size).toEqual(1);\n  });\n\n  it('Double triangular topology', () => {\n    const input = tfl.input({shape: [2, 6]});\n    const f1 = tfl.layers.flatten().apply(input) as tfl.SymbolicTensor;\n    const r1 = tfl.layers.reLU().apply(f1) as tfl.SymbolicTensor;\n    const c1 = tfl.layers.concatenate().apply([f1, r1]) as tfl.SymbolicTensor;\n    const r2 = tfl.layers.reLU().apply(c1) as tfl.SymbolicTensor;\n    const c2 = tfl.layers.concatenate().apply([f1, r2]) as tfl.SymbolicTensor;\n    const r3 = tfl.layers.reLU().apply(c2) as tfl.SymbolicTensor;\n\n    const {sorted, recipientMap} =\n        getTopologicalSortAndRecipientCountsForOneFetch(r3, new FeedDict());\n    expect(sorted).toEqual([input, f1, r1, c1, r2, c2, r3]);\n    expect(recipientMap[input.name].size).toEqual(1);\n    expect(recipientMap[f1.name].size).toEqual(3);\n    expect(recipientMap[r1.name].size).toEqual(1);\n    expect(recipientMap[c1.name].size).toEqual(1);\n    expect(recipientMap[r2.name].size).toEqual(1);\n    expect(recipientMap[c2.name].size).toEqual(1);\n  });\n});\n\ndescribeMathCPUAndGPU('Executor', () => {\n  describe('Linear Graph Topology', () => {\n    let x: tfl.SymbolicTensor;\n    let y: {};\n    let u: tfl.SymbolicTensor;\n    let v: {};\n    let w: {};\n\n    beforeEach(() => {\n      x = tfl.input({shape: [2], name: 'fooInput', dtype: 'float32'});\n      const denseLayer1 = tfl.layers.dense(\n          {units: 5, activation: 'linear', kernelInitializer: 'ones'});\n      y = denseLayer1.apply(x);\n      u = tfl.input({shape: [2], name: 'footInput', dtype: 'float32'});\n      const denseLayer2 = tfl.layers.dense(\n          {units: 5, activation: 'linear', kernelInitializer: 'ones'});\n      const denseLayer3 = tfl.layers.dense(\n          {units: 3, activation: 'linear', kernelInitializer: 'ones'});\n      v = denseLayer2.apply(u);\n      w = denseLayer3.apply(v as tfl.SymbolicTensor);\n    });\n\n    it('Execute Input directly', () => {\n      const xValue = ones([2, 2]);\n      const feedDict = new FeedDict().add(x, xValue);\n      expectTensorsClose(\n          execute(x, feedDict) as Tensor, tensor2d([1, 1, 1, 1], [2, 2]));\n    });\n    it('Input to Dense', () => {\n      const xValue = ones([2, 2]);\n      const feedDict = new FeedDict([{key: x, value: xValue}]);\n      expectTensorsClose(\n          execute(y as tfl.SymbolicTensor, feedDict) as Tensor,\n          tensor2d([2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 5]));\n    });\n    it('Input to Dense1 to Dense2', () => {\n      const uValue = ones([2, 2]);\n      const feedDict = new FeedDict([{key: u, value: uValue}]);\n      expectTensorsClose(\n          execute(w as tfl.SymbolicTensor, feedDict) as Tensor,\n          tensor2d([10, 10, 10, 10, 10, 10], [2, 3]));\n    });\n    it('Feed value to intermediate layers is supported', () => {\n      const vValue = ones([3, 5]);\n      const feedDict =\n          new FeedDict([{key: v as tfl.SymbolicTensor, value: vValue}]);\n      expectTensorsClose(\n          execute(w as tfl.SymbolicTensor, feedDict) as Tensor,\n          tensor2d([5, 5, 5, 5, 5, 5, 5, 5, 5], [3, 3]));\n    });\n    it('Calling execute without all Input feeds available leads to error',\n       () => {\n         const feedDict = new FeedDict();\n         expect(() => execute(y as tfl.SymbolicTensor, feedDict)).toThrow();\n       });\n\n    it('Maximum memory use under linear graph topology', () => {\n      const input = tfl.input({shape: [2, 3]});\n      let y: tfl.SymbolicTensor = input;\n      for (let i = 0; i < 10; ++i) {\n        y = tfl.layers.reshape({targetShape:　i % 2 === 0 ? [6] : [3, 2]})\n                .apply(y) as tfl.SymbolicTensor;\n      }\n      const feedDict = new FeedDict([{key: input, value: zeros([4, 2, 3])}]);\n      const numTensors0 = memory().numTensors;\n      const probe: ExecutionProbe = {};\n      dispose(execute(y, feedDict, null, probe));\n      // Assert no memory leak.\n      expect(memory().numTensors).toEqual(numTensors0);\n      // Assert that intermediate tensors are cleaned up properly during\n      // execution.\n      expect(probe.maxNumTensors).toBeLessThanOrEqual(numTensors0 + 1);\n    });\n  });\n\n  describe('Diamond Graph Topology', () => {\n    it('Calling execute with two fetches and diamond graph works', () => {\n      const x = tfl.input({shape: [2], name: 'fooInput', dtype: 'float32'});\n      const denseLayer1 = tfl.layers.dense({\n        units: 5,\n        activation: 'linear',\n        kernelInitializer: 'ones',\n        name: 'denseLayer1'\n      });\n      const y = denseLayer1.apply(x);\n      const denseLayer2 = tfl.layers.dense({\n        units: 4,\n        activation: 'linear',\n        kernelInitializer: 'ones',\n        name: 'denseLayer2'\n      });\n      const denseLayer3 = tfl.layers.dense({\n        units: 3,\n        activation: 'linear',\n        kernelInitializer: 'ones',\n        name: 'denseLayer3'\n      });\n      const z1 = denseLayer2.apply(y) as tfl.SymbolicTensor;\n      const z2 = denseLayer3.apply(y) as tfl.SymbolicTensor;\n\n      const xValue = ones([2, 2]);\n      const feedDict = new FeedDict([{key: x, value: xValue}]);\n      let callCounter = 0;\n      denseLayer1.setCallHook(() => {\n        callCounter++;\n      });\n\n      const outputs = execute([z1, z2], feedDict) as Tensor[];\n      expectTensorsClose(\n          outputs[0], tensor2d([10, 10, 10, 10, 10, 10, 10, 10], [2, 4]));\n      expectTensorsClose(\n          outputs[1], tensor2d([10, 10, 10, 10, 10, 10], [2, 3]));\n      expect(callCounter).toEqual(1);\n    });\n  });\n});\n"]}