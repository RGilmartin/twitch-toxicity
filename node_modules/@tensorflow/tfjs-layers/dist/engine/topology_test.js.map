{"version":3,"file":"topology_test.js","sourceRoot":"","sources":["../../src/engine/topology_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {eye, memory, NamedTensorMap, ones, Tensor, tensor1d, tensor2d, zeros} from '@tensorflow/tfjs-core';\n\nimport * as tfl from '../index';\nimport * as initializers from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {describeMathCPU, describeMathCPUAndGPU, expectTensorsClose} from '../utils/test_utils';\nimport {LayerVariable, onesVariable, zerosVariable} from '../variables';\n\nimport {InputSpec, Layer, LayerArgs, Node, SymbolicTensor} from './topology';\n\nclass LayerForTest extends tfl.layers.Layer {\n  static className = 'LayerForTest';\n  constructor(args: LayerArgs = {}) {\n    super(args);\n  }\n}\n\ndescribe('InputSpec', () => {\n  it('initializes with expected default values.', () => {\n    const inputSpec = new InputSpec({});\n    expect(inputSpec.dtype).toBeUndefined();\n    expect(inputSpec.shape).toBeUndefined();\n    expect(inputSpec.ndim).toBeUndefined();\n    expect(inputSpec.maxNDim).toBeUndefined();\n    expect(inputSpec.minNDim).toBeUndefined();\n    expect(inputSpec.axes).toEqual({});\n  });\n\n  it('initializes with inputSpec.ndim = shape.length when shape is specified.',\n     () => {\n       const shape = [1, 2, 3];\n       const expectedValue = shape.length;\n       const inputSpec = new InputSpec({shape: [1, 2, 3], ndim: -1});\n       expect(inputSpec.ndim).toEqual(expectedValue);\n     });\n\n  it('initializes inputSpec.axes when axes specified.', () => {\n    const expectedValue = {1: 2};\n    const inputSpec = new InputSpec({axes: expectedValue});\n    expect(inputSpec.axes).toEqual(expectedValue);\n  });\n});\n\ndescribe('Node', () => {\n  const outboundLayerName = 'outboundLayer';\n  const inboundLayerName = 'inboundLayer';\n  const outboundLayer = new LayerForTest({name: outboundLayerName});\n  const inboundLayers = [new LayerForTest({name: inboundLayerName})];\n  const nodeIndices = [0];\n  const tensorIndices = [0];\n  const inputTensors = [new tfl.SymbolicTensor('float32', [1], null, [], {})];\n  const outputTensors =\n      [new tfl.SymbolicTensor('float32', [2, 2], null, [], {})];\n  const inputMasks = [zeros([1])];\n  const outputMasks = [zeros([1])];\n  const inputShapes = [[1]];\n  const outputShapes = [[1], [1]];\n  const callArgs = {mask: zeros([1])};\n  const node = new Node(\n      {\n        outboundLayer,\n        inboundLayers,\n        nodeIndices,\n        tensorIndices,\n        inputTensors,\n        outputTensors,\n        inputMasks,\n        outputMasks,\n        inputShapes,\n        outputShapes\n      },\n      callArgs);\n\n  it('initializes object as expected.', () => {\n    expect(node.outboundLayer).toEqual(outboundLayer);\n    expect(node.inboundLayers).toEqual(inboundLayers);\n    expect(node.nodeIndices).toEqual(nodeIndices);\n    expect(node.tensorIndices).toEqual(tensorIndices);\n    expect(node.inputTensors).toEqual(inputTensors);\n    expect(node.outputTensors).toEqual(outputTensors);\n    expect(node.inputMasks).toEqual(inputMasks);\n    expect(node.outputMasks).toEqual(outputMasks);\n    expect(node.inputShapes).toEqual(inputShapes);\n    expect(node.outputShapes).toEqual(outputShapes);\n    expect(node.callArgs).toEqual(callArgs);\n    expect(inboundLayers[0].outboundNodes).toEqual([node]);\n    expect(node.outboundLayer.inboundNodes).toEqual([node]);\n  });\n\n  it('generates expected SerializableNodeConfig.', () => {\n    const nodeConfig = node.getConfig();\n    expect(nodeConfig.outboundLayer).toEqual(outboundLayerName);\n    expect(nodeConfig.inboundLayers).toEqual([inboundLayerName]);\n    expect(nodeConfig.nodeIndices).toEqual(nodeIndices);\n    expect(nodeConfig.tensorIndices).toEqual(tensorIndices);\n  });\n\n  it('generates unique IDs', () => {\n    const secondNode = new Node(\n        {\n          outboundLayer,\n          inboundLayers,\n          nodeIndices,\n          tensorIndices,\n          inputTensors,\n          outputTensors,\n          inputMasks,\n          outputMasks,\n          inputShapes,\n          outputShapes\n        },\n        callArgs);\n    expect(secondNode.id).not.toEqual(node.id);\n  });\n});\n\ndescribeMathCPU('Layer', () => {\n  describe('initialized to its defaults', () => {\n    // TODO(bileschi): This should be tfl.layers.Layer for some future version\n    // of TS that doesn't fail to compile.\n    let defaultLayer: Layer;\n\n    beforeEach(() => {\n      defaultLayer = new LayerForTest();\n    });\n\n    it('has a default layer name of layer_....', () => {\n      expect(defaultLayer.name).toMatch(/^layer_.+$/);\n    });\n\n    it('has null inputSpecs.', () => {\n      expect(defaultLayer.inputSpec).toBeNull();\n    });\n\n    it('does not support masking (supportsMasking == false).', () => {\n      expect(defaultLayer.supportsMasking).toEqual(false);\n    });\n\n    it('is trainable.', () => {\n      expect(defaultLayer.trainable).toEqual(true);\n    });\n\n    it('has an undefined batchInputShape.', () => {\n      expect(defaultLayer.batchInputShape).toBeUndefined();\n    });\n\n    it('has an undefined dtype.', () => {\n      expect(defaultLayer.dtype).toBeUndefined();\n    });\n\n    it('has null initialWeights.', () => {\n      expect(defaultLayer.initialWeights).toBeNull();\n    });\n\n    it('has an empty inboundNodes list.', () => {\n      expect(defaultLayer.inboundNodes).toEqual([]);\n    });\n\n    it('has an empty outboundNodes list.', () => {\n      expect(defaultLayer.outboundNodes).toEqual([]);\n    });\n\n    it('has an empty losses list.', () => {\n      expect(defaultLayer.losses).toEqual([]);\n    });\n\n    it('has an empty updates list.', () => {\n      expect(defaultLayer.updates).toEqual([]);\n    });\n\n    it('is not built (built == false).', () => {\n      expect(defaultLayer.built).toEqual(false);\n    });\n\n    it('has an empty trainableWeights list.', () => {\n      expect(defaultLayer.trainableWeights).toEqual([]);\n    });\n\n    it('has an empty nonTrainableWeights list.', () => {\n      expect(defaultLayer.nonTrainableWeights).toEqual([]);\n    });\n\n    it('has an empty weights list.', () => {\n      expect(defaultLayer.weights).toEqual([]);\n    });\n\n    it('produces a unique ID', () => {\n      const secondLayer = new LayerForTest();\n      expect(defaultLayer.id).not.toEqual(secondLayer.id);\n    });\n\n    it('stateful is false by default', () => {\n      const layer = new LayerForTest();\n      expect(layer.stateful).toBe(false);\n    });\n\n    it('returns null if it doesn`t support masking and no mask is passed in.',\n       () => {\n         expect(defaultLayer.computeMask([], null)).toBeNull();\n       });\n\n    it('throws exception if it doesn`t support masking and a ' +\n           'mask is passed in.',\n       () => {\n         const mask = ones([1]);\n         expect(() => defaultLayer.computeMask([], mask))\n             .toThrowError(/does not support masking/);\n       });\n\n    it('returns the same mask passed in if it supports masking', () => {\n      const mask = ones([1]);\n      defaultLayer.supportsMasking = true;\n      expect(defaultLayer.computeMask([], mask)).toEqual(mask);\n    });\n\n    it('correctly generates a config for serialization', () => {\n      const config = defaultLayer.getConfig();\n      expect(config.name).toEqual(defaultLayer.name);\n      expect(config.trainable).toEqual(defaultLayer.trainable);\n      expect(config.batchInputShape).toBeUndefined();\n      expect(config.dtype).toBeUndefined();\n    });\n  });\n\n  describe('A layer with non-default arguments', () => {\n    it('initializes layer with given name.', () => {\n      const name = 'layer name';\n      const layer = new LayerForTest({name});\n      expect(layer.name).toMatch(name);\n      const config = layer.getConfig();\n      expect(config.name).toEqual(layer.name);\n    });\n\n    for (const trainable of [true, false]) {\n      it('initializes layer as trainable, if specified.', () => {\n        const layer = new LayerForTest({trainable});\n        expect(layer.trainable).toEqual(trainable);\n        const config = layer.getConfig();\n        expect(config.trainable).toEqual(layer.trainable);\n      });\n    }\n\n    for (const batchInputShape of [[], [1]]) {\n      it('initializes batchInputShape to layerConfig.batchInputShape.', () => {\n        const layer = new LayerForTest({batchInputShape});\n        expect(layer.batchInputShape).toEqual(batchInputShape);\n        const config = layer.getConfig();\n        expect(config.batchInputShape).toEqual(layer.batchInputShape);\n      });\n    }\n\n    it('initializes batchInputShape to layerConfig.batchInputShape even if ' +\n           'layerConfig.inputShape is defined.',\n       () => {\n         const batchInputShape = [1];\n         const inputShape = [2, 3];\n         const layer = new LayerForTest({batchInputShape, inputShape});\n         expect(layer.batchInputShape).toEqual(batchInputShape);\n       });\n\n    for (const [batchSize, inputShape, expectedBatchInputShape] of [\n             [null, [], [null]], [null, [1], [null, 1]], [3, [], [3]],\n             [3, [1], [3, 1]]]) {\n      it('initializes batchInputShape to layerConfig.inputShape.', () => {\n        const layer = new LayerForTest(\n            {batchSize: batchSize as number, inputShape: inputShape as Shape});\n        expect(layer.batchInputShape).toEqual(expectedBatchInputShape as Shape);\n      });\n    }\n\n    it('initializes dtype to float32 if layerConfig.inputShape is set.', () => {\n      const layer = new LayerForTest({inputShape: []});\n      expect(layer.dtype).toEqual('float32');\n      const config = layer.getConfig();\n      expect(config.dtype).toEqual(layer.dtype);\n    });\n\n    it('initializes dtype to float32 if layerConfig.batchInputShape is set.',\n       () => {\n         const layer = new LayerForTest({batchInputShape: []});\n         expect(layer.dtype).toEqual('float32');\n       });\n\n    it('initializes initialWeights if present.', () => {\n      const weights = [zeros([1])];\n      const layer = new LayerForTest({weights});\n      expect(layer.initialWeights).toEqual(weights);\n    });\n\n    it('Layer with duplicate weight names throws error', () => {\n      class LayerForTest extends tfl.layers.Layer {\n        static className = 'LayerForTest';\n        constructor(args: LayerArgs = {}) {\n          super(args);\n          this.addWeight(\n              'foo', [1, 2], 'float32', initializers.getInitializer('zeros'));\n          this.addWeight(\n              'foo', [2, 3], 'float32', initializers.getInitializer('zeros'));\n        }\n      }\n      expect(() => new LayerForTest())\n          .toThrowError(/[Dd]uplicate weight name/);\n    });\n  });\n\n  it('can be set to built.', () => {\n    const layer = new LayerForTest();\n    layer.built = true;\n    expect(layer.built).toEqual(true);\n  });\n\n  // Weights used for subsequent tests\n  const trainableWeights = [zerosVariable([1])];\n  const nonTrainableWeights = [onesVariable([1])];\n  it('can set trainableWeights.', () => {\n    const layer = new LayerForTest();\n    layer.trainableWeights = trainableWeights;\n    expect(layer.trainableWeights).toEqual(trainableWeights);\n  });\n\n  it('doesn\\'t return trainableWeights if layer is not trainable, even ' +\n         'if they exist',\n     () => {\n       const layer = new LayerForTest({trainable: false});\n       layer.trainableWeights = trainableWeights;\n       expect(layer.trainableWeights).toEqual([]);\n     });\n\n  it('can set nonTrainableWeights.', () => {\n    const layer = new LayerForTest();\n    layer.nonTrainableWeights = nonTrainableWeights;\n    expect(layer.nonTrainableWeights).toEqual(nonTrainableWeights);\n  });\n\n  it('only returns nonTrainableWeights for nonTrainableWeights if the layer ' +\n         'is trainable.',\n     () => {\n       const layer = new LayerForTest({trainable: true});\n       layer.trainableWeights = trainableWeights;\n       layer.nonTrainableWeights = nonTrainableWeights;\n       expect(layer.nonTrainableWeights).toEqual(nonTrainableWeights);\n     });\n\n  it('concats trainable and nonTrainableWeights for nonTrainableWeights if ' +\n         'not trainable.',\n     () => {\n       const layer = new LayerForTest({trainable: false});\n       const expectedWeights = trainableWeights.concat(nonTrainableWeights);\n       layer.trainableWeights = trainableWeights;\n       layer.nonTrainableWeights = nonTrainableWeights;\n       expect(layer.nonTrainableWeights).toEqual(expectedWeights);\n     });\n\n  it('Setting trainable of layer sets Variable.trainable', () => {\n    const layer1 = tfl.layers.dense({units: 3});\n    layer1.build([4]);\n    // The weights should start from a trainable = true state.\n    expect(layer1.weights[0].trainable).toEqual(true);\n    expect(layer1.weights[1].trainable).toEqual(true);\n    layer1.trainable = false;\n    expect(layer1.weights[0].trainable).toEqual(false);\n    expect(layer1.weights[1].trainable).toEqual(false);\n    layer1.trainable = true;\n    expect(layer1.weights[0].trainable).toEqual(true);\n    expect(layer1.weights[1].trainable).toEqual(true);\n  });\n\n  for (const trainable of [true, false]) {\n    it('concats trainable and nonTrainableWeights for weights regardless of ' +\n           'whether the layer is trainable trainable.',\n       () => {\n         const layer = new LayerForTest({trainable});\n         const expectedWeights = trainableWeights.concat(nonTrainableWeights);\n         layer.trainableWeights = trainableWeights;\n         layer.nonTrainableWeights = nonTrainableWeights;\n         expect(layer.weights).toEqual(expectedWeights);\n       });\n  }\n\n  describe('assertInputCompatibility()', () => {\n    function runAssert(\n        layer: Layer,\n        inputs: Tensor|Tensor[]|tfl.SymbolicTensor|tfl.SymbolicTensor[]) {\n      // tslint:disable-next-line:no-any\n      (layer as any).assertInputCompatibility(inputs);\n    }\n    const testInputs = [\n      () => ones([1]), () => [ones([1])],\n      () => new tfl.SymbolicTensor('float32', [1], null, [], {}),\n      () => [new tfl.SymbolicTensor('float32', [1], null, [], {})]\n    ];\n\n    for (const inputs of testInputs) {\n      it('doesn\\'t raise an exception if no inputSpec is provided.', () => {\n        const layer = new LayerForTest();\n        runAssert(layer, inputs());\n      });\n\n      it('doesn\\'t raise exception if number of inputs == number of ' +\n             'inputSpecs.',\n         () => {\n           const inputSpecs = [new InputSpec({})];\n           const layer = new LayerForTest();\n           layer.inputSpec = inputSpecs;\n           expect(() => runAssert(layer, inputs())).not.toThrowError();\n         });\n\n      it('throws exception if number of inputs != number of inputSpecs.',\n         () => {\n           const inputSpecs = [new InputSpec({}), new InputSpec({})];\n           const layer = new LayerForTest();\n           layer.inputSpec = inputSpecs;\n           expect(() => runAssert(layer, inputs()))\n               .toThrowError(/expects [0-9]+ inputs/);\n         });\n\n      it('doesn\\'t raise exception if inputs\\' ndim == inputSpecs.ndim.',\n         () => {\n           const inputSpecs = [new InputSpec({ndim: 1})];\n           const layer = new LayerForTest();\n           layer.inputSpec = inputSpecs;\n           expect(() => runAssert(layer, inputs())).not.toThrowError();\n         });\n\n      it('throws exception if inputs\\' ndim != inputSpecs.ndim.', () => {\n        const inputSpecs = [new InputSpec({ndim: 2})];\n        const layer = new LayerForTest();\n        layer.inputSpec = inputSpecs;\n        expect(() => runAssert(layer, inputs())).toThrowError(/expected ndim=/);\n      });\n\n      it('doesn\\'t raise exception if inputs\\' ndim <= inputSpecs.maxNdim.',\n         () => {\n           const inputSpecs = [new InputSpec({maxNDim: 1})];\n           const layer = new LayerForTest();\n           layer.inputSpec = inputSpecs;\n           expect(() => runAssert(layer, inputs())).not.toThrowError();\n         });\n\n      it('throws exception if inputs\\' ndim > inputSpecs.maxNdim.', () => {\n        const inputSpecs = [new InputSpec({maxNDim: 0})];\n        const layer = new LayerForTest();\n        layer.inputSpec = inputSpecs;\n        expect(() => runAssert(layer, inputs()))\n            .toThrowError(/expected max_ndim=/);\n      });\n\n      it('doesn\\'t raise exception if inputs\\' ndim >= inputSpecs.minNdim.',\n         () => {\n           const inputSpecs = [new InputSpec({minNDim: 1})];\n           const layer = new LayerForTest();\n           layer.inputSpec = inputSpecs;\n           expect(() => runAssert(layer, inputs())).not.toThrowError();\n         });\n\n      it('throws exception if inputs\\' ndim < inputSpecs.minNdim.', () => {\n        const inputSpecs = [new InputSpec({minNDim: 2})];\n        const layer = new LayerForTest();\n        layer.inputSpec = inputSpecs;\n        expect(() => runAssert(layer, inputs()))\n            .toThrowError(/expected min_ndim=/);\n      });\n\n      it('doesn\\'t raise exception if inputs\\' dtype == inputSpecs.dtype.',\n         () => {\n           const inputSpecs = [new InputSpec({dtype: 'float32'})];\n           const layer = new LayerForTest();\n           layer.inputSpec = inputSpecs;\n           expect(() => runAssert(layer, inputs())).not.toThrowError();\n         });\n\n      // TODO(michaelterry): Add dtype test once more dtypes supported.\n\n      it('doesn\\'t raise exception if inputs\\' dimensions == inputSpecs.axes.',\n         () => {\n           const inputSpecs = [new InputSpec({axes: {0: 1}})];\n           const layer = new LayerForTest();\n           layer.inputSpec = inputSpecs;\n           expect(() => runAssert(layer, inputs())).not.toThrowError();\n         });\n\n      it('throws exception if inputs\\' dimensions != inputSpecs.axes.', () => {\n        const inputSpecs = [new InputSpec({axes: {0: 2}})];\n        const layer = new LayerForTest();\n        layer.inputSpec = inputSpecs;\n        expect(() => runAssert(layer, inputs())).toThrowError(/expected axis/);\n      });\n\n      it('throws exception if inputs\\' dimensions don\\'t have the same ' +\n             'number of inputSpecs.axes.',\n         () => {\n           const inputSpecs = [new InputSpec({axes: {0: 1, 2: 1}})];\n           const layer = new LayerForTest();\n           layer.inputSpec = inputSpecs;\n           expect(() => runAssert(layer, inputs()))\n               .toThrowError(/expected axis/);\n         });\n\n      it('doesn\\'t raise exception if inputs\\' shape == inputSpecs.shape.',\n         () => {\n           const inputSpecs = [new InputSpec({shape: [1]})];\n           const layer = new LayerForTest();\n           layer.inputSpec = inputSpecs;\n           expect(() => runAssert(layer, inputs())).not.toThrowError();\n         });\n\n      it('throws exception if inputs\\' shape != inputSpecs.shape.', () => {\n        const inputSpecs = [new InputSpec({shape: [2]})];\n        const layer = new LayerForTest();\n        layer.inputSpec = inputSpecs;\n        expect(() => runAssert(layer, inputs())).toThrowError(/expected shape/);\n      });\n    }\n  });\n\n  describe('apply() passed 1 SymbolicTensor', () => {\n    const firstLayer = new LayerForTest({name: 'firstLayer'});\n    const secondLayer = new LayerForTest({name: 'secondLayer'});\n    const callArgs = {a: 1};\n    const singleSymbolicTensor =\n        new tfl.SymbolicTensor('float32', [1], firstLayer, [], {});\n    const returnedTensor =\n        secondLayer.apply(singleSymbolicTensor, callArgs) as tfl.SymbolicTensor;\n\n    it('returns a SymbolicTensor.', () => {\n      expect(returnedTensor instanceof tfl.SymbolicTensor).toBe(true);\n    });\n\n    it('returns a SymbolicTensor with a reference to the source layer.', () => {\n      expect(returnedTensor.sourceLayer).toEqual(secondLayer);\n    });\n\n    it('returns a SymbolicTensor with a reference to the inputs passed ' +\n           'to apply().',\n       () => {\n         expect(returnedTensor.inputs).toEqual([singleSymbolicTensor]);\n         expect(returnedTensor.callArgs).toEqual(callArgs);\n       });\n\n    it('returns a SymbolicTensor with nodeIndex and tensorIndex set.', () => {\n      expect(returnedTensor.nodeIndex).toBeDefined();\n      expect(returnedTensor.tensorIndex).toBeDefined();\n    });\n\n    it('returns a SymbolicTensor with the name set.', () => {\n      expect(returnedTensor.name).toMatch(/secondLayer/);\n    });\n\n    it('is built.', () => {\n      expect(secondLayer.built).toBe(true);\n    });\n\n    it('Incompatible inputShape leads to warning', () => {\n      let recordedWarnMessage: string;\n      spyOn(console, 'warn')\n          .and.callFake((message: string) => recordedWarnMessage = message);\n      const layer1 = tfl.layers.dense({units: 2, inputShape: [5]});\n      layer1.apply(tfl.input({shape: [4]}));\n      expect(recordedWarnMessage)\n          .toMatch(/shape of the input tensor .*null,4.* not match .*null,5.*/);\n    });\n\n    it('Incompatible inputShape leads to warning: batchInputShape', () => {\n      let recordedWarnMessage: string;\n      spyOn(console, 'warn')\n          .and.callFake((message: string) => recordedWarnMessage = message);\n      const layer1 = tfl.layers.dense({units: 2, batchInputShape: [2, 3, 5]});\n      layer1.apply(tfl.input({shape: [4, 5]}));\n      expect(recordedWarnMessage)\n          .toMatch(\n              /shape of the input tensor .*null,4,5.* not match .*2,3,5.*/);\n    });\n\n    it('Incompatible inputShape rank leads to warning', () => {\n      let recordedWarnMessage: string;\n      spyOn(console, 'warn')\n          .and.callFake((message: string) => recordedWarnMessage = message);\n      const layer1 = tfl.layers.dense({units: 2, inputShape: [5]});\n      layer1.apply(tfl.input({shape: [4, 3]}));\n      expect(recordedWarnMessage)\n          .toMatch(/rank .*null,4,3.* does not match .*null,5.*/);\n    });\n\n    it('Incompatible inputShape rank leads to warning: batchInputShape', () => {\n      let recordedWarnMessage: string;\n      spyOn(console, 'warn')\n          .and.callFake((message: string) => recordedWarnMessage = message);\n      const layer1 = tfl.layers.dense({units: 2, batchInputShape: [3, 5]});\n      layer1.apply(tfl.input({shape: [4, 3]}));\n      expect(recordedWarnMessage)\n          .toMatch(/rank .*null,4,3.* does not match .*3,5.*/);\n    });\n\n    it('Compatible inputShape leads to NO warning', () => {\n      let recordedWarnMessage: string;\n      spyOn(console, 'warn')\n          .and.callFake((message: string) => recordedWarnMessage = message);\n      const layer1 = tfl.layers.dense({units: 2, inputShape: [5]});\n      layer1.apply(tfl.input({shape: [5]}));\n      expect(recordedWarnMessage).toEqual(undefined);\n    });\n  });\n\n  describe('apply() passed >1 SymbolicTensor', () => {\n    it('throws an exception for multiple symbolic inputs.', () => {\n      const firstLayer = new LayerForTest({name: 'first layer'});\n      const secondLayer = new LayerForTest({name: 'second layer'});\n      const symbolicTensorList = [\n        new tfl.SymbolicTensor(\n            'float32', [1], firstLayer, [], {}, 'first_symbolic_tensor'),\n        new tfl.SymbolicTensor(\n            'float32', [1], firstLayer, [], {}, 'second_symbolic_tensor')\n      ];\n      // TODO(michaelterry): Update this once multiple symbolic tensors are\n      // allowed.\n      expect(() => secondLayer.apply(symbolicTensorList)).toThrowError();\n    });\n  });\n\n  describe('apply() passed SymbolicTensor and Tensor', () => {\n    it('throws an exception.', () => {\n      const layer = new LayerForTest();\n      const inputs = [\n        new tfl.SymbolicTensor(\n            'float32', [1], null, [], {}, 'first_symbolic_tensor'),\n        ones([1])\n      ];\n      expect(() => layer.apply(inputs as Tensor[]))\n          .toThrowError(/must be all SymbolicTensors or all Tensors/);\n    });\n  });\n\n  it('apply() returns multiple symbolic tensors for multiple ' +\n         'output shapes',\n     () => {\n       const layer = new LayerForTest();\n       const outputShapes = [[1], [2, 3]];\n       const input = new tfl.SymbolicTensor('float32', [1], null, [], {});\n       // tslint:disable-next-line:no-any\n       spyOn((layer as any), 'computeOutputShape').and.callFake(() => {\n         return outputShapes;\n       });\n       const results = layer.apply(input) as tfl.SymbolicTensor[];\n       expect(results.length).toEqual(2);\n       expect(results.map(x => x.shape)).toEqual(outputShapes);\n       expect(results.map(x => x.outputTensorIndex)).toEqual([0, 1]);\n     });\n\n  describe('apply() passed 1+ Tensors', () => {\n    it('returns new values for output if the same as the input.', () => {\n      const anArray = ones([1]);\n      // Test with both a Tensor and an array of Tensors.\n      for (const inputs of [anArray, [anArray, anArray]]) {\n        const layer = new LayerForTest();\n        const result = layer.apply(inputs) as Tensor | Tensor[];\n\n        expect(result instanceof Tensor || (result[0] instanceof Tensor))\n            .toBe(true);\n\n        expect(layer.built).toBe(true);\n\n        if (result instanceof Array) {\n          const inputArray = inputs as Tensor[];\n          for (let i = 0; i < result.length; i++) {\n            expectTensorsClose(result[i], inputArray[i]);\n          }\n        } else {\n          expectTensorsClose(result, inputs as Tensor);\n        }\n        expect(result === inputs).toBe(false);\n      }\n    });\n  });\n\n  describe('initialized with weights at construction time', () => {\n    it('sets those weights after calling apply().', () => {\n      const initialWeights = eye(2);\n      const arrayInput = zeros([1]);\n      const symbolicInput =\n          new tfl.SymbolicTensor('float32', [1], null, [], {});\n      // Test with symbolic and concrete input.\n      for (const inputs of [arrayInput, symbolicInput]) {\n        const layer = new LayerForTest({weights: [initialWeights]});\n        // Fake the build() method to test assignment to initialWeights.\n        // tslint:disable-next-line:no-any\n        spyOn((layer as any), 'build').and.callFake(() => {\n          layer.built = true;\n          layer.trainableWeights = [new LayerVariable(zeros([2, 2]))];\n        });\n        expect(layer.weights.length).toEqual(0);\n        layer.apply(inputs);\n        expect(layer.weights.length).toEqual(1);\n        expectTensorsClose(layer.weights[0].read(), initialWeights);\n      }\n    });\n  });\n\n  describe('apply() (nodes)', () => {\n    it('doesn\\'t change inboundNodes or outboundNodes when called with ' +\n           'concrete input',\n       () => {\n         const layer = new LayerForTest();\n         expect(layer.inboundNodes.length).toEqual(0);\n         expect(layer.outboundNodes.length).toEqual(0);\n         layer.apply(eye(1));\n         expect(layer.inboundNodes.length).toEqual(0);\n         expect(layer.outboundNodes.length).toEqual(0);\n       });\n\n    it('changes inboundNodes and outboundNodes when called with ' +\n           'symbolic input',\n       () => {\n         const layer = new LayerForTest();\n         const input = new tfl.SymbolicTensor('float32', [1], null, [], {});\n         expect(layer.inboundNodes.length).toEqual(0);\n         expect(layer.outboundNodes.length).toEqual(0);\n         layer.apply(input);\n         expect(layer.inboundNodes.length).toEqual(1);\n         expect(layer.outboundNodes.length).toEqual(0);\n         expect(layer.inboundNodes[0].outboundLayer).toEqual(layer);\n       });\n\n    it('updates inbound and outboundNodes when there are multiple layers',\n       () => {\n         const firstLayer = new LayerForTest({name: 'first_layer'});\n         const secondLayer = new LayerForTest({name: 'second_layer'});\n         const initialInput =\n             new tfl.SymbolicTensor('float32', [1], null, [], {});\n         const firstOutput = firstLayer.apply(initialInput);\n         secondLayer.apply(firstOutput);\n\n         expect(firstLayer.inboundNodes.length).toEqual(1);\n         expect(firstLayer.outboundNodes.length).toEqual(1);\n         expect(secondLayer.inboundNodes.length).toEqual(1);\n         expect(secondLayer.outboundNodes.length).toEqual(0);\n         expect(firstLayer.outboundNodes[0].outboundLayer).toEqual(secondLayer);\n       });\n  });\n\n  describe('Layer.outputShape', () => {\n    it('Layers with one output', () => {\n      const layer = tfl.layers.dense({units: 3});\n      layer.apply(new tfl.SymbolicTensor('float32', [null, 4], null, [], {}));\n      expect(layer.outputShape).toEqual([null, 3]);\n    });\n\n    it('Layers with two outputs', () => {\n      const layer = tfl.layers.simpleRNN({units: 3, returnState: true});\n      layer.apply(\n          new tfl.SymbolicTensor('float32', [null, 4, 5], null, [], {}));\n      expect(layer.outputShape).toEqual([[null, 3], [null, 3]]);\n    });\n\n    it('Layers with two inboundNodes of the same outputShape', () => {\n      const layer = tfl.layers.dense({units: 3});\n      layer.apply(new tfl.SymbolicTensor('float32', [null, 4], null, [], {}));\n      layer.apply(new tfl.SymbolicTensor('float32', [null, 4], null, [], {}));\n      expect(layer.inboundNodes.length).toEqual(2);\n      expect(layer.outputShape).toEqual([null, 3]);\n    });\n\n    it('Layers with two inboundNodes of different outputShapes', () => {\n      const layer = tfl.layers.dense({units: 3});\n      layer.apply(\n          new tfl.SymbolicTensor('float32', [null, 5, 4], null, [], {}));\n      layer.apply(\n          new tfl.SymbolicTensor('float32', [null, 6, 4], null, [], {}));\n      expect(layer.inboundNodes.length).toEqual(2);\n      expect(() => layer.outputShape)\n          .toThrowError(/has multiple inbound nodes/);\n    });\n\n    it('Unbuilt layer throws Error', () => {\n      const layer = tfl.layers.dense({units: 3});\n      expect(() => layer.outputShape).toThrowError(/has never been called/);\n    });\n  });\n\n  describe('Layer.countParams', () => {\n    it('Layers with weights', () => {\n      const units = 3;\n      const inputSize = 4;\n      const layer = tfl.layers.dense({units});\n      layer.apply(zeros([1, inputSize]));\n      const numParams = layer.countParams();\n      expect(numParams).toEqual(units * inputSize + units);\n    });\n\n    it('Layer without weights', () => {\n      const layer = tfl.layers.flatten();\n      layer.apply(zeros([2, 2, 2]));\n      const numParams = layer.countParams();\n      expect(numParams).toEqual(0);\n    });\n  });\n\n  describe('setWeights', () => {\n    it('throws exception if weights are not the same length ' +\n           'as existing weights',\n       () => {\n         const layer = new LayerForTest();\n         layer.trainableWeights = [new LayerVariable(zeros([2, 2]))];\n         const onesTensor = ones([1]);\n         expect(() => layer.setWeights([\n           onesTensor, onesTensor\n         ])).toThrowError(/with a weight list of length/);\n       });\n\n    it('throws exception if weights are not the same shape ' +\n           'as existing weights',\n       () => {\n         const layer = new LayerForTest();\n         const onesTensor = ones([1]);\n         layer.trainableWeights = [new LayerVariable(zeros([2, 2]))];\n         expect(() => layer.setWeights([onesTensor]))\n             .toThrowError(/not compatible with provided weight shape/);\n       });\n\n    it('updates weights.', () => {\n      const layer = new LayerForTest();\n      const onesTensor = ones([1]);\n      layer.trainableWeights = [new LayerVariable(zeros([1]))];\n      layer.setWeights([onesTensor]);\n      expectTensorsClose(layer.trainableWeights[0].read(), onesTensor);\n    });\n  });\n\n  describe('computeOutputShape()', () => {\n    it('returns the inputShape in the base class', () => {\n      const layer = new LayerForTest();\n      const shape = [1];\n      expect(layer.computeOutputShape(shape)).toEqual(shape);\n    });\n  });\n\n  describe('input and output properties: ', () => {\n    let input: tfl.SymbolicTensor;\n    let layer: Layer;\n    let output: tfl.SymbolicTensor;\n\n    beforeEach(() => {\n      input =\n          new tfl.SymbolicTensor('float32', [1], null, [], {}, 'firstInput');\n      layer = new LayerForTest();\n      output = layer.apply(input) as tfl.SymbolicTensor;\n    });\n\n    it('input retrieves layer\\'s inputs.', () => {\n      expect(layer.input).toEqual(input);\n    });\n\n    it('input retrieves layer\\'s outputs.', () => {\n      expect(layer.output).toEqual(output);\n    });\n\n    it('input throws exception if there is more than one input', () => {\n      const secondInput =\n          new tfl.SymbolicTensor('float32', [1], null, [], {}, 'secondInput');\n      layer.apply(secondInput);\n      expect(() => layer.input).toThrowError(/\"layer input\" is ill-defined/);\n    });\n\n    it('output throws exception if there is more than one output', () => {\n      const secondInput =\n          new tfl.SymbolicTensor('float32', [1], null, [], {}, 'secondInput');\n      layer.apply(secondInput);\n      expect(() => layer.output).toThrowError(/\"layer output\" is ill-defined/);\n    });\n  });\n\n  describe('getInputAt and getOutputAt: ', () => {\n    let input: tfl.SymbolicTensor;\n    let layer: Layer;\n    let output: tfl.SymbolicTensor;\n\n    beforeEach(() => {\n      input =\n          new tfl.SymbolicTensor('float32', [1], null, [], {}, 'firstInput');\n      layer = new LayerForTest();\n      output = layer.apply(input) as tfl.SymbolicTensor;\n    });\n\n    it('getInputAt() retrieves layer\\'s inputs.', () => {\n      expect(layer.getInputAt(0)).toEqual(input);\n    });\n\n    it('getOutputAt() retrieves layer\\'s outputs.', () => {\n      expect(layer.getOutputAt(0)).toEqual(output);\n    });\n\n    it('getInputAt() throws exception ask for incorrect index.', () => {\n      expect(() => layer.getInputAt(1))\n          .toThrowError(/Asked to get input at node 1, but/);\n    });\n\n    it('getOutputAt() throws exception ask for incorrect index.', () => {\n      expect(() => layer.getOutputAt(1))\n          .toThrowError(/Asked to get output at node 1, but/);\n    });\n  });\n});\n\ndescribeMathCPUAndGPU('Layer-dispose', () => {\n  it('Dispose Dense Layer before build leads to Error', () => {\n    const dense = tfl.layers.dense({units: 1, inputShape: [4]});\n    expect(() => dense.dispose()).toThrowError(/has not been built/);\n  });\n\n  it('Dispose Dense Layer after one tensor call frees memory', () => {\n    const dense = tfl.layers.dense({units: 1, inputShape: [4]});\n    dense.apply(zeros([2, 4]));\n    const numTensors0 = memory().numTensors;\n    const result = dense.dispose();\n\n    expect(result.refCountAfterDispose).toEqual(0);\n    expect(result.numDisposedVariables).toEqual(2);\n    // Two variables should have been freed: the kernel and the bias.\n    expect(memory().numTensors).toEqual(numTensors0 - 2);\n  });\n\n  it('Symbolic apply() call after Dense disposal leads to Error', () => {\n    const dense = tfl.layers.dense({units: 1, inputShape: [4]});\n    dense.apply(zeros([2, 4]));\n    const result = dense.dispose();\n    // This dispose() call should dispose the layer.\n\n    expect(result.refCountAfterDispose).toEqual(0);\n    expect(result.numDisposedVariables).toEqual(2);\n    expect(\n        () => dense.apply(\n            new tfl.SymbolicTensor('float32', [2, 4], null, [], {})))\n        .toThrowError(/Layer .* is already disposed/);\n  });\n\n  it('Non-symbolic apply() call after Dense disposal leads to Error', () => {\n    const dense = tfl.layers.dense({units: 1, inputShape: [4]});\n    dense.apply(zeros([2, 4]));\n    dense.dispose();  // This dispose() call should dispose the layer.\n\n    expect(() => dense.apply(ones([2, 4])))\n        .toThrowError(/Layer .* is already disposed/);\n  });\n\n  it('Calling defRec() repeatedly for two-Node Layer frees memory', () => {\n    const dense = tfl.layers.dense({units: 1, inputShape: [4]});\n    dense.apply(new tfl.SymbolicTensor('float32', [2, 4], null, [], {}));\n    dense.apply(new tfl.SymbolicTensor('float32', [2, 4], null, [], {}));\n    const numTensors0 = memory().numTensors;\n\n    const result1 = dense.dispose();\n    // After the first dispose call, no memory should have been freed.\n    expect(memory().numTensors).toEqual(numTensors0);\n    expect(result1.refCountAfterDispose).toEqual(1);\n    expect(result1.numDisposedVariables).toEqual(0);\n\n    const result2 = dense.dispose();\n    // After the second dispose call, memory for the kernel and the bias should\n    // have been freed.\n    expect(memory().numTensors).toEqual(numTensors0 - 2);\n    expect(result2.refCountAfterDispose).toEqual(0);\n    expect(result2.numDisposedVariables).toEqual(2);\n  });\n\n  it('Calling dispose on already-disposed Layer leads to Error', () => {\n    const dense = tfl.layers.dense({units: 1, inputShape: [4]});\n    dense.apply(zeros([2, 4]));\n    dense.dispose();\n    expect(() => dense.dispose()).toThrowError(/Layer .* is already disposed/);\n  });\n\n  it('Symbolic apply() call after Flatten disposal leads to Error', () => {\n    const dense = tfl.layers.flatten();\n    dense.apply(zeros([2, 3, 4]));\n    dense.dispose();  // This dispose() call should dispose the layer.\n\n    expect(\n        () => dense.apply(\n            new tfl.SymbolicTensor('float32', [2, 4], null, [], {})))\n        .toThrowError(/Layer .* is already disposed/);\n  });\n\n  it('Non-symbolic apply() call after Flatten disposal leads to Error', () => {\n    const dense = tfl.layers.flatten();\n    dense.apply(zeros([2, 3, 4]));\n    dense.dispose();  // This dispose() call should dispose the layer.\n\n    expect(() => dense.apply(zeros([2, 3, 4])))\n        .toThrowError(/Layer .* is already disposed/);\n  });\n\n  it('dispose() call works on Input Layer', () => {\n    const input = tfl.layers.input({shape: [2, 3]});\n    const output = tfl.layers.reshape({targetShape: [3, 2]}).apply(input) as\n        tfl.SymbolicTensor;\n    const model = tfl.model({inputs: [input], outputs: [output]});\n\n    const result = model.dispose();\n    // This model, consiting of only an input layer and a reshape layer, does\n    // not have any weights to dispose.\n    expect(result.numDisposedVariables).toEqual(0);\n    expect(() => model.predict(zeros([1, 2, 3])))\n        .toThrowError(/already disposed/);\n  });\n});\n\ndescribeMathCPUAndGPU('loadWeightsFromNamedTensorMap', () => {\n  const inputTensor =\n      tfl.layers.input({shape: [3], name: 'inputLayer', dtype: 'float32'});\n\n  it('One layer', () => {\n    const denseLayer =\n        tfl.layers.dense({units: 2, useBias: true, name: 'dense_layer'});\n    const output = denseLayer.apply(inputTensor) as SymbolicTensor;\n    const model = tfl.model({inputs: inputTensor, outputs: output});\n\n    const namedWeightsMap: NamedTensorMap = {};\n    namedWeightsMap[denseLayer.weights[0].originalName] =\n        tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n    namedWeightsMap[denseLayer.weights[1].originalName] = tensor1d([10, 20]);\n    model.loadWeights(namedWeightsMap);\n    expectTensorsClose(\n        denseLayer.weights[0].read(), tensor2d([1, 2, 3, 4, 5, 6], [3, 2]));\n    expectTensorsClose(denseLayer.weights[1].read(), tensor1d([10, 20]));\n  });\n\n  it('Mismatching shape throws an error even in non-strict mode', () => {\n    const denseLayer =\n        tfl.layers.dense({units: 2, useBias: true, name: 'dense_layer'});\n    const output = denseLayer.apply(inputTensor) as SymbolicTensor;\n    const model = tfl.model({inputs: inputTensor, outputs: output});\n\n    const namedWeightsMap: NamedTensorMap = {};\n    namedWeightsMap[denseLayer.weights[0].originalName] =\n        tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [4, 2]);\n    namedWeightsMap[denseLayer.weights[1].originalName] = tensor1d([10, 20]);\n    const strict = false;\n    expect(() => model.loadWeights(namedWeightsMap, strict))\n        .toThrowError('Shape mismatch: [3,2] vs. [4,2]');\n  });\n\n  it('Extra weights leads to error', () => {\n    const denseLayer =\n        tfl.layers.dense({units: 2, useBias: true, name: 'dense_layer'});\n    const output = denseLayer.apply(inputTensor) as SymbolicTensor;\n    const model = tfl.model({inputs: inputTensor, outputs: output});\n\n    const namedWeightsMap: NamedTensorMap = {};\n    namedWeightsMap[denseLayer.weights[0].originalName] =\n        tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n    namedWeightsMap[denseLayer.weights[1].originalName] = tensor1d([10, 20]);\n    namedWeightsMap['extra'] = tensor1d([10, 20]);\n    expect(() => model.loadWeights(namedWeightsMap))\n        .toThrowError(/Provided weight data has no target variable: extra/);\n  });\n\n  it('Extra weights are allowed in non-strict mode', () => {\n    const denseLayer =\n        tfl.layers.dense({units: 2, useBias: true, name: 'dense_layer'});\n    const output = denseLayer.apply(inputTensor) as SymbolicTensor;\n    const model = tfl.model({inputs: inputTensor, outputs: output});\n\n    const namedWeightsMap: NamedTensorMap = {};\n    namedWeightsMap[denseLayer.weights[0].originalName] =\n        tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n    namedWeightsMap[denseLayer.weights[1].originalName] = tensor1d([10, 20]);\n    namedWeightsMap['extra'] = tensor1d([10, 20]);\n    const strict = false;\n    model.loadWeights(namedWeightsMap, strict);\n    expectTensorsClose(\n        denseLayer.weights[0].read(), tensor2d([1, 2, 3, 4, 5, 6], [3, 2]));\n    expectTensorsClose(denseLayer.weights[1].read(), tensor1d([10, 20]));\n  });\n\n  it('Unset weights leads to error', () => {\n    const denseLayer =\n        tfl.layers.dense({units: 2, useBias: true, name: 'dense_layer'});\n    const output = denseLayer.apply(inputTensor) as SymbolicTensor;\n    const model = tfl.model({inputs: inputTensor, outputs: output});\n\n    const namedWeightsMap: NamedTensorMap = {};\n    namedWeightsMap[denseLayer.weights[0].originalName] =\n        tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n    expect(() => model.loadWeights(namedWeightsMap))\n        .toThrowError(/1 of 2 weights are not set: .*bias.*/);\n  });\n\n  it('Unset weights are allowed in non-strict mode', () => {\n    const denseLayer =\n        tfl.layers.dense({units: 2, useBias: true, name: 'dense_layer'});\n    const output = denseLayer.apply(inputTensor) as SymbolicTensor;\n    const model = tfl.model({inputs: inputTensor, outputs: output});\n\n    const namedWeightsMap: NamedTensorMap = {};\n    namedWeightsMap[denseLayer.weights[0].originalName] =\n        tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n    const strict = false;\n    model.loadWeights(namedWeightsMap, strict);\n    // No exception thrown.\n  });\n});\n"]}