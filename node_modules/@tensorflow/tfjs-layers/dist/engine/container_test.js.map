{"version":3,"file":"container_test.js","sourceRoot":"","sources":["../../src/engine/container_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {memory, ones, scalar, Tensor, zeros} from '@tensorflow/tfjs-core';\n\nimport * as tfl from '../index';\nimport {Kwargs} from '../types';\nimport {describeMathCPUAndGPU, expectTensorsClose} from '../utils/test_utils';\n\nimport {Container, ContainerArgs} from './container';\nimport {execute, FeedDict} from './executor';\nimport {CallHook, getSourceInputs, Layer, LayerArgs, SymbolicTensor} from './topology';\n\nclass LayerForTest extends tfl.layers.Layer {\n  static className = 'LayerForTest';\n  constructor(args: LayerArgs) {\n    super(args);\n  }\n}\n\nclass ContainerForTest extends Container {\n  static className = 'ContainerForTest';\n  constructor(args: ContainerArgs) {\n    super(args);\n  }\n}\n\ndescribeMathCPUAndGPU('Container.fromConfig', () => {\n  it('creates a minimal Container from simplest config', () => {\n    // tslint:disable:no-any\n    const config = {\n      name: 'test',\n      layers: [] as any[],\n      inputLayers: [] as any[],\n      outputLayers: [] as any[]\n    };\n    // tslint:enable\n    const container =\n        Container.fromConfig(ContainerForTest, config) as Container;\n    expect(container.name).toEqual('test');\n  });\n\n  it('creates a simple network', () => {\n    /* python generating code\n    a=Input(shape=(32,))\n    b=Dense(32)(a)\n    model = Container(inputs=a, outputs=b, name=\"test\")\n    pprint.pprint(model.get_config())\n    */\n    const config = {\n      inputLayers: [['input_2', 0, 0]],\n      layers: [\n        {\n          className: 'InputLayer',\n          config: {\n            batchInputShape: [null, 32],\n            dtype: 'float32',\n            name: 'input_2',\n            sparse: false\n          },\n          inboundNodes: [] as string[][],\n          name: 'input_2'\n        },\n        {\n          className: 'Dense',\n          config: {\n            activation: 'linear',\n            activityRegularizer: null as string,\n            biasConstraint: null as string,\n            biasInitializer: {className: 'Zeros', config: {}},\n            biasRegularizer: null as string,\n            kernelConstraint: null as string,\n            kernelInitializer: {\n              className: 'VarianceScaling',\n              config: {\n                distribution: 'uniform',\n                mode: 'fanAvg',\n                scale: 1.0,\n                seed: null as number\n              }\n            },\n            kernelRegularizer: null as string,\n            name: 'dense_2',\n            trainable: null as boolean,\n            units: 32,\n            use_bias: true\n          },\n          inboundNodes: [[['input_2', 0, 0, {}]]],\n          name: 'dense_2'\n        }\n      ],\n      name: 'test',\n      outputLayers: [['dense_2', 0, 0]]\n    };\n    const container =\n        Container.fromConfig(ContainerForTest, config) as Container;\n    expect(container.name).toEqual('test');\n    const allZeros = zeros([1, 32]);\n    expectTensorsClose(container.apply(allZeros) as Tensor, allZeros);\n  });\n});\n\ndescribeMathCPUAndGPU('Container', () => {\n  const inputLayerName = 'inputLayerName';\n  const layerName = 'layerName';\n  const containerName = 'simpleContainer';\n  let inputTensor: tfl.SymbolicTensor;\n  let layer: Layer;\n  let output: tfl.SymbolicTensor;\n  let simpleContainer: Container;\n\n  beforeEach(() => {\n    inputTensor =\n        tfl.input({shape: [1], name: inputLayerName, dtype: 'float32'});\n    layer = new LayerForTest({name: layerName});\n    output = layer.apply(inputTensor) as tfl.SymbolicTensor;\n    simpleContainer = new ContainerForTest(\n        {inputs: [inputTensor], outputs: [output], name: containerName});\n  });\n\n  it('initializes with no inputs or outputs and a default name', () => {\n    const container = new ContainerForTest({inputs: [], outputs: []});\n    expect(container.name).toMatch(/^container.+$/);\n  });\n\n  it('initializes with no inputs or outputs and a given name', () => {\n    const name = 'xyz';\n    const container = new ContainerForTest({inputs: [], outputs: [], name});\n    expect(container.name).toMatch(name);\n  });\n\n  it('throws an exception if same input provided twice', () => {\n    const makeContainer = () => {\n      // tslint:disable-next-line:no-unused-expression\n      new ContainerForTest({inputs: [inputTensor, inputTensor], outputs: []});\n    };\n    expect(makeContainer).toThrowError(/inputs.*redundant/);\n  });\n\n  it('throws an exception if graph is disconnected', () => {\n    const makeContainer = () => {\n      // tslint:disable-next-line:no-unused-expression\n      new ContainerForTest({inputs: [], outputs: [output]});\n    };\n    expect(makeContainer).toThrowError(/disconnected/);\n  });\n\n  it('creates inputLayers', () => {\n    expect(simpleContainer.inputLayers).toEqual([inputTensor.sourceLayer]);\n  });\n\n  it('creates outputLayers', () => {\n    expect(simpleContainer.outputLayers).toEqual([layer]);\n  });\n\n  it('creates inputNames', () => {\n    expect(simpleContainer.inputNames).toEqual([inputLayerName]);\n  });\n\n  it('creates outputNames', () => {\n    expect(simpleContainer.outputNames).toEqual([layerName]);\n  });\n\n  it('throws exception if given a non-input layer as input', () => {\n    const makeContainer = () => {\n      // tslint:disable-next-line:no-unused-expression\n      new ContainerForTest({inputs: [output], outputs: []});\n    };\n    expect(makeContainer).toThrowError(/must be InputLayer objects/);\n  });\n\n  it('creates layers for simplest case', () => {\n    expect(simpleContainer.layers).toEqual([inputTensor.sourceLayer, layer]);\n  });\n\n  it('creates layers when multiple layers specified', () => {\n    const layer1 = new LayerForTest({name: 'layer1'});\n    const layer2 = new LayerForTest({name: 'layer2'});\n    const output =\n        layer2.apply(layer1.apply(inputTensor)) as tfl.SymbolicTensor;\n    const container =\n        new ContainerForTest({inputs: [inputTensor], outputs: [output]});\n    expect(container.layers).toEqual([inputTensor.sourceLayer, layer1, layer2]);\n  });\n\n  it('correctly creates model with shared subgraphs.', () => {\n    /*\n      The graph:\n\n        A\n      /  \\\n      B  X\n      |  |\n      C  B\n         |\n         C\n    */\n    const layerA = new LayerForTest({name: 'A'});\n    const layerB = new LayerForTest({name: 'B'});\n    const layerC = new LayerForTest({name: 'C'});\n    const layerX = new LayerForTest({name: 'X'});\n    const aOutput = layerA.apply(inputTensor);\n    const output1 = layerC.apply(layerB.apply(aOutput)) as tfl.SymbolicTensor;\n    const output2 =\n        layerC.apply(layerB.apply(layerX.apply(aOutput))) as tfl.SymbolicTensor;\n\n    const container = new ContainerForTest(\n        {inputs: [inputTensor], outputs: [output1, output2]});\n\n    const compareFunction = (a: Layer, b: Layer) => {\n      if (a.name < b.name) {\n        return -1;\n      } else if (a.name > b.name) {\n        return 1;\n      } else {\n        return 0;\n      }\n    };\n    const sortedLayers = container.layers.slice().sort(compareFunction);\n    const expectedSortedLayers = [\n      inputTensor.sourceLayer, layerA, layerB, layerC, layerX\n    ].sort(compareFunction);\n\n    expect(sortedLayers).toEqual(expectedSortedLayers);\n  });\n\n  it('throws exception if multiple layers have the same name', () => {\n    const name = 'abc';\n    const layer1 = new LayerForTest({name});\n    const layer2 = new LayerForTest({name});\n    const output =\n        layer2.apply(layer1.apply(inputTensor)) as tfl.SymbolicTensor;\n    const makeContainer = () => {\n      // tslint:disable-next-line:no-unused-expression\n      new ContainerForTest({inputs: [inputTensor], outputs: [output]});\n    };\n    expect(makeContainer).toThrowError(/layer names should be unique/);\n  });\n\n  it('weights gets all weights.', () => {\n    const inputShape = [1, 6];\n    const inputLayer = tfl.layers.input({shape: inputShape});\n    const layer1 = tfl.layers.dense({units: 2, useBias: false});\n    const layer2 = tfl.layers.dense({units: 1, useBias: true});\n    const output = layer2.apply(layer1.apply(inputLayer)) as tfl.SymbolicTensor;\n\n    const container =\n        new ContainerForTest({inputs: [inputLayer], outputs: [output]});\n    expect(container.weights.length).toEqual(3);\n    expect(container.weights[0].name).toEqual(layer1.weights[0].name);\n    expect(container.weights[1].name).toEqual(layer2.weights[0].name);\n    expect(container.weights[2].name).toEqual(layer2.weights[1].name);\n  });\n\n  it('trainableWeights and nonTrainableWeights.', () => {\n    const inputShape = [1, 6];\n    const inputLayer = tfl.layers.input({shape: inputShape});\n    const layer1 = tfl.layers.dense({units: 2, useBias: false});\n    const layer2 = tfl.layers.dense({units: 1, useBias: true});\n    const output = layer2.apply(layer1.apply(inputLayer)) as tfl.SymbolicTensor;\n\n    const container =\n        new ContainerForTest({inputs: [inputLayer], outputs: [output]});\n    expect(container.trainableWeights.length).toEqual(3);\n    expect(container.trainableWeights[0].name).toEqual(layer1.weights[0].name);\n    expect(container.trainableWeights[1].name).toEqual(layer2.weights[0].name);\n    expect(container.trainableWeights[2].name).toEqual(layer2.weights[1].name);\n    expect(container.nonTrainableWeights.length).toEqual(0);\n  });\n\n  it('call() executes all layers.', () => {\n    const inputShape = [1, 6];\n    const finalShape = [3, 2];\n    const inputLayer = tfl.layers.input({shape: inputShape});\n    const layer1 = tfl.layers.reshape({name: 'layer1', targetShape: [2, 3]});\n    const layer2 =\n        tfl.layers.reshape({name: 'layer2', targetShape: finalShape});\n    const output = layer2.apply(layer1.apply(inputLayer)) as tfl.SymbolicTensor;\n\n    const container =\n        new ContainerForTest({inputs: [inputLayer], outputs: [output]});\n    const result = container.call(ones([1, 1, 6]), {}) as Tensor[];\n    const resultShape = [1].concat(finalShape);\n    expectTensorsClose(result[0], ones(resultShape));\n  });\n\n  it('apply() executes all layers with concrete tensors.', () => {\n    const inputShape = [1, 6];\n    const finalShape = [3, 2];\n    const inputLayer = tfl.layers.input({shape: inputShape});\n    const layer1 = tfl.layers.reshape({name: 'layer1', targetShape: [2, 3]});\n    const layer2 =\n        tfl.layers.reshape({name: 'layer2', targetShape: finalShape});\n    const output = layer2.apply(layer1.apply(inputLayer)) as tfl.SymbolicTensor;\n\n    const container =\n        new ContainerForTest({inputs: [inputLayer], outputs: [output]});\n    const result = container.apply(ones([1, 1, 6])) as Tensor;\n    const resultShape = [1].concat(finalShape);\n    expectTensorsClose(result, ones(resultShape));\n  });\n\n  it('apply() executes all layers with symbolic tensors.', () => {\n    const inputShape = [1, 6];\n    const finalShape = [3, 2];\n    const inputLayer = tfl.layers.input({shape: inputShape});\n    const layer1 = tfl.layers.reshape({name: 'layer1', targetShape: [2, 3]});\n    const layer2 =\n        tfl.layers.reshape({name: 'layer2', targetShape: finalShape});\n    const output = layer2.apply(layer1.apply(inputLayer)) as tfl.SymbolicTensor;\n\n    const container =\n        new ContainerForTest({inputs: [inputLayer], outputs: [output]});\n\n    const newInput = tfl.layers.input({shape: [1, 6]});\n    const symbolicResult = container.apply(newInput);\n    expect(symbolicResult instanceof tfl.SymbolicTensor).toEqual(true);\n    const concreteResult = execute(\n        symbolicResult as tfl.SymbolicTensor,\n        new FeedDict([{key: newInput, value: ones([1, 1, 6])}]));\n    const resultShape = [1].concat(finalShape);\n    expectTensorsClose(concreteResult as Tensor, ones(resultShape));\n  });\n\n  it('computeOutputShape() computes the correct outputShape', () => {\n    const inputShape = [2, 3];\n    const finalShape = [3, 2];\n    const inputLayer = tfl.layers.input({shape: inputShape});\n    const layer = tfl.layers.reshape({targetShape: finalShape});\n    const output = layer.apply(inputLayer) as tfl.SymbolicTensor;\n    const container =\n        new ContainerForTest({inputs: [inputLayer], outputs: [output]});\n    expect(container.computeOutputShape([1].concat(inputShape))).toEqual([\n      1\n    ].concat(finalShape));\n  });\n\n  it('trainableWeights is initially an empty Array', () => {\n    expect(simpleContainer.trainableWeights).toEqual([]);\n  });\n\n  it('trainableWeights tracks only trainable weights', () => {\n    const inputShape = [2, 2];\n    const inputLayer = tfl.layers.input({shape: inputShape});\n    const layer1 = tfl.layers.reshape({targetShape: [4], name: 'reshapeLayer'});\n    const layer1Output = layer1.apply(inputLayer) as tfl.SymbolicTensor;\n    const layer2 =\n        tfl.layers.dense({units: 2, useBias: false, name: 'denseLayer'});\n    const layer2Output = layer2.apply(layer1Output) as tfl.SymbolicTensor;\n    const container =\n        new ContainerForTest({inputs: [inputLayer], outputs: [layer2Output]});\n    expect(container.trainableWeights.length).toEqual(1);\n  });\n\n  it('stateful is initially false', () => {\n    expect(simpleContainer.stateful).toEqual(false);\n  });\n\n  function createSimpleTwoLayerContainer(): [Container, Layer[]] {\n    const inputShape = [2, 2];\n    const inputLayer = tfl.layers.input({shape: inputShape});\n    const layer1 = tfl.layers.reshape({targetShape: [4], name: 'reshapeLayer'});\n    const layer1Output = layer1.apply(inputLayer) as tfl.SymbolicTensor;\n    const layer2 =\n        tfl.layers.dense({units: 2, useBias: false, name: 'denseLayer'});\n    const layer2Output = layer2.apply(layer1Output) as tfl.SymbolicTensor;\n    const container =\n        new ContainerForTest({inputs: [inputLayer], outputs: [layer2Output]});\n    return [container, [container.inputLayers[0], layer1, layer2]];\n  }\n\n  it('getLayer works by name', () => {\n    const [container, layers] = createSimpleTwoLayerContainer();\n    expect(container.getLayer(layers[0].name)).toEqual(layers[0]);\n    expect(container.getLayer(layers[1].name)).toEqual(layers[1]);\n    expect(container.getLayer(layers[2].name)).toEqual(layers[2]);\n  });\n\n  it('getLayer works by index', () => {\n    const [container, layers] = createSimpleTwoLayerContainer();\n    expect(container.getLayer(null, 0)).toEqual(layers[0]);\n    expect(container.getLayer(null, 1)).toEqual(layers[1]);\n    expect(container.getLayer(null, 2)).toEqual(layers[2]);\n  });\n\n  it('getLayer throws error for nonexistent layer name', () => {\n    const [container, layers] = createSimpleTwoLayerContainer();\n    expect(\n        () => container.getLayer(\n            layers[0].name + '_suffixToMakeLayerNameNonexistent'))\n        .toThrowError(/No such layer/);\n  });\n\n  it('getLayer throws error for index out of bound', () => {\n    const container = createSimpleTwoLayerContainer()[0];\n    expect(() => container.getLayer(null, 3)).toThrowError(/only has 3 layer/);\n  });\n\n  it('getLayer throws error when neither name or index is specified', () => {\n    const container = createSimpleTwoLayerContainer()[0];\n    expect(() => container.getLayer())\n        .toThrowError(/Provide either a layer name or layer index/);\n  });\n});\n\ndescribeMathCPUAndGPU('Container.calculateLosses', () => {\n  function createSimpleOneLayerContainer(useRegularizers: boolean):\n      [Container, Layer[]] {\n    const inputShape = [2];\n    const inputLayer = tfl.layers.input({shape: inputShape});\n    const kernelRegularizer =\n        useRegularizers ? tfl.regularizers.l1({l1: 2}) : null;\n    const biasRegularizer =\n        useRegularizers ? tfl.regularizers.l2({l2: 3}) : null;\n    const denseLayer = tfl.layers.dense({\n      units: 2,\n      kernelInitializer: 'ones',\n      biasInitializer: 'ones',\n      kernelRegularizer,\n      biasRegularizer,\n      name: 'denseLayer'\n    });\n    const layer2Output = denseLayer.apply(inputLayer) as tfl.SymbolicTensor;\n    const container =\n        new ContainerForTest({inputs: [inputLayer], outputs: [layer2Output]});\n    return [container, [denseLayer]];\n  }\n\n  it('L1 and L2', () => {\n    const container = createSimpleOneLayerContainer(true)[0];\n    const losses = container.calculateLosses();\n    expect(losses.length).toEqual(2);\n    expectTensorsClose(losses[0], scalar(2 * (1 + 1 + 1 + 1)));\n    expectTensorsClose(losses[1], scalar(3 * (1 + 1)));\n  });\n\n  it('No regularizers', () => {\n    const container = createSimpleOneLayerContainer(false)[0];\n    const losses = container.calculateLosses();\n    expect(losses.length).toEqual(0);\n  });\n});\n\ndescribe('getSourceInputs()', () => {\n  it('returns the single source input', () => {\n    const inputTensor = tfl.layers.input({shape: [1]});\n    const layer1 = new LayerForTest({name: 'layer1'});\n    const layer2 = new LayerForTest({name: 'layer2'});\n    const output =\n        layer2.apply(layer1.apply(inputTensor)) as tfl.SymbolicTensor;\n    expect(getSourceInputs(output)).toEqual([inputTensor]);\n  });\n\n  it('returns all inputs', () => {\n    const input1 = tfl.layers.input({shape: [1], name: 'input1'});\n    const input2 = tfl.layers.input({shape: [1], name: 'input2'});\n    const layer = new LayerForTest({});\n    const output1 = layer.apply(input1) as tfl.SymbolicTensor;\n    const output2 = layer.apply(input2) as tfl.SymbolicTensor;\n    expect(getSourceInputs(output1)).toEqual([input1]);\n    expect(getSourceInputs(output2)).toEqual([input2]);\n  });\n});\n\ndescribeMathCPUAndGPU('LayersModel-dispose', () => {\n  it('Dispose Sequential model frees memory', () => {\n    const numTensors0 = memory().numTensors;\n    const model = tfl.sequential();\n    model.add(\n        tfl.layers.dense({units: 2, inputShape: [3], activation: 'relu'}));\n    model.add(tfl.layers.dense({units: 1}));\n    model.build([3, 3]);\n\n    const result = model.dispose();\n    expect(result.refCountAfterDispose).toEqual(0);\n    expect(result.numDisposedVariables).toEqual(4);\n    // The four weight variables of the two layers should have been disposed.\n    expect(memory().numTensors).toEqual(numTensors0);\n  });\n\n  it('Dispose Sequential model twice leads to Error', () => {\n    const model = tfl.sequential();\n    model.add(\n        tfl.layers.dense({units: 2, inputShape: [3], activation: 'relu'}));\n    model.add(tfl.layers.dense({units: 1}));\n    model.build([3, 3]);\n\n    model.dispose();\n    expect(() => model.dispose()).toThrowError(/Container .* already disposed/);\n  });\n\n  it('Using disposed Sequential model leads to Error', async () => {\n    const model = tfl.sequential();\n    model.add(\n        tfl.layers.dense({units: 2, inputShape: [3], activation: 'relu'}));\n    model.add(tfl.layers.dense({units: 1, activation: 'sigmoid'}));\n    model.build([3, 3]);\n    model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n    model.dispose();\n\n    const xs = zeros([3, 3]);\n    const ys = zeros([3, 1]);\n    expect(() => model.predict(xs)).toThrowError(/already disposed/);\n    expect(() => model.evaluate(xs, ys)).toThrowError(/already disposed/);\n    let errorCaughtDuringFit = false;\n    try {\n      await model.fit(xs, ys);\n    } catch (err) {\n      errorCaughtDuringFit = true;\n    }\n    expect(errorCaughtDuringFit).toEqual(true);\n  });\n\n  it('Dispose functional model frees memory', () => {\n    const input = tfl.input({shape: [4]});\n    const dense1 =\n        tfl.layers.dense({units: 3}).apply(input) as tfl.SymbolicTensor;\n    const dense2 = tfl.layers.dense({units: 2, useBias: false}).apply(input) as\n        tfl.SymbolicTensor;\n    const model = tfl.model({inputs: [input], outputs: [dense1, dense2]});\n    // Call predict once to make sure that the model's weights are initialized.\n    model.predict(zeros([2, 4]));\n\n    const numTensors0 = memory().numTensors;\n    const result = model.dispose();\n\n    expect(result.refCountAfterDispose).toEqual(0);\n    expect(result.numDisposedVariables).toEqual(3);\n    // The 2 + 1 = 3 weight variables of the two layers should have been\n    // disposed.\n    expect(memory().numTensors).toEqual(numTensors0 - 3);\n  });\n\n  it('Dispose functional model twice leads to Error', () => {\n    const input = tfl.input({shape: [4]});\n    const dense1 =\n        tfl.layers.dense({units: 3}).apply(input) as tfl.SymbolicTensor;\n    const dense2 = tfl.layers.dense({units: 2, useBias: false}).apply(input) as\n        tfl.SymbolicTensor;\n    const model = tfl.model({inputs: [input], outputs: [dense1, dense2]});\n    // Call predict once to make sure that the model's weights are  initialized.\n    model.predict(zeros([2, 4]));\n\n    model.dispose();\n    expect(() => model.dispose()).toThrowError(/Container .* already disposed/);\n  });\n\n  it('Layer shared between two functional models is not disposed', () => {\n    const input1 = tfl.input({shape: [4]});\n    const input2 = tfl.input({shape: [4]});\n    const sharedDenseLayer = tfl.layers.dense({units: 3, activation: 'relu'});\n    const nonSharedDenseLayer1 = tfl.layers.dense({units: 1, useBias: false});\n    const nonSharedDenseLayer2 = tfl.layers.dense({units: 1, useBias: false});\n    const output1 = nonSharedDenseLayer1.apply(\n                        sharedDenseLayer.apply(input1)) as tfl.SymbolicTensor;\n    const output2 = nonSharedDenseLayer2.apply(\n                        sharedDenseLayer.apply(input2)) as tfl.SymbolicTensor;\n\n    const model1 = tfl.model({inputs: [input1], outputs: [output1]});\n    const model2 = tfl.model({inputs: [input2], outputs: [output2]});\n\n    // Call predict once to make sure that both models' weights are initialized.\n    model1.predict(zeros([2, 4]));\n    model2.predict(zeros([2, 4]));\n    const xs = zeros([2, 4]);\n\n    const numTensors0 = memory().numTensors;\n    const result1 = model1.dispose();\n\n    expect(result1.refCountAfterDispose).toEqual(0);\n    expect(result1.numDisposedVariables).toEqual(1);\n    // After model1 is disposed, only the single weight of\n    // `nonSharedDenseLayer1` should have been freed.\n    expect(memory().numTensors).toEqual(numTensors0 - 1);\n\n    // At this point, calling predict() on model1 should fail, but doing the\n    // same on model2 should still work.\n    expect(() => model1.predict(xs)).toThrowError(/already disposed/);\n    const ys = model2.predict(xs) as Tensor;\n    expect(ys.shape).toEqual([2, 1]);\n    ys.dispose();\n\n    const result2 = model2.dispose();\n\n    expect(result2.refCountAfterDispose).toEqual(0);\n    expect(result2.numDisposedVariables).toEqual(3);\n    // After model2 is disposed, the single weight of `nonSharedDenseLayer2`\n    // and the two weights o `sharedDenseLayer` should be freed.\n    expect(memory().numTensors).toEqual(numTensors0 - 4);\n\n    // At this point, calling predict() on both model1 and model2 should fail.\n    expect(() => model1.predict(xs)).toThrowError(/already disposed/);\n    expect(() => model2.predict(xs)).toThrowError(/already disposed/);\n  });\n\n  it('Disposing nested sequential model preserves the inner model', () => {\n    const innerModel = tfl.sequential();\n    innerModel.add(tfl.layers.reshape({targetShape: [10], inputShape: [2, 5]}));\n    innerModel.add(tfl.layers.dense({units: 6, activation: 'relu'}));\n    innerModel.add(tfl.layers.dense({units: 4, activation: 'relu'}));\n\n    const outerModel = tfl.sequential();\n    outerModel.add(\n        tfl.layers.reshape({targetShape: [2, 5], inputShape: [5, 2]}));\n    outerModel.add(innerModel);\n    outerModel.add(tfl.layers.dense({units: 3, activation: 'softmax'}));\n\n    const xsOuter = zeros([1, 5, 2]);\n    const xsInner = zeros([1, 2, 5]);\n    outerModel.predict(xsOuter);  // Call predict() to initialize the weights.\n    const numTensors0 = memory().numTensors;\n\n    const result1 = outerModel.dispose();\n\n    expect(result1.refCountAfterDispose).toEqual(0);\n    expect(result1.numDisposedVariables).toEqual(2);\n    // Calling dispose on the outer model should have freed the two weights that\n    // belong to only the outer model and not to the inner model.\n    expect(memory().numTensors).toEqual(numTensors0 - 2);\n\n    // Calling dispose on the outer model again should lead to Error.\n    expect(() => outerModel.dispose())\n        .toThrowError(/Container .* already disposed/);\n    // Calling predict on the outer model should fail.\n    expect(() => outerModel.predict(xsOuter)).toThrowError(/already disposed/);\n\n    // At this point, the inner model is still usable.\n    const ysInner = innerModel.predict(xsInner) as Tensor;\n    expect(ysInner.shape).toEqual([1, 4]);\n    ysInner.dispose();\n\n    // Calling dispose on innerModel should finally freed all the weights.\n    const result2 = innerModel.dispose();\n\n    expect(result2.refCountAfterDispose).toEqual(0);\n    expect(result2.numDisposedVariables).toEqual(4);\n    expect(memory().numTensors).toEqual(numTensors0 - 6);\n\n    // At this point, the inner model should have become unusable.\n    expect(() => innerModel.predict(xsInner)).toThrowError(/already disposed/);\n  });\n\n  it('Nested model gets the correct kwargs', async () => {\n    const innerModel = tfl.sequential();\n    const layer =\n        tfl.layers.dense({units: 1, inputShape: [5], activation: 'sigmoid'});\n    innerModel.add(layer);\n\n    const input = tfl.input({shape: [5]});\n    const output = innerModel.apply(input) as SymbolicTensor;\n    const model = tfl.model({inputs: input, outputs: output});\n    model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n\n    const kwargsArray: Kwargs[] = [];\n    const recordKwargsHook: CallHook = (inputs: Tensor|Tensor[], kwargs: {}) =>\n        kwargsArray.push(kwargs);\n    layer.setCallHook(recordKwargsHook);\n\n    const xs = ones([3, 5]);\n    const ys = ones([3, 1]);\n    await model.trainOnBatch(xs, ys);\n    expect(kwargsArray.length).toEqual(1);\n    expect(kwargsArray[0]['training']).toEqual(true);\n  });\n  it('Dispose Sequential model with a Dropout', () => {\n    const numTensors0 = memory().numTensors;\n    const model = tfl.sequential();\n    model.add(\n        tfl.layers.dense({units: 2, inputShape: [3], activation: 'relu'}));\n    model.add(tfl.layers.dense({units: 1}));\n    model.add(tfl.layers.dropout({rate: 0.8}));\n    model.build([3, 3]);\n\n    const result = model.dispose();\n    expect(result.refCountAfterDispose).toEqual(0);\n    expect(result.numDisposedVariables).toEqual(4);\n    // The four weight variables of the two layers should have been disposed.\n    // + the rate from the dropout tensor\n    expect(memory().numTensors).toEqual(numTensors0);\n  });\n});\n"]}