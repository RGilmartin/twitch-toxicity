{"version":3,"file":"convolutional_test.js","sourceRoot":"","sources":["../../src/layers/convolutional_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Unit tests for convolutional.ts.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar, Tensor, tensor1d, tensor3d, tensor4d, tensor5d, util} from '@tensorflow/tfjs-core';\n\nimport * as tfl from '../index';\nimport {InitializerIdentifier} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {DataFormat, InterpolationFormat, PaddingMode, Shape} from '../keras_format/common';\nimport {describeMathCPU, describeMathCPUAndGPU, describeMathGPU, expectTensorsClose} from '../utils/test_utils';\n\nimport {conv1d, conv1dWithBias, conv2d, conv2dWithBiasActivation, conv3d, conv3dWithBias} from './convolutional';\n\ndescribeMathCPUAndGPU('conv1dWithBias', () => {\n  const xLength4Data = [10, 20, 40, 80];\n  const kernelLength2Data = [1, -1];\n  const biasScalarData = 2.2;\n  // In the basic case, this convolves [10, 20, 40, 80] with the kernel [1, -1],\n  // producing [-10, -20, -40], and adds the bias 2.2, producing\n  // [-7.8, -17.8, -37.7].  The test is reproduced for either 1 or 2 output\n  // channels, and several reasonable data formats.\n\n  const outChannelsArray = [1, 2];\n  const dataFormats: DataFormat[] =\n      [undefined, 'channelsFirst', 'channelsLast'];\n  const paddingModes: PaddingMode[] = [undefined, 'same', 'valid'];\n  const stride = 1;\n\n  for (const outChannels of outChannelsArray) {\n    for (const dataFormat of dataFormats) {\n      for (const paddingMode of paddingModes) {\n        const testTitle = `outChannels=${outChannels}, stride=${stride}, ` +\n            `${paddingMode}, ${dataFormat}`;\n        it(testTitle, () => {\n          let x: Tensor = tensor3d(xLength4Data, [1, 4, 1]);\n          if (dataFormat === 'channelsFirst') {\n            x = tfc.transpose(x, [0, 2, 1]);  // NWC -> NCW.\n          }\n\n          let kernelData: number[] = [];\n          let biasData: number[] = [];\n          for (let i = 0; i < outChannels; ++i) {\n            kernelData = kernelData.concat(kernelLength2Data);\n            biasData = biasData.concat([biasScalarData + i]);\n          }\n          const kernel = tfc.transpose(\n              tensor3d(kernelData, [1, outChannels, 2]), [2, 0, 1]);\n          const bias = tensor1d(biasData);\n\n          const y =\n              conv1dWithBias(x, kernel, bias, stride, paddingMode, dataFormat);\n\n          let yExpectedShape: [number, number, number];\n          let yExpectedData: number[];\n          if (paddingMode === 'valid' || paddingMode === undefined) {\n            if (outChannels === 1) {\n              yExpectedShape = [1, 3, 1];\n              yExpectedData = [-7.8, -17.8, -37.8];\n            } else if (outChannels === 2) {\n              yExpectedShape = [1, 3, 2];\n              yExpectedData = [-7.8, -6.8, -17.8, -16.8, -37.8, -36.8];\n            }\n          } else if (paddingMode === 'same') {\n            if (outChannels === 1) {\n              yExpectedShape = [1, 4, 1];\n              yExpectedData = [-7.8, -17.8, -37.8, 82.2];\n            } else if (outChannels === 2) {\n              yExpectedShape = [1, 4, 2];\n              yExpectedData =\n                  [-7.8, -6.8, -17.8, -16.8, -37.8, -36.8, 82.2, 83.2];\n            }\n          }\n          expectTensorsClose(y, tensor3d(yExpectedData, yExpectedShape));\n        });\n      }\n    }\n  }\n});\n\ndescribeMathCPUAndGPU('conv1d', () => {\n  const xLength4Data = [10, 20, 40, 80];\n  const kernelLength2Data = [1, -1];\n\n  const outChannels = 2;\n  const dataFormat = 'channelsLast';\n  const paddingMode = 'valid';\n  const strides = [2, 1];\n  const dilations = [1, 2];\n  const expectations = [[-10, -10, -40, -40], [-30, -30, -60, -60]];\n\n  for (let i = 0; i < strides.length; ++i) {\n    const stride = strides[i];\n    const dilationRate = dilations[i];\n    const expectation = expectations[i];\n    const testTitle = `outChannels=${outChannels}, stride=${stride}, ` +\n        `${paddingMode}, dilationRate=${dilationRate}, ${dataFormat}`;\n    it(testTitle, () => {\n      const x = tensor3d(xLength4Data, [1, 4, 1]);\n      let kernelData: number[] = [];\n      for (let i = 0; i < outChannels; ++i) {\n        kernelData = kernelData.concat(kernelLength2Data);\n      }\n      const kernel =\n          tfc.transpose(tensor3d(kernelData, [1, outChannels, 2]), [2, 0, 1]);\n      const y =\n          conv1d(x, kernel, stride, paddingMode, dataFormat, dilationRate);\n      expectTensorsClose(y, tensor3d(expectation, [1, 2, 2]));\n    });\n  }\n});\n\ndescribeMathCPUAndGPU('conv2d', () => {\n  const x4by4Data = [[[\n    [10, 30, 50, 70], [20, 40, 60, 80], [-10, -30, -50, -70],\n    [-20, -40, -60, -80]\n  ]]];\n  const kernel2by2Data = [1, 0, 0, -1];\n\n  const dataFormats: DataFormat[] =\n      [undefined, 'channelsFirst', 'channelsLast'];\n  const paddingModes: PaddingMode[] = [undefined, 'same', 'valid'];\n  const stridesArray = [1, 2];\n\n  for (const dataFormat of dataFormats) {\n    for (const paddingMode of paddingModes) {\n      for (const stride of stridesArray) {\n        const testTitle = `stride=${stride}, ${paddingMode}, ` +\n            `${dataFormat}`;\n        it(testTitle, () => {\n          let x: Tensor = tensor4d(x4by4Data, [1, 1, 4, 4]);\n          if (dataFormat !== 'channelsFirst') {\n            x = tfc.transpose(x, [0, 2, 3, 1]);  // NCHW -> NHWC.\n          }\n          const kernel = tensor4d(kernel2by2Data, [2, 2, 1, 1]);\n          const y = conv2d(x, kernel, [stride, stride], 'valid', dataFormat);\n\n          let yExpected: Tensor;\n          if (stride === 1) {\n            yExpected = tensor4d(\n                [[[[-30, -30, -30], [50, 90, 130], [30, 30, 30]]]],\n                [1, 1, 3, 3]);\n          } else if (stride === 2) {\n            yExpected = tensor4d([[[[-30, -30], [30, 30]]]], [1, 1, 2, 2]);\n          }\n          if (dataFormat !== 'channelsFirst') {\n            yExpected = tfc.transpose(yExpected, [0, 2, 3, 1]);\n          }\n          expectTensorsClose(y, yExpected);\n        });\n      }\n    }\n  }\n\n  it('Invalid filters leads to Error', () => {\n    expect(() => tfl.layers.conv2d({filters: 2.5, kernelSize: 3}))\n        .toThrowError(/filters.*positive integer.*2\\.5\\.$/);\n  });\n});\n\ndescribeMathCPUAndGPU('conv2dWithBiasActivation', () => {\n  const x4by4Data = [[[\n    [10, 30, 50, 70], [20, 40, 60, 80], [-10, -30, -50, -70],\n    [-20, -40, -60, -80]\n  ]]];\n  const kernel2by2Data = [1, 0, 0, -1];\n  const biasScalarData = [2.2];\n\n  const outChannelsArray = [2, 3];\n  const dataFormats: DataFormat[] =\n      [undefined, 'channelsFirst', 'channelsLast'];\n  const paddingModes: PaddingMode[] = [undefined, 'same', 'valid'];\n  const stridesArray = [1, 2];\n\n  for (const outChannels of outChannelsArray) {\n    for (const dataFormat of dataFormats) {\n      for (const paddingMode of paddingModes) {\n        for (const stride of stridesArray) {\n          const testTitle = `outChannels=${outChannels}, stride=${stride}, ` +\n              `${paddingMode}, ${dataFormat}`;\n          it(testTitle, () => {\n            let x: Tensor = tensor4d(x4by4Data, [1, 1, 4, 4]);\n            if (dataFormat !== 'channelsFirst') {\n              x = tfc.transpose(x, [0, 2, 3, 1]);  // NCHW -> NHWC.\n            }\n\n            let kernelData: number[] = [];\n            let biasData: number[] = [];\n            for (let i = 0; i < outChannels; ++i) {\n              kernelData = kernelData.concat(kernel2by2Data);\n              biasData = biasData.concat(biasScalarData);\n            }\n            const kernel = tfc.transpose(\n                tensor4d(kernelData, [outChannels, 2, 2, 1]), [1, 2, 3, 0]);\n            const bias = tensor1d(biasData);\n\n            const y = conv2dWithBiasActivation(\n                x, kernel, bias, [stride, stride], 'valid', dataFormat);\n\n            let yExpectedShape: [number, number, number, number];\n            let yExpectedDataPerChannel: number[];\n            if (stride === 1) {\n              yExpectedShape = [1, outChannels, 3, 3];\n              yExpectedDataPerChannel =\n                  [-30, -30, -30, 50, 90, 130, 30, 30, 30];\n            } else if (stride === 2) {\n              yExpectedShape = [1, outChannels, 2, 2];\n              yExpectedDataPerChannel = [-30, -30, 30, 30];\n            }\n            for (let i = 0; i < yExpectedDataPerChannel.length; ++i) {\n              yExpectedDataPerChannel[i] += biasScalarData[0];\n            }\n            let yExpectedData: number[] = [];\n            for (let i = 0; i < outChannels; ++i) {\n              yExpectedData = yExpectedData.concat(yExpectedDataPerChannel);\n            }\n            let yExpected: Tensor = tensor4d(yExpectedData, yExpectedShape);\n            if (dataFormat !== 'channelsFirst') {\n              yExpected = tfc.transpose(yExpected, [0, 2, 3, 1]);\n            }\n            expectTensorsClose(y, yExpected);\n          });\n        }\n      }\n    }\n  }\n});\n\ndescribeMathCPU('Conv2D Layers: Symbolic', () => {\n  const filtersArray = [1, 64];\n  const paddingModes: PaddingMode[] = [undefined, 'valid', 'same'];\n  const dataFormats: DataFormat[] = ['channelsFirst', 'channelsLast'];\n  const kernelSizes = [[2, 2], [3, 4]];\n  // In this test suite, `undefined` means strides is the same as kernelSize.\n  const stridesArray = [undefined, 1];\n\n  for (const filters of filtersArray) {\n    for (const padding of paddingModes) {\n      for (const dataFormat of dataFormats) {\n        for (const kernelSize of kernelSizes) {\n          for (const stride of stridesArray) {\n            const strides = stride || kernelSize;\n            const testTitle = `filters=${filters}, kernelSize=${\n                                  JSON.stringify(kernelSize)}, ` +\n                `strides=${JSON.stringify(strides)}, ` +\n                `${dataFormat}, ${padding}`;\n            it(testTitle, () => {\n              const inputShape = dataFormat === 'channelsFirst' ?\n                  [2, 16, 11, 9] :\n                  [2, 11, 9, 16];\n              const symbolicInput =\n                  new tfl.SymbolicTensor('float32', inputShape, null, [], null);\n\n              const conv2dLayer = tfl.layers.conv2d({\n                filters,\n                kernelSize,\n                strides,\n                padding,\n                dataFormat,\n              });\n\n              const output =\n                  conv2dLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n\n              let outputRows: number;\n              let outputCols: number;\n              if (stride === undefined) {  // Same strides as kernelSize.\n                outputRows = kernelSize[0] === 2 ? 5 : 3;\n                if (padding === 'same') {\n                  outputRows++;\n                }\n                outputCols = kernelSize[1] === 2 ? 4 : 2;\n                if (padding === 'same') {\n                  outputCols++;\n                }\n              } else {  // strides: 1.\n                outputRows = kernelSize[0] === 2 ? 10 : 9;\n                if (padding === 'same') {\n                  outputRows += kernelSize[0] - 1;\n                }\n                outputCols = kernelSize[1] === 2 ? 8 : 6;\n                if (padding === 'same') {\n                  outputCols += kernelSize[1] - 1;\n                }\n              }\n              let expectedShape: [number, number, number, number];\n              if (dataFormat === 'channelsFirst') {\n                expectedShape = [2, filters, outputRows, outputCols];\n              } else {\n                expectedShape = [2, outputRows, outputCols, filters];\n              }\n\n              expect(output.shape).toEqual(expectedShape);\n              expect(output.dtype).toEqual(symbolicInput.dtype);\n            });\n          }\n        }\n      }\n    }\n  }\n\n  it('missing config.kernelSize throws exception', () => {\n    // tslint:disable-next-line:no-any\n    expect((filters: 1) => tfl.layers.conv2d({filters: 1} as any))\n        .toThrowError(/kernelSize/);\n  });\n  it('bad config.kernelSize shape throws exception', () => {\n    expect(() => tfl.layers.conv2d({filters: 1, kernelSize: [1, 1, 1]}))\n        .toThrowError(\n            /kernelSize argument must be an integer or tuple of 2 integers/);\n  });\n  it('bad config.kernelSize shape throws exception', () => {\n    expect(() => tfl.layers.conv2d({filters: 1, kernelSize: [1, 1, 1, 1]}))\n        .toThrowError(\n            /kernelSize to be number or number\\[\\] with length 1, 2, or 3/);\n  });\n  it('missing config.filters throws exception', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tfl.layers.conv2d({kernelSize: 1} as any))\n        .toThrowError(/filters to be a 'number' > 0/);\n  });\n  it('bad config.filters value throws exception', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tfl.layers.conv2d({kernelSize: 1, filters: 0} as any))\n        .toThrowError(/filters to be a 'number' > 0/);\n  });\n});\n\ndescribeMathCPUAndGPU('Conv2D Layer: Tensor', () => {\n  const x4by4Data = [[[\n    [10, 30, 50, 70], [20, 40, 60, 80], [-10, -30, -50, -70],\n    [-20, -40, -60, -80]\n  ]]];\n\n  const useBiases = [false, true];\n  const biasInitializers: InitializerIdentifier[] = ['zeros', 'ones'];\n  const activations: ActivationIdentifier[] = [null, 'linear', 'relu'];\n\n  for (const useBias of useBiases) {\n    for (const biasInitializer of biasInitializers) {\n      for (const activation of activations) {\n        const testTitle =\n            `useBias=${useBias}, biasInitializer=${biasInitializer}, ` +\n            `activation=${activation}`;\n        it(testTitle, () => {\n          const x = tensor4d(x4by4Data, [1, 1, 4, 4]);\n          const conv2dLayer = tfl.layers.conv2d({\n            filters: 1,\n            kernelSize: [2, 2],\n            strides: [2, 2],\n            dataFormat: 'channelsFirst',\n            useBias,\n            kernelInitializer: 'ones',\n            biasInitializer,\n            activation\n          });\n          const y = conv2dLayer.apply(x) as Tensor;\n\n          let yExpectedData = [100, 260, -100, -260];\n          if (useBias && biasInitializer === 'ones') {\n            yExpectedData = yExpectedData.map(element => element + 1);\n          }\n          if (activation === 'relu') {\n            yExpectedData =\n                yExpectedData.map(element => element >= 0 ? element : 0);\n          }\n          const yExpected = tensor4d(yExpectedData, [1, 1, 2, 2]);\n          expectTensorsClose(y, yExpected);\n        });\n      }\n    }\n  }\n\n  it('CHANNEL_LAST', () => {\n    // Convert input to CHANNEL_LAST.\n    const x = tfc.transpose(tensor4d(x4by4Data, [1, 1, 4, 4]), [0, 2, 3, 1]);\n    const conv2dLayer = tfl.layers.conv2d({\n      filters: 1,\n      kernelSize: [2, 2],\n      strides: [2, 2],\n      dataFormat: 'channelsLast',\n      useBias: false,\n      kernelInitializer: 'ones',\n      activation: 'linear'\n    });\n    const y = conv2dLayer.apply(x) as Tensor;\n    const yExpected = tensor4d([100, 260, -100, -260], [1, 2, 2, 1]);\n    expectTensorsClose(y, yExpected);\n  });\n\n  const dilationRateValues: Array<number|[number, number]> = [2, [2, 2]];\n  for (const dilationRate of dilationRateValues) {\n    it(`CHANNEL_LAST, dilationRate=${dilationRate}`, () => {\n      const x = tensor4d(\n          [[\n            [\n              [0.89240986], [0.54892443], [0.24670805], [0.03983783],\n              [0.56602233]\n            ],\n\n            [\n              [0.21421895], [0.58529864], [0.60060781], [0.66895784],\n              [0.08855761]\n            ],\n\n            [\n              [0.56657235], [0.25803428], [0.17971111], [0.65166403],\n              [0.70492866]\n            ],\n\n            [\n              [0.46641512], [0.05765411], [0.52517211], [0.62557303],\n              [0.30612501]\n            ],\n\n            [\n              [0.8406994], [0.56932724], [0.96028134], [0.34666753],\n              [0.04458038]\n            ]\n          ]],\n          [1, 5, 5, 1]);\n      const conv2dLayer = tfl.layers.conv2d({\n        filters: 1,\n        kernelSize: [2, 2],\n        strides: 1,\n        dataFormat: 'channelsLast',\n        useBias: false,\n        kernelInitializer: 'ones',\n        activation: 'linear',\n        dilationRate\n      });\n      const y = conv2dLayer.apply(x) as Tensor;\n      const yExpected = tensor4d(\n          [[\n            [[1.8854014], [1.4984605], [1.6973702]],\n\n            [[1.8064139], [1.9374835], [1.5204625]],\n\n            [[2.547264], [1.8256931], [1.8895016]]\n          ]],\n          [1, 3, 3, 1]);\n      expectTensorsClose(y, yExpected);\n    });\n  }\n\n  const explicitDefaultDilations: Array<number|[number, number]> = [1, [1, 1]];\n  for (const explicitDefaultDilation of explicitDefaultDilations) {\n    const testTitle = 'Explicit default dilation rate: ' +\n        JSON.stringify(explicitDefaultDilation);\n    it(testTitle, () => {\n      const conv2dLayer = tfl.layers.conv2d({\n        filters: 1,\n        kernelSize: [2, 2],\n        strides: [2, 2],\n        dataFormat: 'channelsFirst',\n        useBias: false,\n        kernelInitializer: 'ones',\n        dilationRate: explicitDefaultDilation\n      });\n      const x = tensor4d(x4by4Data, [1, 1, 4, 4]);\n      const y = conv2dLayer.apply(x) as Tensor;\n      const yExpected = tensor4d([100, 260, -100, -260], [1, 1, 2, 2]);\n      expectTensorsClose(y, yExpected);\n    });\n  }\n});\n\ndescribeMathCPUAndGPU('conv3d', () => {\n  // # The following TensorFlow Python code is used to verify the results of\n  // # the 3D convolutions.\n  //\n  // ```python\n  // import numpy as np\n  // import tensorflow as tf\n  // tf.enable_eager_execution()\n  //\n  // x = np.arange(64, dtype=np.float32).reshape(1, 4, 4, 4, 1)\n  // # Shape of kernel is (height, width, depth, input_ch, output_ch)\n  // kernel = np.array([\n  //     1, 1, 1, -1, -1, 1, 1, 1\n  //   ], dtype=np.float32).reshape(2, 2, 2, 1, 1)\n  //\n  // # Strides (1, 1, 1)\n  // outputs = tf.nn.conv3d(\n  //     input=x, filter=kernel, strides=[1, 1, 1, 1, 1], padding='VALID')\n  // outputs.numpy().flatten()\n  // # Output:\n  // #   array([ 42.,  46.,  50.,  58.,  62.,  66.,  74.,  78.,  82., 106.,\n  // #           110., 114., 122., 126., 130., 138., 142., 146., 170., 174.,\n  // #           178., 186., 190., 194., 202., 206., 210.], dtype=float32)\n  // outputs.numpy().shape  # (1, 3, 3, 3, 1)\n  //\n  // # Strides (2, 2, 2)\n  // outputs = tf.nn.conv3d(\n  //     input=x, filter=kernel, strides=[1, 2, 2, 2, 1], padding='VALID')\n  // outputs.numpy().flatten()\n  // # Output:\n  // #   array([ 42.,  50.,  74.,  82., 170., 178., 202., 210.], dtype=float32)\n  // outputs.numpy().shape  # (1, 2, 2, 2, 1)\n  // ```\n\n  const x4by4by4Data = [\n    0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15,\n    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n    48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63\n  ];\n  const kernel2by2by2Data = [1, 1, 1, -1, -1, 1, 1, 1];\n\n  const dataFormats: DataFormat[] =\n      [undefined, 'channelsFirst', 'channelsLast'];\n  const paddingModes: PaddingMode[] = [undefined, 'same', 'valid'];\n  const stridesArray = [1, 2];\n\n  for (const dataFormat of dataFormats) {\n    for (const paddingMode of paddingModes) {\n      for (const stride of stridesArray) {\n        const testTitle = `stride=${stride}, ${paddingMode}, ` +\n            `${dataFormat}`;\n        it(testTitle, () => {\n          let x = tensor5d(x4by4by4Data, [1, 1, 4, 4, 4]);\n          if (dataFormat !== 'channelsFirst') {\n            x = tfc.transpose(x, [0, 2, 3, 4, 1]);  // NCDHW -> NDHWC.\n          }\n          const kernel = tensor5d(kernel2by2by2Data, [2, 2, 2, 1, 1]);\n          const y =\n              conv3d(x, kernel, [stride, stride, stride], 'valid', dataFormat);\n\n          let yExpected: Tensor;\n          if (stride === 1) {\n            // See validation Python code in comment above.\n            yExpected = tensor5d(\n                [\n                  42.,  46.,  50.,  58.,  62.,  66.,  74.,  78.,  82.,\n                  106., 110., 114., 122., 126., 130., 138., 142., 146.,\n                  170., 174., 178., 186., 190., 194., 202., 206., 210.\n                ],\n                [1, 1, 3, 3, 3]);\n          } else if (stride === 2) {\n            // See validation Python code in comment above.\n            yExpected = tensor5d(\n                [42., 50., 74., 82., 170., 178., 202., 210.], [1, 1, 2, 2, 2]);\n          }\n          if (dataFormat !== 'channelsFirst') {\n            yExpected = tfc.transpose(yExpected, [0, 2, 3, 4, 1]);\n          }\n          expectTensorsClose(y, yExpected);\n        });\n      }\n    }\n  }\n\n  const biasScalarData = [2.2];\n  const outChannelsArray = [2, 3];\n\n  for (const outChannels of outChannelsArray) {\n    for (const dataFormat of dataFormats) {\n      for (const paddingMode of paddingModes) {\n        for (const stride of stridesArray) {\n          const testTitle = `outChannels=${outChannels}, stride=${stride}, ` +\n              `${paddingMode}, ${dataFormat}`;\n          it(testTitle, () => {\n            let x: Tensor = tensor5d(x4by4by4Data, [1, 1, 4, 4, 4]);\n            if (dataFormat !== 'channelsFirst') {\n              x = tfc.transpose(x, [0, 2, 3, 4, 1]);  // NCDHW -> NDHWC.\n            }\n\n            let kernelData: number[] = [];\n            let biasData: number[] = [];\n            for (let i = 0; i < outChannels; ++i) {\n              kernelData = kernelData.concat(kernel2by2by2Data);\n              biasData = biasData.concat(biasScalarData);\n            }\n            const kernel = tfc.transpose(\n                tensor5d(kernelData, [outChannels, 2, 2, 2, 1]),\n                [1, 2, 3, 4, 0]);\n            const bias = tensor1d(biasData);\n\n            const y = conv3dWithBias(\n                x, kernel, bias, [stride, stride, stride], 'valid', dataFormat);\n\n            let yExpectedShape: [number, number, number, number, number];\n            let yExpectedDataPerChannel: number[];\n            if (stride === 1) {\n              yExpectedShape = [1, outChannels, 3, 3, 3];\n              // See validation Python code above.\n              yExpectedDataPerChannel = [\n                42.,  46.,  50.,  58.,  62.,  66.,  74.,  78.,  82.,\n                106., 110., 114., 122., 126., 130., 138., 142., 146.,\n                170., 174., 178., 186., 190., 194., 202., 206., 210.\n              ];\n            } else if (stride === 2) {\n              yExpectedShape = [1, outChannels, 2, 2, 2];\n              // See validation Python code above.\n              yExpectedDataPerChannel =\n                  [42., 50., 74., 82., 170., 178., 202., 210.];\n            }\n            for (let i = 0; i < yExpectedDataPerChannel.length; ++i) {\n              yExpectedDataPerChannel[i] += biasScalarData[0];\n            }\n            let yExpectedData: number[] = [];\n            for (let i = 0; i < outChannels; ++i) {\n              yExpectedData = yExpectedData.concat(yExpectedDataPerChannel);\n            }\n            let yExpected: Tensor = tensor5d(yExpectedData, yExpectedShape);\n            if (dataFormat !== 'channelsFirst') {\n              yExpected = tfc.transpose(yExpected, [0, 2, 3, 4, 1]);\n            }\n            expectTensorsClose(y, yExpected);\n          });\n        }\n      }\n    }\n  }\n});\n\ndescribeMathCPU('Conv3D Layers: Symbolic', () => {\n  const filtersArray = [1, 64];\n  const paddingModes: PaddingMode[] = [undefined, 'valid', 'same'];\n  const dataFormats: DataFormat[] = ['channelsFirst', 'channelsLast'];\n  const kernelSizes = [[2, 2, 2], [3, 4, 4]];\n  // In this test suite, `undefined` means strides is the same as kernelSize.\n  const stridesArray = [undefined, 1];\n\n  for (const filters of filtersArray) {\n    for (const padding of paddingModes) {\n      for (const dataFormat of dataFormats) {\n        for (const kernelSize of kernelSizes) {\n          for (const stride of stridesArray) {\n            const strides = stride || kernelSize;\n            const testTitle = `filters=${filters}, kernelSize=${\n                                  JSON.stringify(kernelSize)}, ` +\n                `strides=${JSON.stringify(strides)}, ` +\n                `${dataFormat}, ${padding}`;\n            it(testTitle, () => {\n              const inputShape = dataFormat === 'channelsFirst' ?\n                  [2, 16, 11, 9, 9] :\n                  [2, 11, 9, 9, 16];\n              const symbolicInput =\n                  new tfl.SymbolicTensor('float32', inputShape, null, [], null);\n\n              const conv3dLayer = tfl.layers.conv3d({\n                filters,\n                kernelSize,\n                strides,\n                padding,\n                dataFormat,\n              });\n\n              const output =\n                  conv3dLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n\n              let outputRows: number;\n              let outputCols: number;\n              let outputDepth: number;\n              if (stride === undefined) {  // Same strides as kernelSize.\n                outputRows = kernelSize[0] === 2 ? 5 : 3;\n                if (padding === 'same') {\n                  outputRows++;\n                }\n                outputCols = kernelSize[1] === 2 ? 4 : 2;\n                if (padding === 'same') {\n                  outputCols++;\n                }\n                outputDepth = kernelSize[2] === 2 ? 4 : 2;\n                if (padding === 'same') {\n                  outputDepth++;\n                }\n              } else {  // strides: 1.\n                outputRows = kernelSize[0] === 2 ? 10 : 9;\n                if (padding === 'same') {\n                  outputRows += kernelSize[0] - 1;\n                }\n                outputCols = kernelSize[1] === 2 ? 8 : 6;\n                if (padding === 'same') {\n                  outputCols += kernelSize[1] - 1;\n                }\n                outputDepth = kernelSize[2] === 2 ? 8 : 6;\n                if (padding === 'same') {\n                  outputDepth += kernelSize[1] - 1;\n                }\n              }\n              let expectedShape: [number, number, number, number, number];\n              if (dataFormat === 'channelsFirst') {\n                expectedShape =\n                    [2, filters, outputRows, outputCols, outputDepth];\n              } else {\n                expectedShape =\n                    [2, outputRows, outputCols, outputDepth, filters];\n              }\n\n              expect(output.shape).toEqual(expectedShape);\n              expect(output.dtype).toEqual(symbolicInput.dtype);\n            });\n          }\n        }\n      }\n    }\n  }\n\n  it('Invalid filters leads to Error', () => {\n    expect(() => tfl.layers.conv3d({filters: 2.5, kernelSize: 3}))\n        .toThrowError(/filters.*positive integer.*2\\.5\\.$/);\n  });\n  it('missing config.kernelSize throws exception', () => {\n    // tslint:disable-next-line:no-any\n    expect((filters: 1) => tfl.layers.conv3d({filters: 1} as any))\n        .toThrowError(/kernelSize/);\n  });\n  it('scalar config.kernelSize shape does not throw exception', () => {\n    expect(() => tfl.layers.conv3d({filters: 1, kernelSize: 1}))\n        .not.toThrowError();\n  });\n  it('bad config.kernelSize shape throws exception', () => {\n    expect(() => tfl.layers.conv3d({filters: 1, kernelSize: [1, 1]}))\n        .toThrowError(\n            /kernelSize argument must be an integer or tuple of 3 integers/);\n  });\n  it('bad config.kernelSize shape throws exception', () => {\n    expect(() => tfl.layers.conv2d({filters: 1, kernelSize: [1, 1, 1, 1]}))\n        .toThrowError(\n            /kernelSize to be number or number\\[\\] with length 1, 2, or 3/);\n  });\n  it('missing config.filters throws exception', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tfl.layers.conv3d({kernelSize: 1} as any))\n        .toThrowError(/filters to be a 'number' > 0/);\n  });\n  it('bad config.filters value throws exception', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tfl.layers.conv3d({kernelSize: 1, filters: 0} as any))\n        .toThrowError(/filters to be a 'number' > 0/);\n  });\n});\n\ndescribeMathCPUAndGPU('Conv3D Layer: Tensor', () => {\n  // # The following TensorFlow Python code is used to verify the results of\n  // # the 3D convolution layer.\n  //\n  // ```python\n  // import numpy as np\n  // import tensorflow as tf\n  // tf.enable_eager_execution()\n  //\n  // x = np.arange(64, dtype=np.float32).reshape(1, 4, 4, 4, 1)\n  // layer = tf.keras.layers.Conv3D(\n  //     filters=1, kernel_size=(2, 2, 2), strides=(2, 2, 2),\n  //     use_bias=True, kernel_initializer='ones', bias_initializer='zeros')\n  // outputs = layer(x)\n  // outputs.numpy().flatten()\n  // # Output:\n  // #  array([ 84., 100., 148., 164., 340., 356., 404., 420.], dtype=float32)\n  // outputs.numpy().shape\n  // # Output:\n  // #  (1, 2, 2, 2, 1)\n  // # TensorFlow Keras (Python) does not have a CPU implementation for channels\n  // # first yet, so the validation code uses channels last. Axes 1 and 4 would\n  // # be swapped to get channels first.\n  // ```\n\n  const x4by4by4Data = [\n    0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15,\n    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n    48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63\n  ];\n\n  const useBiases = [false, true];\n  const biasInitializers: InitializerIdentifier[] = ['zeros', 'ones'];\n  const activations: ActivationIdentifier[] = [null, 'linear', 'relu'];\n\n  for (const useBias of useBiases) {\n    for (const biasInitializer of biasInitializers) {\n      for (const activation of activations) {\n        const testTitle =\n            `useBias=${useBias}, biasInitializer=${biasInitializer}, ` +\n            `activation=${activation}`;\n        it(testTitle, () => {\n          const x = tensor5d(x4by4by4Data, [1, 1, 4, 4, 4]);\n          const conv3dLayer = tfl.layers.conv3d({\n            filters: 1,\n            kernelSize: [2, 2, 2],\n            strides: [2, 2, 2],\n            dataFormat: 'channelsFirst',\n            useBias,\n            kernelInitializer: 'ones',\n            biasInitializer,\n            activation\n          });\n          const y = conv3dLayer.apply(x) as Tensor;\n          // See validation Python code above.\n          let yExpectedData = [84., 100., 148., 164., 340., 356., 404., 420.];\n          if (useBias && biasInitializer === 'ones') {\n            yExpectedData = yExpectedData.map(element => element + 1);\n          }\n          if (activation === 'relu') {\n            yExpectedData =\n                yExpectedData.map(element => element >= 0 ? element : 0);\n          }\n          const yExpected = tensor5d(yExpectedData, [1, 1, 2, 2, 2]);\n          expectTensorsClose(y, yExpected);\n        });\n      }\n    }\n  }\n\n  it('CHANNEL_LAST', () => {\n    // Convert input to CHANNEL_LAST.\n    const x =\n        tfc.transpose(tensor5d(x4by4by4Data, [1, 1, 4, 4, 4]), [0, 2, 3, 4, 1]);\n    const conv3dLayer = tfl.layers.conv3d({\n      filters: 1,\n      kernelSize: [2, 2, 2],\n      strides: [2, 2, 2],\n      dataFormat: 'channelsLast',\n      useBias: false,\n      kernelInitializer: 'ones',\n      activation: 'linear'\n    });\n    const y = conv3dLayer.apply(x) as Tensor;\n    // See validation Python code above.\n    const yExpected = tensor5d(\n        [84., 100., 148., 164., 340., 356., 404., 420.], [1, 2, 2, 2, 1]);\n    expectTensorsClose(y, yExpected);\n  });\n\n  // # The following TensorFlow Python code is used to verify the results of\n  // # the 3D convolution layer with dilation.\n  //\n  // ```python\n  // import numpy as np\n  // import tensorflow as tf\n  // tf.enable_eager_execution()\n  //\n  // np.random.seed(42)\n  // x = np.random.rand(1, 4, 4, 4, 1)\n  // layer = tf.keras.layers.Conv3D(\n  //     filters=1, kernel_size=(2, 2, 2), strides=1, dilation_rate=2,\n  //     use_bias=False, kernel_initializer='ones', activation='linear')\n  // outputs = layer(x)\n  // outputs.numpy().flatten()\n  // # Output:\n  // #   array([2.91534395, 6.38913542, 2.78770771, 3.1383292 , 3.04194573,\n  // #          3.59669644, 4.85877068, 3.16763418])\n  // outputs.numpy().shape\n  // # Output:\n  // #   (1, 2, 2, 2, 1)\n  // ```\n\n  const dilationRateValues: Array<number|[number, number, number]> =\n      [2, [2, 2, 2]];\n  for (const dilationRate of dilationRateValues) {\n    it(`CHANNEL_LAST, dilationRate=${dilationRate}`, () => {\n      const x = tensor5d(\n          [\n            0.37454012, 0.95071431, 0.73199394, 0.59865848, 0.15601864,\n            0.15599452, 0.05808361, 0.86617615, 0.60111501, 0.70807258,\n            0.02058449, 0.96990985, 0.83244264, 0.21233911, 0.18182497,\n            0.18340451, 0.30424224, 0.52475643, 0.43194502, 0.29122914,\n            0.61185289, 0.13949386, 0.29214465, 0.36636184, 0.45606998,\n            0.78517596, 0.19967378, 0.51423444, 0.59241457, 0.04645041,\n            0.60754485, 0.17052412, 0.06505159, 0.94888554, 0.96563203,\n            0.80839735, 0.30461377, 0.09767211, 0.68423303, 0.44015249,\n            0.12203823, 0.49517691, 0.03438852, 0.9093204,  0.25877998,\n            0.66252228, 0.31171108, 0.52006802, 0.54671028, 0.18485446,\n            0.96958463, 0.77513282, 0.93949894, 0.89482735, 0.59789998,\n            0.92187424, 0.0884925,  0.19598286, 0.04522729, 0.32533033,\n            0.38867729, 0.27134903, 0.82873751, 0.35675333\n          ],\n          [1, 4, 4, 4, 1]);\n      const conv3dLayer = tfl.layers.conv3d({\n        filters: 1,\n        kernelSize: [2, 2, 2],\n        strides: 1,\n        dataFormat: 'channelsLast',\n        useBias: false,\n        kernelInitializer: 'ones',\n        activation: 'linear',\n        dilationRate\n      });\n      const y = conv3dLayer.apply(x) as Tensor;\n      // See validation Python code above.\n      const yExpected = tensor5d(\n          [\n            2.91534395, 6.38913542, 2.78770771, 3.1383292, 3.04194573,\n            3.59669644, 4.85877068, 3.16763418\n          ],\n          [1, 2, 2, 2, 1]);\n      expectTensorsClose(y, yExpected);\n    });\n  }\n\n  const explicitDefaultDilations: Array<number|[number, number, number]> =\n      [1, [1, 1, 1]];\n  for (const explicitDefaultDilation of explicitDefaultDilations) {\n    const testTitle = 'Explicit default dilation rate: ' +\n        JSON.stringify(explicitDefaultDilation);\n    it(testTitle, () => {\n      const conv3dLayer = tfl.layers.conv3d({\n        filters: 1,\n        kernelSize: [2, 2, 2],\n        strides: [2, 2, 2],\n        dataFormat: 'channelsFirst',\n        useBias: false,\n        kernelInitializer: 'ones',\n        dilationRate: explicitDefaultDilation\n      });\n      const x = tensor5d(x4by4by4Data, [1, 1, 4, 4, 4]);\n      const y = conv3dLayer.apply(x) as Tensor;\n      const yExpected = tensor5d(\n          [84., 100., 148., 164., 340., 356., 404., 420.], [1, 1, 2, 2, 2]);\n      expectTensorsClose(y, yExpected);\n    });\n  }\n});\n\ndescribeMathCPU('Conv2DTranspose: Symbolic', () => {\n  const filtersArray = [1, 64];\n  const paddingModes: PaddingMode[] = [undefined, 'valid', 'same'];\n  const kernelSizes = [2, [2, 2], [3, 4]];\n  const stridesArray = [undefined, 2];\n\n  for (const filters of filtersArray) {\n    for (const padding of paddingModes) {\n      for (const kernelSize of kernelSizes) {\n        for (const strides of stridesArray) {\n          const testTitle = `filters=${filters}, paddingMode=${padding},` +\n              `kernelSize=${JSON.stringify(kernelSize)}, strides=${strides}`;\n          it(testTitle, () => {\n            const inputShape = [2, 11, 9, 16];\n            const x =\n                new tfl.SymbolicTensor('float32', inputShape, null, [], null);\n\n            const layer = tfl.layers.conv2dTranspose(\n                {filters, kernelSize, padding, strides});\n            const y = layer.apply(x) as tfl.SymbolicTensor;\n\n            let expectedShape: [number, number, number, number];\n            if (strides === undefined) {\n              if (padding === 'valid' || padding === undefined) {\n                if (kernelSize as number === 2 ||\n                    util.arraysEqual(kernelSize as number[], [2, 2])) {\n                  expectedShape = [2, 12, 10, filters];\n                } else if (util.arraysEqual(kernelSize as number[], [3, 4])) {\n                  expectedShape = [2, 13, 12, filters];\n                }\n              } else if (padding === 'same') {\n                expectedShape = [2, 11, 9, filters];\n              }\n            } else {\n              if (padding === 'valid' || padding === undefined) {\n                if (kernelSize as number === 2 ||\n                    util.arraysEqual(kernelSize as number[], [2, 2])) {\n                  expectedShape = [2, 22, 18, filters];\n                } else if (util.arraysEqual(kernelSize as number[], [3, 4])) {\n                  expectedShape = [2, 23, 20, filters];\n                }\n              } else if (padding === 'same') {\n                expectedShape = [2, 22, 18, filters];\n              }\n            }\n            expect(y.shape).toEqual(expectedShape);\n          });\n        }\n      }\n    }\n  }\n\n  it('Correct weight names', () => {\n    const x = new tfl.SymbolicTensor('float32', [1, 2, 3, 4], null, [], null);\n    const layer = tfl.layers.conv2dTranspose({filters: 2, kernelSize: [3, 3]});\n    layer.apply(x);  // Let the layer build first.\n\n    expect(layer.weights.length).toEqual(2);\n    expect(layer.weights[0].name.indexOf('/kernel')).toBeGreaterThan(0);\n    expect(layer.weights[1].name.indexOf('/bias')).toBeGreaterThan(0);\n  });\n});\n\ndescribeMathCPUAndGPU('Conv2DTranspose: Tensor', () => {\n  const dataFormats: DataFormat[] = ['channelsFirst', 'channelsLast'];\n  const stridesArray = [2, [2, 2]];\n  for (const dataFormat of dataFormats) {\n    for (const strides of stridesArray) {\n      const testTitle =\n          `filters=8, kernelSize=[2,2], padding=valid, strides=${strides}` +\n          `dataFormat=${dataFormat}`;\n      it(testTitle, () => {\n        const filters = 8;\n        const kernelSize = [2, 2];\n        const padding = 'valid';\n        const strides = 2;\n        const layer = tfl.layers.conv2dTranspose({\n          filters,\n          kernelSize,\n          padding,\n          strides,\n          dataFormat,\n          kernelInitializer: 'ones',\n          biasInitializer: 'ones'\n        });\n\n        const x = tfc.ones([2, 3, 4, 2]);\n        const y = layer.apply(x) as Tensor;\n        if (dataFormat === 'channelsLast') {\n          expectTensorsClose(y, tfc.ones([2, 6, 8, 8]).mul(scalar(3)));\n        } else {\n          expectTensorsClose(y, tfc.ones([2, 8, 8, 4]).mul(scalar(4)));\n        }\n      });\n    }\n  }\n});\n\ndescribeMathCPU('Conv1D Layers: Symbolic', () => {\n  const filtersArray = [1, 4];\n  const paddingModes: PaddingMode[] = [undefined, 'valid', 'same'];\n  const stridesArray = [undefined, 1];\n\n  for (const filters of filtersArray) {\n    for (const padding of paddingModes) {\n      for (const strides of stridesArray) {\n        const testTitle = `filters=${filters}, padding=${padding}, ` +\n            `strides=${strides}`;\n        it(testTitle, () => {\n          const inputShape = [2, 8, 3];\n          const symbolicInput =\n              new tfl.SymbolicTensor('float32', inputShape, null, [], null);\n\n          const conv1dLayer = tfl.layers.conv1d({\n            filters,\n            kernelSize: 2,\n            strides,\n            padding,\n            dataFormat: 'channelsLast',\n          });\n\n          const output = conv1dLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n\n          const expectedShape = [2, 7, filters];\n          if (padding === 'same') {\n            expectedShape[1] = 8;\n          }\n          expect(output.shape).toEqual(expectedShape);\n          expect(output.dtype).toEqual(symbolicInput.dtype);\n        });\n      }\n    }\n  }\n\n  it('bad config.kernelSize shape throws exception', () => {\n    expect(() => tfl.layers.conv1d({filters: 1, kernelSize: [1, 1]}))\n        .toThrowError(/kernelSize.*1/);\n  });\n});\n\ndescribeMathCPUAndGPU('Conv1D Layer: Tensor', () => {\n  const xLength4Data = [10, -30, -50, 70];\n  // In the most basic case, applying an all-ones convolutional kernel to\n  // the 1D input above gives [-20, -80, 20]. Then adding all-ones bias to\n  // it gives [-19, -79, 21].\n\n  const stridesValues = [1, 2];\n  const activations: ActivationIdentifier[] = ['linear', 'relu'];\n  for (const strides of stridesValues) {\n    for (const activation of activations) {\n      const testTitle = `useBias=true, biasInitializer=ones, ` +\n          `activation=${activation}; strides=${strides}`;\n      it(testTitle, () => {\n        const x = tensor3d(xLength4Data, [1, 4, 1]);\n        const conv1dLayer = tfl.layers.conv1d({\n          filters: 1,\n          kernelSize: 2,\n          strides,\n          dataFormat: 'channelsLast',\n          useBias: true,\n          kernelInitializer: 'ones',\n          biasInitializer: 'ones',\n          activation\n        });\n        const y = conv1dLayer.apply(x) as Tensor;\n\n        let yExpectedShape: [number, number, number];\n        let yExpectedData: number[];\n        if (strides === 1) {\n          yExpectedShape = [1, 3, 1];\n          yExpectedData = [-19, -79, 21];\n        } else {\n          yExpectedShape = [1, 2, 1];\n          yExpectedData = [-19, 21];\n        }\n        if (activation === 'relu') {\n          yExpectedData = yExpectedData.map(x => x > 0 ? x : 0);\n        }\n        const yExpected = tensor3d(yExpectedData, yExpectedShape);\n        expectTensorsClose(y, yExpected);\n      });\n    }\n  }\n\n  const dilationRates: Array<number|[number]> = [2, [2]];\n  for (const dilationRate of dilationRates) {\n    it(`dilationRate = ${dilationRate}`, () => {\n      const x = tensor3d(\n          [\n            0.0024236, 0.54829558, 0.47628448, 0.2971449, 0.7984293, 0.71802861,\n            0.53109141, 0.85882819\n          ],\n          [1, 8, 1]);\n      const conv1dLayer = tfl.layers.conv1d({\n        filters: 1,\n        kernelSize: 2,\n        strides: 1,\n        useBias: true,\n        kernelInitializer: 'ones',\n        biasInitializer: 'ones',\n        dilationRate,\n      });\n      const y = conv1dLayer.apply(x) as Tensor;\n      const yExpected = tensor3d(\n          [1.478708, 1.8454404, 2.2747138, 2.0151734, 2.3295207, 2.5768569],\n          [1, 6, 1]);\n      expectTensorsClose(y, yExpected);\n    });\n  }\n\n  it('missing config.kernelSize throws exception', () => {\n    // tslint:disable-next-line:no-any\n    expect((filters: 1) => tfl.layers.conv1d({filters: 1} as any))\n        .toThrowError(/required key 'kernelSize' not in config/);\n  });\n  it('bad config.kernelSize throws exception', () => {\n    expect(() => tfl.layers.conv1d({filters: 1, kernelSize: [1, 1, 1]}))\n        .toThrowError(\n            /kernelSize argument must be an integer or tuple of 1 integers/);\n  });\n  it('missing config.filters throws exception', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tfl.layers.conv1d({kernelSize: 1} as any))\n        .toThrowError(/filters to be a 'number' > 0/);\n  });\n  it('bad config.filters throws exception', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tfl.layers.conv1d({kernelSize: 1, filters: 0} as any))\n        .toThrowError(/filters to be a 'number' > 0/);\n  });\n});\n\ndescribeMathCPU('SeparableConv2D Layers: Symbolic', () => {\n  const filtersArray = [1, 8];\n  const paddingModes: PaddingMode[] = [undefined, 'valid', 'same'];\n  const dataFormats: DataFormat[] = ['channelsFirst', 'channelsLast'];\n  const kernelSizes = [[2, 2], [3, 4]];\n  // In this test suite, `undefined` means strides is the same as kernelSize.\n  const stridesArray = [undefined, 1];\n  const dilationRates = [undefined, 2];\n\n  for (const filters of filtersArray) {\n    for (const padding of paddingModes) {\n      for (const dataFormat of dataFormats) {\n        for (const kernelSize of kernelSizes) {\n          for (const stride of stridesArray) {\n            for (const dilationRate of dilationRates) {\n              const strides = stride || kernelSize;\n              const testTitle = `filters=${filters}, kernelSize=${\n                                    JSON.stringify(kernelSize)}, ` +\n                  `strides=${JSON.stringify(strides)}, ` +\n                  `dataFormat=${dataFormat}, padding=${padding}, ` +\n                  `dilationRate=${dilationRate}`;\n              it(testTitle, () => {\n                const inputShape = dataFormat === 'channelsFirst' ?\n                    [2, 16, 11, 9] :\n                    [2, 11, 9, 16];\n                const symbolicInput = new tfl.SymbolicTensor(\n                    'float32', inputShape, null, [], null);\n\n                const layer = tfl.layers.separableConv2d({\n                  filters,\n                  kernelSize,\n                  strides,\n                  padding,\n                  dataFormat,\n                  dilationRate,\n                });\n\n                const output = layer.apply(symbolicInput) as tfl.SymbolicTensor;\n\n                let outputRows: number;\n                let outputCols: number;\n                if (dilationRate == null) {\n                  if (stride === undefined) {  // Same strides as kernelSize.\n                    outputRows = kernelSize[0] === 2 ? 5 : 3;\n                    if (padding === 'same') {\n                      outputRows++;\n                    }\n                    outputCols = kernelSize[1] === 2 ? 4 : 2;\n                    if (padding === 'same') {\n                      outputCols++;\n                    }\n                  } else {  // strides: 1.\n                    outputRows = kernelSize[0] === 2 ? 10 : 9;\n                    if (padding === 'same') {\n                      outputRows += kernelSize[0] - 1;\n                    }\n                    outputCols = kernelSize[1] === 2 ? 8 : 6;\n                    if (padding === 'same') {\n                      outputCols += kernelSize[1] - 1;\n                    }\n                  }\n                } else {\n                  if (padding === 'same') {\n                    if (stride === undefined) {  // Same strides as kernelSize.\n                      outputRows = kernelSize[0] === 2 ? 6 : 4;\n                      outputCols = kernelSize[1] === 2 ? 5 : 3;\n                    } else {  // strides: 1.\n                      outputRows = 11;\n                      outputCols = 9;\n                    }\n                  } else {\n                    if (stride === undefined) {  // Same strides as kernelSize.\n                      outputRows = kernelSize[0] === 2 ? 5 : 3;\n                      outputCols = kernelSize[1] === 2 ? 4 : 1;\n                    } else {  // strides: 1.\n                      outputRows = kernelSize[0] === 2 ? 9 : 7;\n                      outputCols = kernelSize[1] === 2 ? 7 : 3;\n                    }\n                  }\n                }\n                let expectedShape: [number, number, number, number];\n                if (dataFormat === 'channelsFirst') {\n                  expectedShape = [2, filters, outputRows, outputCols];\n                } else {\n                  expectedShape = [2, outputRows, outputCols, filters];\n                }\n\n                expect(output.shape).toEqual(expectedShape);\n                expect(output.dtype).toEqual(symbolicInput.dtype);\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n  it('Incorrect input rank throws error', () => {\n    const layer = tfl.layers.separableConv2d({\n      filters: 1,\n      kernelSize: [2, 2],\n      strides: 1,\n    });\n    const symbolicInput =\n        new tfl.SymbolicTensor('float32', [2, 3, 4], null, [], null);\n    expect(() => layer.apply(symbolicInput)).toThrowError(/rank 4/);\n  });\n\n  it('Undefined channel axis throws error', () => {\n    const layer = tfl.layers.separableConv2d({\n      filters: 1,\n      kernelSize: [2, 2],\n      strides: 1,\n    });\n    const symbolicInput =\n        new tfl.SymbolicTensor('float32', [1, , 2, 3, null], null, [], null);\n    expect(() => layer.apply(symbolicInput))\n        .toThrowError(/channel dimension .* should be defined/);\n  });\n});\n\ndescribeMathGPU('SeparableConv2D Layer: Tensor', () => {\n  const x5by5Data = [\n    1,  3,  5,  7,  9,  2,  4,   6,  8, 10, -1, -3, -5,\n    -7, -9, -2, -4, -6, -8, -10, -1, 1, -1, 1,  -1\n  ];\n\n  const dataFormats: DataFormat[] = ['channelsFirst', 'channelsLast'];\n  const dilationRates: number[] = [undefined, 2];\n  const useBiases = [false, true];\n  const biasInitializers: InitializerIdentifier[] = ['zeros', 'ones'];\n  const activations: ActivationIdentifier[] = [null, 'linear', 'relu'];\n\n  for (const dataFormat of dataFormats) {\n    for (const dilationRate of dilationRates) {\n      for (const useBias of useBiases) {\n        for (const biasInitializer of biasInitializers) {\n          for (const activation of activations) {\n            const testTitle = `dataFormat=${dataFormat}, ` +\n                `dilationRate=${dilationRate}, ` +\n                `useBias=${useBias}, biasInitializer=${biasInitializer}, ` +\n                `activation=${activation}`;\n            it(testTitle, () => {\n              let x = tensor4d(x5by5Data, [1, 5, 5, 1]);\n              if (dataFormat === 'channelsFirst') {\n                x = tfc.transpose(x, [0, 3, 1, 2]);  // NHWC -> NCHW.\n              }\n\n              const conv2dLayer = tfl.layers.separableConv2d({\n                depthMultiplier: 1,\n                filters: 1,\n                kernelSize: [2, 2],\n                strides: 1,\n                dilationRate,\n                dataFormat,\n                useBias,\n                depthwiseInitializer: 'ones',\n                pointwiseInitializer: 'ones',\n                biasInitializer,\n                activation\n              });\n              const y = conv2dLayer.apply(x) as Tensor;\n\n              let yExpectedData: number[];\n              if (dilationRate === 2) {\n                yExpectedData = [0, 0, 0, 0, 0, 0, -8, -8, -16];\n              } else {\n                yExpectedData = [\n                  10, 18, 26, 34, 2, 2, 2, 2, -10, -18, -26, -34, -6, -10, -14,\n                  -18\n                ];\n              }\n              if (useBias && biasInitializer === 'ones') {\n                yExpectedData = yExpectedData.map(element => element + 1);\n              }\n              if (activation === 'relu') {\n                yExpectedData =\n                    yExpectedData.map(element => element >= 0 ? element : 0);\n              }\n\n              let yExpected = dilationRate === 2 ?\n                  tensor4d(yExpectedData, [1, 3, 3, 1]) :\n                  tensor4d(yExpectedData, [1, 4, 4, 1]);\n              if (dataFormat === 'channelsFirst') {\n                // NHWC -> NCHW.\n                yExpected = tfc.transpose(yExpected, [0, 3, 1, 2]);\n              }\n              expectTensorsClose(y, yExpected);\n            });\n          }\n        }\n      }\n    }\n  }\n  it('missing config.kernelSize throws exception', () => {\n    // tslint:disable-next-line:no-any\n    expect((filters: 1) => tfl.layers.separableConv2d({filters: 1} as any))\n        .toThrowError(/kernelSize/);\n  });\n  it('bad config.kernelSize throws exception', () => {\n    expect(\n        () => tfl.layers.separableConv2d({filters: 1, kernelSize: [1, 1, 1]}))\n        .toThrowError(/kernelSize/);\n  });\n  it('missing config.filters throws exception', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tfl.layers.separableConv2d({kernelSize: 1} as any))\n        .toThrowError(/filters/);\n  });\n  it('bad config.filters throws exception', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tfl.layers.separableConv2d({kernelSize: 1, filters: 0} as any))\n        .toThrowError(/filters/);\n  });\n});\n\ndescribeMathCPUAndGPU('Cropping2D Layer', () => {\n  it('check with undefined channels type', () => {\n    const layer = tfl.layers.cropping2D({cropping: [[1, 0], [1, 0]]});\n    const x = tensor4d(\n        [\n          [[[1], [2], [3]], [[4], [5], [6]], [[7], [8], [9]]],\n        ],\n        [1, 3, 3, 1]);\n\n    const y = tensor4d(\n        [\n          [[[5], [6]], [[8], [9]]],\n        ],\n        [1, 2, 2, 1]);\n\n    expectTensorsClose(layer.apply(x, null) as Tensor, y);\n  });\n\n  it('check with channels last', () => {\n    const layer = tfl.layers.cropping2D(\n        {cropping: [[1, 1], [1, 1]], dataFormat: 'channelsLast'});\n    const x = tensor4d(\n        [\n          [[[1], [2], [3]], [[4], [5], [6]], [[7], [8], [9]]],\n        ],\n        [1, 3, 3, 1]);\n    const y = tensor4d(\n        [\n          [[[5]]],\n        ],\n        [1, 1, 1, 1]);\n\n    expectTensorsClose(layer.apply(x, null) as Tensor, y);\n  });\n\n  it('check with channels first', () => {\n    const layer = tfl.layers.cropping2D(\n        {cropping: [[1, 1], [1, 1]], dataFormat: 'channelsFirst'});\n    const x = tensor4d(\n        [\n          [[[1, 2, 3], [3, 4, 5], [6, 7, 8]]],\n        ],\n        [1, 1, 3, 3]);\n    const y = tensor4d(\n        [\n          [[[4]]],\n        ],\n        [1, 1, 1, 1]);\n\n    expectTensorsClose(layer.apply(x, null) as Tensor, y);\n  });\n\n  it('check with non-square tensor', () => {\n    const layer = tfl.layers.cropping2D(\n        {cropping: [[1, 1], [1, 1]], dataFormat: 'channelsFirst'});\n    const x = tensor4d(\n        [\n          [[[1, 2, 3, 4], [3, 4, 5, 6], [6, 7, 8, 9]]],\n        ],\n        [1, 1, 3, 4]);\n    const y = tensor4d(\n        [\n          [[[4, 5]]],\n        ],\n        [1, 1, 1, 2]);\n\n    expect(layer.computeOutputShape(x.shape)).toEqual(y.shape);\n    expectTensorsClose(layer.apply(x, null) as Tensor, y);\n  });\n});\n\ndescribeMathCPU('UpSampling2D Layer: Symbolic', () => {\n  const dataFormats: DataFormat[] = ['channelsFirst', 'channelsLast'];\n  const interpolatinFormats: InterpolationFormat[] = ['nearest', 'bilinear'];\n  const sizes = [undefined, [2, 2]];\n  const undeterminedDimensionArray: string[] = [null, 'height', 'both'];\n\n  for (const dataFormat of dataFormats) {\n    for (const interpolation of interpolatinFormats) {\n      for (const size of sizes) {\n        for (const undeterminedDimension of undeterminedDimensionArray) {\n          const testTitle = `size = ${size}, ${dataFormat}, ${interpolation}` +\n              `undetermined dimension = ${\n                                JSON.stringify(undeterminedDimension)}`;\n          it(testTitle, () => {\n            let inputShape: Shape;\n            if (undeterminedDimension == null) {\n              inputShape = dataFormat === 'channelsFirst' ? [2, 16, 11, 9] :\n                                                            [2, 11, 9, 16];\n            } else if (undeterminedDimension === 'height') {\n              inputShape = dataFormat === 'channelsFirst' ? [2, 16, null, 9] :\n                                                            [2, null, 9, 16];\n            } else if (undeterminedDimension === 'both') {\n              inputShape = dataFormat === 'channelsFirst' ?\n                  [2, 16, null, null] :\n                  [2, null, null, 16];\n            }\n            const symbolicInput =\n                new tfl.SymbolicTensor('float32', inputShape, null, [], null);\n\n            const upSampling2dLayer = tfl.layers.upSampling2d({\n              size,\n              dataFormat,\n              interpolation,\n            });\n\n            const output =\n                upSampling2dLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n\n            let outputRows: number;\n            let outputCols: number;\n            if (size === undefined) {\n              outputRows = 2;\n              outputCols = 2;\n            } else {\n              outputRows = size[0];\n              outputCols = size[1];\n            }\n            let expectedShape: [number, number, number, number];\n            if (undeterminedDimension == null) {\n              if (dataFormat === 'channelsFirst') {\n                outputRows *= inputShape[2];\n                outputCols *= inputShape[3];\n                expectedShape = [2, 16, outputRows, outputCols];\n              } else {\n                outputRows *= inputShape[1];\n                outputCols *= inputShape[2];\n                expectedShape = [2, outputRows, outputCols, 16];\n              }\n            } else if (undeterminedDimension === 'height') {\n              if (dataFormat === 'channelsFirst') {\n                outputCols *= inputShape[3];\n                expectedShape = [2, 16, null, outputCols];\n              } else {\n                outputCols *= inputShape[2];\n                expectedShape = [2, null, outputCols, 16];\n              }\n            } else if (undeterminedDimension === 'both') {\n              if (dataFormat === 'channelsFirst') {\n                expectedShape = [2, 16, null, null];\n              } else {\n                outputCols *= inputShape[2];\n                expectedShape = [2, null, null, 16];\n              }\n            }\n\n            expect(output.shape).toEqual(expectedShape);\n          });\n        }\n      }\n    }\n  }\n});\n\ndescribeMathCPUAndGPU('UpSampling2D Layer', () => {\n  it('check with default values', () => {\n    const layer = tfl.layers.upSampling2d({});\n    const x = tensor4d(\n        [\n          [[[1], [2]], [[3], [4]]],\n        ],\n        [1, 2, 2, 1]);\n\n    const y = tensor4d(\n        [\n          [\n            [[1], [1], [2], [2]], [[1], [1], [2], [2]], [[3], [3], [4], [4]],\n            [[3], [3], [4], [4]]\n          ],\n        ],\n        [1, 4, 4, 1]);\n\n    expectTensorsClose(layer.apply(x, null) as Tensor, y);\n  });\n\n  it('channels last', () => {\n    const layer =\n        tfl.layers.upSampling2d({size: [2, 2], dataFormat: 'channelsLast'});\n    const x = tensor4d(\n        [\n          [[[1], [2]], [[3], [4]]],\n        ],\n        [1, 2, 2, 1]);\n\n    const y = tensor4d(\n        [\n          [\n            [[1], [1], [2], [2]], [[1], [1], [2], [2]], [[3], [3], [4], [4]],\n            [[3], [3], [4], [4]]\n          ],\n        ],\n        [1, 4, 4, 1]);\n\n    expectTensorsClose(layer.apply(x, null) as Tensor, y);\n  });\n\n  it('channels first', () => {\n    const layer =\n        tfl.layers.upSampling2d({size: [2, 2], dataFormat: 'channelsFirst'});\n    const x = tensor4d(\n        [\n          [[[1, 2], [3, 4]]],\n        ],\n        [1, 1, 2, 2]);\n\n    const y = tensor4d(\n        [\n          [[[1, 1, 2, 2], [1, 1, 2, 2], [3, 3, 4, 4], [3, 3, 4, 4]]],\n        ],\n        [1, 1, 4, 4]);\n\n    expectTensorsClose(layer.apply(x, null) as Tensor, y);\n  });\n\n  it('varying input image sizes', () => {\n    const layer =\n        tfl.layers.upSampling2d({size: [2, 2], dataFormat: 'channelsLast'});\n    const x1 = tensor4d(\n        [\n          [[[1], [2]], [[3], [4]]],\n        ],\n        [1, 2, 2, 1]);\n    const y1 = tensor4d(\n        [\n          [\n            [[1], [1], [2], [2]], [[1], [1], [2], [2]], [[3], [3], [4], [4]],\n            [[3], [3], [4], [4]]\n          ],\n        ],\n        [1, 4, 4, 1]);\n    expectTensorsClose(layer.apply(x1, null) as Tensor, y1);\n\n    const x2 = tensor4d(\n        [\n          [[[1], [2]]],\n        ],\n        [1, 1, 2, 1]);\n\n    const y2 = tensor4d(\n        [\n          [\n            [[1], [1], [2], [2]],\n            [[1], [1], [2], [2]],\n          ],\n        ],\n        [1, 2, 4, 1]);\n    expectTensorsClose(layer.apply(x2, null) as Tensor, y2);\n  });\n  it('interpolation bilinear', () => {\n    const layer =\n        tfl.layers.upSampling2d({size: [2, 2], interpolation: 'bilinear'});\n    const x = tensor4d(\n        [\n          [[[1], [2]], [[3], [4]]],\n        ],\n        [1, 2, 2, 1]);\n    const y = tensor4d(\n        [\n          [\n            [[1], [1.5], [2], [2]], [[2], [2.5], [3], [3]],\n            [[3], [3.5], [4], [4]], [[3], [3.5], [4], [4]]\n          ],\n        ],\n        [1, 4, 4, 1]);\n    expectTensorsClose(layer.apply(x, null) as Tensor, y);\n  });\n\n  it('interpolation nearest', () => {\n    const layer = tfl.layers.upSampling2d(\n        {size: [2, 2], dataFormat: 'channelsFirst', interpolation: 'nearest'});\n    const x = tensor4d(\n        [\n          [[[1, 2], [3, 4]]],\n        ],\n        [1, 1, 2, 2]);\n\n    const y = tensor4d(\n        [\n          [[[1, 1, 2, 2], [1, 1, 2, 2], [3, 3, 4, 4], [3, 3, 4, 4]]],\n        ],\n        [1, 1, 4, 4]);\n\n    expectTensorsClose(layer.apply(x, null) as Tensor, y);\n  });\n});\n\ndescribeMathCPU('Conv3DTranspose: Symbolic', () => {\n  const filtersArray = [1, 64];\n  const paddingModes: PaddingMode[] = ['valid', 'same'];\n  const kernelSizes = [[2, 2, 2], [3, 4, 4]];\n  const stridesArray = [1, 3];\n\n  for (const filters of filtersArray) {\n    for (const padding of paddingModes) {\n      for (const kernelSize of kernelSizes) {\n        for (const strides of stridesArray) {\n          const testTitle = `filters=${filters}, paddingMode=${padding},` +\n              `kernelSize=${JSON.stringify(kernelSize)}, strides=${strides}`;\n          it(testTitle, () => {\n            const inputShape = [1, 2, 11, 9, 16];\n            const x =\n                new tfl.SymbolicTensor('float32', inputShape, null, [], null);\n\n            const layer = tfl.layers.conv3dTranspose(\n                {filters, kernelSize, padding, strides});\n            const y = layer.apply(x) as tfl.SymbolicTensor;\n\n            let expectedShape: [number, number, number, number, number];\n            if (strides === 1) {\n              if (padding === 'same') {\n                expectedShape = [1, 2, 11, 9, filters];\n              } else {\n                if (kernelSize[0] === 2) {\n                  expectedShape = [1, 3, 12, 10, filters];\n                } else {\n                  expectedShape = [1, 4, 14, 12, filters];\n                }\n              }\n            } else if (strides === 3) {\n              if (padding === 'same') {\n                expectedShape = [1, 6, 33, 27, filters];\n              } else {\n                if (kernelSize[0] === 2) {\n                  expectedShape = [1, 6, 33, 27, filters];\n                } else {\n                  expectedShape = [1, 6, 34, 28, filters];\n                }\n              }\n            }\n            expect(y.shape).toEqual(expectedShape);\n          });\n        }\n      }\n    }\n  }\n\n  it('Correct weight names', () => {\n    const x =\n        new tfl.SymbolicTensor('float32', [1, 2, 3, 4, 5], null, [], null);\n    const layer =\n        tfl.layers.conv3dTranspose({filters: 2, kernelSize: [3, 3, 3]});\n    layer.apply(x);  // Let the layer build first.\n\n    expect(layer.weights.length).toEqual(2);\n    expect(layer.weights[0].name.indexOf('/kernel')).toBeGreaterThan(0);\n    expect(layer.weights[1].name.indexOf('/bias')).toBeGreaterThan(0);\n  });\n});\n\ndescribeMathCPUAndGPU('Conv3DTranspose: Tensor', () => {\n  const dataFormats: DataFormat[] = ['channelsFirst', 'channelsLast'];\n  const stridesArray = [1, 2];\n  for (const dataFormat of dataFormats) {\n    for (const strides of stridesArray) {\n      const testTitle =\n          `filters=8, kernelSize=[2,2], padding=valid, strides=${strides}` +\n          `dataFormat=${dataFormat}`;\n      it(testTitle, () => {\n        const filters = 8;\n        const kernelSize = [2, 2, 2];\n        const padding = 'valid';\n        const strides = 2;\n        const layer = tfl.layers.conv3dTranspose({\n          filters,\n          kernelSize,\n          padding,\n          strides,\n          dataFormat,\n          kernelInitializer: 'ones',\n          biasInitializer: 'ones'\n        });\n\n        const x = tfc.ones([2, 3, 4, 5, 2]);\n        const y = layer.apply(x) as Tensor;\n        if (dataFormat === 'channelsLast') {\n          expectTensorsClose(y, tfc.ones([2, 6, 8, 10, 8]).mul(scalar(3)));\n        } else {\n          expectTensorsClose(y, tfc.ones([2, 8, 8, 10, 4]).mul(scalar(4)));\n        }\n      });\n    }\n  }\n});\n"]}