{"version":3,"file":"noise_test.js","sourceRoot":"","sources":["../../src/layers/noise_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\r\n\r\n/**\r\n * Unit Tests for Noise Layers.\r\n */\r\n\r\nimport {describeMathCPU, describeMathCPUAndGPU, expectTensorsClose} from '../utils/test_utils';\r\nimport * as tfl from '../index';\r\nimport {ones, Tensor} from '@tensorflow/tfjs-core';\r\nimport {getExactlyOneTensor} from '../utils/types_utils';\r\n\r\ndescribeMathCPU('GaussianNoise: Symbolic', () => {\r\n  const stddevs = [0, 1, 0.5];\r\n  const symbolicInputs = [\r\n    new tfl.SymbolicTensor('float32', [10, 4], null, [], null),\r\n    new tfl.SymbolicTensor('float32', [12, 10, 4], null, [], null),\r\n    new tfl.SymbolicTensor('float32', [null, 4], null, [], null),\r\n  ];\r\n\r\n  for (const stddev of stddevs) {\r\n    for (const symbolicInput of symbolicInputs) {\r\n      const testTitle = `std=${stddev}; ` +\r\n        `input shape=${JSON.stringify(symbolicInput.shape)}`;\r\n      it(testTitle, () => {\r\n        const gaussianNoiseLayer = tfl.layers.gaussianNoise({stddev});\r\n        const output =\r\n            gaussianNoiseLayer.apply(symbolicInput) as tfl.SymbolicTensor;\r\n        expect(output.dtype).toEqual(symbolicInput.dtype);\r\n        expect(output.shape).toEqual(symbolicInput.shape);\r\n        expect(output.sourceLayer).toEqual(gaussianNoiseLayer);\r\n        expect(output.inputs).toEqual([symbolicInput]);\r\n      });\r\n    }\r\n  }\r\n});\r\n\r\ndescribeMathCPUAndGPU('GaussianNoise: Tensor', () => {\r\n  it('GaussianNoise: Predict', () => {\r\n    const input = ones([2, 2]);\r\n    const gaussianNoiseLayer = tfl.layers.gaussianNoise({stddev: 1});\r\n    let output = gaussianNoiseLayer.apply(input, {training: false}) as Tensor;\r\n    output = getExactlyOneTensor(output);\r\n    expectTensorsClose(input, output);\r\n  });\r\n\r\n  it('GaussianNoise: Train', () => {\r\n    const input = ones([2, 2]);\r\n    const gaussianNoiseLayer = tfl.layers.gaussianNoise({stddev: 1});\r\n    let output = gaussianNoiseLayer.apply(input, {training: true}) as Tensor;\r\n    output = getExactlyOneTensor(output);\r\n    const diff = output.sub(input).abs().max();\r\n    expect(diff.dataSync()).toBeGreaterThan(0);\r\n    expect(output.shape).toEqual(input.shape);\r\n    expect(output.dtype).toEqual(input.dtype);\r\n  });\r\n\r\n  it('GaussianNoise: Successive Call', () => {\r\n    const training = true;\r\n    const inputA = ones([2, 2]);\r\n    const gaussianNoiseLayer = tfl.layers.gaussianNoise({stddev: 1});\r\n    let outputA = gaussianNoiseLayer.apply(inputA, {training}) as Tensor;\r\n    outputA = getExactlyOneTensor(outputA);\r\n    const inputB = ones([2, 2]);\r\n    let outputB = gaussianNoiseLayer.apply(inputB, {training}) as Tensor;\r\n    outputB = getExactlyOneTensor(outputA);\r\n    expectTensorsClose(outputA, outputB);\r\n  });\r\n});\r\n\r\ndescribeMathCPU('GaussianDropout: Symbolic', () => {\r\n  const rates = [0, 1, 0.5];\r\n  const symbolicInputs = [\r\n    new tfl.SymbolicTensor('float32', [10, 4], null, [], null),\r\n    new tfl.SymbolicTensor('float32', [12, 10, 4], null, [], null),\r\n    new tfl.SymbolicTensor('float32', [null, 4], null, [], null),\r\n  ];\r\n\r\n  for (const rate of rates) {\r\n    for (const symbolicInput of symbolicInputs) {\r\n      const testTitle = `dropoutRate=${rate}; ` +\r\n        `input shape=${JSON.stringify(symbolicInput.shape)}`;\r\n      it(testTitle, () => {\r\n        const gaussianDropout = tfl.layers.gaussianDropout({rate});\r\n        const output =\r\n          gaussianDropout.apply(symbolicInput) as tfl.SymbolicTensor;\r\n        expect(output.dtype).toEqual(symbolicInput.dtype);\r\n        expect(output.shape).toEqual(symbolicInput.shape);\r\n        expect(output.sourceLayer).toEqual(gaussianDropout);\r\n        expect(output.inputs).toEqual([symbolicInput]);\r\n      });\r\n    }\r\n  }\r\n});\r\n\r\ndescribeMathCPUAndGPU('GaussianDropout: Tensor', () => {\r\n  it('GaussianDropout: Predict', () => {\r\n    const input = ones([1, 2]);\r\n    const gaussianDropoutLayer = tfl.layers.gaussianDropout({rate: 0.5});\r\n    let output = gaussianDropoutLayer.apply(input, {training: false}) as Tensor;\r\n    output = getExactlyOneTensor(output);\r\n    expectTensorsClose(input, output);\r\n  });\r\n\r\n  it('GaussianDropout: Train', () => {\r\n    const input = ones([1, 2]);\r\n    const gaussianDropoutLayer = tfl.layers.gaussianDropout({rate: 0.5});\r\n    let output = gaussianDropoutLayer.apply(input, {training: true}) as Tensor;\r\n    output = getExactlyOneTensor(output);\r\n    const diff = output.sub(input).abs().max();\r\n    expect(diff.dataSync()).toBeGreaterThan(0);\r\n    expect(output.shape).toEqual(input.shape);\r\n    expect(output.dtype).toEqual(input.dtype);\r\n  });\r\n\r\n  it('GaussianDropout: Successive Call', () => {\r\n    const training = true;\r\n    const inputA = ones([1, 2]);\r\n    const gaussianDropoutLayer = tfl.layers.gaussianDropout({rate: 0.5});\r\n    let outputA = gaussianDropoutLayer.apply(inputA, {training}) as Tensor;\r\n    outputA = getExactlyOneTensor(outputA);\r\n    const inputB = ones([1, 2]);\r\n    let outputB = gaussianDropoutLayer.apply(inputB, {training}) as Tensor;\r\n    outputB = getExactlyOneTensor(outputA);\r\n    expectTensorsClose(outputA, outputB);\r\n  });\r\n});\r\n\r\ndescribeMathCPU('AlphaDropout: Symbolic', () => {\r\n  const rates = [0, 1, 0.5];\r\n  const symbolicInputs = [\r\n    new tfl.SymbolicTensor('float32', [10, 4], null, [], null),\r\n    new tfl.SymbolicTensor('float32', [12, 10, 4], null, [], null),\r\n    new tfl.SymbolicTensor('float32', [null, 4], null, [], null),\r\n  ];\r\n\r\n  for (const rate of rates) {\r\n    for (const symbolicInput of symbolicInputs) {\r\n      const testTitle = `dropoutRate=${rate}; ` +\r\n        `input shape=${JSON.stringify(symbolicInput.shape)}`;\r\n      it(testTitle, () => {\r\n        const alphaDropout = tfl.layers.alphaDropout({rate});\r\n        const output = alphaDropout.apply(symbolicInput) as tfl.SymbolicTensor;\r\n        expect(output.dtype).toEqual(symbolicInput.dtype);\r\n        expect(output.shape).toEqual(symbolicInput.shape);\r\n        expect(output.sourceLayer).toEqual(alphaDropout);\r\n        expect(output.inputs).toEqual([symbolicInput]);\r\n      });\r\n    }\r\n  }\r\n});\r\n\r\ndescribeMathCPUAndGPU('AlphaDropout: Tensor', () => {\r\n  it('AlphaDropout: Predict', () => {\r\n    const input = ones([1, 2]);\r\n    const alphaDropoutLayer = tfl.layers.alphaDropout({rate: 0.5});\r\n    let output = alphaDropoutLayer.apply(input, {training: false}) as Tensor;\r\n    output = getExactlyOneTensor(output);\r\n    expectTensorsClose(input, output);\r\n  });\r\n\r\n  it('AlphaDropout: Train', () => {\r\n    const input = ones([1, 2]);\r\n    const alphaDropoutLayer = tfl.layers.alphaDropout({rate: 0.5});\r\n    let output = alphaDropoutLayer.apply(input, {training: true}) as Tensor;\r\n    output = getExactlyOneTensor(output);\r\n    const diff = output.sub(input).abs().max();\r\n    expect(diff.dataSync()).toBeGreaterThan(0);\r\n    expect(output.shape).toEqual(input.shape);\r\n    expect(output.dtype).toEqual(input.dtype);\r\n  });\r\n\r\n  it('AlphaDropout: Successive Call', () => {\r\n    const training = true;\r\n    const inputA = ones([1, 2]);\r\n    const alphaDropoutLayer = tfl.layers.alphaDropout({rate: 0.5});\r\n    let outputA = alphaDropoutLayer.apply(inputA, {training}) as Tensor;\r\n    outputA = getExactlyOneTensor(outputA);\r\n    const inputB = ones([1, 2]);\r\n    let outputB = alphaDropoutLayer.apply(inputB, {training}) as Tensor;\r\n    outputB = getExactlyOneTensor(outputA);\r\n    expectTensorsClose(outputA, outputB);\r\n  });\r\n});\r\n"]}