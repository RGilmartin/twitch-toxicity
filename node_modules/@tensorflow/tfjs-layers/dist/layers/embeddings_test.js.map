{"version":3,"file":"embeddings_test.js","sourceRoot":"","sources":["../../src/layers/embeddings_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Unit tests for embedding.ts.\n */\n\nimport {DataType, Tensor, tensor2d, tensor3d, test_util} from '@tensorflow/tfjs-core';\n\nimport * as tfl from '../index';\nimport {describeMathCPU, expectTensorsClose} from '../utils/test_utils';\n\nconst expectArraysClose = test_util.expectArraysClose;\n\ndescribeMathCPU('Embedding Layers: Symbolic 1D, 2D & 3D', () => {\n  const inputShapes = [[1], [5], [1, 20], [2, 3, 4]];\n  const outputDims = [1, 7, 47];\n  const batchDim = 17;\n  const inputDim = 100;\n  for (const inputShape of inputShapes) {\n    for (const outputDim of outputDims) {\n      const testTitle = `inputShape=${inputShape}, outputDim=${outputDim}`;\n      it(testTitle, () => {\n        const embeddingLayer = tfl.layers.embedding({inputDim, outputDim});\n        const fullInputShape = [batchDim].concat(inputShape);\n        const symbolicInput =\n            new tfl.SymbolicTensor('float32', fullInputShape, null, [], null);\n        const output =\n            embeddingLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n        const expectedShape = [batchDim].concat(inputShape).concat([outputDim]);\n        expect(output.shape).toEqual(expectedShape);\n      });\n    }\n  }\n\n  it('Invalid inputDim leads to Error', () => {\n    expect(() => tfl.layers.embedding({inputDim: 12.5, outputDim: 4}))\n        .toThrowError(/inputDim.*positive integer.*12\\.5\\.$/);\n    expect(() => tfl.layers.embedding({inputDim: 0, outputDim: 4}))\n        .toThrowError(/inputDim.*positive integer.*0\\.$/);\n    expect(() => tfl.layers.embedding({inputDim: -123, outputDim: 4}))\n        .toThrowError(/inputDim.*positive integer.*-123\\.$/);\n  });\n\n  it('Invalid outputDim leads to Error', () => {\n    expect(() => tfl.layers.embedding({inputDim: 8, outputDim: 16.5}))\n        .toThrowError(/outputDim.*positive integer.*16\\.5\\.$/);\n    expect(() => tfl.layers.embedding({inputDim: 8, outputDim: 0}))\n        .toThrowError(/outputDim.*positive integer.*0\\.$/);\n    expect(() => tfl.layers.embedding({inputDim: 8, outputDim: -32}))\n        .toThrowError(/outputDim.*positive integer.*-32\\.$/);\n  });\n});\n\ndescribeMathCPU('Embedding Layers: With explicit inputLength', () => {\n  const inputShape = [null, 4, 5];\n  const outputDim = 7;\n  const inputLengths = [[null, 4, 5], [null, null, 5], [null, null, null]];\n  const batchDim = 17;\n  for (const inputLength of inputLengths) {\n    const testTitle = `inputLength=${inputLength}`;\n    it(testTitle, () => {\n      const inputDim = 100;\n      const embeddingLayer =\n          tfl.layers.embedding({inputDim, outputDim, inputLength});\n      const fullInputShape = [batchDim].concat(inputShape);\n      const symbolicInput =\n          new tfl.SymbolicTensor('float32', fullInputShape, null, [], null);\n      const output = embeddingLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n      const expectedShape = [batchDim].concat(inputShape).concat([outputDim]);\n      expect(output.shape).toEqual(expectedShape);\n      expect(output.dtype).toEqual(symbolicInput.dtype);\n    });\n  }\n});\n\ndescribeMathCPU('Embedding Layers: Tensor', () => {\n  it('check value equality', () => {\n    const x = tensor3d([0, 5, 1, 1, 1, 1, 1, 1], [1, 2, 4]);\n    const embeddingLayer = tfl.layers.embedding(\n        {inputDim: 6, outputDim: 3, embeddingsInitializer: 'randomUniform'});\n    const y = embeddingLayer.apply(x) as Tensor;\n    const yExpectedShape = [1, 2, 4, 3];\n    expect(y.shape).toEqual(yExpectedShape);\n    const weights = embeddingLayer.getWeights()[0];\n    expect(embeddingLayer.computeOutputShape(x.shape)).toEqual(yExpectedShape);\n    // Collect embedded output elements.\n    const yData0 = y.slice([0, 0, 0, 0], [1, 1, 1, 3]).dataSync();\n    const yData1 = y.slice([0, 0, 1, 0], [1, 1, 1, 3]).dataSync();\n    const yData2 = y.slice([0, 0, 2, 0], [1, 1, 1, 3]).dataSync();\n    const yData3 = y.slice([0, 0, 3, 0], [1, 1, 1, 3]).dataSync();\n    // Collect sample embedding rows.\n    const wData0 = weights.slice([0, 0], [1, 3]).dataSync();\n    const wData1 = weights.slice([1, 0], [1, 3]).dataSync();\n    const wData5 = weights.slice([5, 0], [1, 3]).dataSync();\n    // First output should match first embedding row.\n    expectArraysClose(yData0, wData0);\n    // First output should *not* match second embedding row\n    expect(() => {\n      expectArraysClose(yData0, wData1);\n    }).toThrow();\n    // Second output should match 6th embedding row.\n    expectArraysClose(yData1, wData5);\n    // Second output should *not* match first embedding row.\n    expect(() => {\n      expectArraysClose(yData1, wData0);\n    }).toThrow();\n    // Third output should match fourth output (same embedding index);\n    expectArraysClose(yData2, yData3);\n  });\n\n  const dtypes: DataType[] = ['int32', 'float32'];\n  for (const dtype of dtypes) {\n    it(`Works with '${dtype}' dtype input`, () => {\n      // Input values are [0, 0, 1] with type 'float32'\n      const x = tensor2d([[0], [0], [1]], [3, 1], dtype);\n      const embeddingLayer = tfl.layers.embedding(\n          {inputDim: 6, outputDim: 4, embeddingsInitializer: 'randomUniform'});\n      const y = embeddingLayer.apply(x) as Tensor;\n      // Collect embedded output elements.\n      const yData0 = y.slice([0, 0, 0], [1, 1, 3]).dataSync();\n      const yData1 = y.slice([1, 0, 0], [1, 1, 3]).dataSync();\n      const yData2 = y.slice([2, 0, 0], [1, 1, 3]).dataSync();\n      // First output should match second output.\n      expectArraysClose(yData0, yData1);\n      // First output should not match third output.\n      expect(() => {\n        expectArraysClose(yData0, yData2);\n      }).toThrow();\n    });\n\n    it('computeMask: maskZero = false', () => {\n      const embeddingLayer = tfl.layers.embedding({\n        inputDim: 6,\n        outputDim: 4,\n        embeddingsInitializer: 'randomUniform',\n        maskZero: false\n      });\n      const x = tensor2d([[0], [0], [2]], [3, 1], dtype);\n      const y = embeddingLayer.computeMask(x);\n      expect(y).toBeNull();\n    });\n\n    it('computeMask: maskZero = true', () => {\n      const embeddingLayer = tfl.layers.embedding({\n        inputDim: 6,\n        outputDim: 4,\n        embeddingsInitializer: 'randomUniform',\n        maskZero: true\n      });\n      const x = tensor2d([[0], [0], [2]], [3, 1], dtype);\n      const y = embeddingLayer.computeMask(x);\n      expectTensorsClose(y, tensor2d([[0], [0], [1]], [3, 1], 'bool'));\n    });\n  }\n});\n"]}