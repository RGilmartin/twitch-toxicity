{"version":3,"file":"pooling_test.js","sourceRoot":"","sources":["../../src/layers/pooling_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAEH;;GAEG;AAEH,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,EAAS,QAAQ,EAAY,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAsB,IAAI,EAAC,MAAM,uBAAuB,CAAC;AAEzH,OAAO,EAAC,cAAc,EAAC,MAAM,oBAAoB,CAAC;AAClD,OAAO,KAAK,GAAG,MAAM,UAAU,CAAC;AAEhC,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAC,qBAAqB,EAAE,kBAAkB,EAAC,MAAM,qBAAqB,CAAC;AAE9E,OAAO,EAAC,MAAM,EAAE,MAAM,EAAC,MAAM,WAAW,CAAC;AAEzC,qBAAqB,CAAC,QAAQ,EAAE,GAAG,EAAE;IACnC,MAAM,SAAS,GAAG,CAAC,CAAC;gBAClB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;gBACxD,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;aACrB,CAAC,CAAC,CAAC;IACJ,MAAM,SAAS,GAAG,CAAC,CAAC;gBAClB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACtE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACpB,CAAC,CAAC,CAAC;IAEJ,MAAM,SAAS,GAAe,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACxD,MAAM,WAAW,GACb,CAAC,SAAS,EAAE,eAAe,EAAE,cAAc,CAAC,CAAC;IACjD,MAAM,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5B,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;YACpC,KAAK,MAAM,MAAM,IAAI,YAAY,EAAE;gBACjC,MAAM,SAAS,GAAG,QAAQ,MAAM,WAAW,UAAU,IAAI;oBACrD,GAAG,QAAQ,EAAE,CAAC;gBAClB,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;oBACjB,IAAI,CAAC,GAAW,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBAClD,IAAI,UAAU,KAAK,eAAe,EAAE;wBAClC,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAE,gBAAgB;qBACtD;oBACD,IAAI,SAAiB,CAAC;oBACtB,IAAI,QAAQ,KAAK,KAAK,EAAE;wBACtB,IAAI,MAAM,KAAK,CAAC,EAAE;4BAChB,SAAS,GAAG,QAAQ,CAChB,CAAC,CAAC;wCACA,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;wCACpD,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;qCACrB,CAAC,CAAC,EACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;yBACnB;6BAAM;4BACL,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;yBAChE;qBACF;yBAAM;wBACL,IAAI,MAAM,KAAK,CAAC,EAAE;4BAChB,SAAS,GAAG,QAAQ,CAChB,CAAC,CAAC;wCACA,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;wCACxD,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;qCACrB,CAAC,CAAC,EACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;yBACnB;6BAAM,IAAI,MAAM,KAAK,CAAC,EAAE;4BACvB,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;yBAChE;qBACF;oBACD,IAAI,UAAU,KAAK,eAAe,EAAE;wBAClC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBACpD;oBACD,MAAM,CAAC,GACH,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;oBACtE,kBAAkB,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;aACJ;SACF;KACF;IAED,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,EAAE,CAAC,gCAAgC,QAAQ,EAAE,EAAE,GAAG,EAAE;YAClD,MAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAChD,IAAI,SAAS,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAClD,IAAI,QAAQ,KAAK,KAAK,EAAE;gBACtB,SAAS,GAAG,QAAQ,CAChB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACvD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aACnB;iBAAM;gBACL,SAAS;oBACL,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aACrE;YACD,MAAM,CAAC,GACH,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;YACrE,kBAAkB,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;KACJ;IAED,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,EAAE,CAAC,gCAAgC,QAAQ,EAAE,EAAE,GAAG,EAAE;YAClD,MAAM,KAAK,GACP,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACnE,IAAI,SAAmB,CAAC;YACxB,IAAI,QAAQ,KAAK,KAAK,EAAE;gBACtB,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aACpE;iBAAM;gBACL,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aAC1D;YACD,MAAM,CAAC,GACH,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;YACrE,kBAAkB,CAAC,CAAC,EAAE,GAAG,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC,CAAC;AAEH,qBAAqB,CAAC,QAAQ,EAAE,GAAG,EAAE;IACnC,MAAM,YAAY,GAAG,CAAC,CAAC;gBACrB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;gBAC/D,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;gBACxE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;gBACxE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;aACzE,CAAC,CAAC,CAAC;IACJ,MAAM,YAAY,GAAG,CAAC,CAAC;gBACrB;oBACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;oBACvD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;iBAC3C,EAAE;oBACD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;oBAChE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;iBAC3C,EAAE;oBACD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;oBAChE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;iBAC3C,EAAE;oBACD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;oBAChE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;iBAC5C,EAAE;oBACD,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;oBACpD,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;oBACpD,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;iBAC1B;aACF,CAAC,CAAC,CAAC;IAEJ,MAAM,SAAS,GAAe,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACxD,MAAM,WAAW,GACb,CAAC,SAAS,EAAE,eAAe,EAAE,cAAc,CAAC,CAAC;IACjD,MAAM,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5B,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;YACpC,KAAK,MAAM,MAAM,IAAI,YAAY,EAAE;gBACjC,MAAM,SAAS,GAAG,UAAU,MAAM,WAAW,UAAU,IAAI;oBACvD,GAAG,QAAQ,EAAE,CAAC;gBAClB,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;oBACjB,IAAI,CAAC,GAAa,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBAC1D,IAAI,UAAU,KAAK,eAAe,EAAE;wBAClC,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAE,kBAAkB;qBAC3D;oBACD,IAAI,SAAmB,CAAC;oBACxB,IAAI,QAAQ,KAAK,KAAK,EAAE;wBACtB,IAAI,MAAM,KAAK,CAAC,EAAE;4BAChB,SAAS,GAAG,QAAQ,CAChB,CAAC,CAAC;wCACA;4CACE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;4CAC9C,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;yCAC9C,EAAE;4CACD,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;4CAC9C,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;yCAC9C,EAAE;4CACD,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;4CAC9C,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;yCAC/C,EAAE;4CACD,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;4CAC9C,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;yCAAC;qCAClD,CAAC,CAAC,EACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;yBACtB;6BAAM;4BACL,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;wCAC/C,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;yBACzD;qBACF;yBAAM;wBACL,IAAI,MAAM,KAAK,CAAC,EAAE;4BAChB,SAAS,GAAG,QAAQ,CAChB,CAAC,CAAC;wCACA;4CACE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;4CAClC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;yCACnC,EAAE;4CACD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;4CAClC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;yCACnC,EAAE;4CACD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;4CAClC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;yCACnC,EAAE;4CACD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;4CAClC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;yCAAC;qCACtC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;yBAC3B;6BAAM,IAAI,MAAM,KAAK,CAAC,EAAE;4BACvB,SAAS;gCACL,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EACrD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;yBAC1B;qBACF;oBACD,IAAI,UAAU,KAAK,eAAe,EAAE;wBAClC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBACvD;oBACD,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,EAC3D,UAAU,EAAE,QAAQ,CAAC,CAAC;oBAC1B,kBAAkB,CAAC,CAAC,EAAE,SAAmB,CAAC,CAAC;gBAC7C,CAAC,CAAC,CAAC;aACJ;SACF;KACF;IAED,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,EAAE,CAAC,kCAAkC,QAAQ,EAAE,EAAE,GAAG,EAAE;YACpD,MAAM,QAAQ,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACzD,IAAI,SAAmB,CAAC;YACxB,IAAI,QAAQ,KAAK,KAAK,EAAE;gBACtB,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC;4BACrB,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;4BACpD,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;4BACpD,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;yBAC5D,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aACvB;iBAAM;gBACL,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC;4BACrB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;4BAC1C,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;4BAC3C,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;yBACpD,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aACvB;YACD,MAAM,CAAC,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,eAAe,EACpE,QAAQ,CAAC,CAAC;YACd,kBAAkB,CAAC,CAAC,EAAE,SAAmB,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;KACJ;IAED,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,EAAE,CAAC,kCAAkC,QAAQ,EAAE,EAAE,GAAG,EAAE;YACpD,MAAM,QAAQ,GAAG,GAAG,CAAC,SAAS,CAC1B,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9D,IAAI,SAAmB,CAAC;YACxB,IAAI,QAAQ,KAAK,KAAK,EAAE;gBACtB,SAAS,GAAG,QAAQ,CAChB,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAChE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aACtB;iBAAM;gBACL,SAAS,GAAG,QAAQ,CAChB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAChD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aACtB;YACD,MAAM,CAAC,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,cAAc,EACpE,QAAQ,CAAC,CAAC;YACd,kBAAkB,CAAC,CAAC,EAAE,GAAG,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,MAAM,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzB,MAAM,WAAW,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACjC,MAAM,SAAS,GAAe,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC7C,MAAM,YAAY,GAAkB,CAAC,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IAEjE,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;YACtC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;gBAChC,KAAK,MAAM,OAAO,IAAI,WAAW,EAAE;oBACjC,MAAM,SAAS,GAAG,YAAY,QAAQ,IAAI;wBACtC,GAAG,WAAW,KAAK,QAAQ,EAAE,CAAC;oBAClC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;wBACjB,MAAM,WAAW,GAAG,EAAE,CAAC;wBACvB,MAAM,gBAAgB,GAAG,EAAE,CAAC;wBAC5B,MAAM,cAAc,GAAG,CAAC,CAAC;wBACzB,MAAM,UAAU,GAAG,CAAC,cAAc,EAAE,WAAW,EAAE,gBAAgB,CAAC,CAAC;wBACnE,MAAM,aAAa,GACf,IAAI,cAAc,CAAC,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;wBAC9D,MAAM,eAAe,GAAG,QAAQ,KAAK,KAAK,CAAC,CAAC;4BACxC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;4BAC7B,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC;wBAC5B,MAAM,YAAY,GAAG,eAAe,CAAC;4BACnC,QAAQ;4BACR,OAAO;4BACP,OAAO,EAAE,WAAW;yBACrB,CAAC,CAAC;wBACH,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,aAAa,CAAmB,CAAC;wBACnE,MAAM,oBAAoB,GAAG,gBAAgB,CACzC,WAAW,EAAE,QAAQ,EAAE,WAAW,EAClC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;wBAClC,MAAM,aAAa,GACf,CAAC,cAAc,EAAE,oBAAoB,EAAE,gBAAgB,CAAC,CAAC;wBAE7D,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;wBAC5C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBACpD,CAAC,CAAC,CAAC;iBACJ;aACF;SACF;KACF;AACH,CAAC,CAAC,CAAC;AAEH,qBAAqB,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACtD,MAAM,SAAS,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACjC,MAAM,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvB,MAAM,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzB,MAAM,SAAS,GAAG,CAAC,CAAC;IACpB,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;gBAChC,MAAM,SAAS,GAAG,UAAU,MAAM,KAAK,QAAQ,IAAI;oBAC/C,YAAY,QAAQ,EAAE,CAAC;gBAC3B,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;oBACjB,MAAM,KAAK,GAAG,QAAQ,CAAC;wBACrB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;wBAChC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;qBACzC,CAAC,CAAC;oBACH,MAAM,QAAQ,GAAG,GAAG,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBAC1C,MAAM,eAAe,GAAG,QAAQ,KAAK,KAAK,CAAC,CAAC;wBACxC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;wBAC7B,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC;oBAC5B,MAAM,YAAY,GAAG,eAAe,CAAC;wBACnC,QAAQ;wBACR,OAAO,EAAE,MAAM;wBACf,OAAO,EAAE,OAAO;qBACjB,CAAC,CAAC;oBACH,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAW,CAAC;oBACtD,IAAI,YAAoB,CAAC;oBACzB,IAAI,kBAAgC,CAAC;oBACrC,IAAI,QAAQ,KAAK,CAAC,EAAE;wBAClB,IAAI,MAAM,KAAK,CAAC,EAAE;4BAChB,YAAY,GAAG,CAAC,CAAC;4BACjB,IAAI,QAAQ,KAAK,KAAK,EAAE;gCACtB,kBAAkB;oCACd,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;6BAC9D;iCAAM;gCACL,kBAAkB;oCACd,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;6BAC9D;yBACF;6BAAM,IAAI,MAAM,KAAK,CAAC,EAAE;4BACvB,YAAY,GAAG,CAAC,CAAC;4BACjB,IAAI,QAAQ,KAAK,KAAK,EAAE;gCACtB,kBAAkB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;6BACrD;iCAAM;gCACL,kBAAkB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;6BACrD;yBACF;qBACF;yBAAM,IAAI,QAAQ,KAAK,CAAC,EAAE;wBACzB,IAAI,MAAM,KAAK,CAAC,EAAE;4BAChB,YAAY,GAAG,CAAC,CAAC;4BACjB,IAAI,QAAQ,KAAK,KAAK,EAAE;gCACtB,kBAAkB;oCACd,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;6BACjD;iCAAM;gCACL,kBAAkB;oCACd,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;6BACjD;yBACF;6BAAM,IAAI,MAAM,KAAK,CAAC,EAAE;4BACvB,YAAY,GAAG,CAAC,CAAC;4BACjB,IAAI,QAAQ,KAAK,KAAK,EAAE;gCACtB,kBAAkB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;6BACrD;iCAAM;gCACL,kBAAkB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;6BACrD;yBACF;qBACF;oBACD,MAAM,aAAa,GACf,CAAC,SAAS,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;oBACjC,kBAAkB,CACd,MAAM,EAAE,QAAQ,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC,CAAC;gBAC3D,CAAC,CAAC,CAAC;aACJ;SACF;KACF;IAED,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;QACpE,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAC/B,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAC1B,EAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;QACxD,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAW,CAAC;QACvC,kBAAkB,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAEpC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QAC3C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,MAAM,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzB,MAAM,SAAS,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACjC,MAAM,YAAY,GAAkB,CAAC,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IACjE,MAAM,WAAW,GAAiB,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;IACpE,MAAM,sBAAsB,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAE7C,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;YACtC,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;gBACpC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;oBAChC,KAAK,MAAM,gBAAgB,IAAI,sBAAsB,EAAE;wBACrD,MAAM,SAAS,GAAG,YAAY,QAAQ,IAAI;4BACtC,GAAG,UAAU,KAAK,WAAW,IAAI;4BACjC,GAAG,QAAQ,IAAI;4BACf,qBAAqB,gBAAgB,EAAE,CAAC;wBAC5C,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;4BACjB,MAAM,UAAU,GAAG,UAAU,KAAK,eAAe,CAAC,CAAC;gCAC/C,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;gCAChB,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;4BACnB,MAAM,aAAa,GACf,IAAI,cAAc,CAAC,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;4BAE9D,MAAM,eAAe,GAAG,QAAQ,KAAK,KAAK,CAAC,CAAC;gCACxC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;gCAC7B,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC;4BAC5B,MAAM,YAAY,GAAG,eAAe,CAAC;gCACnC,QAAQ,EAAE,gBAAgB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC;gCAC5D,OAAO,EAAE,WAAW;gCACpB,UAAU;6BACX,CAAC,CAAC;4BAEH,MAAM,MAAM,GACR,YAAY,CAAC,KAAK,CAAC,aAAa,CAAmB,CAAC;4BAExD,IAAI,UAAU,GAAG,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACxC,IAAI,WAAW,KAAK,MAAM,EAAE;gCAC1B,UAAU,EAAE,CAAC;6BACd;4BACD,IAAI,UAAU,GAAG,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACxC,IAAI,WAAW,KAAK,MAAM,IAAI,QAAQ,KAAK,CAAC,EAAE;gCAC5C,UAAU,EAAE,CAAC;6BACd;4BAED,IAAI,aAA+C,CAAC;4BACpD,IAAI,UAAU,KAAK,eAAe,EAAE;gCAClC,aAAa,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;6BACjD;iCAAM;gCACL,aAAa,GAAG,CAAC,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;6BACjD;4BAED,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;4BAC5C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;wBACpD,CAAC,CAAC,CAAC;qBACJ;iBACF;aACF;SACF;KACF;IAED,MAAM,aAAa,GAAmC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1E,KAAK,MAAM,OAAO,IAAI,aAAa,EAAE;QACnC,EAAE,CAAC,mBAAmB,OAAO,EAAE,EAAE,GAAG,EAAE;YACpC,MAAM,UAAU,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YAClC,MAAM,aAAa,GACf,IAAI,cAAc,CAAC,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;YAC9D,MAAM,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAC,CAAC,CAAC;YAC1E,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,aAAa,CAAuB,CAAC;YACvE,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;gBAC/D,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;aAC9C;iBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;gBACtE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;aAC7C;iBAAM;gBACL,cAAc;gBACd,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;aAC9C;QACH,CAAC,CAAC,CAAC;KACJ;IAED,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,kCAAkC;QAClC,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAQ,CAAC,CAAC;aACpE,YAAY,CAAC,gCAAgC,CAAC,CAAC;QACpD,MAAM;QACF,kCAAkC;QAClC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAQ,CAAC,CAAC;aACvE,YAAY,CAAC,gCAAgC,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;aAC7D,YAAY,CAAC,qCAAqC,CAAC,CAAC;QACzD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;aAC3D,YAAY,CAAC,kCAAkC,CAAC,CAAC;QACtD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;aAC5D,YAAY,CAAC,mCAAmC,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACxC,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,EAAC,CAAC,CAAC;aAC7D,YAAY,CAAC,oCAAoC,CAAC,CAAC;QACxD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;aAC3D,YAAY,CAAC,iCAAiC,CAAC,CAAC;QACrD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC;aAC5D,YAAY,CAAC,kCAAkC,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,qBAAqB,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACtD,MAAM,SAAS,GACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IAE7E,MAAM,SAAS,GAAe,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC7C,MAAM,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvB,MAAM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1B,MAAM,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7B,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;gBAClC,KAAK,MAAM,QAAQ,IAAI,aAAa,EAAE;oBACpC,MAAM,SAAS,GAAG,UAAU,MAAM,KAAK,QAAQ,IAAI;wBAC/C,aAAa,SAAS,cAAc,QAAQ,EAAE,CAAC;oBACnD,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;wBACjB,IAAI,UAAU,GAAa,EAAE,CAAC;wBAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,EAAE,CAAC,EAAE;4BAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,EAAE,CAAC,EAAE;gCACjC,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;6BAC3C;yBACF;wBACD,MAAM,KAAK,GAAG,QAAQ,CAAC,UAAU,EAAE,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBAEhE,MAAM,eAAe,GAAG,QAAQ,KAAK,KAAK,CAAC,CAAC;4BACxC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;4BAC7B,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC;wBAC5B,MAAM,YAAY,GAAG,eAAe,CAAC;4BACnC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;4BAChB,OAAO,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;4BACzB,OAAO,EAAE,OAAO;4BAChB,UAAU,EAAE,eAAe;yBAC5B,CAAC,CAAC;wBAEH,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,KAAK,CAAW,CAAC;wBAEnD,IAAI,aAA+C,CAAC;wBACpD,IAAI,mBAA6B,CAAC;wBAClC,IAAI,QAAQ,KAAK,KAAK,EAAE;4BACtB,IAAI,MAAM,KAAK,CAAC,EAAE;gCAChB,aAAa,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gCAC5C,mBAAmB,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;6BAC5D;iCAAM,IAAI,MAAM,KAAK,CAAC,EAAE;gCACvB,aAAa,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gCAC5C,mBAAmB,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;6BAC1C;yBACF;6BAAM;4BACL,IAAI,MAAM,KAAK,CAAC,EAAE;gCAChB,aAAa,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gCAC5C,mBAAmB,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;6BAC/D;iCAAM,IAAI,MAAM,KAAK,CAAC,EAAE;gCACvB,aAAa,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gCAC5C,mBAAmB,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;6BAC1C;yBACF;wBACD,IAAI,mBAAmB,GAAa,EAAE,CAAC;wBACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,EAAE,CAAC,EAAE;4BAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,EAAE,CAAC,EAAE;gCACjC,mBAAmB;oCACf,mBAAmB,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;6BACrD;yBACF;wBACD,kBAAkB,CACd,MAAM,EAAE,QAAQ,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC,CAAC;oBAC5D,CAAC,CAAC,CAAC;iBACJ;aACF;SACF;KACF;IAED,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,KAAK,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAC/B,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAC7B,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;QAC5D,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAW,CAAC;QACvC,kBAAkB,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QAC3C,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,MAAM,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACzB,MAAM,SAAS,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACjC,MAAM,YAAY,GAAkB,CAAC,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IACjE,MAAM,WAAW,GAAiB,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;IACpE,MAAM,sBAAsB,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAE7C,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;YACtC,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;gBACpC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;oBAChC,KAAK,MAAM,gBAAgB,IAAI,sBAAsB,EAAE;wBACrD,MAAM,SAAS,GAAG,YAAY,QAAQ,IAAI;4BACtC,GAAG,UAAU,KAAK,WAAW,IAAI;4BACjC,GAAG,QAAQ,IAAI;4BACf,qBAAqB,gBAAgB,EAAE,CAAC;wBAC5C,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;4BACjB,MAAM,UAAU,GAAG,UAAU,KAAK,eAAe,CAAC,CAAC;gCAC/C,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gCACnB,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;4BACtB,MAAM,aAAa,GACf,IAAI,cAAc,CAAC,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;4BAE9D,MAAM,eAAe,GAAG,QAAQ,KAAK,KAAK,CAAC,CAAC;gCACxC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;gCAC7B,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC;4BAC5B,MAAM,YAAY,GAAG,eAAe,CAAC;gCACnC,QAAQ,EAAE,gBAAgB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;oCACnC,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;gCAClC,OAAO,EAAE,WAAW;gCACpB,UAAU;6BACX,CAAC,CAAC;4BAEH,MAAM,MAAM,GACR,YAAY,CAAC,KAAK,CAAC,aAAa,CAAmB,CAAC;4BAExD,IAAI,YAAY,GAAG,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC,CAAC,CAAC;4BACzC,IAAI,WAAW,KAAK,MAAM,EAAE;gCAC1B,YAAY,EAAE,CAAC;6BAChB;4BAED,IAAI,UAAU,GAAG,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACxC,IAAI,WAAW,KAAK,MAAM,IAAI,QAAQ,KAAK,CAAC,EAAE;gCAC5C,UAAU,EAAE,CAAC;6BACd;4BACD,IAAI,UAAU,GAAG,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACxC,IAAI,WAAW,KAAK,MAAM,EAAE;gCAC1B,UAAU,EAAE,CAAC;6BACd;4BAED,IAAI,aAAuD,CAAC;4BAC5D,IAAI,UAAU,KAAK,eAAe,EAAE;gCAClC,aAAa,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,YAAY,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;6BAC/D;iCAAM;gCACL,aAAa,GAAG,CAAC,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;6BAC/D;4BAED,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;4BAC5C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;wBACpD,CAAC,CAAC,CAAC;qBACJ;iBACF;aACF;SACF;KACF;IAED,MAAM,aAAa,GACf,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9B,KAAK,MAAM,OAAO,IAAI,aAAa,EAAE;QACnC,EAAE,CAAC,mBAAmB,OAAO,EAAE,EAAE,GAAG,EAAE;YACpC,MAAM,UAAU,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YACtC,MAAM,aAAa,GACf,IAAI,cAAc,CAAC,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;YAC9D,MAAM,YAAY,GACd,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAC,CAAC,CAAC;YAC5D,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,aAAa,CAAuB,CAAC;YACvE,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;gBAClE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;aAClD;iBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;gBAC7B,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;gBACxC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aAChD;iBAAM;gBACL,cAAc;gBACd,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;aAClD;QACH,CAAC,CAAC,CAAC;KACJ;IAED,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,kCAAkC;QAClC,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAQ,CAAC,CAAC;aACpE,YAAY,CAAC,gCAAgC,CAAC,CAAC;QACpD,MAAM;QACF,kCAAkC;QAClC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAQ,CAAC,CAAC;aACpE,YAAY,CAAC,gCAAgC,CAAC,CAAC;QACpD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB;QACpC,kCAAkC;QAClC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAQ,CAAC,CAAC;aACnC,YAAY,CAAC,gCAAgC,CAAC,CAAC;QACpD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB;QAChC,kCAAkC;QAClC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAQ,CAAC,CAAC;aAC1C,YAAY,CAAC,gCAAgC,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;aAC7D,YAAY,CAAC,qCAAqC,CAAC,CAAC;QACzD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;aAC3D,YAAY,CAAC,kCAAkC,CAAC,CAAC;QACtD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;aAC5D,YAAY,CAAC,mCAAmC,CAAC,CAAC;QACvD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAC,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;aACjE,YAAY,CAAC,qCAAqC,CAAC,CAAC;QACzD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;aAC/D,YAAY,CAAC,kCAAkC,CAAC,CAAC;QACtD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;aAChE,YAAY,CAAC,mCAAmC,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACxC,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,EAAC,CAAC,CAAC;aAC7D,YAAY,CAAC,oCAAoC,CAAC,CAAC;QACxD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;aAC3D,YAAY,CAAC,iCAAiC,CAAC,CAAC;QACrD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC;aAC5D,YAAY,CAAC,kCAAkC,CAAC,CAAC;QACtD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,EAAC,CAAC,CAAC;aACjE,YAAY,CAAC,oCAAoC,CAAC,CAAC;QACxD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;aAC/D,YAAY,CAAC,iCAAiC,CAAC,CAAC;QACrD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,CAAC;aAChE,YAAY,CAAC,kCAAkC,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,qBAAqB,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACtD,MAAM,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;QACjE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;QACtE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;QACtE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAE1D,MAAM,SAAS,GAAe,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC7C,MAAM,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvB,MAAM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1B,MAAM,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7B,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;gBAClC,KAAK,MAAM,QAAQ,IAAI,aAAa,EAAE;oBACpC,MAAM,SAAS,GAAG,UAAU,MAAM,KAAK,QAAQ,IAAI;wBAC/C,aAAa,SAAS,cAAc,QAAQ,EAAE,CAAC;oBACnD,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;wBACjB,IAAI,UAAU,GAAa,EAAE,CAAC;wBAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,EAAE,CAAC,EAAE;4BAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,EAAE,CAAC,EAAE;gCACjC,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;6BAC9C;yBACF;wBACD,MAAM,QAAQ,GACV,QAAQ,CAAC,UAAU,EAAE,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBAEzD,MAAM,eAAe,GAAG,QAAQ,KAAK,KAAK,CAAC,CAAC;4BACxC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;4BAC7B,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC;wBAC5B,MAAM,YAAY,GAAG,eAAe,CAAC;4BACnC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;4BACnB,OAAO,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;4BACjC,OAAO,EAAE,OAAO;4BAChB,UAAU,EAAE,eAAe;yBAC5B,CAAC,CAAC;wBAEH,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,QAAkB,CAAW,CAAC;wBAEhE,IAAI,aAAuD,CAAC;wBAC5D,IAAI,mBAA6B,CAAC;wBAClC,IAAI,QAAQ,KAAK,KAAK,EAAE;4BACtB,IAAI,MAAM,KAAK,CAAC,EAAE;gCAChB,aAAa,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gCAC/C,mBAAmB,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;oCACvD,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;oCAC1D,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;oCAC1D,IAAI,CAAC,CAAC;6BACT;iCAAM,IAAI,MAAM,KAAK,CAAC,EAAE;gCACvB,aAAa,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gCAC/C,mBAAmB;oCACf,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;6BACtD;yBACF;6BAAM;4BACL,IAAI,MAAM,KAAK,CAAC,EAAE;gCAChB,aAAa,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gCAC/C,mBAAmB,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;oCAC3D,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;oCAC1D,EAAE,EAAE,EAAE,CAAC,CAAC;6BACX;iCAAM,IAAI,MAAM,KAAK,CAAC,EAAE;gCACvB,aAAa,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gCAC/C,mBAAmB,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;6BACxD;yBACF;wBACD,IAAI,mBAAmB,GAAa,EAAE,CAAC;wBACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,EAAE,CAAC,EAAE;4BAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,EAAE,CAAC,EAAE;gCACjC,mBAAmB;oCACf,mBAAmB,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;6BACrD;yBACF;wBACD,kBAAkB,CAAC,MAAM,EACrB,QAAQ,CAAC,mBAAmB,EAAE,aAAa,CAAW,CAAC,CAAC;oBAC9D,CAAC,CAAC,CAAC;iBACJ;aACF;SACF;KACF;AACH,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;IAClD,MAAM,mBAAmB,GACrB,CAAC,GAAG,CAAC,MAAM,CAAC,sBAAsB,EAAE,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;IAEvE,KAAK,MAAM,kBAAkB,IAAI,mBAAmB,EAAE;QACpD,KAAK,MAAM,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE;YACnC,MAAM,SAAS,GAAG,SAAS,kBAAkB,CAAC,IAAI,aAAa,OAAO,EAAE,CAAC;YACzE,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;gBACjB,MAAM,UAAU,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;gBAC9B,MAAM,aAAa,GACf,IAAI,cAAc,CAAC,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;gBAE9D,MAAM,KAAK,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;gBAC3D,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,aAAa,CAAmB,CAAC;gBAE5D,MAAM,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC7B,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;gBAC5C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;SACJ;KACF;IAED,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC;YACnC,QAAQ,EAAE,GAAG;SACd,CAAC,CAAC,CAAC,YAAY,CAAC,kCAAkC,CAAC,CAAC;QACrD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC;YACnC,QAAQ,EAAE,CAAC;SACZ,CAAC,CAAC,CAAC,YAAY,CAAC,kCAAkC,CAAC,CAAC;QACrD,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC;YACnC,QAAQ,EAAE,CAAC,CAAC;SACb,CAAC,CAAC,CAAC,YAAY,CAAC,mCAAmC,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACxC,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,EAAC,CAAC,CAAC;aAC7D,YAAY,CAAC,oCAAoC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,qBAAqB,CAAC,kCAAkC,EAAE,GAAG,EAAE;IAC7D,MAAM,SAAS,GAAG;QAChB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;KACtC,CAAC;IACF,MAAM,mBAAmB,GACrB,CAAC,GAAG,CAAC,MAAM,CAAC,sBAAsB,EAAE,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;IACvE,KAAK,MAAM,kBAAkB,IAAI,mBAAmB,EAAE;QACpD,MAAM,SAAS,GAAG,sBAAsB,kBAAkB,CAAC,IAAI,EAAE,CAAC;QAClE,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;YACjB,MAAM,CAAC,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM,KAAK,GAAG,kBAAkB,CAAC,EAAE,CAAC,CAAC;YACrC,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAW,CAAC;YAExC,IAAI,cAAwB,CAAC;YAC7B,IAAI,kBAAkB,KAAK,GAAG,CAAC,MAAM,CAAC,sBAAsB,EAAE;gBAC5D,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aAC/D;iBAAM;gBACL,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aACxD;YACD,kBAAkB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;IAClD,MAAM,mBAAmB,GACrB,CAAC,GAAG,CAAC,MAAM,CAAC,sBAAsB,EAAE,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;IACvE,MAAM,WAAW,GAAiB,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;IAEpE,KAAK,MAAM,kBAAkB,IAAI,mBAAmB,EAAE;QACpD,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;YACpC,MAAM,SAAS,GAAG,SAAS,kBAAkB,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YACpE,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;gBACjB,MAAM,UAAU,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;gBAClC,MAAM,aAAa,GACf,IAAI,cAAc,CAAC,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;gBAE9D,MAAM,KAAK,GAAG,kBAAkB,CAAC,EAAC,UAAU,EAAC,CAAC,CAAC;gBAC/C,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,aAAa,CAAmB,CAAC;gBAE5D,MAAM,aAAa,GAAG,UAAU,KAAK,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBACvE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;gBAC5C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;SACJ;KACF;AACH,CAAC,CAAC,CAAC;AAEH,qBAAqB,CAAC,kCAAkC,EAAE,GAAG,EAAE;IAC7D,MAAM,SAAS,GAAG;QAChB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;KAC5C,CAAC;IACF,MAAM,WAAW,GAAiB,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;IAEpE,MAAM,mBAAmB,GACrB,CAAC,GAAG,CAAC,MAAM,CAAC,sBAAsB,EAAE,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;IACvE,KAAK,MAAM,kBAAkB,IAAI,mBAAmB,EAAE;QACpD,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;YACpC,MAAM,SAAS,GACX,sBAAsB,kBAAkB,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YACnE,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;gBACjB,MAAM,CAAC,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC5C,MAAM,KAAK,GAAG,kBAAkB,CAAC,EAAC,UAAU,EAAC,CAAC,CAAC;gBAC/C,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAW,CAAC;gBAExC,IAAI,cAAwB,CAAC;gBAC7B,IAAI,kBAAkB,KAAK,GAAG,CAAC,MAAM,CAAC,sBAAsB,EAAE;oBAC5D,IAAI,UAAU,KAAK,eAAe,EAAE;wBAClC,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBAC/D;yBAAM;wBACL,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBAC/D;iBACF;qBAAM;oBACL,IAAI,UAAU,KAAK,eAAe,EAAE;wBAClC,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBACvD;yBAAM;wBACL,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBACzD;iBACF;gBACD,kBAAkB,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;gBAC3C,MAAM,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;gBACjC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;SACJ;KACF;AACH,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Unit tests for pooling.ts.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Tensor, tensor2d, Tensor2D, tensor3d, tensor4d, tensor5d, Tensor4D, Tensor5D, util} from '@tensorflow/tfjs-core';\n\nimport {SymbolicTensor} from '../engine/topology';\nimport * as tfl from '../index';\nimport {DataFormat, PaddingMode, PoolMode} from '../keras_format/common';\nimport {convOutputLength} from '../utils/conv_utils';\nimport {describeMathCPUAndGPU, expectTensorsClose} from '../utils/test_utils';\n\nimport {pool2d, pool3d} from './pooling';\n\ndescribeMathCPUAndGPU('pool2d', () => {\n  const x4by4Data = [[[\n    [10, 30, 50, 70], [20, 40, 60, 80], [-10, -30, -50, -70],\n    [-20, -40, -60, -80]\n  ]]];\n  const x5by5Data = [[[\n    [0, 1, 3, 5, 7], [0, 2, 4, 6, 8], [0, 0, 0, 0, 0], [0, -1, -3, -5, -7],\n    [0, -2, -4, -6, -8]\n  ]]];\n\n  const poolModes: PoolMode[] = [undefined, 'max', 'avg'];\n  const dataFormats: DataFormat[] =\n      [undefined, 'channelsFirst', 'channelsLast'];\n  const stridesArray = [1, 2];\n  for (const poolMode of poolModes) {\n    for (const dataFormat of dataFormats) {\n      for (const stride of stridesArray) {\n        const testTitle = `4x4, ${stride}, same, ${dataFormat}, ` +\n            `${poolMode}`;\n        it(testTitle, () => {\n          let x: Tensor = tensor4d(x4by4Data, [1, 1, 4, 4]);\n          if (dataFormat !== 'channelsFirst') {\n            x = tfc.transpose(x, [0, 2, 3, 1]);  // NCHW -> NHWC.\n          }\n          let yExpected: Tensor;\n          if (poolMode === 'avg') {\n            if (stride === 1) {\n              yExpected = tensor4d(\n                  [[[\n                    [25, 45, 65, 75], [5, 5, 5, 5], [-25, -45, -65, -75],\n                    [-30, -50, -70, -80]\n                  ]]],\n                  [1, 1, 4, 4]);\n            } else {\n              yExpected = tensor4d([[[[25, 65], [-25, -65]]]], [1, 1, 2, 2]);\n            }\n          } else {\n            if (stride === 1) {\n              yExpected = tensor4d(\n                  [[[\n                    [40, 60, 80, 80], [40, 60, 80, 80], [-10, -30, -50, -70],\n                    [-20, -40, -60, -80]\n                  ]]],\n                  [1, 1, 4, 4]);\n            } else if (stride === 2) {\n              yExpected = tensor4d([[[[40, 80], [-10, -50]]]], [1, 1, 2, 2]);\n            }\n          }\n          if (dataFormat !== 'channelsFirst') {\n            yExpected = tfc.transpose(yExpected, [0, 2, 3, 1]);\n          }\n          const y =\n              pool2d(x, [2, 2], [stride, stride], 'same', dataFormat, poolMode);\n          expectTensorsClose(y, yExpected);\n        });\n      }\n    }\n  }\n\n  for (const poolMode of poolModes) {\n    it(`5x5, 2, same, CHANNEL_FIRST, ${poolMode}`, () => {\n      const x5by5 = tensor4d(x5by5Data, [1, 1, 5, 5]);\n      let yExpected = tensor4d(x4by4Data, [1, 1, 4, 4]);\n      if (poolMode === 'avg') {\n        yExpected = tensor4d(\n            [[[[0.75, 4.5, 7.5], [-0.25, -2, -3.5], [-1, -5, -8]]]],\n            [1, 1, 3, 3]);\n      } else {\n        yExpected =\n            tensor4d([[[[2, 6, 8], [0, 0, 0], [0, -4, -8]]]], [1, 1, 3, 3]);\n      }\n      const y =\n          pool2d(x5by5, [2, 2], [2, 2], 'same', 'channelsFirst', poolMode);\n      expectTensorsClose(y, yExpected);\n    });\n  }\n\n  for (const poolMode of poolModes) {\n    it(`5x5, 2, valid, CHANNEL_LAST, ${poolMode}`, () => {\n      const x5by5 =\n          tfc.transpose(tensor4d(x5by5Data, [1, 1, 5, 5]), [0, 2, 3, 1]);\n      let yExpected: Tensor4D;\n      if (poolMode === 'avg') {\n        yExpected = tensor4d([[[[0.75, 4.5], [-0.25, -2]]]], [1, 1, 2, 2]);\n      } else {\n        yExpected = tensor4d([[[[2, 6], [0, 0]]]], [1, 1, 2, 2]);\n      }\n      const y =\n          pool2d(x5by5, [2, 2], [2, 2], 'valid', 'channelsLast', poolMode);\n      expectTensorsClose(y, tfc.transpose(yExpected, [0, 2, 3, 1]));\n    });\n  }\n});\n\ndescribeMathCPUAndGPU('pool3d', () => {\n  const x4by4by4Data = [[[\n    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]],\n    [[17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [19, 30, 31, 32]],\n    [[33 ,34, 35 ,36], [37, 38, 39, 40], [41, 42, 43, 44], [45, 46, 47, 48]],\n    [[49, 50, 51, 52], [53, 54, 55, 56], [57, 58, 59, 60], [61, 62, 63 ,64]]\n  ]]];\n  const x5by5by5Data = [[[\n    [\n      [1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15],\n      [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]\n    ], [\n      [26, 27, 28, 29, 30], [31, 32, 33, 34, 35], [36, 37, 38, 39, 40],\n      [41, 42, 43, 44, 45], [46, 47, 48, 49, 50]\n    ], [\n      [51, 52, 53, 54, 55], [56, 57, 58, 59, 60], [61, 62, 63, 64, 65],\n      [66, 67, 68, 69, 70], [71, 72, 73, 74, 75]\n    ], [\n      [76, 77, 78, 79, 80], [81, 82, 83, 84, 85], [86, 87, 88, 89, 90],\n      [91, 92, 93, 94, 95], [96, 97, 98, 99, 100]\n    ], [\n      [101, 102, 103, 104, 105], [106, 107, 108, 109, 110],\n      [111, 112, 113, 114, 115], [116, 117, 118, 119, 120],\n      [121, 122, 123, 124, 125]\n    ]\n  ]]];\n\n  const poolModes: PoolMode[] = [undefined, 'max', 'avg'];\n  const dataFormats: DataFormat[] =\n      [undefined, 'channelsFirst', 'channelsLast'];\n  const stridesArray = [1, 2];\n  for (const poolMode of poolModes) {\n    for (const dataFormat of dataFormats) {\n      for (const stride of stridesArray) {\n        const testTitle = `4x4x4, ${stride}, same, ${dataFormat}, ` +\n            `${poolMode}`;\n        it(testTitle, () => {\n          let x: Tensor5D = tensor5d(x4by4by4Data, [1, 1, 4, 4, 4]);\n          if (dataFormat !== 'channelsFirst') {\n            x = tfc.transpose(x, [0, 2, 3, 4, 1]);  // NDHWC -> NCDHW.\n          }\n          let yExpected: Tensor5D;\n          if (poolMode === 'avg') {\n            if (stride === 1) {\n              yExpected = tensor5d(\n                  [[[\n                    [\n                      [11.5, 12.5, 13.5, 14], [15.5, 16.5, 17.5, 18],\n                      [18.25, 20.5, 21.5, 22], [19, 22.5, 23.5, 24]\n                    ], [\n                      [27.5, 28.5, 29.5, 30], [31.5, 32.5, 33.5, 34],\n                      [34.25, 36.5, 37.5, 38], [35, 38.5, 39.5, 40]\n                    ], [\n                      [43.5, 44.5, 45.5, 46], [47.5, 48.5, 49.5, 50],\n                      [51.5, 52.5, 53.5, 54], [53.5, 54.5, 55.5, 56]\n                    ], [\n                      [51.5, 52.5, 53.5, 54], [55.5, 56.5, 57.5, 58],\n                      [59.5, 60.5, 61.5, 62], [61.5, 62.5, 63.5, 64]]\n                  ]]],\n                  [1, 1, 4, 4, 4]);\n            } else {\n              yExpected = tensor5d([[[[[11.5, 13.5], [18.25, 21.5]],\n                    [[43.5, 45.5], [51.5, 53.5]]]]], [1, 1, 2, 2, 2]);\n            }\n          } else {\n            if (stride === 1) {\n              yExpected = tensor5d(\n                  [[[\n                    [\n                      [22, 23, 24, 24], [26, 27, 28, 28],\n                      [30, 31, 32, 32], [30, 31, 32, 32]\n                    ], [\n                      [38, 39, 40, 40], [42, 43, 44, 44],\n                      [46, 47, 48, 48], [46, 47, 48, 48]\n                    ], [\n                      [54, 55, 56, 56], [58, 59, 60, 60],\n                      [62, 63, 64, 64], [62, 63, 64, 64]\n                    ], [\n                      [54, 55, 56, 56], [58, 59, 60, 60],\n                      [62, 63, 64, 64], [62, 63, 64, 64]]\n                  ]]], [1, 1, 4, 4, 4]);\n            } else if (stride === 2) {\n              yExpected =\n                  tensor5d([[[[[22, 24], [30, 32]], [[54, 56], [62, 64]]]]],\n                      [1, 1, 2, 2, 2]);\n            }\n          }\n          if (dataFormat !== 'channelsFirst') {\n            yExpected = tfc.transpose(yExpected, [0, 2, 3, 4, 1]);\n          }\n          const y = pool3d(x, [2, 2, 2], [stride, stride, stride], 'same',\n              dataFormat, poolMode);\n          expectTensorsClose(y, yExpected as Tensor);\n        });\n      }\n    }\n  }\n\n  for (const poolMode of poolModes) {\n    it(`5x5x5, 2, same, CHANNEL_FIRST, ${poolMode}`, () => {\n      const x5by5by5 = tensor5d(x5by5by5Data, [1, 1, 5, 5, 5]);\n      let yExpected: Tensor5D;\n      if (poolMode === 'avg') {\n        yExpected = tensor5d([[[\n          [[16.5, 18.5, 20], [26.5, 28.5, 30], [34, 36, 37.5]],\n          [[66.5, 68.5, 70], [76.5, 78.5, 80], [84, 86, 87.5]],\n          [[104, 106, 107.5], [114, 116, 117.5], [121.5, 123.5, 125]]\n        ]]], [1, 1, 3, 3, 3]);\n      } else {\n        yExpected = tensor5d([[[\n          [[32, 34, 35], [42, 44, 45], [47, 49, 50]],\n          [[82, 84, 85], [92, 94, 95], [97, 99, 100]],\n          [[107, 109, 110], [117, 119, 120], [122, 124, 125]]\n        ]]], [1, 1, 3, 3, 3]);\n      }\n      const y = pool3d(x5by5by5, [2, 2, 2], [2, 2, 2], 'same', 'channelsFirst',\n          poolMode);\n      expectTensorsClose(y, yExpected as Tensor);\n    });\n  }\n\n  for (const poolMode of poolModes) {\n    it(`5x5x5, 2, valid, CHANNEL_LAST, ${poolMode}`, () => {\n      const x5by5by5 = tfc.transpose(\n          tensor5d(x5by5by5Data, [1, 1, 5, 5, 5]), [0, 2, 3, 4, 1]);\n      let yExpected: Tensor5D;\n      if (poolMode === 'avg') {\n        yExpected = tensor5d(\n            [[[[[16.5, 18.5], [26.5, 28.5]], [[66.5, 68.5], [76.5, 78.5]]]]],\n            [1, 1, 2, 2, 2]);\n      } else {\n        yExpected = tensor5d(\n            [[[[[32, 34], [42, 44]], [[82, 84], [92, 94]]]]],\n            [1, 1, 2, 2, 2]);\n      }\n      const y = pool3d(x5by5by5, [2, 2, 2], [2, 2, 2], 'valid', 'channelsLast',\n          poolMode);\n      expectTensorsClose(y, tfc.transpose(yExpected, [0, 2, 3, 4, 1]));\n    });\n  }\n});\n\ndescribe('Pooling Layers 1D: Symbolic', () => {\n  const poolSizes = [2, 3];\n  const stridesList = [null, 1, 2];\n  const poolModes: PoolMode[] = ['avg', 'max'];\n  const paddingModes: PaddingMode[] = [undefined, 'valid', 'same'];\n\n  for (const poolMode of poolModes) {\n    for (const paddingMode of paddingModes) {\n      for (const poolSize of poolSizes) {\n        for (const strides of stridesList) {\n          const testTitle = `poolSize=${poolSize}, ` +\n              `${paddingMode}, ${poolMode}`;\n          it(testTitle, () => {\n            const inputLength = 16;\n            const inputNumChannels = 11;\n            const inputBatchSize = 2;\n            const inputShape = [inputBatchSize, inputLength, inputNumChannels];\n            const symbolicInput =\n                new SymbolicTensor('float32', inputShape, null, [], null);\n            const poolConstructor = poolMode === 'avg' ?\n                tfl.layers.averagePooling1d :\n                tfl.layers.maxPooling1d;\n            const poolingLayer = poolConstructor({\n              poolSize,\n              strides,\n              padding: paddingMode,\n            });\n            const output = poolingLayer.apply(symbolicInput) as SymbolicTensor;\n            const expectedOutputLength = convOutputLength(\n                inputLength, poolSize, paddingMode,\n                strides ? strides : poolSize);\n            const expectedShape =\n                [inputBatchSize, expectedOutputLength, inputNumChannels];\n\n            expect(output.shape).toEqual(expectedShape);\n            expect(output.dtype).toEqual(symbolicInput.dtype);\n          });\n        }\n      }\n    }\n  }\n});\n\ndescribeMathCPUAndGPU('Pooling Layers 1D: Tensor', () => {\n  const poolModes = ['avg', 'max'];\n  const strides = [2, 4];\n  const poolSizes = [2, 4];\n  const batchSize = 2;\n  for (const poolMode of poolModes) {\n    for (const stride of strides) {\n      for (const poolSize of poolSizes) {\n        const testTitle = `stride=${stride}, ${poolMode}, ` +\n            `poolSize=${poolSize}`;\n        it(testTitle, () => {\n          const x2by8 = tensor2d([\n            [10, 30, 50, 70, 20, 40, 60, 80],\n            [-10, -30, -50, -70, -20, -40, -60, -80]\n          ]);\n          const x2by8by1 = tfc.expandDims(x2by8, 2);\n          const poolConstructor = poolMode === 'avg' ?\n              tfl.layers.averagePooling1d :\n              tfl.layers.maxPooling1d;\n          const poolingLayer = poolConstructor({\n            poolSize,\n            strides: stride,\n            padding: 'valid',\n          });\n          const output = poolingLayer.apply(x2by8by1) as Tensor;\n          let outputLength: number;\n          let expectedOutputVals: number[][][];\n          if (poolSize === 2) {\n            if (stride === 2) {\n              outputLength = 4;\n              if (poolMode === 'avg') {\n                expectedOutputVals =\n                    [[[20], [60], [30], [70]], [[-20], [-60], [-30], [-70]]];\n              } else {\n                expectedOutputVals =\n                    [[[30], [70], [40], [80]], [[-10], [-50], [-20], [-60]]];\n              }\n            } else if (stride === 4) {\n              outputLength = 2;\n              if (poolMode === 'avg') {\n                expectedOutputVals = [[[20], [30]], [[-20], [-30]]];\n              } else {\n                expectedOutputVals = [[[30], [40]], [[-10], [-20]]];\n              }\n            }\n          } else if (poolSize === 4) {\n            if (stride === 2) {\n              outputLength = 3;\n              if (poolMode === 'avg') {\n                expectedOutputVals =\n                    [[[40], [45], [50]], [[-40], [-45], [-50]]];\n              } else {\n                expectedOutputVals =\n                    [[[70], [70], [80]], [[-10], [-20], [-20]]];\n              }\n            } else if (stride === 4) {\n              outputLength = 2;\n              if (poolMode === 'avg') {\n                expectedOutputVals = [[[40], [50]], [[-40], [-50]]];\n              } else {\n                expectedOutputVals = [[[70], [80]], [[-10], [-20]]];\n              }\n            }\n          }\n          const expectedShape: [number, number, number] =\n              [batchSize, outputLength, 1];\n          expectTensorsClose(\n              output, tensor3d(expectedOutputVals, expectedShape));\n        });\n      }\n    }\n  }\n\n  it('Handles poolSize and strides passed as number arrays', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.maxPool1d(\n        {poolSize: [2], strides: [2], inputShape: [4, 3]}));\n    const xs = tfc.ones([1, 4, 3]);\n    const ys = model.predict(xs) as Tensor;\n    expectTensorsClose(ys, [1, 1, 1, 1, 1, 1]);\n    expect(ys.shape).toEqual([1, 2, 3]);\n\n    const config = model.layers[0].getConfig();\n    expect(config['poolSize']).toEqual([2]);\n    expect(config['strides']).toEqual([2]);\n  });\n});\n\ndescribe('Pooling Layers 2D: Symbolic', () => {\n  const poolSizes = [2, 3];\n  const poolModes = ['avg', 'max'];\n  const paddingModes: PaddingMode[] = [undefined, 'valid', 'same'];\n  const dataFormats: DataFormat[] = ['channelsFirst', 'channelsLast'];\n  const poolSizeIsNumberValues = [false, true];\n\n  for (const poolMode of poolModes) {\n    for (const paddingMode of paddingModes) {\n      for (const dataFormat of dataFormats) {\n        for (const poolSize of poolSizes) {\n          for (const poolSizeIsNumber of poolSizeIsNumberValues) {\n            const testTitle = `poolSize=${poolSize}, ` +\n                `${dataFormat}, ${paddingMode}, ` +\n                `${poolMode}, ` +\n                `poollSizeIsNumber=${poolSizeIsNumber}`;\n            it(testTitle, () => {\n              const inputShape = dataFormat === 'channelsFirst' ?\n                  [2, 16, 11, 9] :\n                  [2, 11, 9, 16];\n              const symbolicInput =\n                  new SymbolicTensor('float32', inputShape, null, [], null);\n\n              const poolConstructor = poolMode === 'avg' ?\n                  tfl.layers.averagePooling2d :\n                  tfl.layers.maxPooling2d;\n              const poolingLayer = poolConstructor({\n                poolSize: poolSizeIsNumber ? poolSize : [poolSize, poolSize],\n                padding: paddingMode,\n                dataFormat,\n              });\n\n              const output =\n                  poolingLayer.apply(symbolicInput) as SymbolicTensor;\n\n              let outputRows = poolSize === 2 ? 5 : 3;\n              if (paddingMode === 'same') {\n                outputRows++;\n              }\n              let outputCols = poolSize === 2 ? 4 : 3;\n              if (paddingMode === 'same' && poolSize === 2) {\n                outputCols++;\n              }\n\n              let expectedShape: [number, number, number, number];\n              if (dataFormat === 'channelsFirst') {\n                expectedShape = [2, 16, outputRows, outputCols];\n              } else {\n                expectedShape = [2, outputRows, outputCols, 16];\n              }\n\n              expect(output.shape).toEqual(expectedShape);\n              expect(output.dtype).toEqual(symbolicInput.dtype);\n            });\n          }\n        }\n      }\n    }\n  }\n\n  const stridesValues: Array<number|[number, number]> = [1, [1, 1], [2, 1]];\n  for (const strides of stridesValues) {\n    it(`custom strides: ${strides}`, () => {\n      const inputShape = [2, 16, 11, 3];\n      const symbolicInput =\n          new SymbolicTensor('float32', inputShape, null, [], null);\n      const poolingLayer = tfl.layers.maxPooling2d({poolSize: [2, 2], strides});\n      const output = poolingLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n      if (Array.isArray(strides) && util.arraysEqual(strides, [1, 1])) {\n        expect(output.shape).toEqual([2, 15, 10, 3]);\n      } else if (Array.isArray(strides) && util.arraysEqual(strides, [2, 1])) {\n        expect(output.shape).toEqual([2, 8, 10, 3]);\n      } else {\n        // strides = 1\n        expect(output.shape).toEqual([2, 15, 10, 3]);\n      }\n    });\n  }\n\n  it('Incorrect strides array length leads to error', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tfl.layers.maxPooling2d({poolSize: 2, strides: [2]} as any))\n        .toThrowError(/expected to have a length of 2/);\n    expect(\n        // tslint:disable-next-line:no-any\n        () => tfl.layers.maxPooling2d({poolSize: 2, strides: [2, 3, 3]} as any))\n        .toThrowError(/expected to have a length of 2/);\n  });\n\n  it('Invalid poolSize', () => {\n    expect(() => tfl.layers.maxPooling2d({poolSize: 2.5, strides: 2}))\n        .toThrowError(/poolSize.*positive integer.*2\\.5\\.$/);\n    expect(() => tfl.layers.maxPooling2d({poolSize: 0, strides: 2}))\n        .toThrowError(/poolSize.*positive integer.*0\\.$/);\n    expect(() => tfl.layers.maxPooling2d({poolSize: -2, strides: 2}))\n        .toThrowError(/poolSize.*positive integer.*-2\\.$/);\n  });\n\n  it('Invalid strides leads to Error', () => {\n    expect(() => tfl.layers.maxPooling2d({poolSize: 3, strides: 2.5}))\n        .toThrowError(/strides.*positive integer.*2\\.5\\.$/);\n    expect(() => tfl.layers.maxPooling2d({poolSize: 3, strides: 0}))\n        .toThrowError(/strides.*positive integer.*0\\.$/);\n    expect(() => tfl.layers.maxPooling2d({poolSize: 3, strides: -2}))\n        .toThrowError(/strides.*positive integer.*-2\\.$/);\n  });\n});\n\ndescribeMathCPUAndGPU('Pooling Layers 2D: Tensor', () => {\n  const x4by4Data =\n      [10, 30, 50, 70, 20, 40, 60, 80, -10, -30, -50, -70, -20, -40, -60, -80];\n\n  const poolModes: PoolMode[] = ['avg', 'max'];\n  const strides = [1, 2];\n  const batchSizes = [2, 4];\n  const channelsArray = [1, 3];\n  for (const poolMode of poolModes) {\n    for (const stride of strides) {\n      for (const batchSize of batchSizes) {\n        for (const channels of channelsArray) {\n          const testTitle = `stride=${stride}, ${poolMode}, ` +\n              `batchSize=${batchSize}, channels=${channels}`;\n          it(testTitle, () => {\n            let xArrayData: number[] = [];\n            for (let b = 0; b < batchSize; ++b) {\n              for (let c = 0; c < channels; ++c) {\n                xArrayData = xArrayData.concat(x4by4Data);\n              }\n            }\n            const x4by4 = tensor4d(xArrayData, [batchSize, channels, 4, 4]);\n\n            const poolConstructor = poolMode === 'avg' ?\n                tfl.layers.averagePooling2d :\n                tfl.layers.maxPooling2d;\n            const poolingLayer = poolConstructor({\n              poolSize: [2, 2],\n              strides: [stride, stride],\n              padding: 'valid',\n              dataFormat: 'channelsFirst',\n            });\n\n            const output = poolingLayer.apply(x4by4) as Tensor;\n\n            let expectedShape: [number, number, number, number];\n            let expectedOutputSlice: number[];\n            if (poolMode === 'avg') {\n              if (stride === 1) {\n                expectedShape = [batchSize, channels, 3, 3];\n                expectedOutputSlice = [25, 45, 65, 5, 5, 5, -25, -45, -65];\n              } else if (stride === 2) {\n                expectedShape = [batchSize, channels, 2, 2];\n                expectedOutputSlice = [25, 65, -25, -65];\n              }\n            } else {\n              if (stride === 1) {\n                expectedShape = [batchSize, channels, 3, 3];\n                expectedOutputSlice = [40, 60, 80, 40, 60, 80, -10, -30, -50];\n              } else if (stride === 2) {\n                expectedShape = [batchSize, channels, 2, 2];\n                expectedOutputSlice = [40, 80, -10, -50];\n              }\n            }\n            let expectedOutputArray: number[] = [];\n            for (let b = 0; b < batchSize; ++b) {\n              for (let c = 0; c < channels; ++c) {\n                expectedOutputArray =\n                    expectedOutputArray.concat(expectedOutputSlice);\n              }\n            }\n            expectTensorsClose(\n                output, tensor4d(expectedOutputArray, expectedShape));\n          });\n        }\n      }\n    }\n  }\n\n  it('Handles strides passed as number arrays', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.maxPooling2d(\n        {poolSize: 2, strides: [2, 2], inputShape: [4, 4, 3]}));\n    const xs = tfc.ones([1, 4, 4, 3]);\n    const ys = model.predict(xs) as Tensor;\n    expectTensorsClose(ys, tfc.ones([1, 2, 2, 3]));\n    expect(ys.shape).toEqual([1, 2, 2, 3]);\n    const config = model.layers[0].getConfig();\n    expect(config['poolSize']).toEqual([2, 2]);\n    expect(config['strides']).toEqual([2, 2]);\n  });\n});\n\ndescribe('Pooling Layers 3D: Symbolic', () => {\n  const poolSizes = [2, 3];\n  const poolModes = ['avg', 'max'];\n  const paddingModes: PaddingMode[] = [undefined, 'valid', 'same'];\n  const dataFormats: DataFormat[] = ['channelsFirst', 'channelsLast'];\n  const poolSizeIsNumberValues = [false, true];\n\n  for (const poolMode of poolModes) {\n    for (const paddingMode of paddingModes) {\n      for (const dataFormat of dataFormats) {\n        for (const poolSize of poolSizes) {\n          for (const poolSizeIsNumber of poolSizeIsNumberValues) {\n            const testTitle = `poolSize=${poolSize}, ` +\n                `${dataFormat}, ${paddingMode}, ` +\n                `${poolMode}, ` +\n                `poollSizeIsNumber=${poolSizeIsNumber}`;\n            it(testTitle, () => {\n              const inputShape = dataFormat === 'channelsFirst' ?\n                  [2, 16, 11, 9, 7] :\n                  [2, 11, 9, 7, 16];\n              const symbolicInput =\n                  new SymbolicTensor('float32', inputShape, null, [], null);\n\n              const poolConstructor = poolMode === 'avg' ?\n                  tfl.layers.averagePooling3d :\n                  tfl.layers.maxPooling3d;\n              const poolingLayer = poolConstructor({\n                poolSize: poolSizeIsNumber ? poolSize :\n                    [poolSize, poolSize, poolSize],\n                padding: paddingMode,\n                dataFormat,\n              });\n\n              const output =\n                  poolingLayer.apply(symbolicInput) as SymbolicTensor;\n\n              let outputDepths = poolSize === 2 ? 5: 3;\n              if (paddingMode === 'same') {\n                outputDepths++;\n              }\n\n              let outputRows = poolSize === 2 ? 4 : 3;\n              if (paddingMode === 'same' && poolSize === 2) {\n                outputRows++;\n              }\n              let outputCols = poolSize === 2 ? 3 : 2;\n              if (paddingMode === 'same') {\n                outputCols++;\n              }\n\n              let expectedShape: [number, number, number, number, number];\n              if (dataFormat === 'channelsFirst') {\n                expectedShape = [2, 16, outputDepths, outputRows, outputCols];\n              } else {\n                expectedShape = [2, outputDepths, outputRows, outputCols, 16];\n              }\n\n              expect(output.shape).toEqual(expectedShape);\n              expect(output.dtype).toEqual(symbolicInput.dtype);\n            });\n          }\n        }\n      }\n    }\n  }\n\n  const stridesValues: Array<number|[number, number, number]> =\n      [1, [1, 1, 1], [2, 1, 2]];\n  for (const strides of stridesValues) {\n    it(`custom strides: ${strides}`, () => {\n      const inputShape = [2, 16, 11, 15, 3];\n      const symbolicInput =\n          new SymbolicTensor('float32', inputShape, null, [], null);\n      const poolingLayer =\n          tfl.layers.maxPooling3d({poolSize: [2, 2, 2], strides});\n      const output = poolingLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n      if (Array.isArray(strides) && util.arraysEqual(strides, [1, 1, 1])) {\n        expect(output.shape).toEqual([2, 15, 10, 14, 3]);\n      } else if (Array.isArray(strides) &&\n          util.arraysEqual(strides, [2, 1, 2])) {\n        expect(output.shape).toEqual([2, 8, 10, 7, 3]);\n      } else {\n        // strides = 1\n        expect(output.shape).toEqual([2, 15, 10, 14, 3]);\n      }\n    });\n  }\n\n  it('Incorrect strides array length leads to error', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tfl.layers.maxPooling3d({poolSize: 2, strides: [2]} as any))\n        .toThrowError(/expected to have a length of 3/);\n    expect(\n        // tslint:disable-next-line:no-any\n        () => tfl.layers.maxPooling3d({poolSize: 2, strides: [2, 3]} as any))\n        .toThrowError(/expected to have a length of 3/);\n    expect(() => tfl.layers.averagePooling3d(\n        // tslint:disable-next-line:no-any\n        {poolSize: 2, strides: [2]} as any))\n        .toThrowError(/expected to have a length of 3/);\n    expect(() => tfl.layers.averagePooling3d(\n            // tslint:disable-next-line:no-any\n            {poolSize: 2, strides: [2, 3]} as any))\n        .toThrowError(/expected to have a length of 3/);\n  });\n\n  it('Invalid poolSize', () => {\n    expect(() => tfl.layers.maxPooling3d({poolSize: 2.5, strides: 2}))\n        .toThrowError(/poolSize.*positive integer.*2\\.5\\.$/);\n    expect(() => tfl.layers.maxPooling3d({poolSize: 0, strides: 2}))\n        .toThrowError(/poolSize.*positive integer.*0\\.$/);\n    expect(() => tfl.layers.maxPooling3d({poolSize: -2, strides: 2}))\n        .toThrowError(/poolSize.*positive integer.*-2\\.$/);\n    expect(() => tfl.layers.averagePooling3d({poolSize: 2.5, strides: 2}))\n        .toThrowError(/poolSize.*positive integer.*2\\.5\\.$/);\n    expect(() => tfl.layers.averagePooling3d({poolSize: 0, strides: 2}))\n        .toThrowError(/poolSize.*positive integer.*0\\.$/);\n    expect(() => tfl.layers.averagePooling3d({poolSize: -2, strides: 2}))\n        .toThrowError(/poolSize.*positive integer.*-2\\.$/);\n  });\n\n  it('Invalid strides leads to Error', () => {\n    expect(() => tfl.layers.maxPooling3d({poolSize: 3, strides: 2.5}))\n        .toThrowError(/strides.*positive integer.*2\\.5\\.$/);\n    expect(() => tfl.layers.maxPooling3d({poolSize: 3, strides: 0}))\n        .toThrowError(/strides.*positive integer.*0\\.$/);\n    expect(() => tfl.layers.maxPooling3d({poolSize: 3, strides: -2}))\n        .toThrowError(/strides.*positive integer.*-2\\.$/);\n    expect(() => tfl.layers.averagePooling3d({poolSize: 3, strides: 2.5}))\n        .toThrowError(/strides.*positive integer.*2\\.5\\.$/);\n    expect(() => tfl.layers.averagePooling3d({poolSize: 3, strides: 0}))\n        .toThrowError(/strides.*positive integer.*0\\.$/);\n    expect(() => tfl.layers.averagePooling3d({poolSize: 3, strides: -2}))\n        .toThrowError(/strides.*positive integer.*-2\\.$/);\n  });\n});\n\ndescribeMathCPUAndGPU('Pooling Layers 3D: Tensor', () => {\n  const x4by4by4Data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n        34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64];\n\n  const poolModes: PoolMode[] = ['avg', 'max'];\n  const strides = [1, 2];\n  const batchSizes = [2, 4];\n  const channelsArray = [1, 3];\n  for (const poolMode of poolModes) {\n    for (const stride of strides) {\n      for (const batchSize of batchSizes) {\n        for (const channels of channelsArray) {\n          const testTitle = `stride=${stride}, ${poolMode}, ` +\n              `batchSize=${batchSize}, channels=${channels}`;\n          it(testTitle, () => {\n            let xArrayData: number[] = [];\n            for (let b = 0; b < batchSize; ++b) {\n              for (let c = 0; c < channels; ++c) {\n                xArrayData = xArrayData.concat(x4by4by4Data);\n              }\n            }\n            const x4by4by4 =\n                tensor5d(xArrayData, [batchSize, channels, 4, 4, 4]);\n\n            const poolConstructor = poolMode === 'avg' ?\n                tfl.layers.averagePooling3d :\n                tfl.layers.maxPooling3d;\n            const poolingLayer = poolConstructor({\n              poolSize: [2, 2, 2],\n              strides: [stride, stride, stride],\n              padding: 'valid',\n              dataFormat: 'channelsFirst',\n            });\n\n            const output = poolingLayer.apply(x4by4by4 as Tensor) as Tensor;\n\n            let expectedShape: [number, number, number, number, number];\n            let expectedOutputSlice: number[];\n            if (poolMode === 'avg') {\n              if (stride === 1) {\n                expectedShape = [batchSize, channels, 3, 3, 3];\n                expectedOutputSlice = [11.5, 12.5, 13.5, 15.5, 16.5, 17.5,\n                  19.5, 20.5, 21.5, 27.5, 28.5, 29.5, 31.5, 32.5, 33.5, 35.5,\n                  36.5, 37.5, 43.5, 44.5, 45.5, 47.5, 48.5, 49.5, 51.5, 52.5,\n                  53.5];\n              } else if (stride === 2) {\n                expectedShape = [batchSize, channels, 2, 2, 2];\n                expectedOutputSlice =\n                    [11.5, 13.5, 19.5, 21.5, 43.5, 45.5, 51.5, 53.5];\n              }\n            } else {\n              if (stride === 1) {\n                expectedShape = [batchSize, channels, 3, 3, 3];\n                expectedOutputSlice = [22, 23, 24, 26, 27, 28, 30, 31, 32, 38,\n                  39, 40, 42, 43, 44, 46, 47, 48, 54, 55, 56, 58, 59, 60, 62,\n                  63, 64];\n              } else if (stride === 2) {\n                expectedShape = [batchSize, channels, 2, 2, 2];\n                expectedOutputSlice = [22, 24, 30, 32, 54, 56, 62, 64];\n              }\n            }\n            let expectedOutputArray: number[] = [];\n            for (let b = 0; b < batchSize; ++b) {\n              for (let c = 0; c < channels; ++c) {\n                expectedOutputArray =\n                    expectedOutputArray.concat(expectedOutputSlice);\n              }\n            }\n            expectTensorsClose(output,\n                tensor5d(expectedOutputArray, expectedShape) as Tensor);\n          });\n        }\n      }\n    }\n  }\n});\n\ndescribe('1D Global pooling Layers: Symbolic', () => {\n  const globalPoolingLayers =\n      [tfl.layers.globalAveragePooling1d, tfl.layers.globalMaxPooling1d];\n\n  for (const globalPoolingLayer of globalPoolingLayers) {\n    for (const hasArgs of [true, false]) {\n      const testTitle = `layer=${globalPoolingLayer.name}; hasArgs=${hasArgs}`;\n      it(testTitle, () => {\n        const inputShape = [2, 11, 9];\n        const symbolicInput =\n            new SymbolicTensor('float32', inputShape, null, [], null);\n\n        const layer = globalPoolingLayer(hasArgs ? {} : undefined);\n        const output = layer.apply(symbolicInput) as SymbolicTensor;\n\n        const expectedShape = [2, 9];\n        expect(output.shape).toEqual(expectedShape);\n        expect(output.dtype).toEqual(symbolicInput.dtype);\n      });\n    }\n  }\n\n  it('Invalid poolSize', () => {\n    expect(() => tfl.layers.avgPooling1d({\n      poolSize: 2.5\n    })).toThrowError(/poolSize.*positive integer.*2\\.5/);\n    expect(() => tfl.layers.avgPooling1d({\n      poolSize: 0\n    })).toThrowError(/poolSize.*positive integer.*0\\.$/);\n    expect(() => tfl.layers.avgPooling1d({\n      poolSize: -3\n    })).toThrowError(/poolSize.*positive integer.*-3\\.$/);\n  });\n\n  it('Invalid strides leads to Error', () => {\n    expect(() => tfl.layers.avgPooling1d({poolSize: 3, strides: 4.5}))\n        .toThrowError(/strides.*positive integer.*4\\.5\\.$/);\n  });\n});\n\ndescribeMathCPUAndGPU('1D Global Pooling Layers: Tensor', () => {\n  const x3DimData = [\n    [[4, -1], [0, -2], [40, -10], [0, -20]],\n    [[-4, 1], [0, 2], [-40, 10], [0, 20]]\n  ];\n  const globalPoolingLayers =\n      [tfl.layers.globalAveragePooling1d, tfl.layers.globalMaxPooling1d];\n  for (const globalPoolingLayer of globalPoolingLayers) {\n    const testTitle = `globalPoolingLayer=${globalPoolingLayer.name}`;\n    it(testTitle, () => {\n      const x = tensor3d(x3DimData, [2, 4, 2]);\n      const layer = globalPoolingLayer({});\n      const output = layer.apply(x) as Tensor;\n\n      let expectedOutput: Tensor2D;\n      if (globalPoolingLayer === tfl.layers.globalAveragePooling1d) {\n        expectedOutput = tensor2d([[11, -8.25], [-11, 8.25]], [2, 2]);\n      } else {\n        expectedOutput = tensor2d([[40, -1], [0, 20]], [2, 2]);\n      }\n      expectTensorsClose(output, expectedOutput);\n    });\n  }\n});\n\ndescribe('2D Global pooling Layers: Symbolic', () => {\n  const globalPoolingLayers =\n      [tfl.layers.globalAveragePooling2d, tfl.layers.globalMaxPooling2d];\n  const dataFormats: DataFormat[] = ['channelsFirst', 'channelsLast'];\n\n  for (const globalPoolingLayer of globalPoolingLayers) {\n    for (const dataFormat of dataFormats) {\n      const testTitle = `layer=${globalPoolingLayer.name}, ${dataFormat}`;\n      it(testTitle, () => {\n        const inputShape = [2, 16, 11, 9];\n        const symbolicInput =\n            new SymbolicTensor('float32', inputShape, null, [], null);\n\n        const layer = globalPoolingLayer({dataFormat});\n        const output = layer.apply(symbolicInput) as SymbolicTensor;\n\n        const expectedShape = dataFormat === 'channelsLast' ? [2, 9] : [2, 16];\n        expect(output.shape).toEqual(expectedShape);\n        expect(output.dtype).toEqual(symbolicInput.dtype);\n      });\n    }\n  }\n});\n\ndescribeMathCPUAndGPU('2D Global Pooling Layers: Tensor', () => {\n  const x4DimData = [\n    [[[4, -1], [0, -2]], [[40, -10], [0, -20]]],\n    [[[4, -1], [0, -2]], [[40, -10], [0, -20]]]\n  ];\n  const dataFormats: DataFormat[] = ['channelsFirst', 'channelsLast'];\n\n  const globalPoolingLayers =\n      [tfl.layers.globalAveragePooling2d, tfl.layers.globalMaxPooling2d];\n  for (const globalPoolingLayer of globalPoolingLayers) {\n    for (const dataFormat of dataFormats) {\n      const testTitle =\n          `globalPoolingLayer=${globalPoolingLayer.name}, ${dataFormat}`;\n      it(testTitle, () => {\n        const x = tensor4d(x4DimData, [2, 2, 2, 2]);\n        const layer = globalPoolingLayer({dataFormat});\n        const output = layer.apply(x) as Tensor;\n\n        let expectedOutput: Tensor2D;\n        if (globalPoolingLayer === tfl.layers.globalAveragePooling2d) {\n          if (dataFormat === 'channelsFirst') {\n            expectedOutput = tensor2d([[0.25, 2.5], [0.25, 2.5]], [2, 2]);\n          } else {\n            expectedOutput = tensor2d([[11, -8.25], [11, -8.25]], [2, 2]);\n          }\n        } else {\n          if (dataFormat === 'channelsFirst') {\n            expectedOutput = tensor2d([[4, 40], [4, 40]], [2, 2]);\n          } else {\n            expectedOutput = tensor2d([[40, -1], [40, -1]], [2, 2]);\n          }\n        }\n        expectTensorsClose(output, expectedOutput);\n        const config = layer.getConfig();\n        expect(config.dataFormat).toEqual(dataFormat);\n      });\n    }\n  }\n});\n"]}