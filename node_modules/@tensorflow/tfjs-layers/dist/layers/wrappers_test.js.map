{"version":3,"file":"wrappers_test.js","sourceRoot":"","sources":["../../src/layers/wrappers_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Unit tests for wrapper layers.\n */\n\nimport {ones, scalar, serialization, Tensor, tensor2d, Tensor3D, tensor3d} from '@tensorflow/tfjs-core';\n\nimport {Layer, SymbolicTensor} from '../engine/topology';\nimport {LayersModel} from '../engine/training';\nimport * as tfl from '../index';\nimport {BidirectionalMergeMode, VALID_BIDIRECTIONAL_MERGE_MODES} from '../keras_format/common';\nimport {convertPythonicToTs} from '../utils/serialization_utils';\nimport {describeMathCPU, describeMathCPUAndGPU, expectTensorsClose} from '../utils/test_utils';\n\nimport {Dense, Reshape} from './core';\nimport {RNN, SimpleRNN} from './recurrent';\nimport {deserialize} from './serialization';\nimport {Bidirectional, checkBidirectionalMergeMode, TimeDistributed} from './wrappers';\n\ndescribeMathCPU('TimeDistributed Layer: Symbolic', () => {\n  it('3D input: Dense', () => {\n    const input = new tfl.SymbolicTensor('float32', [10, 8, 2], null, [], null);\n    const wrapper = tfl.layers.timeDistributed({layer: new Dense({units: 3})});\n    const output = wrapper.apply(input) as tfl.SymbolicTensor;\n    expect(wrapper.trainable).toEqual(true);\n    expect(wrapper.getWeights().length).toEqual(2);  // kernel and bias.\n    expect(output.dtype).toEqual(input.dtype);\n    expect(output.shape).toEqual([10, 8, 3]);\n  });\n  it('4D input: Reshape', () => {\n    const input =\n        new tfl.SymbolicTensor('float32', [10, 8, 2, 3], null, [], null);\n    const wrapper =\n        tfl.layers.timeDistributed({layer: new Reshape({targetShape: [6]})});\n    const output = wrapper.apply(input) as tfl.SymbolicTensor;\n    expect(output.dtype).toEqual(input.dtype);\n    expect(output.shape).toEqual([10, 8, 6]);\n  });\n  it('2D input leads to exception', () => {\n    const input = new tfl.SymbolicTensor('float32', [10, 2], null, [], null);\n    const wrapper = tfl.layers.timeDistributed({layer: new Dense({units: 3})});\n    expect(() => wrapper.apply(input))\n        .toThrowError(\n            /TimeDistributed .*expects an input shape >= 3D, .* \\[10,.*2\\]/);\n  });\n  it('getConfig and fromConfig: round trip', () => {\n    const wrapper = tfl.layers.timeDistributed({layer: new Dense({units: 3})});\n    const config = wrapper.getConfig();\n    const wrapperPrime = TimeDistributed.fromConfig(TimeDistributed, config);\n    expect(wrapperPrime.getConfig()).toEqual(wrapper.getConfig());\n  });\n});\n\ndescribeMathCPUAndGPU('TimeDistributed Layer: Tensor', () => {\n  it('3D input: Dense', () => {\n    const input = tensor3d(\n        [\n          [[1, 2], [3, 4], [5, 6], [7, 8]],\n          [[-1, -2], [-3, -4], [-5, -6], [-7, -8]]\n        ],\n        [2, 4, 2]);\n    // Given an all-ones Dense kernel and no bias, the output at each timestep\n    // is expected to be [3, 7, 11, 15], give or take a minus sign.\n    const wrapper = tfl.layers.timeDistributed({\n      layer: new Dense({units: 1, kernelInitializer: 'ones', useBias: false})\n    });\n    const output = wrapper.apply(input) as Tensor;\n    expectTensorsClose(\n        output,\n        tensor3d(\n            [[[3], [7], [11], [15]], [[-3], [-7], [-11], [-15]]], [2, 4, 1]));\n  });\n\n  // Reference Python Keras code:\n  // ```py\n  // import keras\n  // import numpy as np\n  //\n  // model_as_layer = keras.Sequential(\n  //     layers=[keras.layers.Dense(\n  //         units=3,\n  //         input_shape=[2, 5],\n  //         kernel_initializer='ones',\n  //         activation='softmax')])\n  //\n  // td = keras.layers.TimeDistributed(\n  //     layer=model_as_layer, input_shape=[2, 5])\n  // model = keras.Sequential(layers=[td])\n  // model.summary()\n  //\n  // xs = np.ones([1, 2, 5])\n  // ys = model.predict(xs)\n  // print(ys)\n  // ```\n  it('LayersModel as constituent layer', () => {\n    const modelAsLayer = tfl.sequential({\n      layers: [tfl.layers.dense({\n        activation: 'softmax',\n        units: 3,\n        inputShape: [2, 5],\n        kernelInitializer: 'ones'\n      })],\n    });\n    const td =\n        tfl.layers.timeDistributed({layer: modelAsLayer, inputShape: [2, 5]});\n    const model = tfl.sequential({layers: [td]});\n    const ys = model.predict(ones([1, 2, 5])) as Tensor;\n    expect(ys.shape).toEqual([1, 2, 3]);\n    expectTensorsClose(ys, tensor3d([[\n                         [0.33333334, 0.33333334, 0.33333334],\n                         [0.33333334, 0.33333334, 0.33333334]\n                       ]]));\n  });\n\n  // Reference Python code:\n  // ```py\n  // import keras\n  // import numpy as np\n  //\n  // input1 = keras.Input(shape=[4])\n  // input2 = keras.Input(shape=[4])\n  // y1 = keras.layers.Embedding(10,\n  //                             3,\n  //                             input_length=4,\n  //                             mask_zero=True,\n  //                             embeddings_initializer='ones')(input1)\n  // y1 = keras.layers.LSTM(3,\n  //                        return_sequences=True,\n  //                        recurrent_initializer='ones',\n  //                        kernel_initializer='ones',\n  //                        bias_initializer='zeros')(y1)\n  // z1 = keras.layers.Embedding(10,\n  //                             3,\n  //                             input_length=4,\n  //                             mask_zero=True,\n  //                             embeddings_initializer='ones')(input2)\n  // z1 = keras.layers.LSTM(3,\n  //                        return_sequences=True,\n  //                        recurrent_initializer='ones',\n  //                        kernel_initializer='ones',\n  //                        bias_initializer='zeros')(z1)\n  // y2 = keras.layers.Dot(axes=[2, 2])([y1, z1])\n  // y3 = keras.layers.Concatenate()([y1, y2])\n  // y3 = keras.layers.TimeDistributed(keras.layers.Dense(\n  //     1,\n  //     kernel_initializer='ones',\n  //     bias_initializer='zeros'))(y3)\n  // model = keras.Model(inputs=[input1, input2], outputs=y3)\n  // model.summary()\n  //\n  // xs1 = np.array([[0, 0, 0, 0], [1, 0, 0, 0], [1, 2, 0, 0], [1, 2, 3, 0]])\n  // xs2 = np.ones([4, 4])\n  // ys = model.predict([xs1, xs2])\n  // print(ys)\n  // ```\n  it('With masking', () => {\n    const input1 = tfl.input({shape: [4]});\n    const input2 = tfl.input({shape: [4]});\n    let y1 = tfl.layers\n                 .embedding({\n                   inputDim: 10,\n                   outputDim: 3,\n                   inputLength: 4,\n                   maskZero: true,\n                   embeddingsInitializer: 'ones'\n                 })\n                 .apply(input1) as SymbolicTensor;\n    y1 = tfl.layers\n             .lstm({\n               units: 3,\n               returnSequences: true,\n               recurrentInitializer: 'ones',\n               kernelInitializer: 'ones',\n               biasInitializer: 'zeros'\n             })\n             .apply(y1) as SymbolicTensor;\n    let z1 = tfl.layers\n                 .embedding({\n                   inputDim: 10,\n                   outputDim: 3,\n                   inputLength: 4,\n                   maskZero: true,\n                   embeddingsInitializer: 'ones'\n                 })\n                 .apply(input2) as SymbolicTensor;\n    z1 = tfl.layers\n             .lstm({\n               units: 3,\n               returnSequences: true,\n               recurrentInitializer: 'ones',\n               kernelInitializer: 'ones',\n               biasInitializer: 'zeros'\n             })\n             .apply(z1) as SymbolicTensor;\n    const y2 = tfl.layers.dot({axes: [2, 2]}).apply([y1, z1]) as SymbolicTensor;\n    let y3 = tfl.layers.concatenate().apply([y1, y2]) as SymbolicTensor;\n    y3 = tfl.layers\n             .timeDistributed({\n               layer: tfl.layers.dense({\n                 units: 1,\n                 kernelInitializer: 'ones',\n                 biasInitializer: 'zeros'\n               })\n             })\n             .apply(y3) as SymbolicTensor;\n    const model = tfl.model({inputs: [input1, input2], outputs: y3});\n\n    const xs1 =\n        tensor2d([[0, 0, 0, 0], [1, 0, 0, 0], [1, 2, 0, 0], [1, 2, 3, 0]]);\n    const xs2 = ones([4, 4]);\n    const ys = model.predict([xs1, xs2]) as Tensor;\n    expectTensorsClose(\n        ys, tensor3d([\n          [[0], [0], [0], [0]],\n          [[10.7489796], [10.7489796], [10.7489796], [10.7489796]],\n          [[10.7489796], [13.6384077], [13.6384077], [13.6384077]],\n          [[10.7489796], [13.6384077], [14.0818386], [14.0818386]]\n        ]));\n  });\n});\n\ndescribeMathCPU('Bidirectional Layer: Symbolic', () => {\n  const mergeModes: BidirectionalMergeMode[] = [\n    null,\n    'concat',\n    'ave',\n    'mul',\n    'sum',\n  ];\n  const returnStateValues: boolean[] = [false, true];\n\n  for (const mergeMode of mergeModes) {\n    for (const returnState of returnStateValues) {\n      const testTitle = `3D input: returnSequence=false, ` +\n          `mergeMode=${mergeMode}; returnState=${returnState}`;\n      it(testTitle, () => {\n        const input =\n            new tfl.SymbolicTensor('float32', [10, 8, 2], null, [], null);\n        const bidi = tfl.layers.bidirectional({\n          layer: new SimpleRNN(\n              {units: 3, recurrentInitializer: 'glorotNormal', returnState}),\n          mergeMode,\n        });\n        // TODO(cais): Remove recurrentInitializer once Orthogonal initializer\n        // is available.\n        let outputs = bidi.apply(input);\n        expect(bidi.trainable).toEqual(true);\n        // {kernel, recurrentKernel, bias} * {forward, backward}.\n        expect(bidi.getWeights().length).toEqual(6);\n        if (!returnState) {\n          if (mergeMode === null) {\n            outputs = outputs as tfl.SymbolicTensor[];\n            expect(outputs.length).toEqual(2);\n            expect(outputs[0].shape).toEqual([10, 3]);\n            expect(outputs[1].shape).toEqual([10, 3]);\n          } else if (mergeMode === 'concat') {\n            outputs = outputs as tfl.SymbolicTensor;\n            expect(outputs.shape).toEqual([10, 6]);\n          } else {\n            outputs = outputs as tfl.SymbolicTensor;\n            expect(outputs.shape).toEqual([10, 3]);\n          }\n        } else {\n          if (mergeMode === null) {\n            outputs = outputs as tfl.SymbolicTensor[];\n            expect(outputs.length).toEqual(4);\n            expect(outputs[0].shape).toEqual([10, 3]);\n            expect(outputs[1].shape).toEqual([10, 3]);\n            expect(outputs[2].shape).toEqual([10, 3]);\n            expect(outputs[3].shape).toEqual([10, 3]);\n          } else if (mergeMode === 'concat') {\n            outputs = outputs as tfl.SymbolicTensor[];\n            expect(outputs.length).toEqual(3);\n            expect(outputs[0].shape).toEqual([10, 6]);\n            expect(outputs[1].shape).toEqual([10, 3]);\n            expect(outputs[2].shape).toEqual([10, 3]);\n          } else {\n            outputs = outputs as tfl.SymbolicTensor[];\n            expect(outputs.length).toEqual(3);\n            expect(outputs[0].shape).toEqual([10, 3]);\n            expect(outputs[1].shape).toEqual([10, 3]);\n            expect(outputs[2].shape).toEqual([10, 3]);\n          }\n        }\n      });\n    }\n  }\n  it('returnSequence=true', () => {\n    const input = new tfl.SymbolicTensor('float32', [10, 8, 2], null, [], null);\n    const bidi = tfl.layers.bidirectional({\n      layer: new SimpleRNN({\n        units: 3,\n        recurrentInitializer: 'glorotNormal',\n        returnSequences: true,\n        returnState: true\n      }),\n      mergeMode: 'ave'\n    });\n    const outputs = bidi.apply(input) as tfl.SymbolicTensor[];\n    expect(outputs.length).toEqual(3);\n    expect(outputs[0].shape).toEqual([10, 8, 3]);\n    expect(outputs[1].shape).toEqual([10, 3]);\n    expect(outputs[2].shape).toEqual([10, 3]);\n  });\n  it('Serialization round trip', () => {\n    const layer = tfl.layers.bidirectional({\n      layer: new SimpleRNN({units: 3}),\n      mergeMode: 'concat',\n      inputShape: [4, 4],\n    });\n    const model = tfl.sequential({layers: [layer]});\n    const unused: {} = null;\n    const modelJSON = model.toJSON(unused, false);\n    const modelPrime = deserialize(\n                           convertPythonicToTs(modelJSON) as\n                           serialization.ConfigDict) as tfl.Sequential;\n    expect((modelPrime.layers[0] as Bidirectional).getConfig().mergeMode)\n        .toEqual('concat');\n  });\n  it('mergeMode defaults to concat', () => {\n    const bidi = tfl.layers.bidirectional({layer: new SimpleRNN({units: 3})});\n    expect(bidi.mergeMode).toEqual('concat');\n    expect(bidi.getConfig().mergeMode).toEqual('concat');\n  });\n});\n\ndescribe('checkBidirectionalMergeMode', () => {\n  it('Valid values', () => {\n    const extendedValues =\n        VALID_BIDIRECTIONAL_MERGE_MODES.concat([undefined, null]);\n    for (const validValue of extendedValues) {\n      // Using implicit \"expect().toNotThrow()\" for valid values\n      checkBidirectionalMergeMode(validValue);\n    }\n  });\n  it('Invalid values', () => {\n    // Test invalid values are rejected, and reported in the error.\n    expect(() => checkBidirectionalMergeMode('foo')).toThrowError(/foo/);\n    try {\n      checkBidirectionalMergeMode('bad');\n    } catch (e) {\n      expect(e).toMatch('BidirectionalMergeMode');\n      // Test that the error message contains the list of valid values.\n      for (const validValue of VALID_BIDIRECTIONAL_MERGE_MODES) {\n        expect(e).toMatch(validValue);\n      }\n    }\n  });\n});\n\ndescribeMathCPUAndGPU('Bidirectional Layer: Tensor', () => {\n  // The golden tensor values used in the tests below can be obtained with\n  // PyKeras code such as the following:\n  // ```python\n  // import keras\n  // import numpy as np\n  //\n  // bidi = keras.layers.Bidirectional(\n  //     keras.layers.SimpleRNN(\n  //         3,\n  //         kernel_initializer='ones',\n  //         recurrent_initializer='ones',\n  //         return_state=True),\n  //     merge_mode='ave')\n  //\n  // time_steps = 4\n  // input_size = 2\n  // inputs = keras.Input([time_steps, input_size])\n  // outputs = bidi(inputs)\n  // model = keras.Model(inputs, outputs)\n  //\n  // x = np.array(\n  //     [[[0.05, 0.05],\n  //       [-0.05, -0.05],\n  //       [0.1, 0.1],\n  //       [-0.1, -0.1]]])\n  // print(model.predict(x))\n  // ```\n\n  // TODO(bileschi): This should be tfl.layers.Layer.\n  let bidi: Layer;\n  let x: Tensor3D;\n  function createLayerAndData(\n      mergeMode: BidirectionalMergeMode, returnState: boolean) {\n    const units = 3;\n    bidi = tfl.layers.bidirectional({\n      layer: new SimpleRNN({\n        units,\n        kernelInitializer: 'ones',\n        recurrentInitializer: 'ones',\n        useBias: false,\n        returnState\n      }),\n      mergeMode,\n    });\n    const timeSteps = 4;\n    const inputSize = 2;\n    x = tensor3d(\n        [[[0.05, 0.05], [-0.05, -0.05], [0.1, 0.1], [-0.1, -0.1]]],\n        [1, timeSteps, inputSize]);\n  }\n\n  const mergeModes: BidirectionalMergeMode[] =\n      [null, undefined, 'concat', 'mul'];\n  for (const mergeMode of mergeModes) {\n    it(`No returnState, mergeMode=${mergeMode}`, () => {\n      createLayerAndData(mergeMode, false);\n      let y = bidi.apply(x);\n      if (mergeMode === null) {\n        y = y as Tensor[];\n        expect(y.length).toEqual(2);\n        expectTensorsClose(\n            y[0], tensor2d([[0.9440416, 0.9440416, 0.9440416]], [1, 3]));\n        expectTensorsClose(\n            y[1], tensor2d([[-0.9842659, -0.9842659, -0.9842659]], [1, 3]));\n      } else if (mergeMode === undefined || mergeMode === 'concat') {\n        y = y as Tensor;\n        expectTensorsClose(\n            y,\n            tensor2d(\n                [[\n                  0.9440416, 0.9440416, 0.9440416, -0.9842659, -0.9842659,\n                  -0.9842659\n                ]],\n                [1, 6]));\n      } else if (mergeMode === 'mul') {\n        y = y as Tensor;\n        expectTensorsClose(\n            y, tensor2d([[-0.929188, -0.929188, -0.929188]], [1, 3]));\n      }\n    });\n  }\n  it('returnState', () => {\n    createLayerAndData('ave', true);\n    const y = bidi.apply(x) as Tensor[];\n    expect(y.length).toEqual(3);\n    expectTensorsClose(\n        y[0], tensor2d([[-0.02011216, -0.02011216, -0.02011216]], [1, 3]));\n    expectTensorsClose(\n        y[1], tensor2d([[0.9440416, 0.9440416, 0.9440416]], [1, 3]));\n    expectTensorsClose(\n        y[2], tensor2d([[-0.9842659, -0.9842659, -0.9842659]], [1, 3]));\n  });\n\n  // The golden values in the test below can be obtained with the following\n  // Python Keras code.\n  //\n  // ```python\n  // import keras\n  // import numpy\n  //\n  // rnn = keras.layers.LSTM(\n  //     1,\n  //     kernel_initializer='ones',\n  //     recurrent_initializer='ones',\n  //     bias_initializer='ones',\n  //     go_backwards=True)\n  // bidi = keras.layers.Bidirectional(\n  //     rnn, merge_mode='concat', input_shape=[2, 2])\n  // model = keras.Sequential([bidi])\n  // model.compile(loss='mean_squared_error', optimizer='sgd')\n  //\n  // x = np.array([[[0.1, 0.2],\n  //               [-0.1, 0.1]]])\n  // y = np.array([[0.3, 0.5]])\n  // print(model.predict(x))\n  //\n  // history = model.fit(x, y)\n  // print(history.history)\n  // ```\n  it('Backwards LSTM: predict and fit: concat', async () => {\n    const lstm = tfl.layers.lstm({\n      units: 1,\n      kernelInitializer: 'ones',\n      recurrentInitializer: 'ones',\n      biasInitializer: 'ones',\n      goBackwards: true\n    }) as RNN;\n    const bidi = tfl.layers.bidirectional(\n        {layer: lstm, inputShape: [2, 2], mergeMode: 'concat'});\n    const model = tfl.sequential({layers: [bidi]});\n    model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n\n    const x = tensor3d([[[0.1, 0.2], [-0.1, 0.1]]]);\n    const y = tensor2d([[0.3, 0.5]]);\n    expectTensorsClose(\n        model.predict(x) as Tensor, tensor2d([[0.69299805, 0.66088]]));\n    const history = await model.fit(x, y);\n    expect(history.history.loss[0]).toBeCloseTo(0.0901649);\n    expectTensorsClose(\n        model.predict(x) as Tensor, tensor2d([[0.6927189, 0.66077083]]));\n  });\n\n  // The golden values in the test below can be obtained with the following\n  // Python Keras code.\n  //\n  // ```python\n  // import keras\n  // import numpy\n  //\n  // rnn = keras.layers.LSTM(\n  //     1,\n  //     kernel_initializer='ones',\n  //     recurrent_initializer='ones',\n  //     bias_initializer='ones',\n  //     go_backwards=True)\n  // bidi = keras.layers.Bidirectional(\n  //     rnn, merge_mode='ave', input_shape=[2, 2])\n  // model = keras.Sequential([bidi])\n  // model.compile(loss='mean_squared_error', optimizer='sgd')\n  //\n  // x = np.array([[[0.1, 0.2],\n  //               [-0.1, 0.1]]])\n  // y = np.array([[0.4]])\n  // print(model.predict(x))\n  //\n  // history = model.fit(x, y)\n  // print(history.history)\n  // ```\n  it('Backwards LSTM: predict and fit: ave', done => {\n    const lstm = tfl.layers.lstm({\n      units: 1,\n      kernelInitializer: 'ones',\n      recurrentInitializer: 'ones',\n      biasInitializer: 'ones',\n      goBackwards: true\n    }) as RNN;\n    const bidi = tfl.layers.bidirectional(\n        {layer: lstm, inputShape: [2, 2], mergeMode: 'ave'});\n    const model = tfl.sequential({layers: [bidi]});\n    model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n\n    const x = tensor3d([[[0.1, 0.2], [-0.1, 0.1]]]);\n    const y = tensor2d([[0.4]]);\n    expectTensorsClose(model.predict(x) as Tensor, tensor2d([[0.676939]]));\n    model.fit(x, y)\n        .then(history => {\n          expect(history.history.loss[0]).toBeCloseTo(0.0766952);\n          expectTensorsClose(\n              model.predict(x) as Tensor, tensor2d([[0.6767467]]));\n          done();\n        })\n        .catch(err => {\n          done.fail(err.stack);\n        });\n  });\n});\n\ndescribeMathCPUAndGPU('Bidirectional with initial state', () => {\n  const sequenceLength = 4;\n  const recurrentUnits = 3;\n  const inputDim = 2;\n\n  function createLayerAndTensors(): {\n    bidiLayer: Bidirectional,\n    initState1: SymbolicTensor,\n    initState2: SymbolicTensor,\n    inputTensor: SymbolicTensor,\n    outputTensors: SymbolicTensor[],\n  } {\n    const initState1 = tfl.input({shape: [recurrentUnits]});\n    const initState2 = tfl.input({shape: [recurrentUnits]});\n    const inputTensor = tfl.input({shape: [sequenceLength, inputDim]});\n    const bidiLayer = tfl.layers.bidirectional({\n      layer: tfl.layers.gru({\n        units: recurrentUnits,\n        kernelInitializer: 'zeros',\n        recurrentInitializer: 'zeros',\n        biasInitializer: 'ones'\n      }) as RNN,\n      mergeMode: null,\n    });\n    const outputTensors =\n        bidiLayer.apply(\n            inputTensor, {initialState: [initState1, initState2]}) as\n        SymbolicTensor[];\n    return {bidiLayer, initState1, initState2, inputTensor, outputTensors};\n  }\n\n  it('Correct shapes', () => {\n    const layerAndTensors = createLayerAndTensors();\n    expect(layerAndTensors.outputTensors.length).toEqual(2);\n    expect(layerAndTensors.outputTensors[0].shape).toEqual([\n      null, recurrentUnits\n    ]);\n    expect(layerAndTensors.outputTensors[1].shape).toEqual([\n      null, recurrentUnits\n    ]);\n  });\n\n  it('apply() with concrete tensors', () => {\n    const layerAndTensors = createLayerAndTensors();\n    const xVal = ones([1, sequenceLength, inputDim]);\n    const initState1Val = ones([1, recurrentUnits]).mul(scalar(-1));\n    const initState2Val = ones([1, recurrentUnits]);\n    const yVals =\n        layerAndTensors.bidiLayer.apply(\n            xVal, {initialState: [initState1Val, initState2Val]}) as Tensor[];\n    expect(yVals.length).toEqual(2);\n    expectTensorsClose(\n        yVals[0], tensor2d([[0.33863544, 0.33863544, 0.33863544]]));\n    expectTensorsClose(yVals[1], tensor2d([[0.8188354, 0.8188354, 0.8188354]]));\n  });\n\n  it('LayersModel predict', () => {\n    const layerAndTensors = createLayerAndTensors();\n    const model = tfl.model({\n      inputs: [\n        layerAndTensors.inputTensor, layerAndTensors.initState1,\n        layerAndTensors.initState2\n      ],\n      outputs: layerAndTensors.outputTensors\n    });\n    const xVal = ones([1, sequenceLength, inputDim]);\n    const initState1Val = ones([1, recurrentUnits]).mul(scalar(-1));\n    const initState2Val = ones([1, recurrentUnits]);\n    const yVals =\n        model.predict([xVal, initState1Val, initState2Val]) as Tensor[];\n    expect(yVals.length).toEqual(2);\n    expectTensorsClose(\n        yVals[0], tensor2d([[0.33863544, 0.33863544, 0.33863544]]));\n    expectTensorsClose(yVals[1], tensor2d([[0.8188354, 0.8188354, 0.8188354]]));\n  });\n\n  it('LayersModel serialization round trip', () => {\n    // Disable the console warning about the unserialization SymbolicTensor in\n    // the CallArgs.\n    spyOn(console, 'warn');\n    const layerAndTensors = createLayerAndTensors();\n    const model = tfl.model({\n      inputs: [\n        layerAndTensors.inputTensor, layerAndTensors.initState1,\n        layerAndTensors.initState2\n      ],\n      outputs: layerAndTensors.outputTensors\n    });\n    const json1 = model.toJSON(null, false);\n    const model2 =\n        deserialize(convertPythonicToTs(json1) as serialization.ConfigDict) as\n        LayersModel;\n    const json2 = model2.toJSON(null, false);\n    expect(json2).toEqual(json1);\n  });\n\n  it('Incorrect number of initial-state tensors leads to error', () => {\n    const initState1 = tfl.input({shape: [recurrentUnits]});\n    const x = tfl.input({shape: [sequenceLength, inputDim]});\n    const bidi = tfl.layers.bidirectional({\n      layer: tfl.layers.gru({\n        units: recurrentUnits,\n      }) as RNN,\n      mergeMode: null,\n    });\n    expect(() => bidi.apply(x, {\n      initialState: [initState1]\n    })).toThrowError(/the state should be .*RNNs/);\n  });\n});\n\ndescribeMathCPUAndGPU('Bidirectional with masking', () => {\n  for (const rnnLayerType of [tfl.layers.simpleRNN, tfl.layers.lstm]) {\n    // Reference Python TensorFlow code (v1.15.0):\n    // ```py\n    // import numpy as np\n    // import tensorflow as tf\n    //\n    // tf.enable_v2_behavior()\n    // tf.enable_eager_execution()\n    //\n    // model = tf.keras.Sequential()\n    // model.add(tf.keras.layers.Embedding(\n    //     3, 3, input_length=2, embeddings_initializer=\"ones\", mask_zero=True))\n    // model.add(tf.keras.layers.Bidirectional(tf.keras.layers.SimpleRNN(\n    //     4,\n    //     kernel_initializer=\"ones\",\n    //     recurrent_initializer=\"ones\")))\n    // model.add(tf.keras.layers.Dense(1, kernel_initializer=\"ones\"))\n    //\n    // xs = np.array([[0, 1], [0, 2], [0, 0], [1, 2]], dtype=np.int32)\n    // print(model.predict(xs))\n    // ```\n    it(`Inference ${rnnLayerType.name}`, () => {\n      const model = tfl.sequential();\n      model.add(tfl.layers.embedding({\n        inputLength: 2,\n        inputDim: 3,\n        outputDim: 3,\n        embeddingsInitializer: 'ones',\n        maskZero: true\n      }));\n      model.add(tfl.layers.bidirectional({\n        layer: rnnLayerType({\n                 units: 4,\n                 kernelInitializer: 'ones',\n                 recurrentInitializer: 'ones'\n               }) as RNN\n      }));\n      model.add(tfl.layers.dense({\n        units: 1,\n        kernelInitializer: 'ones',\n      }));\n      const xs = tensor2d([[0, 1], [0, 2], [0, 0], [1, 2]]);\n      const ys = model.predict(xs) as Tensor;\n      if (rnnLayerType.name === 'lstm') {\n        expectTensorsClose(\n            ys, tensor2d([[6.076076], [6.076076], [0], [7.709405]]));\n      } else if (rnnLayerType.name === 'simpleRNN') {\n        expectTensorsClose(\n            ys, tensor2d([[7.960438], [7.960438], [0], [7.9999857]]));\n      } else {\n        throw new Error(`Unexpected rnnLayerType name: ${rnnLayerType.name}`);\n      }\n    });\n\n    // Reference Python TensorFlow code (v1.15.0):\n    // ```py\n    // import numpy as np\n    // import tensorflow as tf\n    //\n    // tf.enable_v2_behavior()\n    // tf.enable_eager_execution()\n    //\n    // model = tf.keras.Sequential()\n    // model.add(tf.keras.layers.Embedding(\n    //     3, 3, input_length=2, embeddings_initializer=\"ones\", mask_zero=True))\n    // model.add(tf.keras.layers.Bidirectional(tf.keras.layers.SimpleRNN(\n    //     4,\n    //     kernel_initializer=\"ones\",\n    //     recurrent_initializer=\"ones\")))\n    // model.add(tf.keras.layers.Dense(1, kernel_initializer=\"ones\"))\n    // model.compile(optimizer=\"sgd\", loss=\"mse\")\n    //\n    // xs = np.array([[0, 1], [0, 2], [0, 0], [1, 2]], dtype=np.int32)\n    // ys = np.array([[0], [0], [0], [0]], dtype=np.float32)\n    // history = model.fit(xs, ys, epochs=5)\n    // print(history.history)\n    // ```\n    it(`Training ${rnnLayerType.name}`, async () => {\n      const model = tfl.sequential();\n      model.add(tfl.layers.embedding({\n        inputLength: 2,\n        inputDim: 3,\n        outputDim: 3,\n        embeddingsInitializer: 'ones',\n        maskZero: true\n      }));\n      model.add(tfl.layers.bidirectional({\n        layer: rnnLayerType({\n                 units: 4,\n                 kernelInitializer: 'ones',\n                 recurrentInitializer: 'ones'\n               }) as RNN\n      }));\n      model.add(tfl.layers.dense({\n        units: 1,\n        kernelInitializer: 'ones',\n      }));\n      model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n      const xs = tensor2d([[0, 1], [0, 2], [0, 0], [1, 2]]);\n      const ys = tensor2d([[0], [0], [0], [0]]);\n      const history = await model.fit(xs, ys, {epochs: 5});\n      if (rnnLayerType.name === 'lstm') {\n        expectTensorsClose(\n            history.history['loss'] as number[],\n            [33.318, 27.104, 22.058, 17.961, 14.634]);\n      } else if (rnnLayerType.name === 'simpleRNN') {\n        expectTensorsClose(\n            history.history['loss'] as number[],\n            [47.684, 35.741, 26.804, 20.115, 15.108]);\n      } else {\n        throw new Error(`Unexpected rnnLayerType name:\n          ${rnnLayerType.name}`);\n      }\n    });\n  }\n});\n"]}