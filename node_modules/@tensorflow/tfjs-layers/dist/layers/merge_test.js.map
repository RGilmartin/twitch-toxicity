{"version":3,"file":"merge_test.js","sourceRoot":"","sources":["../../src/layers/merge_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Unit tests for core.ts.\n */\n\nimport {ones, serialization, Tensor, tensor1d, Tensor2D, tensor2d, tensor3d} from '@tensorflow/tfjs-core';\n\nimport {SymbolicTensor} from '../engine/topology';\nimport * as tfl from '../index';\nimport {Shape} from '../keras_format/common';\nimport {deserialize} from '../layers/serialization';\nimport {convertPythonicToTs, convertTsToPythonic} from '../utils/serialization_utils';\nimport {describeMathCPU, describeMathCPUAndGPU, expectTensorsClose} from '../utils/test_utils';\n\nimport {Add, Average, Concatenate, Maximum, Minimum, Multiply} from './merge';\n\ndescribeMathCPU('Merge Layers Except Concatenate: Symbolic', () => {\n  const layers = [Add, Average, Multiply, Maximum, Minimum];\n  const symbolicInputShapes: Shape[] = [\n    [10, 3],\n    [10, 2, 2],\n  ];\n  const numInputsArray: number[] = [2, 4];\n\n  for (const layer of layers) {\n    for (const inputShape of symbolicInputShapes) {\n      for (const numInputs of numInputsArray) {\n        const testTitle =\n            `layer=${layer.name}; inputShape=${JSON.stringify(inputShape)}; ` +\n            `numInputs=${numInputs}`;\n        it(testTitle, () => {\n          const addLayer = new layer({name: layer.name});\n          const symbolicInputs: tfl.SymbolicTensor[] = [];\n          for (let i = 0; i < numInputs; ++i) {\n            symbolicInputs.push(\n                new tfl.SymbolicTensor('float32', inputShape, null, [], null));\n          }\n          const output = addLayer.apply(symbolicInputs) as tfl.SymbolicTensor;\n          expect(output.dtype).toEqual(symbolicInputs[0].dtype);\n          expect(output.shape).toEqual(inputShape);\n        });\n      }\n    }\n  }\n\n  it('Single input leads to exception', () => {\n    const x = new tfl.SymbolicTensor('float32', [2, 2], null, [], null);\n    const addLayer = tfl.layers.add({name: 'Add'});\n    expect(() => {\n      addLayer.apply([x]);\n    }).toThrowError(/.*at least 2 inputs\\. Got 1 input.*/);\n  });\n\n  it('Non-unique batch sizes to exception', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [1, 2], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [2, 2], null, [], null);\n    const addLayer = tfl.layers.add({name: 'Add'});\n    expect(() => {\n      addLayer.apply([x1, x2]);\n    }).toThrowError(/Can not merge tensors with different batch sizes/);\n  });\n});\n\ndescribeMathCPUAndGPU('Add-Functional', () => {\n  it('Calling without arg returns Layer', () => {\n    expect((tfl.layers.add()).getClassName()).toEqual('Add');\n  });\n\n  it('Calling with config arg returns Layer', () => {\n    expect((tfl.layers.add({name: 'addLayer'})).name.indexOf('addLayer'))\n        .toEqual(0);\n  });\n\n  it('Calling with symbolic tensors returns symbolic tensor', () => {\n    const input1 = tfl.layers.input({shape: [2, 2]});\n    const input2 = tfl.layers.input({shape: [2, 2]});\n    const output =\n        tfl.layers.add().apply([input1, input2]) as tfl.SymbolicTensor;\n    expect(output.shape).toEqual([null, 2, 2]);\n  });\n\n  it('Calling with tensors returns tensor', () => {\n    const input1 = tensor2d([1, 2, 3, 4], [2, 2]);\n    const input2 = tensor2d([10, 20, 30, 40], [2, 2]);\n    const output = tfl.layers.add().apply([input1, input2]) as Tensor;\n    expectTensorsClose(output, tensor2d([11, 22, 33, 44], [2, 2]));\n  });\n\n  it('predict() with functional model with Add layer works', () => {\n    const input = tfl.layers.input({shape: [24, 24, 3]});\n    const conv1 =\n        tfl.layers.conv2d({filters: 4, kernelSize: [3, 3]}).apply(input) as\n        tfl.SymbolicTensor;\n    const conv2 =\n        tfl.layers.conv2d({filters: 4, kernelSize: [3, 3]}).apply(input) as\n        tfl.SymbolicTensor;\n    const sum = tfl.layers.add().apply([conv1, conv2]) as tfl.SymbolicTensor;\n    const model = tfl.model({inputs: [input], outputs: sum});\n    const x = ones([1, 24, 24, 3]);\n    const y = model.predict(x) as Tensor;\n    expect(y.shape).toEqual([1, 22, 22, 4]);\n  });\n});\n\ndescribeMathCPUAndGPU('Multiply-Functional', () => {\n  it('Calling without arg returns Layer', () => {\n    expect(tfl.layers.multiply().getClassName()).toEqual('Multiply');\n  });\n\n  it('Calling with config arg returns Layer', () => {\n    expect(tfl.layers.multiply({name: 'multiplyLayer'})\n               .name.indexOf('multiplyLayer'))\n        .toEqual(0);\n  });\n\n  it('Calling with symbolic tensors returns symbolic tensor', () => {\n    const input1 = tfl.layers.input({shape: [2, 2]});\n    const input2 = tfl.layers.input({shape: [2, 2]});\n    const output =\n        tfl.layers.multiply().apply([input1, input2]) as tfl.SymbolicTensor;\n    expect(output.shape).toEqual([null, 2, 2]);\n  });\n\n  it('Calling with tensors returns tensor', () => {\n    const input1 = tensor2d([1, 2, 3, 4], [2, 2]);\n    const input2 = tensor2d([10, 20, 30, 40], [2, 2]);\n    const output = tfl.layers.multiply().apply([input1, input2]) as Tensor;\n    expectTensorsClose(output, tensor2d([10, 40, 90, 160], [2, 2]));\n  });\n});\n\ndescribeMathCPUAndGPU('Average-Functional', () => {\n  it('Calling without arg returns Layer', () => {\n    expect(tfl.layers.average().getClassName()).toEqual('Average');\n  });\n\n  it('Calling with config arg returns Layer', () => {\n    expect(\n        tfl.layers.average({name: 'averageLayer'}).name.indexOf('averageLayer'))\n        .toEqual(0);\n  });\n\n  it('Calling with symbolic tensors returns symbolic tensor', () => {\n    const input1 = tfl.layers.input({shape: [2, 2]});\n    const input2 = tfl.layers.input({shape: [2, 2]});\n    const output =\n        tfl.layers.average().apply([input1, input2]) as tfl.SymbolicTensor;\n    expect(output.shape).toEqual([null, 2, 2]);\n  });\n\n  it('Calling with tensors returns tensor', () => {\n    const input1 = tensor2d([1, 2, 3, 4], [2, 2]);\n    const input2 = tensor2d([10, 20, 30, 40], [2, 2]);\n    const output = tfl.layers.average().apply([input1, input2]) as Tensor;\n    expectTensorsClose(output, tensor2d([5.5, 11, 16.5, 22], [2, 2]));\n  });\n});\n\ndescribeMathCPUAndGPU('Maximum-Functional', () => {\n  it('Calling without arg returns Layer', () => {\n    expect(tfl.layers.maximum().getClassName()).toEqual('Maximum');\n  });\n\n  it('Calling with config arg returns Layer', () => {\n    expect(\n        tfl.layers.maximum({name: 'maximumLayer'}).name.indexOf('maximumLayer'))\n        .toEqual(0);\n  });\n\n  it('Calling with symbolic tensors returns symbolic tensor', () => {\n    const input1 = tfl.layers.input({shape: [2, 2]});\n    const input2 = tfl.layers.input({shape: [2, 2]});\n    const output =\n        tfl.layers.maximum().apply([input1, input2]) as tfl.SymbolicTensor;\n    expect(output.shape).toEqual([null, 2, 2]);\n  });\n\n  it('Calling with tensors returns tensor', () => {\n    const input1 = tensor2d([1, 20, 3, 40], [2, 2]);\n    const input2 = tensor2d([10, 2, 30, 4], [2, 2]);\n    const output = tfl.layers.maximum().apply([input1, input2]) as Tensor;\n    expectTensorsClose(output, tensor2d([10, 20, 30, 40], [2, 2]));\n  });\n});\n\ndescribeMathCPUAndGPU('Minimum-Functional', () => {\n  it('Calling without arg returns Layer', () => {\n    expect(tfl.layers.minimum().getClassName()).toEqual('Minimum');\n  });\n\n  it('Calling with config arg returns Layer', () => {\n    expect(\n        tfl.layers.minimum({name: 'minimumLayer'}).name.indexOf('minimumLayer'))\n        .toEqual(0);\n  });\n\n  it('Calling with symbolic tensors returns symbolic tensor', () => {\n    const input1 = tfl.layers.input({shape: [2, 2]});\n    const input2 = tfl.layers.input({shape: [2, 2]});\n    const output =\n        tfl.layers.minimum().apply([input1, input2]) as tfl.SymbolicTensor;\n    expect(output.shape).toEqual([null, 2, 2]);\n  });\n\n  it('Calling with tensors returns tensor', () => {\n    const input1 = tensor2d([1, 20, 3, 40], [2, 2]);\n    const input2 = tensor2d([10, 2, 30, 4], [2, 2]);\n    const output = tfl.layers.minimum().apply([input1, input2]) as Tensor;\n    expectTensorsClose(output, tensor2d([1, 2, 3, 4], [2, 2]));\n  });\n});\n\ndescribeMathCPUAndGPU('Concatenate-Functional', () => {\n  it('Calling without arg returns Layer', () => {\n    expect(tfl.layers.concatenate().getClassName()).toEqual('Concatenate');\n  });\n\n  it('Calling with config arg returns Layer', () => {\n    expect(tfl.layers.concatenate({name: 'concatenateLayer'})\n               .name.indexOf('concatenateLayer'))\n        .toEqual(0);\n  });\n\n  it('Calling with symbolic tensors returns symbolic tensor', () => {\n    const input1 = tfl.layers.input({shape: [2, 3]});\n    const input2 = tfl.layers.input({shape: [2, 4]});\n    const output =\n        tfl.layers.concatenate().apply([input1, input2]) as tfl.SymbolicTensor;\n    expect(output.shape).toEqual([null, 2, 7]);\n  });\n\n  it('Calling with tensors returns tensor', () => {\n    const input1 = tensor2d([[1, 2], [3, 4]], [2, 2]);\n    const input2 = tensor2d([[10, 20], [30, 40]], [2, 2]);\n    const output = tfl.layers.concatenate().apply([input1, input2]) as Tensor;\n    expectTensorsClose(\n        output, tensor2d([[1, 2, 10, 20], [3, 4, 30, 40]], [2, 4]));\n  });\n});\n\ndescribeMathCPU('Concatenate Layer: Symbolic', () => {\n  it('All known shapes', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [2, 3, 4], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [2, 3, 4], null, [], null);\n    const layer0 = tfl.layers.concatenate({});\n    expect((layer0.apply([x1, x2]) as tfl.SymbolicTensor).shape).toEqual([\n      2, 3, 8\n    ]);\n    const layer1 = tfl.layers.concatenate({axis: -1});\n    expect((layer1.apply([x1, x2]) as tfl.SymbolicTensor).shape).toEqual([\n      2, 3, 8\n    ]);\n    const layer2 = tfl.layers.concatenate({axis: 0});\n    expect((layer2.apply([x1, x2]) as tfl.SymbolicTensor).shape).toEqual([\n      4, 3, 4\n    ]);\n    const layer3 = tfl.layers.concatenate({axis: 1});\n    expect((layer3.apply([x1, x2]) as tfl.SymbolicTensor).shape).toEqual([\n      2, 6, 4\n    ]);\n  });\n  it('Concat axis has unknown shape', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [2, null, 4], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [2, null, 4], null, [], null);\n    const layer = tfl.layers.concatenate({axis: 1});\n    expect((layer.apply([x1, x2]) as tfl.SymbolicTensor).shape).toEqual([\n      2, null, 4\n    ]);\n  });\n  it('Non-concat axis has unknown shape', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [null, 3, 4], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [null, 5, 4], null, [], null);\n    const layer = tfl.layers.concatenate({axis: 1});\n    expect((layer.apply([x1, x2]) as tfl.SymbolicTensor).shape).toEqual([\n      null, 8, 4\n    ]);\n  });\n  it('Incompatible shape leads to error', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [2, 3, 5], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [2, 4, 5], null, [], null);\n    const layer = tfl.layers.concatenate({});\n    expect(() => layer.apply([\n      x1, x2\n    ])).toThrowError(/requires inputs with matching shapes except/);\n  });\n  it('Single shape leads to error', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [2, 3, 5], null, [], null);\n    const layer = tfl.layers.concatenate({});\n    expect(() => layer.apply([x1]))\n        .toThrowError(/should be called on a list of at least 2 inputs/);\n  });\n  it('Serialization round trip', () => {\n    const layer = tfl.layers.concatenate({axis: 2});\n    const pythonicConfig = convertTsToPythonic(layer.getConfig());\n    // tslint:disable-next-line:no-any\n    const tsConfig = convertPythonicToTs(pythonicConfig) as any;\n    const layerPrime = tfl.layers.concatenate(tsConfig);\n    expect(layerPrime.getConfig().axis).toEqual(2);\n  });\n});\n\ndescribeMathCPUAndGPU('Add Layer: Tensor', () => {\n  it('2D plus 2D', () => {\n    const x1 = tensor2d([[10, 20], [30, 40]], [2, 2]);\n    const x2 = tensor2d([[-1, -2], [-3, -4]], [2, 2]);\n    const addLayer = tfl.layers.add({});\n    const y = addLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(y, tensor2d([[9, 18], [27, 36]], [2, 2]));\n  });\n  it('2D plus 2D, with broadcast', () => {\n    const x1 = tensor2d([[10, 20], [30, 40]], [2, 2]);\n    const x2 = tensor2d([[-2], [-4]], [2, 1]);\n    const addLayer = tfl.layers.add({});\n    const y = addLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(y, tensor2d([[8, 18], [26, 36]], [2, 2]));\n  });\n  it('2D plus 2D, with dimension expansion', () => {\n    const x1 =\n        tensor3d([[[10, 20], [30, 40]], [[50, 60], [70, 80]]], [2, 2, 2]);\n    const x2 = tensor2d([[-2], [-4]], [2, 1]);\n    const addLayer = tfl.layers.add({});\n    const y = addLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(\n        y, tensor3d([[[8, 18], [28, 38]], [[46, 56], [66, 76]]], [2, 2, 2]));\n  });\n  it('computeMask', () => {\n    const x1 = tensor2d([[10, 20], [30, 40]]);\n    const x2 = tensor2d([[-2, -1], [-4, -3]]);\n    const addLayer = tfl.layers.add({});\n    const m1 = tensor1d([true, false], 'bool');\n    const m2 = tensor1d([true, true], 'bool');\n    const mask = addLayer.computeMask([x1, x2], [m1, m2]);\n    expectTensorsClose(mask, tensor2d([[true, false]], [1, 2], 'bool'));\n  });\n  it('computeMask error condition: non-array input', () => {\n    const x1 = tensor2d([[10, 20], [30, 40]]);\n    const x2 = tensor2d([[-2, -1], [-4, -3]]);\n    const addLayer = tfl.layers.add({});\n    const m1 = tensor1d([true, false], 'bool');\n    const m2 = tensor1d([true, true], 'bool');\n    expect(() => addLayer.computeMask(x1, [\n      m1, m2\n    ])).toThrowError(/inputs.*should be an Array/);\n    expect(() => addLayer.computeMask([x1, x2], m1))\n        .toThrowError(/mask.*should be an Array/);\n  });\n  it('computeMask error condition: incorrect number of masks', () => {\n    const x1 = tensor2d([[10, 20], [30, 40]]);\n    const x2 = tensor2d([[-2, -1], [-4, -3]]);\n    const addLayer = tfl.layers.add({});\n    const m1 = tensor1d([true, false], 'bool');\n    expect(() => addLayer.computeMask([x1, x2], [m1]))\n        .toThrowError(/ are expected to have the same/);\n  });\n});\n\ndescribeMathCPUAndGPU('Multiply Layer: Tensor', () => {\n  it('2D times 2D', () => {\n    const x1 = tensor2d([[10, 20], [30, 40]], [2, 2]);\n    const x2 = tensor2d([[-1, -2], [-3, -4]], [2, 2]);\n    const multipyLayer = tfl.layers.multiply({});\n    const y = multipyLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(y, tensor2d([[-10, -40], [-90, -160]], [2, 2]));\n  });\n  // TODO(cais): Reinstate when this issue is fixed:\n  //   https://github.com/PAIR-code/deeplearnjs/issues/457\n  // it('2D times 2D, with broadcast', () => {\n  //   const x1 = tensor2d([[10, 20], [30, 40]], [2, 2]);\n  //   const x2 = tensor2d([[-2], [-4]], [2, 1]);\n  //   const multiplyLayer = new Multiply({});\n  //   const y = multiplyLayer.apply([x1, x2]) as Tensor;\n  //   expectTensorsClose(y, tensor2d([[-20, -40], [-120, -160]], [2, 2]));\n  // });\n});\n\ndescribeMathCPUAndGPU('Average Layer: Tensor', () => {\n  it('2D and 2D', () => {\n    const x1 = tensor2d([[10, 20], [30, 40]], [2, 2]);\n    const x2 = tensor2d([[-2, -4], [-6, -8]], [2, 2]);\n    const averageLayer = tfl.layers.average({});\n    const y = averageLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(y, tensor2d([[4, 8], [12, 16]], [2, 2]));\n  });\n  it('2D and 2D, with broadcast', () => {\n    const x1 = tensor2d([[10, 20], [30, 40]], [2, 2]);\n    const x2 = tensor2d([[-2], [-4]], [2, 1]);\n    const averageLayer = tfl.layers.average({});\n    const y = averageLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(y, tensor2d([[4, 9], [13, 18]], [2, 2]));\n  });\n});\n\ndescribeMathCPUAndGPU('Maximum Layer: Tensor', () => {\n  it('2D and 2D', () => {\n    const x1 = tensor2d([[10, 20], [-6, -8]], [2, 2]);\n    const x2 = tensor2d([[-2, -4], [30, 40]], [2, 2]);\n    const averageLayer = tfl.layers.maximum({});\n    const y = averageLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(y, tensor2d([[10, 20], [30, 40]], [2, 2]));\n  });\n});\n\ndescribeMathCPUAndGPU('Minimum Layer: Tensor', () => {\n  it('2D and 2D', () => {\n    const x1 = tensor2d([[10, 20], [-6, -8]], [2, 2]);\n    const x2 = tensor2d([[-2, -4], [30, 40]], [2, 2]);\n    const averageLayer = tfl.layers.minimum({});\n    const y = averageLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(y, tensor2d([[-2, -4], [-6, -8]], [2, 2]));\n  });\n});\n\ndescribeMathCPUAndGPU('Concatenate Layer: Tensor', () => {\n  let x1: Tensor2D;\n  let x2: Tensor2D;\n\n  function createData() {\n    x1 = tensor2d([1, 2, 3, 4], [2, 2]);\n    x2 = tensor2d([-1, -2, -3, -4], [2, 2]);\n  }\n\n  const axisValues: number[] = [null, undefined, 0, 1, -1];\n  for (const axis of axisValues) {\n    it(`axis=${axis}`, () => {\n      createData();\n      const layer = tfl.layers.concatenate({axis});\n      const expected = axis === 0 ?\n          tensor2d([1, 2, 3, 4, -1, -2, -3, -4], [4, 2]) :\n          tensor2d([1, 2, -1, -2, 3, 4, -3, -4], [2, 4]);\n      expectTensorsClose(layer.apply([x1, x2]) as Tensor, expected);\n    });\n  }\n\n  it('computeMask', () => {\n    const layer = tfl.layers.concatenate();\n    const x1 = tensor2d([[1], [0], [1]]);\n    const x2 = tensor2d([[1], [0], [0]]);\n    const mask =\n        layer.computeMask([x1, x2], [x1.asType('bool'), x2.asType('bool')]);\n    expectTensorsClose(mask, tensor1d([true, false, false], 'bool'));\n  });\n\n  // Reference Python code:\n  // ```py\n  // import keras\n  // import numpy as np\n  //\n  // input1 = keras.Input(shape=[4])\n  // input2 = keras.Input(shape=[4])\n  // y1 = keras.layers.Embedding(10,\n  //                             3,\n  //                             input_length=4,\n  //                             mask_zero=True,\n  //                             embeddings_initializer='ones')(input1)\n  // y1 = keras.layers.LSTM(3,\n  //                       recurrent_initializer='ones',\n  //                       kernel_initializer='ones',\n  //                       bias_initializer='zeros')(y1)\n  // y2 = keras.layers.Embedding(10,\n  //                             3,\n  //                             input_length=4,\n  //                             mask_zero=True,\n  //                             embeddings_initializer='ones')(input2)\n  // y2 = keras.layers.LSTM(3,\n  //                       recurrent_initializer='ones',\n  //                       kernel_initializer='ones',\n  //                       bias_initializer='zeros')(y2)\n  //\n  // y = keras.layers.Concatenate()([y1, y2])\n  // y = keras.layers.Dense(1,\n  //                       kernel_initializer='ones',\n  //                       bias_initializer='zeros')(y)\n  //\n  // model = keras.Model(inputs=[input1, input2], outputs=y)\n  // model.summary()\n  //\n  // xs1 = np.array([[0, 0, 0, 0],\n  //                 [1, 0, 0, 0],\n  //                 [1, 2, 0, 0],\n  //                 [1, 2, 3, 0]])\n  // xs2 = np.array([[0, 0, 0, 0],\n  //                 [0, 0, 0, 0],\n  //                 [1, 0, 0, 0],\n  //                 [1, 2, 0, 0]])\n  //\n  // ys = model.predict([xs1, xs2])\n  // print(ys)\n  // ```\n  it('With masking', () => {\n    const input1 = tfl.input({shape: [4]});\n    const input2 = tfl.input({shape: [4]});\n    let y1 = tfl.layers\n                 .embedding({\n                   inputDim: 10,\n                   outputDim: 3,\n                   inputLength: 4,\n                   maskZero: true,\n                   embeddingsInitializer: 'ones'\n                 })\n                 .apply(input1) as SymbolicTensor;\n    y1 = tfl.layers\n             .lstm({\n               units: 3,\n               recurrentInitializer: 'ones',\n               kernelInitializer: 'ones',\n               biasInitializer: 'zeros'\n             })\n             .apply(y1) as SymbolicTensor;\n    let y2 = tfl.layers\n                 .embedding({\n                   inputDim: 10,\n                   outputDim: 3,\n                   inputLength: 4,\n                   maskZero: true,\n                   embeddingsInitializer: 'ones'\n                 })\n                 .apply(input2) as SymbolicTensor;\n    y2 = tfl.layers\n             .lstm({\n               units: 3,\n               recurrentInitializer: 'ones',\n               kernelInitializer: 'ones',\n               biasInitializer: 'zeros'\n             })\n             .apply(y2) as SymbolicTensor;\n    let y = tfl.layers.concatenate().apply([y1, y2]) as SymbolicTensor;\n    y = tfl.layers\n            .dense(\n                {units: 1, kernelInitializer: 'ones', biasInitializer: 'zeros'})\n            .apply(y) as SymbolicTensor;\n    const model = tfl.model({inputs: [input1, input2], outputs: y});\n\n    const xs1 =\n        tensor2d([[0, 0, 0, 0], [1, 0, 0, 0], [1, 2, 0, 0], [1, 2, 3, 0]]);\n    // Notice the mask of xs2 is different from that of xs1.\n    const xs2 =\n        tensor2d([[0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0], [1, 2, 0, 0]]);\n    const ys = model.predict([xs1, xs2]) as Tensor;\n    expectTensorsClose(\n        ys, tensor2d([[0], [2.2785282], [5.169547], [5.8760333]]));\n  });\n});\n\ndescribeMathCPU('Deserialize Merge Layers', () => {\n  it('LayersModel with Add Layer', () => {\n    // The following model config JSON can be obtained with Python code:\n    // ```python\n    // import keras\n    //\n    // input1 = keras.Input(shape=[4])\n    // input2 = keras.Input(shape=[4])\n    //\n    // output = keras.layers.add([input1, input2])\n    // model = keras.Model([input1, input2], output)\n    //\n    // model_json = model.to_json()\n    // print(model_json)\n\n    const modelWithMergeJSON: {} = {\n      'class_name': 'Model',\n      'keras_version': '2.1.5',\n      'config': {\n        'layers': [\n          {\n            'class_name': 'InputLayer',\n            'config': {\n              'dtype': 'float32',\n              'batch_input_shape': [null, 4],\n              'name': 'input_1',\n              'sparse': false\n            },\n            'inbound_nodes': [],\n            'name': 'input_1'\n          },\n          {\n            'class_name': 'InputLayer',\n            'config': {\n              'dtype': 'float32',\n              'batch_input_shape': [null, 4],\n              'name': 'input_2',\n              'sparse': false\n            },\n            'inbound_nodes': [],\n            'name': 'input_2'\n          },\n          {\n            'class_name': 'Add',\n            'config': {'trainable': true, 'name': 'add_1'},\n            'inbound_nodes': [[['input_1', 0, 0, {}], ['input_2', 0, 0, {}]]],\n            'name': 'add_1'\n          }\n        ],\n        'input_layers': [['input_1', 0, 0], ['input_2', 0, 0]],\n        'output_layers': [['add_1', 0, 0]],\n        'name': 'model_1'\n      },\n      'backend': 'tensorflow'\n    };\n\n    const tsConfig =\n        convertPythonicToTs(modelWithMergeJSON) as serialization.ConfigDict;\n    const model = deserialize(tsConfig) as tfl.LayersModel;\n    expect(model.inputs.length).toEqual(2);\n    expect(model.inputs[0].shape).toEqual([null, 4]);\n    expect(model.inputs[1].shape).toEqual([null, 4]);\n    expect(model.layers.length).toEqual(3);\n    expect(model.layers[2] instanceof Add);\n    expect(model.outputs.length).toEqual(1);\n    expect(model.outputs[0].shape).toEqual([null, 4]);\n  });\n\n  it('LayersModel with Concatenate Layer', () => {\n    // The following model config JSON can be obtained with Python code:\n    // ```python\n    // import keras\n    //\n    // input1 = keras.Input(shape=[4])\n    // input2 = keras.Input(shape=[4])\n    //\n    // output = keras.layers.concatenate([input1, input2])\n    // model = keras.Model([input1, input2], output)\n    //\n    // model_json = model.to_json()\n    // print(model_json)\n\n    const modelWithMergeJSON: {} = {\n      'class_name': 'Model',\n      'keras_version': '2.1.5',\n      'config': {\n        'layers': [\n          {\n            'class_name': 'InputLayer',\n            'config': {\n              'dtype': 'float32',\n              'batch_input_shape': [null, 4],\n              'name': 'input_1',\n              'sparse': false\n            },\n            'inbound_nodes': [],\n            'name': 'input_1'\n          },\n          {\n            'class_name': 'InputLayer',\n            'config': {\n              'dtype': 'float32',\n              'batch_input_shape': [null, 4],\n              'name': 'input_2',\n              'sparse': false\n            },\n            'inbound_nodes': [],\n            'name': 'input_2'\n          },\n          {\n            'class_name': 'Concatenate',\n            'config': {'trainable': true, 'name': 'concatenate_1', 'axis': -1},\n            'inbound_nodes': [[['input_1', 0, 0, {}], ['input_2', 0, 0, {}]]],\n            'name': 'concatenate_1'\n          }\n        ],\n        'input_layers': [['input_1', 0, 0], ['input_2', 0, 0]],\n        'output_layers': [['concatenate_1', 0, 0]],\n        'name': 'model_1'\n      },\n      'backend': 'tensorflow'\n    };\n\n    const tsConfig =\n        convertPythonicToTs(modelWithMergeJSON) as serialization.ConfigDict;\n    const model = deserialize(tsConfig) as tfl.LayersModel;\n    expect(model.inputs.length).toEqual(2);\n    expect(model.inputs[0].shape).toEqual([null, 4]);\n    expect(model.inputs[1].shape).toEqual([null, 4]);\n    expect(model.layers.length).toEqual(3);\n    expect(model.layers[2] instanceof Concatenate);\n    expect(model.outputs.length).toEqual(1);\n    expect(model.outputs[0].shape).toEqual([null, 8]);\n  });\n});\n\ndescribeMathCPU('Dot-Layer: Symbolic', () => {\n  // Example refernce Python Keras code:\n  //\n  // ```py\n  // import keras\n  //\n  // x1 = keras.Input(shape=[3, 4])\n  // x2 = keras.Input(shape=[3])\n  // dot_layer = keras.layers.Dot(1)\n  // y = dot_layer([x1, x2])\n  //\n  // print(x1.shape)\n  // print(x2.shape)\n  // print(y.shape)\n  // ```\n\n  it('2D x 2D', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [null, 8], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [null, 8], null, [], null);\n    const y1 = tfl.layers.dot({axes: -1}).apply([x1, x2]) as tfl.SymbolicTensor;\n    expect(y1.shape).toEqual([null, 1]);\n    const y2 = tfl.layers.dot({axes: 1}).apply([x1, x2]) as tfl.SymbolicTensor;\n    expect(y2.shape).toEqual([null, 1]);\n  });\n\n  it('3D x 3D, axes = -1', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [null, 2, 3], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [null, 2, 3], null, [], null);\n    const y = tfl.layers.dot({axes: -1}).apply([x1, x2]) as tfl.SymbolicTensor;\n    expect(y.shape).toEqual([null, 2, 2]);\n  });\n\n  it('3D x 3D, axes = 1', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [null, 2, 3], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [null, 2, 3], null, [], null);\n    const y2 = tfl.layers.dot({axes: 1}).apply([x1, x2]) as tfl.SymbolicTensor;\n    expect(y2.shape).toEqual([null, 3, 3]);\n  });\n\n  it('3D x 3D, axes = 2', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [null, 2, 3], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [null, 2, 3], null, [], null);\n    const y2 = tfl.layers.dot({axes: 2}).apply([x1, x2]) as tfl.SymbolicTensor;\n    expect(y2.shape).toEqual([null, 2, 2]);\n  });\n\n  it('2D x 3D, axes = -1', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [null, 3], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [null, 2, 3], null, [], null);\n    const y2 = tfl.layers.dot({axes: -1}).apply([x1, x2]) as tfl.SymbolicTensor;\n    expect(y2.shape).toEqual([null, 2]);\n  });\n\n  it('2D x 3D, axes = 1', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [null, 3], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [null, 3, 4], null, [], null);\n    const y2 = tfl.layers.dot({axes: 1}).apply([x1, x2]) as tfl.SymbolicTensor;\n    expect(y2.shape).toEqual([null, 4]);\n  });\n\n  it('3D x 2D, axes = -1', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [null, 2, 3], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [null, 3], null, [], null);\n    const y2 = tfl.layers.dot({axes: -1}).apply([x1, x2]) as tfl.SymbolicTensor;\n    expect(y2.shape).toEqual([null, 2]);\n  });\n\n  it('3D x 2D, axes = -1', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [null, 3, 4], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [null, 3], null, [], null);\n    const y2 = tfl.layers.dot({axes: 1}).apply([x1, x2]) as tfl.SymbolicTensor;\n    expect(y2.shape).toEqual([null, 4]);\n  });\n\n  it('computeOutputShape() does not alter input shape', () => {\n    const dotLayer = tfl.layers.dot({axes: 1});\n    const inputShape1: Shape = [null, 3, 4];\n    const inputShape2: Shape = [null, 3];\n    const outputShape = dotLayer.computeOutputShape([inputShape1, inputShape2]);\n    expect(outputShape).toEqual([null, 4]);\n    expect(inputShape1).toEqual([null, 3, 4]);\n    expect(inputShape2).toEqual([null, 3]);\n  });\n\n  // TODO(cais): Uncomment the follow test case when 4D and higher is supported\n  //   by the Dot layer.\n  // it('4D x 4D, axes = -1', () => {\n  //   const x1 = new tfl.SymbolicTensor(\n  //       'float32', [null, 2, 3, 4], null, [], null);\n  //   const x2 = new tfl.SymbolicTensor(\n  //       'float32', [null, 2, 3, 4], null, [], null);\n  //   const y = tfl.layers.dot({axes: -1}).apply([x1, x2]) as\n  //       tfl.SymbolicTensor;\n  //   expect(y.shape).toEqual([null, 2, 3, 2, 3]);\n  // });\n\n  it('Dimension mismatch leads to error', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [null, 2, 3], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [null, 4], null, [], null);\n    expect(() => tfl.layers.dot({axes: -1}).apply([\n      x1, x2\n    ])).toThrowError('Dimension incompatibility: 3 !== 4');\n  });\n\n  it('Incorrect number of inputs leads to error', () => {\n    const x1 = new tfl.SymbolicTensor('float32', [null, 2, 3], null, [], null);\n    const x2 = new tfl.SymbolicTensor('float32', [null, 2, 3], null, [], null);\n    const x3 = new tfl.SymbolicTensor('float32', [null, 2, 3], null, [], null);\n    expect(() => tfl.layers.dot({axes: -1}).apply([x1]))\n        .toThrowError(/should be called on a list of exactly 2 inputs/);\n    expect(() => tfl.layers.dot({axes: -1}).apply(x1))\n        .toThrowError(/should be called on a list of exactly 2 inputs/);\n    expect(() => tfl.layers.dot({axes: -1}).apply([\n      x1, x2, x3\n    ])).toThrowError(/should be called on a list of exactly 2 inputs/);\n  });\n\n  it('Serialization round trip', () => {\n    const layer = tfl.layers.dot({axes: -1, normalize: true});\n    const pythonicConfig = convertTsToPythonic(layer.getConfig());\n    // tslint:disable-next-line:no-any\n    const tsConfig = convertPythonicToTs(pythonicConfig) as any;\n    const layerPrime = tfl.layers.dot(tsConfig);\n    expect(layerPrime.getConfig().axes).toEqual(-1);\n    expect(layerPrime.getConfig().normalize).toEqual(true);\n  });\n});\n\ndescribeMathCPUAndGPU('Dot-Layer: Tensor', () => {\n  // Example reference Python Keras code:\n  //\n  // ```py\n  // import keras\n  // import numpy as np\n  //\n  // x1 = keras.Input(shape=[2])\n  // x2 = keras.Input(shape=[2])\n  // dot_layer = keras.layers.Dot(-11)\n  // y = dot_layer([x1, x2])\n  //\n  // model = keras.Model([x1, x2], y)\n  // model.summary()\n  //\n  // xs1 = np.array([[10, 20], [30, 40]], dtype=np.float32)\n  // xs2 = np.array([[-1, -2], [-3, -4]], dtype=np.float32)\n  // print(model.predict([xs1, xs2]))\n  // ```\n\n  it('2D x 2D, axis = -1', () => {\n    const x1 = tensor2d([[10, 20], [30, 40]]);\n    const x2 = tensor2d([[-1, -2], [-3, -4]]);\n    const dotLayer = tfl.layers.dot({axes: -1});\n    const y = dotLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(y, tensor2d([[-50], [-250]]));\n  });\n\n  it('2D x 2D, axis = -1, normalize = true', () => {\n    const x1 = tensor2d([[10, 20], [30, 40]]);\n    const x2 = tensor2d([[-1, -2], [-4, -3]]);\n    const dotLayer = tfl.layers.dot({axes: -1, normalize: true});\n    const y = dotLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(y, tensor2d([[-1], [-0.96]]));\n  });\n\n  it('2D x 2D, axis = 1', () => {\n    const x1 = tensor2d([[10, 20], [30, 40]]);\n    const x2 = tensor2d([[-1, -2], [-3, -4]]);\n    const dotLayer = tfl.layers.dot({axes: 1});\n    const y = dotLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(y, tensor2d([[-50], [-250]]));\n  });\n\n  it('3D x 2D, axis = -1', () => {\n    const x1 = tensor3d([[[10, 20], [30, 40]], [[4, 3], [2, 1]]]);\n    const x2 = tensor2d([[-1, -2], [-3, -4]]);\n    const dotLayer = tfl.layers.dot({axes: -1});\n    const y1 = dotLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(y1, tensor2d([[-50, -110], [-24, -10]]));\n    const x3 = tensor2d([[1, 2], [3, 4]]);\n    const y2 = dotLayer.apply([x1, x3]) as Tensor;\n    expectTensorsClose(y2, tensor2d([[50, 110], [24, 10]]));\n  });\n\n  it('2D x 3D, axis = -1', () => {\n    const x1 = tensor2d([[-1, -2], [-3, -4]]);\n    const x2 = tensor3d([[[10, 20], [30, 40]], [[4, 3], [2, 1]]]);\n    const dotLayer = tfl.layers.dot({axes: -1});\n    const y = dotLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(y, tensor2d([[-50, -110], [-24, -10]]));\n  });\n\n  it('2D x 3D, axis = 1', () => {\n    const x1 = tensor2d([[-1, -2], [-3, -4]]);\n    const x2 = tensor3d([[[10, 20], [30, 40]], [[4, 3], [2, 1]]]);\n    const dotLayer = tfl.layers.dot({axes: 1});\n    const y = dotLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(y, tensor2d([[-70, -100], [-20, -13]]));\n  });\n\n  it('3D x 3D, axis = -1', () => {\n    const x1 = tensor3d([[[-1, -2], [-3, -4]], [[5, 6], [7, 8]]]);\n    const x2 = tensor3d([[[10, 20], [30, 40]], [[4, 3], [2, 1]]]);\n    const dotLayer = tfl.layers.dot({axes: -1});\n    const y = dotLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(\n        y, tensor3d([[[-50, -110], [-110, -250]], [[38, 16], [52, 22]]]));\n  });\n\n  it('3D x 3D, axis = 1', () => {\n    const x1 = tensor3d([[[-1, -2], [-3, -4]], [[5, 6], [7, 8]]]);\n    const x2 = tensor3d([[[10, 20], [30, 40]], [[4, 3], [2, 1]]]);\n    const dotLayer = tfl.layers.dot({axes: 1});\n    const y = dotLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(\n        y, tensor3d([[[-100, -140], [-140, -200]], [[34, 22], [40, 26]]]));\n  });\n\n  it('3D x 3D, axis = [1, 2]', () => {\n    const x1 = tensor3d([[[-1, -2], [-3, -4]], [[5, 6], [7, 8]]]);\n    const x2 = tensor3d([[[10, 20], [30, 40]], [[4, 3], [2, 1]]]);\n    const dotLayer = tfl.layers.dot({axes: [1, 2]});\n    const y = dotLayer.apply([x1, x2]) as Tensor;\n    expectTensorsClose(\n        y, tensor3d([[[-70, -150], [-100, -220]], [[41, 17], [48, 20]]]));\n  });\n\n  // Reference Python code:\n  // ```py\n  // import keras\n  // import numpy as np\n  //\n  // input1 = keras.Input(shape=[4])\n  // input2 = keras.Input(shape=[4])\n  // y1 = keras.layers.Embedding(10,\n  //                             3,\n  //                             input_length=4,\n  //                             mask_zero=True,\n  //                             embeddings_initializer='ones')(input1)\n  // y1 = keras.layers.LSTM(3,\n  //                       recurrent_initializer='ones',\n  //                       kernel_initializer='ones',\n  //                       bias_initializer='zeros')(y1)\n  // y2 = keras.layers.Embedding(10,\n  //                             3,\n  //                             input_length=4,\n  //                             mask_zero=True,\n  //                             embeddings_initializer='ones')(input2)\n  // y2 = keras.layers.LSTM(3,\n  //                       recurrent_initializer='ones',\n  //                       kernel_initializer='ones',\n  //                       bias_initializer='zeros')(y2)\n  //\n  // y = keras.layers.Dot(axes=[-1, -1])([y1, y2])\n  // y = keras.layers.Dense(1,\n  //                       kernel_initializer='ones',\n  //                       bias_initializer='zeros')(y)\n  //\n  // model = keras.Model(inputs=[input1, input2], outputs=y)\n  //\n  // xs1 = np.array([[0, 0, 0, 0],\n  //                 [1, 0, 0, 0],\n  //                 [1, 2, 0, 0],\n  //                 [1, 2, 3, 0]])\n  // xs2 = np.array([[0, 0, 0, 0],\n  //                 [0, 0, 0, 0],\n  //                 [1, 0, 0, 0],\n  //                 [1, 2, 0, 0]])\n  // ys = model.predict([xs1, xs2])\n  // print(ys)\n  // ```\n  it('With masking', () => {\n    const input1 = tfl.input({shape: [4]});\n    const input2 = tfl.input({shape: [4]});\n    let y1 = tfl.layers\n                 .embedding({\n                   inputDim: 10,\n                   outputDim: 3,\n                   inputLength: 4,\n                   maskZero: true,\n                   embeddingsInitializer: 'ones'\n                 })\n                 .apply(input1) as SymbolicTensor;\n    y1 = tfl.layers\n             .lstm({\n               units: 3,\n               recurrentInitializer: 'ones',\n               kernelInitializer: 'ones',\n               biasInitializer: 'zeros'\n             })\n             .apply(y1) as SymbolicTensor;\n    let y2 = tfl.layers\n                 .embedding({\n                   inputDim: 10,\n                   outputDim: 3,\n                   inputLength: 4,\n                   maskZero: true,\n                   embeddingsInitializer: 'ones'\n                 })\n                 .apply(input2) as SymbolicTensor;\n    y2 = tfl.layers\n             .lstm({\n               units: 3,\n               recurrentInitializer: 'ones',\n               kernelInitializer: 'ones',\n               biasInitializer: 'zeros'\n             })\n             .apply(y2) as SymbolicTensor;\n    let y = tfl.layers.dot({axes: [-1, -1]}).apply([y1, y2]) as SymbolicTensor;\n    y = tfl.layers\n            .dense(\n                {units: 1, kernelInitializer: 'ones', biasInitializer: 'zeros'})\n            .apply(y) as SymbolicTensor;\n    const model = tfl.model({inputs: [input1, input2], outputs: y});\n\n    const xs1 =\n        tensor2d([[0, 0, 0, 0], [1, 0, 0, 0], [1, 2, 0, 0], [1, 2, 3, 0]]);\n    // Notice the mask of xs2 is different from that of xs1.\n    const xs2 =\n        tensor2d([[0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0], [1, 2, 0, 0]]);\n    const ys = model.predict([xs1, xs2]) as Tensor;\n    expectTensorsClose(ys, tensor2d([[0], [0], [2.195756], [2.8765779]]));\n  });\n});\n"]}