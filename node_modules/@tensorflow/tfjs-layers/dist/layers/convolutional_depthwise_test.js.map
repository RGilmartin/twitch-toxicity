{"version":3,"file":"convolutional_depthwise_test.js","sourceRoot":"","sources":["../../src/layers/convolutional_depthwise_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Unit tests for convolutional_depthwise.ts.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Tensor, tensor4d, Tensor4D} from '@tensorflow/tfjs-core';\n\nimport * as tfl from '../index';\nimport {InitializerIdentifier} from '../initializers';\nimport {DataFormat, PaddingMode} from '../keras_format/common';\nimport {convertPythonicToTs, convertTsToPythonic} from '../utils/serialization_utils';\nimport {describeMathCPU, describeMathCPUAndGPU, expectTensorsClose} from '../utils/test_utils';\n\nimport {depthwiseConv2d} from './convolutional_depthwise';\n\ndescribeMathCPUAndGPU('depthwiseConv2d', () => {\n  const x4by4Data = [[[\n    [10, 30, 50, 70], [20, 40, 60, 80], [-10, -30, -50, -70],\n    [-20, -40, -60, -80]\n  ]]];\n\n  const dataFormats: DataFormat[] =\n      [undefined, 'channelsFirst', 'channelsLast'];\n  const paddingModes: PaddingMode[] = [undefined, 'same', 'valid'];\n  const stridesArray = [1, 2];\n  const depthMultipliers = [1, 2];\n\n  for (const dataFormat of dataFormats) {\n    for (const paddingMode of paddingModes) {\n      for (const stride of stridesArray) {\n        for (const depthMultiplier of depthMultipliers) {\n          const testTitle = `stride=${stride}, ${paddingMode}, ` +\n              `${dataFormat}, depthMultiplier=${depthMultiplier}`;\n          it(testTitle, () => {\n            let x: Tensor = tensor4d(x4by4Data, [1, 1, 4, 4]);\n            if (dataFormat !== 'channelsFirst') {\n              x = tfc.transpose(x, [0, 2, 3, 1]);  // NCHW -> NHWC.\n            }\n\n            let kernel: Tensor4D;\n            if (depthMultiplier === 1) {\n              kernel = tensor4d([1, 0, 0, -1], [2, 2, 1, 1]);\n            } else if (depthMultiplier === 2) {\n              // Two kernels of the same absolute values but opposite signs:\n              //   [[1, 0], [0, -1]] and [[-1, 0], [0, 1]].\n              kernel = tensor4d([1, -1, 0, 0, 0, 0, -1, 1], [2, 2, 1, 2]);\n            }\n            const y = depthwiseConv2d(\n                x, kernel, [stride, stride], 'valid', dataFormat);\n\n            let yExpected: Tensor;\n            if (stride === 1) {\n              if (depthMultiplier === 1) {\n                yExpected = tensor4d(\n                    [[[[-30, -30, -30], [50, 90, 130], [30, 30, 30]]]],\n                    [1, 1, 3, 3]);\n              } else if (depthMultiplier === 2) {\n                yExpected = tensor4d(\n                    [[\n                      [[-30, -30, -30], [50, 90, 130], [30, 30, 30]],\n                      [[30, 30, 30], [-50, -90, -130], [-30, -30, -30]]\n                    ]],\n                    [1, 2, 3, 3]);\n              }\n            } else if (stride === 2) {\n              if (depthMultiplier === 1) {\n                yExpected = tensor4d([[[[-30, -30], [30, 30]]]], [1, 1, 2, 2]);\n              } else if (depthMultiplier === 2) {\n                yExpected = tensor4d(\n                    [[[[-30, -30], [30, 30]], [[30, 30], [-30, -30]]]],\n                    [1, 2, 2, 2]);\n              }\n            }\n            if (dataFormat !== 'channelsFirst') {\n              yExpected = tfc.transpose(yExpected, [0, 2, 3, 1]);\n            }\n            expectTensorsClose(y, yExpected);\n          });\n        }\n      }\n    }\n  }\n\n  it('Non-4D kernel leads to exception', () => {\n    const x = tfc.zeros([1, 1, 4, 4]);\n    expect(() => depthwiseConv2d(x, tfc.zeros([1, 2, 2]), [1, 1]))\n        .toThrowError(/.* is required to be 4-D, but is instead 3-D/);\n  });\n});\n\ndescribeMathCPU('DepthwiseConv2D-Symbolic', () => {\n  const dataFormats: DataFormat[] = ['channelsFirst', 'channelsLast'];\n  const kernelSizes: [number, [number, number]] = [2, [2, 2]];\n  const depthMultipliers = [1, 3];\n  const paddingModes: PaddingMode[] = ['valid', 'same'];\n\n  for (const dataFormat of dataFormats) {\n    for (const kernelSize of kernelSizes) {\n      for (const depthMultiplier of depthMultipliers) {\n        for (const padding of paddingModes) {\n          const testTitle = `dataFormat=${dataFormat}, ` +\n              `kernelSize=${JSON.stringify(kernelSize)}, ` +\n              `depthMultiplier=${depthMultiplier}, ` +\n              `paddingMode=${padding}`;\n          it(testTitle, () => {\n            const depthwiseConvLayer = tfl.layers.depthwiseConv2d(\n                {dataFormat, kernelSize, depthMultiplier, padding});\n            const inputShape = dataFormat === 'channelsFirst' ? [1, 8, 10, 10] :\n                                                                [1, 10, 10, 8];\n            const symbolicInput =\n                new tfl.SymbolicTensor('float32', inputShape, null, [], null);\n            const symbolicOutput =\n                depthwiseConvLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n\n            const outputImageSize = padding === 'valid' ? 9 : 10;\n            let expectedShape: [number, number, number, number];\n            if (dataFormat === 'channelsFirst') {\n              expectedShape =\n                  [1, 8 * depthMultiplier, outputImageSize, outputImageSize];\n            } else {\n              expectedShape =\n                  [1, outputImageSize, outputImageSize, 8 * depthMultiplier];\n            }\n            expect(symbolicOutput.shape).toEqual(expectedShape);\n          });\n        }\n      }\n    }\n  }\n\n  it('Non-4D Array Input leads to exception', () => {\n    const depthwiseConvLayer = tfl.layers.depthwiseConv2d({kernelSize: 2});\n    const symbolicInput =\n        new tfl.SymbolicTensor('float32', [1, 10, 10], null, [], null);\n    expect(() => depthwiseConvLayer.apply(symbolicInput))\n        .toThrowError(\n            /Inputs to DepthwiseConv2D should have rank 4\\. Received .*/);\n  });\n\n  it('Serialization round trip', () => {\n    const layer = tfl.layers.depthwiseConv2d(\n        {kernelSize: 3, depthMultiplier: 4, activation: 'relu'});\n    const pythonicConfig = convertTsToPythonic(layer.getConfig());\n    // tslint:disable-next-line:no-any\n    const tsConfig = convertPythonicToTs(pythonicConfig) as any;\n    const layerPrime = tfl.layers.depthwiseConv2d(tsConfig);\n    const configPrime = layerPrime.getConfig();\n    expect(configPrime.kernelSize).toEqual([3, 3]);\n    expect(configPrime.depthMultiplier).toEqual(4);\n    expect(configPrime.activation).toEqual('relu');\n  });\n});\n\ndescribeMathCPUAndGPU('DepthwiseConv2D-Tensor:', () => {\n  const x4by4Data = [[[\n    [10, 30, 50, 70], [20, 40, 60, 80], [-10, -30, -50, -70],\n    [-20, -40, -60, -80]\n  ]]];\n\n  const depthMultipliers = [1, 2];\n  const useBiases = [false];\n  const biasInitializers: InitializerIdentifier[] = ['zeros', 'ones'];\n\n  for (const depthMultiplier of depthMultipliers) {\n    for (const useBias of useBiases) {\n      for (const biasInitializer of biasInitializers) {\n        const testTitle =\n            `channelsFirst, depthMultiplier=${depthMultiplier}, ` +\n            `useBias=${useBias}, biasInitializer=${biasInitializer}, ` +\n            `activation=relu`;\n        it(testTitle, () => {\n          const x = tensor4d(x4by4Data, [1, 1, 4, 4]);\n          const conv2dLayer = tfl.layers.depthwiseConv2d({\n            kernelSize: [2, 2],\n            depthMultiplier,\n            strides: [2, 2],\n            dataFormat: 'channelsFirst',\n            useBias,\n            depthwiseInitializer: 'ones',\n            biasInitializer,\n            activation: 'relu'\n          });\n          const y = conv2dLayer.apply(x) as Tensor;\n\n          let yExpectedShape: [number, number, number, number];\n          let yExpectedData: number[];\n          if (depthMultiplier === 1) {\n            yExpectedShape = [1, 1, 2, 2];\n            yExpectedData = [100, 260, -100, -260];\n          } else if (depthMultiplier === 2) {\n            yExpectedShape = [1, 2, 2, 2];\n            yExpectedData = [100, 260, -100, -260, 100, 260, -100, -260];\n          }\n          if (useBias && biasInitializer === 'ones') {\n            yExpectedData = yExpectedData.map(element => element + 1);\n          }\n          // relu.\n          yExpectedData =\n              yExpectedData.map(element => element >= 0 ? element : 0);\n          const yExpected = tensor4d(yExpectedData, yExpectedShape);\n          expectTensorsClose(y, yExpected);\n        });\n      }\n    }\n  }\n\n  it('channelsLast', () => {\n    // Convert input to channelsLast.\n    const x = tfc.transpose(tensor4d(x4by4Data, [1, 1, 4, 4]), [0, 2, 3, 1]);\n    const conv2dLayer = tfl.layers.depthwiseConv2d({\n      depthMultiplier: 2,\n      kernelSize: [2, 2],\n      strides: [2, 2],\n      dataFormat: 'channelsLast',\n      useBias: false,\n      depthwiseInitializer: 'ones',\n      activation: 'linear'\n    });\n    const y = conv2dLayer.apply(x) as Tensor;\n    const yExpected =\n        tensor4d([100, 100, 260, 260, -100, -100, -260, -260], [1, 2, 2, 2]);\n    expectTensorsClose(y, yExpected);\n  });\n\n  it('missing config.kernelSize throws exception', () => {\n    // tslint:disable-next-line:no-any\n    expect((filters: 1) => tfl.layers.depthwiseConv2d({} as any))\n        .toThrowError(/kernelSize/);\n  });\n  it('bad config.kernelSize throws exception', () => {\n    expect(\n        // tslint:disable-next-line:no-any\n        () => tfl.layers.depthwiseConv2d({kernelSize: [1]} as any))\n        .toThrowError(/kernelSize/);\n  });\n});\n"]}