{"version":3,"file":"advanced_activation_test.js","sourceRoot":"","sources":["../../src/layers/advanced_activation_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Unit Tests for Advanced Activation Layers.\n */\n\nimport {ones, Tensor, tensor1d, tensor2d, zeros} from '@tensorflow/tfjs-core';\n\nimport * as tfl from '../index';\nimport {convertPythonicToTs, convertTsToPythonic} from '../utils/serialization_utils';\nimport {describeMathCPU, describeMathCPUAndGPU, expectTensorsClose} from '../utils/test_utils';\n\ndescribeMathCPU('ReLU: Symbolic', () => {\n  it('Correct output shape', () => {\n    const layer = tfl.layers.reLU({});\n    const x = new tfl.SymbolicTensor('float32', [2, 3, 4], null, null, null);\n    const y = layer.apply(x) as tfl.SymbolicTensor;\n    expect(y.shape).toEqual(x.shape);\n  });\n\n  it('Serialization round trip', () => {\n    const layer = tfl.layers.reLU({maxValue: 28});\n    const pythonicConfig = convertTsToPythonic(layer.getConfig());\n    // tslint:disable-next-line:no-any\n    const tsConfig = convertPythonicToTs(pythonicConfig) as any;\n    const layerPrime = tfl.layers.reLU(tsConfig);\n    expect(layerPrime.getConfig().maxValue).toEqual(28);\n  });\n});\n\ndescribeMathCPUAndGPU('ReLU: Tensor', () => {\n  it('No maxValue', () => {\n    const layer = tfl.layers.reLU();\n    const x = tensor2d([[-100, -200], [0, 300], [200, 200]]);\n    const y = layer.apply(x) as Tensor;\n    expectTensorsClose(y, tensor2d([[0, 0], [0, 300], [200, 200]]));\n  });\n\n  it('Finite maxValue', () => {\n    const layer = tfl.layers.reLU({maxValue: 250});\n    const x = tensor1d([-100, -200, 0, 300, 200, 200]);\n    const y = layer.apply(x) as Tensor;\n    expectTensorsClose(y, tensor1d([0, 0, 0, 250, 200, 200]));\n  });\n});\n\ndescribeMathCPU('PReLU: Symbolic', () => {\n  it('Correct output shape: no-arg constructor', () => {\n    const layer = tfl.layers.prelu();\n    const x = new tfl.SymbolicTensor('float32', [2, 3, 4], null, null, null);\n    const y = layer.apply(x) as tfl.SymbolicTensor;\n    expect(y.shape).toEqual(x.shape);\n  });\n\n  it('Correct output shape: constructor with arg', () => {\n    const layer = tfl.layers.prelu({});\n    const x = new tfl.SymbolicTensor('float32', [2, 3, 4], null, null, null);\n    const y = layer.apply(x) as tfl.SymbolicTensor;\n    expect(y.shape).toEqual(x.shape);\n  });\n\n  it('Serialization round trip', () => {\n    const layer =\n        tfl.layers.prelu({alphaInitializer: 'ones', sharedAxes: [1, 2]});\n    const pythonicConfig = convertTsToPythonic(layer.getConfig());\n    // tslint:disable-next-line:no-any\n    const tsConfig = convertPythonicToTs(pythonicConfig) as any;\n    const layerPrime = tfl.layers.prelu(tsConfig);\n    expect(layerPrime.getConfig().sharedAxes).toEqual([1, 2]);\n  });\n});\n\ndescribeMathCPUAndGPU('PReLU: Tensor', () => {\n  it('Forward pass', () => {\n    const layer = tfl.layers.prelu({alphaInitializer: 'ones'});\n    const x = tensor2d([[-100, -200], [0, 300], [200, 200]]);\n    const y = layer.apply(x) as Tensor;\n    expectTensorsClose(y, tensor2d([[-100, -200], [0, 300], [200, 200]]));\n  });\n\n  // Reference Python code:\n  // ```py\n  // import keras\n  // import numpy as np\n  //\n  // model = keras.Sequential()\n  // model.add(keras.layers.Dense(\n  //     3, kernel_initializer='ones', input_shape=[4]))\n  // model.add(keras.layers.PReLU(alpha_initializer='ones'))\n  // model.add(keras.layers.Dense(1, kernel_initializer='ones'))\n  // model.compile(optimizer='sgd', loss='mean_squared_error')\n  //\n  // xs = -np.ones([2, 4])\n  // ys = np.zeros([2, 1])\n  // history = model.fit(xs, ys, batch_size=2, epochs=3)\n  // print(history.history)\n  // print(model.get_weights()[2])\n  // ```\n  it('Training: no sharedAxes', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.dense(\n        {units: 3, kernelInitializer: 'ones', inputShape: [4]}));\n    model.add(tfl.layers.prelu({alphaInitializer: 'ones'}));\n    model.add(tfl.layers.dense({units: 1, kernelInitializer: 'ones'}));\n    model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n\n    const xs = ones([2, 4]).neg();\n    const ys = zeros([2, 1]);\n    const history = await model.fit(xs, ys, {batchSize: 2, epochs: 3});\n    expect(history.history.loss.length).toEqual(3);\n    expect(history.history.loss[0]).toBeCloseTo(144);\n    expect(history.history.loss[1]).toBeCloseTo(0.051329);\n    expect(history.history.loss[2]).toBeCloseTo(0.049144);\n    expectTensorsClose(\n        model.getWeights()[2], tensor1d([0.0410104, 0.0410104, 0.0410104]));\n  });\n\n  // Reference Python code:\n  // ```py\n  // import keras\n  // import numpy as np\n  //\n  // model = keras.Sequential()\n  // model.add(keras.layers.Dense(\n  //     3, kernel_initializer='ones', input_shape=[2, 2]))\n  // model.add(keras.layers.PReLU(alpha_initializer='ones', shared_axes=[1]))\n  // model.add(keras.layers.Dense(1, kernel_initializer='ones'))\n  // model.compile(optimizer='sgd', loss='mean_squared_error')\n  //\n  // xs = -np.ones([2, 2, 2])\n  // ys = np.zeros([2, 2, 1])\n  // history = model.fit(xs, ys, batch_size=2, epochs=3)\n  // print(history.history)\n  // print(model.get_weights()[2])\n  // ```\n  it('Training, with sharedAxes', async () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.dense(\n        {units: 3, kernelInitializer: 'ones', inputShape: [2, 2]}));\n    model.add(tfl.layers.prelu({alphaInitializer: 'ones', sharedAxes: [1]}));\n    model.add(tfl.layers.dense({units: 1, kernelInitializer: 'ones'}));\n    model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n\n    const xs = ones([2, 2, 2]).neg();\n    const ys = zeros([2, 2, 1]);\n    const history = await model.fit(xs, ys, {batchSize: 2, epochs: 3});\n    expect(history.history.loss.length).toEqual(3);\n    expect(history.history.loss[0]).toBeCloseTo(36);\n    expect(history.history.loss[1]).toBeCloseTo(7.408153);\n    expect(history.history.loss[2]).toBeCloseTo(4.190359);\n    expectTensorsClose(\n        model.getWeights()[2], tensor2d([[0.648351, 0.648351, 0.648351]]));\n  });\n});\n\ndescribeMathCPU('leakyReLU: Symbolic', () => {\n  it('Correct output shape', () => {\n    const layer = tfl.layers.leakyReLU({alpha: 0.1});\n    const x = new tfl.SymbolicTensor('float32', [2, 3, 4], null, null, null);\n    const y = layer.apply(x) as tfl.SymbolicTensor;\n    expect(y.shape).toEqual(x.shape);\n  });\n});\n\ndescribeMathCPUAndGPU('leakyReLU: Tensor', () => {\n  it('alpha = default 0.3', () => {\n    const layer = tfl.layers.leakyReLU();\n    const x = tensor2d([[-1, -2], [0, 3]], [2, 2]);\n    const y = layer.apply(x) as Tensor;\n    expectTensorsClose(y, tensor2d([[-0.3, -0.6], [0, 3]], [2, 2]));\n  });\n\n  it('alpha = 0.1', () => {\n    const layer = tfl.layers.leakyReLU({alpha: 0.1});\n    const x = tensor2d([[-1, -2], [0, 3]], [2, 2]);\n    const y = layer.apply(x) as Tensor;\n    expectTensorsClose(y, tensor2d([[-0.1, -0.2], [0, 3]], [2, 2]));\n  });\n});\n\ndescribeMathCPU('elu: Symbolic', () => {\n  it('Correct output shape', () => {\n    const layer = tfl.layers.elu();\n    const x = new tfl.SymbolicTensor('float32', [2, 3, 4], null, null, null);\n    const y = layer.apply(x) as tfl.SymbolicTensor;\n    expect(y.shape).toEqual(x.shape);\n  });\n});\n\ndescribeMathCPUAndGPU('elu: Tensor', () => {\n  it('alpha = default 1.0', () => {\n    const layer = tfl.layers.elu({});\n    const x = tensor2d([[-1, -2], [0, 3]], [2, 2]);\n    const y = layer.apply(x) as Tensor;\n    expectTensorsClose(\n        y, tensor2d([[Math.exp(-1) - 1, Math.exp(-2) - 1], [0, 3]], [2, 2]));\n  });\n});\n\ndescribeMathCPU('thresholdedReLU: Symbolic', () => {\n  it('Correct output shape', () => {\n    const layer = tfl.layers.thresholdedReLU();\n    const x = new tfl.SymbolicTensor('float32', [2, 3, 4], null, null, null);\n    const y = layer.apply(x) as tfl.SymbolicTensor;\n    expect(y.shape).toEqual(x.shape);\n  });\n});\n\ndescribeMathCPUAndGPU('thresholdedReLU: Tensor', () => {\n  it('theta = default 1.0', () => {\n    const layer = tfl.layers.thresholdedReLU({});\n    const x = tensor2d([[-1, 0], [1, 3]], [2, 2]);\n    const y = layer.apply(x) as Tensor;\n    expectTensorsClose(y, tensor2d([[0, 0], [0, 3]], [2, 2]));\n  });\n});\n\ndescribeMathCPU('softmax: Symbolic', () => {\n  const axisValues = [0, 1, 2, -1, null];\n  for (const axis of axisValues) {\n    it(`Correct output shape, axis=${axis}`, () => {\n      const layer = tfl.layers.softmax({axis});\n      const x = new tfl.SymbolicTensor('float32', [2, 3, 4], null, null, null);\n      const y = layer.apply(x) as tfl.SymbolicTensor;\n      expect(y.shape).toEqual(x.shape);\n    });\n  }\n});\n\ndescribeMathCPUAndGPU('softmax: Tensor', () => {\n  it('theta = default 1.0', () => {\n    const layer = tfl.layers.softmax({});\n    const x = tensor2d([[0, 1], [5, 5]], [2, 2]);\n    const y = layer.apply(x) as Tensor;\n    expectTensorsClose(\n        y,\n        tensor2d(\n            [[1 / (1 + Math.E), Math.E / (1 + Math.E)], [0.5, 0.5]], [2, 2]));\n  });\n});\n"]}