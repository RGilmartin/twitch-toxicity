{"version":3,"file":"core_test.js","sourceRoot":"","sources":["../../src/layers/core_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Unit tests for core.ts.\n */\nimport {mul, ones, scalar, Tensor, tensor2d, tensor3d, tensor4d, zeros} from '@tensorflow/tfjs-core';\n\nimport * as K from '../backend/tfjs_backend';\nimport {SymbolicTensor} from '../engine/topology';\nimport * as tfl from '../index';\nimport {InitializerIdentifier} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {pyListRepeat} from '../utils/generic_utils';\nimport {arrayProd} from '../utils/math_utils';\nimport {convertPythonicToTs, convertTsToPythonic} from '../utils/serialization_utils';\nimport {describeMathCPU, describeMathCPUAndGPU, expectTensorsClose} from '../utils/test_utils';\n\ndescribe('Dropout Layer: Symbolic', () => {\n  const dropoutRates = [0, 0.5];\n  const symbolicInputs = [\n    new tfl.SymbolicTensor('float32', [10, 4], null, [], null),\n    new tfl.SymbolicTensor('float32', [12, 10, 4], null, [], null),\n    new tfl.SymbolicTensor('float32', [null, 4], null, [], null),\n  ];\n\n  for (const rate of dropoutRates) {\n    for (const symbolicInput of symbolicInputs) {\n      const testTitle = `dropoutRate=${rate}; ` +\n          `input shape=${JSON.stringify(symbolicInput.shape)}`;\n      it(testTitle, () => {\n        const dropoutLayer = tfl.layers.dropout({rate});\n        const output = dropoutLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n        expect(output.dtype).toEqual(symbolicInput.dtype);\n        expect(output.shape).toEqual(symbolicInput.shape);\n        expect(output.sourceLayer).toEqual(dropoutLayer);\n        expect(output.inputs).toEqual([symbolicInput]);\n      });\n    }\n  }\n});\n\ndescribeMathCPUAndGPU('Dropout Layer', () => {\n  describe('tensor', () => {\n    const inputShape = [2, 3, 4];\n    const trainingValues = [false, true];\n    const dropoutRates = [0, 0.5];\n    const noiseShapes = [null, inputShape, [2, 3, 1]];\n    const seed = 0;\n\n    for (const training of trainingValues) {\n      for (const rate of dropoutRates) {\n        for (const noiseShape of noiseShapes) {\n          const testTitle = `training=${training}, dropoutRate=${rate}, ` +\n              `noiseShape=${JSON.stringify(noiseShape)}`;\n          it(testTitle, () => {\n            const x = ones(inputShape);\n            const dropoutLayer = tfl.layers.dropout({rate, noiseShape, seed});\n            const y = dropoutLayer.apply(x, {training}) as Tensor;\n            expect(x.dtype).toEqual(y.dtype);\n            expect(x.shape).toEqual(y.shape);\n            const xValue = x.dataSync();\n            const yValue = y.dataSync();\n            let nKept = 0;\n            if (noiseShape === noiseShapes[2]) {  // customized noiseShape\n              for (let i = 0; i < x.shape[0]; ++i) {\n                for (let j = 0; j < x.shape[1]; ++j) {\n                  const maskedValue =\n                      yValue[i * x.shape[1] * x.shape[2] + j * x.shape[2]];\n                  for (let k = 0; k < x.shape[2]; ++k) {\n                    const indice =\n                        i * x.shape[1] * x.shape[2] + j * x.shape[2] + k;\n                    if (training) {\n                      if (maskedValue === 0) {\n                        expect(yValue[indice]).toEqual(0);\n                      } else {\n                        nKept++;\n                        expect(yValue[indice]).toBeCloseTo(1 / (1 - rate));\n                      }\n                    } else {\n                      nKept++;\n                      expect(yValue[indice]).toEqual(1);\n                    }\n                  }\n                }\n              }\n            } else {  // default noiseShape\n              for (let i = 0; i < xValue.length; ++i) {\n                if (yValue[i] !== 0) {\n                  nKept++;\n                  if (training) {\n                    expect(yValue[i]).toBeCloseTo(1 / (1 - rate));\n                  } else {\n                    expect(yValue[i]).toBeCloseTo(1);\n                  }\n                }\n              }\n            }\n            const numel = K.countParams(x);\n            if (rate === 0 || !training) {\n              expect(nKept).toEqual(numel);\n            } else {\n              expect(nKept).toBeLessThan(numel);\n            }\n          });\n        }\n      }\n    }\n  });\n\n  describe('tensor with seed', () => {\n    it('get specific value.', () => {\n      const training = true;\n      const rate = 0.5;\n      const noiseShape = [2, 3, 4];\n      const x = ones([2, 3, 4]);\n      const seed = 23;\n      const dropoutLayer = tfl.layers.dropout({rate, noiseShape, seed});\n      const y = dropoutLayer.apply(x, {training}) as Tensor;\n      const yValuesExpected = [\n        0, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 2, 0, 2, 0, 2, 2, 2, 0\n      ];\n      expectTensorsClose(y, tensor3d(yValuesExpected, [2, 3, 4]));\n    });\n  });\n});\n\ndescribeMathCPUAndGPU('SpatialDropout1D Layer', () => {\n  for (const training of [false, true]) {\n    for (const rate of [0.5, 0]) {\n      it(`Forward: rate=${rate}; training=${training}`, () => {\n        const layer = tfl.layers.spatialDropout1d({rate, seed: 1337});\n        const xs = ones([2, 3, 4]);\n        const ys = layer.apply(xs, {training}) as Tensor;\n        if (!training || rate === 0) {\n          expectTensorsClose(ys, xs);\n        } else {\n          expectTensorsClose(ys, tensor3d([\n                               [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n                               [[0, 2, 0, 0], [0, 2, 0, 0], [0, 2, 0, 0]]\n                             ]));\n        }\n      });\n    }\n  }\n\n  it('Incorrect input shape: Symbolic', () => {\n    const layer = tfl.layers.spatialDropout1d({rate: 0.5});\n    const x = new SymbolicTensor('float32', [1, 2, 3, 4], null, [], null);\n    expect(() => layer.apply(x))\n        .toThrowError(/.*expected ndim=3.*found ndim=4.*/);\n  });\n\n  it('Incorrect input shape: Concrete Tensor', () => {\n    const layer = tfl.layers.spatialDropout1d({rate: 0.5});\n    const x = ones([1, 2, 3, 4]);\n    expect(() => layer.apply(x))\n        .toThrowError(/.*expected ndim=3.*found ndim=4.*/);\n  });\n\n  it('Serialization round trip', () => {\n    const layer = tfl.layers.spatialDropout1d({rate: 0.3, seed: 1337});\n    const pythonicConfig = convertTsToPythonic(layer.getConfig());\n    // tslint:disable-next-line:no-any\n    const tsConfig = convertPythonicToTs(pythonicConfig) as any;\n    const layerPrime = tfl.layers.spatialDropout1d(tsConfig);\n    expect(layerPrime.getConfig().rate).toEqual(0.3);\n    expect(layerPrime.getConfig().seed).toEqual(1337);\n  });\n});\n\ndescribeMathCPU('Dense Layer: Symbolic', () => {\n  const units = 3;\n  const activations: ActivationIdentifier[] =\n      [null, 'linear', 'relu', 'softmax'];\n  const symbolicInputs = [\n    new tfl.SymbolicTensor('float32', [10, 4], null, [], null),\n    new tfl.SymbolicTensor('float32', [12, 10, 4], null, [], null),\n    new tfl.SymbolicTensor('float32', [14, 12, 10, 4], null, [], null),\n    new tfl.SymbolicTensor('float32', [null, 4], null, [], null),\n    new tfl.SymbolicTensor('float32', [null, 10, 4], null, [], null),\n    new tfl.SymbolicTensor('float32', [null, 12, 10, 4], null, [], null),\n  ];\n\n  for (const activation of activations) {\n    for (const symbolicInput of symbolicInputs) {\n      it(`Generates correct symbolic output: ` +\n             `activation=${activation}, ` +\n             `input shape=${JSON.stringify(symbolicInput.shape)}`,\n         () => {\n           const denseLayer = tfl.layers.dense({units, activation});\n           const output = denseLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n\n           const expectedShape = symbolicInput.shape;\n           expectedShape[expectedShape.length - 1] = units;\n           expect(output.shape).toEqual(expectedShape);\n           expect(output.sourceLayer).toEqual(denseLayer);\n           expect(output.inputs).toEqual([symbolicInput]);\n         });\n    }\n  }\n\n  it('2D cascade: With undetermined dimension', () => {\n    const input1 = new tfl.SymbolicTensor('float32', [null, 4], null, [], null);\n    const denseLayer1 = tfl.layers.dense({units: 3});\n    const output1 = denseLayer1.apply(input1) as tfl.SymbolicTensor;\n\n    const denseLayer2 = tfl.layers.dense({units: 6});\n    const output2 = denseLayer2.apply(output1) as tfl.SymbolicTensor;\n\n    expect(output1.shape).toEqual([null, 3]);\n    expect(output1.sourceLayer).toEqual(denseLayer1);\n    expect(output1.inputs).toEqual([input1]);\n    expect(output2.shape).toEqual([null, 6]);\n    expect(output2.sourceLayer).toEqual(denseLayer2);\n    expect(output2.inputs).toEqual([output1]);\n  });\n\n  it('Using 1D input leads to error', () => {\n    const input = new tfl.SymbolicTensor('float32', [4], null, [], null);\n    const denseLayer = tfl.layers.dense({units: 3});\n    expect(() => denseLayer.apply(input)).toThrowError();\n  });\n\n  it('Different rank but compatible shape works', () => {\n    const denseLayer = tfl.layers.dense({units: 3});\n    const input1 = new tfl.SymbolicTensor('float32', [null, 4], null, [], null);\n    const input2 =\n        new tfl.SymbolicTensor('float32', [null, 6, 4], null, [], null);\n    const output1 = denseLayer.apply(input1) as tfl.SymbolicTensor;\n    expect(output1.shape).toEqual([null, 3]);\n    expect(output1.sourceLayer).toEqual(denseLayer);\n    expect(output1.inputs).toEqual([input1]);\n\n    const output2 = denseLayer.apply(input2) as tfl.SymbolicTensor;\n    expect(output2.shape).toEqual([null, 6, 3]);\n    expect(output2.sourceLayer).toEqual(denseLayer);\n    expect(output2.inputs).toEqual([input2]);\n  });\n\n  it('2D incompatible shape leads to error', () => {\n    const denseLayer = tfl.layers.dense({units: 3});\n    const input1 = new tfl.SymbolicTensor('float32', [null, 4], null, [], null);\n    const input2 = new tfl.SymbolicTensor('float32', [null, 5], null, [], null);\n    const output1 = denseLayer.apply(input1) as tfl.SymbolicTensor;\n    expect(output1.shape).toEqual([null, 3]);\n    expect(output1.sourceLayer).toEqual(denseLayer);\n    expect(output1.inputs).toEqual([input1]);\n\n    expect(() => {\n      // tslint:disable-next-line:no-unused-expression\n      denseLayer.apply(input2);\n    }).toThrowError(/incompatible with layer .* axis -1/);\n  });\n\n  it('Invalid kernelInitializer', () => {\n    expect(() => {\n      // tslint:disable-next-line:no-unused-expression\n      tfl.layers.dense({units: 4, kernelInitializer: 'invalid_initializer!'});\n    }).toThrowError(/Unknown initializer/);\n  });\n\n  it('Invalid activation', () => {\n    expect(() => {\n      // tslint:disable-next-line:no-unused-expression no-any\n      tfl.layers.dense({units: 4, activation: 'invalid_activation!' as any});\n    }).toThrowError(/Unknown activation/);\n  });\n\n  it('Invalid units leads to Error', () => {\n    expect(() => tfl.layers.dense({\n      units: 10.9\n    })).toThrowError(/units.*positive integer.*10\\.9\\.$/);\n    expect(() => tfl.layers.dense({\n      units: 0.5\n    })).toThrowError(/units.*positive integer.*0\\.5\\.$/);\n    expect(() => tfl.layers.dense({\n      units: 0\n    })).toThrowError(/units.*positive integer.*0\\.$/);\n    expect(() => tfl.layers.dense({\n      units: -2\n    })).toThrowError(/units.*positive integer.*-2\\.$/);\n    expect(() => tfl.layers.dense({\n      // tslint:disable-next-line:no-any\n      units: '2' as any\n    })).toThrowError(/units.*positive integer.*\\\"2\\\"\\.$/);\n    expect(() => tfl.layers.dense({\n      // tslint:disable-next-line:no-any\n      units: [] as any\n    })).toThrowError('units is unexpectedly an empty array.');\n  });\n});\n\ndescribeMathCPUAndGPU('Dense Layer: Tensor', () => {\n  const units = 6;\n  const useBiases = [null, false, true];\n  const biasInitializers: InitializerIdentifier[] = ['zeros', 'ones'];\n  const activations: ActivationIdentifier[] =\n      [null, 'linear', 'relu', 'softmax'];\n  const inputLastDims = [5, 8];\n  // TODO(cais): Test Tensor1D, Tensor3D, Tensor4D once those are supported by\n  // the backend.\n\n  for (const useBias of useBiases) {\n    for (const biasInitializer of biasInitializers) {\n      for (const activation of activations) {\n        for (const inputLastDim of inputLastDims) {\n          it(`Call once: useBias=${useBias}, ` +\n                 `biasInitializer=${biasInitializer}, ` +\n                 `activation=${activation}, ` +\n                 `inputLastDim=${JSON.stringify(inputLastDim)}`,\n             () => {\n               const input = ones([2, inputLastDim]);\n               const denseLayer = tfl.layers.dense({\n                 units,\n                 useBias,\n                 biasInitializer,\n                 activation,\n                 kernelInitializer: 'ones'\n               });\n               let expectedElementValue: number;\n               if (activation === 'softmax') {\n                 expectedElementValue = 1 / units;\n               } else {\n                 expectedElementValue = input.shape[input.shape.length - 1];\n                 if (useBias !== false && biasInitializer === 'ones') {\n                   expectedElementValue += 1;\n                 }\n               }\n               const expectedShape = input.shape.slice();\n               expectedShape[expectedShape.length - 1] = units;\n               let expectedOutput;\n               if (input.rank === 2) {\n                 expectedOutput = tensor2d(\n                     pyListRepeat(\n                         expectedElementValue, arrayProd(expectedShape)),\n                     [expectedShape[0], expectedShape[1]]);\n               }\n               expectTensorsClose(\n                   denseLayer.apply(input, null) as Tensor, expectedOutput);\n             });\n        }\n      }\n    }\n  }\n\n  it('Calling apply again with incompatible shape leads to error', () => {\n    const input1 = ones([2, 2]);  // First call.\n    const input2 = ones([3, 2]);  // Okay.\n    const input3 = ones([3, 3]);  // Leads to error.\n\n    const denseLayer = tfl.layers.dense({units: 4, kernelInitializer: 'ones'});\n    expectTensorsClose(\n        denseLayer.apply(input1) as Tensor,\n        tensor2d([2, 2, 2, 2, 2, 2, 2, 2], [2, 4]));\n    expectTensorsClose(\n        denseLayer.apply(input2) as Tensor,\n        tensor2d([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [3, 4]));\n    expect(() => denseLayer.apply(input3)).toThrowError();\n  });\n  it('Calling apply with compatible symbolic input after Tensor input works',\n     () => {\n       const concreteInput = ones([2, 2]);\n       const symbolicInput =\n           new tfl.SymbolicTensor('float32', [2, 2], null, [], null);\n       const denseLayer =\n           tfl.layers.dense({units: 4, kernelInitializer: 'ones'});\n\n       expectTensorsClose(\n           denseLayer.apply(concreteInput) as Tensor,\n           tensor2d([2, 2, 2, 2, 2, 2, 2, 2], [2, 4]));\n\n       const symbolicOuptut =\n           denseLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n       expect(symbolicOuptut.shape).toEqual([2, 4]);\n       expect(symbolicOuptut.sourceLayer).toEqual(denseLayer);\n       expect(symbolicOuptut.inputs).toEqual([symbolicInput]);\n     });\n  it('Calling apply with incompatible symbolic input after Tensor', () => {\n    const concreteInput = ones([2, 2]);\n    const symbolicInput =\n        new tfl.SymbolicTensor('float32', [2, 3], null, [], null);\n    const denseLayer = tfl.layers.dense({units: 4, kernelInitializer: 'ones'});\n\n    expectTensorsClose(\n        denseLayer.apply(concreteInput) as Tensor,\n        tensor2d([2, 2, 2, 2, 2, 2, 2, 2], [2, 4]));\n\n    expect(() => {\n      // tslint:disable-next-line:no-unused-expression\n      denseLayer.apply(symbolicInput);\n    }).toThrowError(/incompatible with layer .* axis -1/);\n  });\n});\n\ndescribe('Flatten Layer: Symbolic', () => {\n  const symbolicInputs = [\n    new tfl.SymbolicTensor('float32', [12, 10, 4], null, [], null),\n    new tfl.SymbolicTensor('float32', [14, 12, 10, 4], null, [], null),\n    new tfl.SymbolicTensor('float32', [null, 10, 4], null, [], null),\n    new tfl.SymbolicTensor('float32', [null, 12, 10, 4], null, [], null),\n  ];\n\n  for (const symbolicInput of symbolicInputs) {\n    it(`Generates correct symbolic output: no-arg constructor: ` +\n           `input shape=${JSON.stringify(symbolicInput.shape)}`,\n       () => {\n         const flattenLayer = tfl.layers.flatten();\n         const output = flattenLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n         const expectedShape =\n             [symbolicInput.shape[0], arrayProd(symbolicInput.shape, 1)];\n         expect(output.shape).toEqual(expectedShape);\n         expect(output.sourceLayer).toEqual(flattenLayer);\n         expect(output.inputs).toEqual([symbolicInput]);\n       });\n\n    it(`Generates correct symbolic output: empty one-arg constructor: ` +\n           `input shape=${JSON.stringify(symbolicInput.shape)}`,\n       () => {\n         const flattenLayer = tfl.layers.flatten({});\n         const output = flattenLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n         const expectedShape =\n             [symbolicInput.shape[0], arrayProd(symbolicInput.shape, 1)];\n         expect(output.shape).toEqual(expectedShape);\n         expect(output.sourceLayer).toEqual(flattenLayer);\n         expect(output.inputs).toEqual([symbolicInput]);\n       });\n  }\n\n  it('2D tfl.SymbolicTensor leads to error', () => {\n    const flattenLayer = tfl.layers.flatten();\n    const x = new tfl.SymbolicTensor('float32', [null, 4], null, [], null);\n    expect(() => flattenLayer.apply(x)).toThrowError();\n  });\n\n  it('3D with undetermined input size leads to error', () => {\n    const flattenLayer = tfl.layers.flatten({});\n    const x = new tfl.SymbolicTensor('float32', [8, 4, null], null, [], null);\n    expect(() => flattenLayer.apply(x)).toThrowError(/not fully defined/);\n  });\n  it('Serialization round trip', () => {\n    const layer = tfl.layers.flatten({dataFormat: 'channelsFirst'});\n    const pythonicConfig = convertTsToPythonic(layer.getConfig());\n    // tslint:disable-next-line:no-any\n    const tsConfig = convertPythonicToTs(pythonicConfig) as any;\n    const layerPrime = tfl.layers.flatten(tsConfig);\n    expect(layerPrime.getConfig().dataFormat).toEqual('channelsFirst');\n  });\n});\n\ndescribeMathCPUAndGPU('Flatten Layer: Tensor', () => {\n  it('Attempt to apply on Tensor2D leads to error', () => {\n    const flattenLayer = tfl.layers.flatten();\n    const x = tensor2d([[1, 3], [3, 3]], [2, 2]);\n    expect(() => flattenLayer.apply(x)).toThrowError();\n  });\n  it('Flattens Tensor3D', () => {\n    const flattenLayer = tfl.layers.flatten();\n    const x =\n        tensor3d([[[10, 20], [30, 40]], [[-10, -20], [-30, -40]]], [2, 2, 2]);\n    const expectedOutput =\n        tensor2d([[10, 20, 30, 40], [-10, -20, -30, -40]], [2, 4]);\n    expectTensorsClose(flattenLayer.apply(x, null) as Tensor, expectedOutput);\n  });\n  it('Flattens Tensor4D', () => {\n    const flattenLayer = tfl.layers.flatten();\n    const x = tensor4d(\n        [\n          [[[10, 20], [30, 40]], [[-10, -20], [-30, -40]]],\n          [[[1, 2], [3, 4]], [[-1, -2], [-3, -4]]]\n        ],\n        [2, 2, 2, 2]);\n    const expectedOutput = tensor2d(\n        [10, 20, 30, 40, -10, -20, -30, -40, 1, 2, 3, 4, -1, -2, -3, -4],\n        [2, 8]);\n    expectTensorsClose(flattenLayer.apply(x, null) as Tensor, expectedOutput);\n  });\n  it('Flattens Tensor4D, channelFirst', () => {\n    const flattenLayer = tfl.layers.flatten({dataFormat: 'channelsFirst'});\n    const x = tensor4d(\n        [\n          [[[10, 20], [30, 40]], [[-10, -20], [-30, -40]]],\n          [[[1, 2], [3, 4]], [[-1, -2], [-3, -4]]]\n        ],\n        [2, 2, 2, 2]);\n    const expectedOutput = tensor2d(\n        [10, -10, 20, -20, 30, -30, 40, -40, 1, -1, 2, -2, 3, -3, 4, -4],\n        [2, 8]);\n    expectTensorsClose(flattenLayer.apply(x, null) as Tensor, expectedOutput);\n  });\n});\n\ndescribeMathCPUAndGPU('Activation Layer: Tensor', () => {\n  const inputShape = [1];\n\n  it('linear', () => {\n    const x = mul(scalar(10), ones(inputShape));\n    const layer = tfl.layers.activation({activation: 'linear'});\n    const output = layer.apply(x) as Tensor;\n    expectTensorsClose(output, x);\n  });\n\n  it('relu', () => {\n    const x = mul(scalar(-5), ones(inputShape));\n    const expectedValue = zeros(inputShape);\n    const layer = tfl.layers.activation({activation: 'relu'});\n    const output = layer.apply(x) as Tensor;\n    expectTensorsClose(output, expectedValue);\n  });\n\n  it('sigmoid', () => {\n    const val = 10;\n    const x = mul(scalar(val), ones(inputShape));\n    const expectedValue =\n        mul(scalar(1 / (1 + Math.exp(-1 * val))), ones(inputShape));\n    const layer = tfl.layers.activation({activation: 'sigmoid'});\n    const output = layer.apply(x) as Tensor;\n    expectTensorsClose(output, expectedValue);\n  });\n\n  it('softmax', () => {\n    const x = mul(scalar(10), ones(inputShape));\n    const expectedValue = ones(inputShape);\n    const layer = tfl.layers.activation({activation: 'softmax'});\n    const output = layer.apply(x) as Tensor;\n    expectTensorsClose(output, expectedValue);\n  });\n\n  it('Serialization round trip', () => {\n    const layer = tfl.layers.activation({activation: 'relu'});\n    const pythonicConfig = convertTsToPythonic(layer.getConfig());\n    // tslint:disable-next-line:no-any\n    const tsConfig = convertPythonicToTs(pythonicConfig) as any;\n    const layerPrime = tfl.layers.activation(tsConfig);\n    expect(layerPrime.getConfig().activation).toEqual('relu');\n  });\n});\n\ndescribe('RepeatVector Layer: Symbolic', () => {\n  it('All dimensions known.', () => {\n    const symbolicInput =\n        new tfl.SymbolicTensor('float32', [3, 4], null, [], null);\n    const repeatVectorLayer = tfl.layers.repeatVector({n: 2});\n    const output = repeatVectorLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n    expect(output.shape).toEqual([3, 2, 4]);\n    expect(output.sourceLayer).toEqual(repeatVectorLayer);\n    expect(output.inputs).toEqual([symbolicInput]);\n  });\n});\n\ndescribeMathCPUAndGPU('RepeatVector Layer: Tensor', () => {\n  it('With 2D tensor', () => {\n    const repeatVectorLayer = tfl.layers.repeatVector({n: 3});\n    const x = tensor2d([[10, 20], [30, 40]], [2, 2]);\n    const expectedOutput = tensor3d(\n        [[[10, 20], [10, 20], [10, 20]], [[30, 40], [30, 40], [30, 40]]],\n        [2, 3, 2]);\n    expectTensorsClose(\n        repeatVectorLayer.apply(x, null) as Tensor, expectedOutput);\n  });\n});\n\ndescribe('Reshape Layer: Symbolic', () => {\n  it('All dimensions known.', () => {\n    const symbolicInput =\n        new tfl.SymbolicTensor('float32', [12, 10, 4], null, [], null);\n    const targetShape = [5, 8];\n    const flattenLayer = tfl.layers.reshape({targetShape});\n    const output = flattenLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n    expect(output.shape).toEqual([12, 5, 8]);\n    expect(output.sourceLayer).toEqual(flattenLayer);\n    expect(output.inputs).toEqual([symbolicInput]);\n  });\n\n  it('One unknown dimension.', () => {\n    const symbolicInput =\n        new tfl.SymbolicTensor('float32', [12, 10, 4], null, [], null);\n    const targetShape = [5, null];\n    const flattenLayer = tfl.layers.reshape({targetShape});\n    const output = flattenLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n    expect(output.shape).toEqual([12, 5, 8]);\n    expect(output.sourceLayer).toEqual(flattenLayer);\n    expect(output.inputs).toEqual([symbolicInput]);\n  });\n\n  it('Incompatible size.', () => {\n    const symbolicInput =\n        new tfl.SymbolicTensor('float32', [12, 10, 4], null, [], null);\n    const targetShape = [8, 8];\n    const flattenLayer = tfl.layers.reshape({targetShape});\n    expect(() => flattenLayer.apply(symbolicInput))\n        .toThrowError(/Total size of new array must be unchanged/);\n  });\n\n  it('Two unknown dimensions.', () => {\n    const symbolicInput =\n        new tfl.SymbolicTensor('float32', [12, 10, 4], null, [], null);\n    const targetShape: number[] = [null, null];\n    const flattenLayer = tfl.layers.reshape({targetShape});\n    expect(() => flattenLayer.apply(symbolicInput))\n        .toThrowError(/Can only specifiy one unknown dimension/);\n  });\n\n  it('One unknown with indivisible size.', () => {\n    const symbolicInput =\n        new tfl.SymbolicTensor('float32', [12, 10, 4], null, [], null);\n    const targetShape = [7, null];\n    const flattenLayer = tfl.layers.reshape({targetShape});\n    expect(() => flattenLayer.apply(symbolicInput))\n        .toThrowError(/Total size of new array must be unchanged/);\n  });\n\n  it('Serialization round-trip', () => {\n    const layer = tfl.layers.reshape({targetShape: [2, 3]});\n    const pythonicConfig = convertTsToPythonic(layer.getConfig());\n    // tslint:disable-next-line:no-any\n    const tsConfig = convertPythonicToTs(pythonicConfig) as any;\n    const layerPrime = tfl.layers.reshape(tsConfig);\n    expect(layerPrime.getConfig().targetShape).toEqual([2, 3]);\n  });\n});\n\ndescribeMathCPUAndGPU('Reshape Layer: Tensor', () => {\n  it('Reshape Tensor3D to Tensor3D: All dimensions known', () => {\n    const reshapeLayer = tfl.layers.reshape({targetShape: [4, 1]});\n    const x =\n        tensor3d([[[10, 20], [30, 40]], [[-10, -20], [-30, -40]]], [2, 2, 2]);\n    const expectedOutput =\n        tensor3d([10, 20, 30, 40, -10, -20, -30, -40], [2, 4, 1]);\n    expectTensorsClose(reshapeLayer.apply(x, null) as Tensor, expectedOutput);\n  });\n\n  it('Reshape Tensor3D to Tensor2D: All dimensions known', () => {\n    const reshapeLayer = tfl.layers.reshape({targetShape: [4]});\n    const x =\n        tensor3d([[[10, 20], [30, 40]], [[-10, -20], [-30, -40]]], [2, 2, 2]);\n    const expectedOutput =\n        tensor2d([10, 20, 30, 40, -10, -20, -30, -40], [2, 4]);\n    expectTensorsClose(reshapeLayer.apply(x, null) as Tensor, expectedOutput);\n  });\n\n  it('Reshape Tensor2D to Tensor3D: All dimensions known', () => {\n    const reshapeLayer = tfl.layers.reshape({targetShape: [3, 2]});\n    const x = tensor2d(\n        [[10, 20, 30, 40, 50, 60], [-10, -20, -30, -40, -50, -60]], [2, 6]);\n    const expectedOutput = tensor3d(\n        [10, 20, 30, 40, 50, 60, -10, -20, -30, -40, -50, -60], [2, 3, 2]);\n    expectTensorsClose(reshapeLayer.apply(x, null) as Tensor, expectedOutput);\n  });\n\n  for (const unknownDim of [-1, null]) {\n    it(`Reshape Tensor2D to Tensor3D: Last dimension unknown as ${unknownDim}`,\n       () => {\n         const reshapeLayer =\n             tfl.layers.reshape({targetShape: [3, unknownDim]});\n         const x = tensor2d(\n             [[10, 20, 30, 40, 50, 60], [-10, -20, -30, -40, -50, -60]],\n             [2, 6]);\n         const expectedOutput = tensor3d(\n             [10, 20, 30, 40, 50, 60, -10, -20, -30, -40, -50, -60], [2, 3, 2]);\n         expectTensorsClose(\n             reshapeLayer.apply(x, null) as Tensor, expectedOutput);\n       });\n\n    it(`Reshape Tensor2D to Tensor3D: First dimension unknown as ${unknownDim}`,\n       () => {\n         const reshapeLayer =\n             tfl.layers.reshape({targetShape: [unknownDim, 3]});\n         const x = tensor2d(\n             [[10, 20, 30, 40, 50, 60], [-10, -20, -30, -40, -50, -60]],\n             [2, 6]);\n         const expectedOutput = tensor3d(\n             [10, 20, 30, 40, 50, 60, -10, -20, -30, -40, -50, -60], [2, 2, 3]);\n         expectTensorsClose(\n             reshapeLayer.apply(x, null) as Tensor, expectedOutput);\n       });\n  }\n\n  it('Known but incompatible dimensions', () => {\n    const reshapeLayer = tfl.layers.reshape({targetShape: [3, 3]});\n    const x =\n        tensor3d([[[10, 20], [30, 40]], [[-10, -20], [-30, -40]]], [2, 2, 2]);\n    expect(() => reshapeLayer.apply(x, null))\n        .toThrowError(/Total size of new array must be unchanged/);\n  });\n\n  it('Unknown and incompatible dimensions', () => {\n    const reshapeLayer = tfl.layers.reshape({targetShape: [3, null]});\n    const x =\n        tensor3d([[[10, 20], [30, 40]], [[-10, -20], [-30, -40]]], [2, 2, 2]);\n    expect(() => reshapeLayer.apply(x, null))\n        .toThrowError(/Total size of new array must be unchanged/);\n  });\n\n  it('More than one unknown dimension.', () => {\n    const reshapeLayer = tfl.layers.reshape({targetShape: [null, null]});\n    const x =\n        tensor3d([[[10, 20], [30, 40]], [[-10, -20], [-30, -40]]], [2, 2, 2]);\n    expect(() => reshapeLayer.apply(x, null))\n        .toThrowError(/Can only specifiy one unknown dimension/);\n  });\n});\n\ndescribe('Permute Layer: Symbolic', () => {\n  it('1D Trivial', () => {\n    const symbolicInput =\n        new tfl.SymbolicTensor('float32', [null, 4], null, [], null);\n    const dims = [1];\n    const permuteLayer = tfl.layers.permute({dims});\n    const output = permuteLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n    expect(output.shape).toEqual([null, 4]);\n    expect(output.sourceLayer).toEqual(permuteLayer);\n    expect(output.inputs).toEqual([symbolicInput]);\n  });\n\n  it('2D', () => {\n    const symbolicInput =\n        new tfl.SymbolicTensor('float32', [null, 4, 6], null, [], null);\n    const dims = [2, 1];\n    const permuteLayer = tfl.layers.permute({dims});\n    const output = permuteLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n    expect(output.shape).toEqual([null, 6, 4]);\n    expect(output.sourceLayer).toEqual(permuteLayer);\n    expect(output.inputs).toEqual([symbolicInput]);\n  });\n\n  it('3D', () => {\n    const symbolicInput =\n        new tfl.SymbolicTensor('float32', [null, 4, 6, 8], null, [], null);\n    const dims = [3, 1, 2];\n    const permuteLayer = tfl.layers.permute({dims});\n    const output = permuteLayer.apply(symbolicInput) as tfl.SymbolicTensor;\n    expect(output.shape).toEqual([null, 8, 4, 6]);\n    expect(output.sourceLayer).toEqual(permuteLayer);\n    expect(output.inputs).toEqual([symbolicInput]);\n  });\n\n  it('Missing dims config leads to Error', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tfl.layers.permute({} as any)).toThrowError(/dims.* missing/);\n  });\n\n  it('Non-Array dims config leads to Error', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tfl.layers.permute({dims: 1} as any))\n        .toThrowError(/requires.*dims.* to be an Array/);\n  });\n\n  it('Non-consecutive dims values leads to Error', () => {\n    expect(() => tfl.layers.permute({\n      dims: [1, 3]\n    })).toThrowError(/Invalid permutation .*dims/);\n  });\n\n  it('Repeating dims values leads to Error', () => {\n    expect(() => tfl.layers.permute({\n      dims: [1, 1, 3]\n    })).toThrowError(/Invalid permutation .*dims/);\n  });\n\n  it('Dims values containing 0 leads to Error', () => {\n    expect(() => tfl.layers.permute({\n      dims: [0, 1, 2]\n    })).toThrowError(/Invalid permutation .*dims/);\n  });\n\n  it('Serialization round-trip', () => {\n    const layer = tfl.layers.permute({dims: [1, 3, 2]});\n    const pythonicConfig = convertTsToPythonic(layer.getConfig());\n    // tslint:disable-next-line:no-any\n    const tsConfig = convertPythonicToTs(pythonicConfig) as any;\n    const layerPrime = tfl.layers.permute(tsConfig);\n    expect(layerPrime.getConfig().dims).toEqual([1, 3, 2]);\n  });\n});\n\ndescribe('Masking Layer: Symbolic', () => {\n  it('computeOutputShape', () => {\n    const layer = tfl.layers.masking();\n    const inputShape = [null, 4, 6];\n    const outputShape = layer.computeOutputShape(inputShape);\n    expect(outputShape).toEqual([null, 4, 6]);\n  });\n\n  it('Serialization round-trip', () => {\n    const layer = tfl.layers.masking({maskValue: -3});\n    const pythonicConfig = convertTsToPythonic(layer.getConfig());\n    // tslint:disable-next-line:no-any\n    const tsConfig = convertPythonicToTs(pythonicConfig) as any;\n    const layerPrime = tfl.layers.masking(tsConfig);\n    expect(layerPrime.getConfig().maskValue).toEqual(-3);\n  });\n});\n\ndescribeMathCPUAndGPU('Permute Layer: Tensor', () => {\n  it('2D', () => {\n    const permuteLayer = tfl.layers.permute({dims: [2, 1]});\n    const x =\n        tensor3d([[[10, 20], [30, 40]], [[-10, -20], [-30, -40]]], [2, 2, 2]);\n    const expectedOutput =\n        tensor3d([[[10, 30], [20, 40]], [[-10, -30], [-20, -40]]], [2, 2, 2]);\n    expectTensorsClose(permuteLayer.apply(x) as Tensor, expectedOutput);\n  });\n});\n\ndescribeMathCPUAndGPU('Masking Layer: Tensor', () => {\n  // Reference Python code:\n  // ```py\n  // import numpy as np\n  // import tensorflow as tf\n  //\n  // model = tf.keras.Sequential()\n  // model.add(tf.keras.layers.Masking(input_shape=[3, 2]))\n  // model.add(tf.keras.layers.SimpleRNN(\n  //   units=1,\n  //   recurrent_initializer='ones',\n  //   kernel_initializer='ones'))\n  //\n  // xs = np.array([[[1, 1], [1, 0], [0, 0]]], dtype=np.float32)\n  // print(xs.shape)\n  // ys = model.predict(xs)\n  //\n  // print(ys)\n  // ```\n  it('3D, default maskValue', () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.masking({inputShape: [3, 2]}));\n    model.add(tfl.layers.simpleRNN(\n        {units: 1, recurrentInitializer: 'ones', kernelInitializer: 'ones'}));\n\n    const xs = tensor3d([[[1, 1], [1, 0], [0, 0]]]);\n    const ys = model.predict(xs) as Tensor;\n    expectTensorsClose(ys, tensor2d([[0.961396]]));\n  });\n\n  // Reference Python code:\n  // ```py\n  // import numpy as np\n  // import tensorflow as tf\n  //\n  // model = tf.keras.Sequential()\n  // model.add(tf.keras.layers.Masking(mask_value=-1, input_shape=[3, 2]))\n  // model.add(tf.keras.layers.SimpleRNN(\n  //   units=1,\n  //   recurrent_initializer='ones',\n  //   kernel_initializer='ones'))\n  //\n  // xs = np.array([[[1, 1], [1, -1], [-1, -1]]], dtype=np.float32)\n  // print(xs.shape)\n  // ys = model.predict(xs)\n  //\n  // print(ys)\n  // ```\n  it('3D, custom maskValue', () => {\n    const model = tfl.sequential();\n    model.add(tfl.layers.masking({maskValue: -1, inputShape: [3, 2]}));\n    model.add(tfl.layers.simpleRNN(\n        {units: 1, recurrentInitializer: 'ones', kernelInitializer: 'ones'}));\n\n    const xs = tensor3d([[[1, 1], [1, -1], [-1, -1]]]);\n    const ys = model.predict(xs) as Tensor;\n    expectTensorsClose(ys, tensor2d([[0.746068]]));\n  });\n});\n"]}