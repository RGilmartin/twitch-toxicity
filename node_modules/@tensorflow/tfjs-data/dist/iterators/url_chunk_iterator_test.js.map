{"version":3,"file":"url_chunk_iterator_test.js","sourceRoot":"","sources":["../../src/iterators/url_chunk_iterator_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {urlChunkIterator} from './url_chunk_iterator';\n\nconst TEST_STRING = 'abcdefghijklmnopqrstuvwxyz';\n\ndescribe('URLChunkIterator', () => {\n  beforeAll(() => {\n    spyOn(util, 'fetch').and.callFake((path: string) => {\n      const buf = new ArrayBuffer(TEST_STRING.length);\n      const bufView = new Uint8Array(buf);\n      for (let i = 0, strLen = TEST_STRING.length; i < strLen; i++) {\n        bufView[i] = TEST_STRING.charCodeAt(i);\n      }\n\n      return {\n        ok: true,\n        arrayBuffer: async () => {\n          return buf;\n        }\n      };\n    });\n  });\n\n  it('Reads the entire file and then closes the stream', async () => {\n    const readIterator = await urlChunkIterator('', {chunkSize: 10});\n    const result = await readIterator.toArrayForTest();\n    expect(result.length).toEqual(3);\n    const totalBytes = result.map(x => x.length).reduce((a, b) => a + b);\n    expect(totalBytes).toEqual(26);\n  });\n\n  it('Reads chunks in order', async () => {\n    const readIterator = await urlChunkIterator('', {chunkSize: 10});\n\n    const result = await readIterator.toArrayForTest();\n    expect(result[0][0]).toEqual('a'.charCodeAt(0));\n    expect(result[1][0]).toEqual('k'.charCodeAt(0));\n    expect(result[2][0]).toEqual('u'.charCodeAt(0));\n  });\n\n  it('Reads chunks of expected sizes', async () => {\n    const readIterator = await urlChunkIterator('', {chunkSize: 10});\n\n    const result = await readIterator.toArrayForTest();\n    expect(result[0].length).toEqual(10);\n    expect(result[1].length).toEqual(10);\n    expect(result[2].length).toEqual(6);\n  });\n});\n"]}