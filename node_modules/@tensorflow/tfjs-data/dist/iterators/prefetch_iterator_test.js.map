{"version":3,"file":"prefetch_iterator_test.js","sourceRoot":"","sources":["../../src/iterators/prefetch_iterator_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;GAgBG;AAEH,OAAO,EAAC,gCAAgC,EAAC,MAAM,iBAAiB,CAAC;AACjE,OAAO,EAAC,gBAAgB,EAAC,MAAM,iBAAiB,CAAC;AACjD,OAAO,EAAC,mBAAmB,EAAC,MAAM,sBAAsB,CAAC;AAEzD,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,gBAAgB,GAClB,IAAI,gBAAgB,CAAC,IAAI,mBAAmB,EAAE,EAAE,GAAG,CAAC,CAAC;QACzD,MAAM,cAAc,GAAa,EAAE,CAAC;QACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC5B,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SACvB;QAED,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAChD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EACjE,KAAK,IAAI,EAAE;QACT,MAAM,YAAY,GAAG,gCAAgC,CACjD,GAAG,EAAE,CAAC,CAAC,EAAC,KAAK,EAAE,IAAI,mBAAmB,EAAE,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAEhE,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;QAEjE,MAAM,cAAc,GAAa,EAAE,CAAC;QACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC5B,cAAc,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;aACjC;SACF;QAED,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAChD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,iEAAiE,EACjE,KAAK,IAAI,EAAE;QACT,MAAM,YAAY,GAAG,gCAAgC,CACjD,GAAG,EAAE,CAAC,CAAC,EAAC,KAAK,EAAE,IAAI,mBAAmB,EAAE,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAEhE,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;QACjE,MAAM,cAAc,GAAa,EAAE,CAAC;QACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC5B,cAAc,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;aACjC;SACF;QAED,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAChD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {iteratorFromConcatenatedFunction} from './lazy_iterator';\nimport {PrefetchIterator} from './lazy_iterator';\nimport {TestIntegerIterator} from './lazy_iterator_test';\n\ndescribe('PrefetchIterator', () => {\n  it('fetches a stream completely (stream size < buffer size)', async () => {\n    const prefetchIterator =\n        new PrefetchIterator(new TestIntegerIterator(), 500);\n    const expectedResult: number[] = [];\n    for (let j = 0; j < 100; j++) {\n      expectedResult[j] = j;\n    }\n\n    const result = await prefetchIterator.toArray();\n    expect(result).toEqual(expectedResult);\n  });\n\n  it('fetches a chained stream completely (stream size < buffer size)',\n     async () => {\n       const baseIterator = iteratorFromConcatenatedFunction(\n           () => ({value: new TestIntegerIterator(), done: false}), 3);\n\n       const prefetchIterator = new PrefetchIterator(baseIterator, 500);\n\n       const expectedResult: number[] = [];\n       for (let i = 0; i < 3; i++) {\n         for (let j = 0; j < 100; j++) {\n           expectedResult[i * 100 + j] = j;\n         }\n       }\n\n       const result = await prefetchIterator.toArray();\n       expect(result).toEqual(expectedResult);\n     });\n\n  it('fetches a chained stream completely (stream size > buffer size)',\n     async () => {\n       const baseIterator = iteratorFromConcatenatedFunction(\n           () => ({value: new TestIntegerIterator(), done: false}), 3);\n\n       const prefetchIterator = new PrefetchIterator(baseIterator, 122);\n       const expectedResult: number[] = [];\n       for (let i = 0; i < 3; i++) {\n         for (let j = 0; j < 100; j++) {\n           expectedResult[i * 100 + j] = j;\n         }\n       }\n\n       const result = await prefetchIterator.toArray();\n       expect(result).toEqual(expectedResult);\n     });\n});\n"]}