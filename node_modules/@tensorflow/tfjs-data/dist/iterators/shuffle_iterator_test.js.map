{"version":3,"file":"shuffle_iterator_test.js","sourceRoot":"","sources":["../../src/iterators/shuffle_iterator_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {ChainedIterator, iteratorFromItems} from './lazy_iterator';\nimport {iteratorFromConcatenatedFunction} from './lazy_iterator';\nimport {ShuffleIterator} from './lazy_iterator';\nimport {TestIntegerIterator} from './lazy_iterator_test';\n\nconst LONG_STREAM_LENGTH = 100;\nconst SHORT_STREAM_LENGTH = 15;\n\ndescribe('ShuffleIterator', () => {\n  it('shuffles a stream without replacement', async () => {\n    const baseIterator = new TestIntegerIterator(LONG_STREAM_LENGTH);\n    const shuffleIterator = new ShuffleIterator(baseIterator, 1000);\n    const notExpectedResult: number[] = [];\n    for (let i = 0; i < 1; i++) {\n      for (let j = 0; j < LONG_STREAM_LENGTH; j++) {\n        notExpectedResult[i * LONG_STREAM_LENGTH + j] = j;\n      }\n    }\n    const result = await shuffleIterator.toArrayForTest();\n    expect(result).not.toEqual(notExpectedResult);\n    expect(result.length).toEqual(LONG_STREAM_LENGTH);\n    const counts = new Array<number>(LONG_STREAM_LENGTH);\n    result.forEach((x) => {\n      counts[x] = (counts[x] || 0) + 1;\n    });\n    for (let i = 0; i < LONG_STREAM_LENGTH; i++) {\n      expect(counts[i]).toEqual(1);\n    }\n  });\n\n  it('shuffles a single chained stream without replacement', async () => {\n    const baseIterator = new ChainedIterator(\n        iteratorFromItems([new TestIntegerIterator(SHORT_STREAM_LENGTH)]));\n    const shuffleIterator = new ShuffleIterator(baseIterator, 1000);\n    const notExpectedResult: number[] = [];\n    for (let i = 0; i < 1; i++) {\n      for (let j = 0; j < SHORT_STREAM_LENGTH; j++) {\n        notExpectedResult[i * SHORT_STREAM_LENGTH + j] = j;\n      }\n    }\n    const result = await shuffleIterator.toArrayForTest();\n    expect(result).not.toEqual(notExpectedResult);\n    expect(result.length).toEqual(SHORT_STREAM_LENGTH);\n    const counts = new Array<number>(SHORT_STREAM_LENGTH);\n    result.forEach((x) => {\n      counts[x] = (counts[x] || 0) + 1;\n    });\n    for (let i = 0; i < SHORT_STREAM_LENGTH; i++) {\n      expect(counts[i]).toEqual(1);\n    }\n  });\n\n  it('shuffles multiple chained streams without replacement', async () => {\n    const baseIterator = iteratorFromConcatenatedFunction(\n        () => (\n            {value: new TestIntegerIterator(SHORT_STREAM_LENGTH), done: false}),\n        3);\n    const shuffleIterator = new ShuffleIterator(baseIterator, 1000);\n    const notExpectedResult: number[] = [];\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < SHORT_STREAM_LENGTH; j++) {\n        notExpectedResult[i * SHORT_STREAM_LENGTH + j] = j;\n      }\n    }\n    const result = await shuffleIterator.toArrayForTest();\n    expect(result).not.toEqual(notExpectedResult);\n    expect(result.length).toEqual(3 * SHORT_STREAM_LENGTH);\n    const counts = new Array<number>(SHORT_STREAM_LENGTH);\n    result.forEach((x) => {\n      counts[x] = (counts[x] || 0) + 1;\n    });\n    for (let i = 0; i < SHORT_STREAM_LENGTH; i++) {\n      expect(counts[i]).toEqual(3);\n    }\n  });\n});\n"]}