{"version":3,"file":"microphone_iterator_test.js","sourceRoot":"","sources":["../../src/iterators/microphone_iterator_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {tensor2d, tensor3d, test_util} from '@tensorflow/tfjs-core';\n// TODO(kangyizhang): import from index once microphone is exported.\nimport * as tfd from '../readers';\nimport {describeBrowserEnvs, setupFakeAudeoStream} from '../util/test_utils';\n\ndescribeBrowserEnvs('MicrophoneIterator', () => {\n  beforeEach(() => {\n    setupFakeAudeoStream();\n  });\n\n  it('gets tensor with default shape with no config', async () => {\n    const microphoneIterator = await tfd.microphone();\n    const result = await microphoneIterator.next();\n    expect(result.done).toBeFalsy();\n    // tslint:disable-next-line:no-any\n    expect((result.value as any).spectrogram.shape).toEqual([43, 1024, 1]);\n  });\n\n  it('throws error when sample rate is not available', async done => {\n    try {\n      await tfd.microphone({sampleRateHz: 48000});\n      done.fail();\n    } catch (e) {\n      expect(e.message).toEqual(\n          'Mismatch in sampling rate: Expected: 48000; Actual: 44100');\n      done();\n    }\n  });\n\n  it('gets sample rate', async () => {\n    const microphoneIterator = await tfd.microphone({sampleRateHz: 44100});\n    expect(microphoneIterator.getSampleRate()).toEqual(44100);\n  });\n\n  it('uses available sample rate on device when it is not provided',\n     async () => {\n       const microphoneIterator = await tfd.microphone();\n       expect(microphoneIterator.getSampleRate()).toEqual(44100);\n     });\n\n  it('gets tensor in correct shape with fftSize', async () => {\n    const microphoneIterator = await tfd.microphone({fftSize: 16});\n    const result = await microphoneIterator.next();\n    expect(result.done).toBeFalsy();\n    // tslint:disable-next-line:no-any\n    expect((result.value as any).spectrogram.shape).toEqual([43, 16, 1]);\n  });\n\n  it('throws error with invalid fftSize', async done => {\n    try {\n      await tfd.microphone({fftSize: 1000});\n      done.fail();\n    } catch (e) {\n      expect(e.message).toEqual(\n          'Invalid fftSize: it must be a power of 2 between 2 to 4 and ' +\n          '2 to 14, but got 1000');\n      done();\n    }\n  });\n\n  it('gets tensor in correct shape with columnTruncateLength', async () => {\n    const microphoneIterator =\n        await tfd.microphone({columnTruncateLength: 232, fftSize: 128});\n    const result = await microphoneIterator.next();\n    expect(result.done).toBeFalsy();\n    // tslint:disable-next-line:no-any\n    expect((result.value as any).spectrogram.shape).toEqual([43, 232, 1]);\n  });\n\n  it('gets tensor in correct shape with numFramesPerSpectrogram', async () => {\n    const microphoneIterator =\n        await tfd.microphone({numFramesPerSpectrogram: 3, fftSize: 16});\n    const result = await microphoneIterator.next();\n    expect(result.done).toBeFalsy();\n    // tslint:disable-next-line:no-any\n    expect((result.value as any).spectrogram.shape).toEqual([3, 16, 1]);\n  });\n\n  it('gets tensor in correct shape with full spectrogram config', async () => {\n    const microphoneIterator = await tfd.microphone({\n      sampleRateHz: 44100,\n      fftSize: 16,\n      numFramesPerSpectrogram: 10,\n      columnTruncateLength: 10\n    });\n    const result = await microphoneIterator.next();\n    expect(result.done).toBeFalsy();\n    // tslint:disable-next-line:no-any\n    expect((result.value as any).spectrogram.shape).toEqual([10, 10, 1]);\n  });\n\n  it('provides both spectrogram and waveform', async () => {\n    const microphoneIterator = await tfd.microphone(\n        {includeSpectrogram: true, includeWaveform: true, fftSize: 16});\n    const result = await microphoneIterator.next();\n    expect(result.done).toBeFalsy();\n    // tslint:disable-next-line:no-any\n    expect((result.value as any).spectrogram.shape).toEqual([43, 16, 1]);\n    // tslint:disable-next-line:no-any\n    expect((result.value as any).waveform.shape).toEqual([688, 1]);\n  });\n\n  it('stops and restarts microphone', async () => {\n    const microphoneIterator = await tfd.microphone({fftSize: 16});\n    const result1 = await microphoneIterator.next();\n    expect(result1.done).toBeFalsy();\n    // tslint:disable-next-line:no-any\n    expect((result1.value as any).spectrogram.shape).toEqual([43, 16, 1]);\n    microphoneIterator.stop();\n    const result2 = await microphoneIterator.next();\n    expect(result2.done).toBeTruthy();\n    expect(result2.value).toBeNull();\n    microphoneIterator.start();\n    expect(result1.done).toBeFalsy();\n    // tslint:disable-next-line:no-any\n    expect((result1.value as any).spectrogram.shape).toEqual([43, 16, 1]);\n  });\n\n  it('stops microphone multiple times', async () => {\n    const microphoneIterator =\n        await tfd.microphone({fftSize: 16, numFramesPerSpectrogram: 2});\n    const result1 = await microphoneIterator.next();\n    expect(result1.done).toBeFalsy();\n    // tslint:disable-next-line:no-any\n    expect((result1.value as any).spectrogram.shape).toEqual([2, 16, 1]);\n    microphoneIterator.stop();\n    const result2 = await microphoneIterator.next();\n    expect(result2.done).toBeTruthy();\n    expect(result2.value).toBeNull();\n    microphoneIterator.stop();\n    const result3 = await microphoneIterator.next();\n    expect(result3.done).toBeTruthy();\n    expect(result3.value).toBeNull();\n  });\n\n  it('gets spectrogram and waveform tensor with correct value', async () => {\n    const microphoneIterator = await tfd.microphone({\n      numFramesPerSpectrogram: 1,\n      fftSize: 16,\n      includeSpectrogram: true,\n      includeWaveform: true\n    });\n    const result = await microphoneIterator.next();\n    expect(result.done).toBeFalsy();\n    // tslint:disable-next-line:no-any\n    const value = result.value as any;\n    expect(value.spectrogram.shape).toEqual([1, 16, 1]);\n    test_util.expectArraysClose(\n        await value.spectrogram.array(),\n        await tensor3d([[\n          [0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12],\n          [13], [14], [15]\n        ]]).array());\n    expect(value.waveform.shape).toEqual([16, 1]);\n    test_util.expectArraysClose(\n        await value.waveform.array(),\n        await tensor2d([\n          [-16], [-17], [-18], [-19], [-20], [-21], [-22], [-23], [-24], [-25],\n          [-26], [-27], [-28], [-29], [-30], [-31]\n        ]).array());\n  });\n\n  it('calls iterator.next() concurrently', async () => {\n    let timesRun = 0;\n    let tensorsReturned = 0;\n    const microphoneIterator = await tfd.microphone(\n        {numFramesPerSpectrogram: 10, columnTruncateLength: 10, fftSize: 32});\n\n    // This function will be called 3 times. Between each call there is a 200ms\n    // interval. The spectrogram tensor will be returned after 464ms.\n    /**\n     * The events happen in sequence are:\n     * call 1st at 0ms,    timesRun:1, tensorsReturned:0;\n     * call 2nd at 1ms,  timesRun:2, tensorsReturned:0;\n     * call 3rd at 2ms,  timesRun:3, tensorsReturned:0;\n     * tensor returned from 1st call at ~7ms, timesRun:3, tensorsReturned:1;\n     * tensor returned from 2nd call,  timesRun:3, tensorsReturned:2;\n     * tensor returned from 3rd call,  timesRun:3, tensorsReturned:3.\n     */\n    const getTensor = async () => {\n      // Clear the interval after it ran 3 times.\n      if (timesRun === 3) {\n        clearInterval(interval);\n      } else {\n        timesRun++;\n        expect(tensorsReturned).toBe(0);\n        const result = await microphoneIterator.next();\n        tensorsReturned++;\n        // When the first tensor got returned (~464ms), getTensor() function\n        // should have been called 3 times (at 400ms).\n        expect(timesRun).toBe(3);\n        expect(result.done).toBeFalsy();\n        // tslint:disable-next-line:no-any\n        const value = result.value as any;\n        expect(value.spectrogram.shape).toEqual([10, 10, 1]);\n      }\n    };\n\n    // Call iterator.next() every 200 milliseconds, stop after 3 times.\n    const interval = setInterval(getTensor, 1);\n\n    // Wait 3 seconds for the intervals to run.\n    await new Promise(resolve => {\n      setTimeout(() => {\n        resolve();\n      }, 100);\n    });\n    // Assert the intervals run 3 times.\n    expect(timesRun).toBe(3);\n    expect(tensorsReturned).toBe(3);\n  });\n\n  it('gets spectrogram from iterator.capture', async () => {\n    const microphoneIterator =\n        await tfd.microphone({fftSize: 16, numFramesPerSpectrogram: 1});\n    const result = await microphoneIterator.capture();\n    // tslint:disable-next-line:no-any\n    expect((result as any).spectrogram.shape).toEqual([1, 16, 1]);\n  });\n\n  it('gets waveform from iterator.capture', async () => {\n    const microphoneIterator = await tfd.microphone({\n      includeSpectrogram: false,\n      includeWaveform: true,\n      fftSize: 16,\n      numFramesPerSpectrogram: 1\n    });\n    const result = await microphoneIterator.capture();\n    // tslint:disable-next-line:no-any\n    expect((result as any).waveform.shape).toEqual([16, 1]);\n  });\n\n  it('gets spectrogram and waveform from iterator.capture', async () => {\n    const microphoneIterator = await tfd.microphone({\n      includeSpectrogram: true,\n      includeWaveform: true,\n      fftSize: 16,\n      numFramesPerSpectrogram: 1\n    });\n    const result = await microphoneIterator.capture();\n    // tslint:disable-next-line:no-any\n    expect((result as any).spectrogram.shape).toEqual([1, 16, 1]);\n    // tslint:disable-next-line:no-any\n    expect((result as any).waveform.shape).toEqual([16, 1]);\n  });\n});\n"]}