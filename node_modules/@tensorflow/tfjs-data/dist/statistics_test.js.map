{"version":3,"file":"statistics_test.js","sourceRoot":"","sources":["../src/statistics_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {Dataset} from './dataset';\nimport {TestDataset} from './dataset_test';\nimport {computeDatasetStatistics, scaleTo01, TabularRecord} from './statistics';\nimport {describeAllEnvs} from './util/test_utils';\n\ndescribeAllEnvs('makeDatasetStatistics', () => {\n  it('computes numeric min and max over numbers, arrays, and Tensors',\n     async () => {\n       const ds = new TestDataset().skip(55) as Dataset<TabularRecord>;\n       const stats = await computeDatasetStatistics(ds);\n       expect(stats['number'].min).toEqual(55);\n       expect(stats['number'].max).toEqual(99);\n       // The TestDataset includes cubes of the indices\n       expect(stats['numberArray'].min).toEqual(55);\n       expect(stats['numberArray'].max).toEqual(99 * 99 * 99);\n       expect(stats['Tensor'].min).toEqual(55);\n       expect(stats['Tensor'].max).toEqual(99 * 99 * 99);\n     });\n\n  it('computes numeric mean and variance over numbers, arrays, and Tensors',\n     async () => {\n       // According to https://github.com/tensorflow/tfjs/issues/658, unit tests\n       // for mean and variance will use small numbers.\n       const ds = new TestDataset().take(10) as Dataset<TabularRecord>;\n       const stats = await computeDatasetStatistics(ds);\n       expect(stats['number'].min).toEqual(0);\n       expect(stats['number'].max).toEqual(9);\n       expect(stats['number'].mean).toEqual(4.5);\n       expect(stats['number'].variance).toEqual(8.25);\n       expect(stats['number'].stddev).toEqual(2.8722813232690143);\n\n       // The TestDataset includes cubes of the indices\n       expect(stats['numberArray'].min).toEqual(0);\n       expect(stats['numberArray'].max).toEqual(729);\n       tf.test_util.expectNumbersClose(\n           stats['numberArray'].mean, 78.50000066757202);\n       tf.test_util.expectNumbersClose(\n           stats['numberArray'].variance, 26971.849851671857, 0.1);\n       tf.test_util.expectNumbersClose(\n           stats['numberArray'].stddev, 164.2310867396056);\n\n       expect(stats['Tensor'].min).toEqual(0);\n       expect(stats['Tensor'].max).toEqual(729);\n       tf.test_util.expectNumbersClose(stats['Tensor'].mean, 78.50000066757202);\n       tf.test_util.expectNumbersClose(\n           stats['Tensor'].variance, 26971.849851671857, 0.1);\n       tf.test_util.expectNumbersClose(\n           stats['Tensor'].stddev, 164.2310867396056);\n     });\n\n  it('variance should be NaN if there is only one element', async () => {\n    const ds = new TestDataset().take(1) as Dataset<TabularRecord>;\n    const stats = await computeDatasetStatistics(ds);\n    expect(stats['number'].min).toEqual(0);\n    expect(stats['number'].max).toEqual(0);\n    expect(stats['number'].mean).toEqual(0);\n    expect(stats['number'].variance).toEqual(NaN);\n    expect(stats['number'].stddev).toEqual(NaN);\n  });\n});\n\ndescribeAllEnvs('scaleTo01', () => {\n  it('scales numeric data to the [0, 1] interval', async () => {\n    const ds = new TestDataset().skip(55) as Dataset<TabularRecord>;\n    const scaleFn = scaleTo01(55, 99 * 99 * 99);\n    const scaledDataset = ds.map(x => ({'Tensor': scaleFn(x['Tensor'])}));\n\n    const stats = await computeDatasetStatistics(scaledDataset);\n    expect(stats['Tensor'].min).toBeCloseTo(0);\n    expect(stats['Tensor'].max).toBeCloseTo(1);\n  });\n});\n"]}