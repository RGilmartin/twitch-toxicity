{"version":3,"file":"tape_test.js","sourceRoot":"","sources":["../src/tape_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {add, ScopeFn} from './engine';\nimport * as tf from './index';\nimport {ALL_ENVS, describeWithFlags} from './jasmine_util';\nimport {zerosLike} from './ops/ops';\nimport {backpropagateGradients, getFilteredNodesXToY, TapeNode} from './tape';\nimport {expectArraysClose} from './test_util';\n\ndescribeWithFlags('getFilteredNodesXToY', ALL_ENVS, () => {\n  it('no paths from x to y', () => {\n    const x = tf.scalar(1);\n    const intermediate1 = tf.scalar(0);\n\n    const intermediate2 = tf.scalar(0);\n    const y = tf.scalar(2);\n\n    const tape: TapeNode[] = [\n      {\n        id: 0,\n        kernelName: 'node0',\n        inputs: {x},\n        outputs: [intermediate1],\n        gradient: null\n      },\n      {\n        id: 1,\n        kernelName: 'node1',\n        inputs: {intermediate2},\n        outputs: [y],\n        gradient: null\n      }\n    ];\n\n    const filteredTapeNodes = getFilteredNodesXToY(tape, [x], y);\n\n    expect(filteredTapeNodes.length).toBe(0);\n    expect(filteredTapeNodes).toEqual([]);\n  });\n\n  it('one operation x => y', () => {\n    const x = tf.scalar(1);\n    const y = tf.scalar(2);\n\n    const tape: TapeNode[] = [\n      {id: 0, kernelName: 'node0', inputs: {x}, outputs: [y], gradient: null}\n    ];\n\n    const filteredTapeNodes = getFilteredNodesXToY(tape, [x], y);\n\n    expect(filteredTapeNodes.length).toBe(1);\n    expect(filteredTapeNodes).toEqual(tape);\n  });\n\n  it('1 operation [x0, x1] => y, all input paths', () => {\n    const x0 = tf.scalar(0);\n    const x1 = tf.scalar(1);\n    const y = tf.scalar(2);\n\n    const tape: TapeNode[] = [{\n      id: 0,\n      kernelName: 'node0',\n      inputs: {x0, x1},\n      outputs: [y],\n      gradient: null\n    }];\n\n    const filteredTapeNodes = getFilteredNodesXToY(tape, [x0, x1], y);\n\n    expect(filteredTapeNodes.length).toBe(1);\n    expect(filteredTapeNodes).toEqual(tape);\n  });\n\n  it('one operation [x0, x1] => y, one input paths', () => {\n    const x0 = tf.scalar(0);\n    const x1 = tf.scalar(1);\n    const y = tf.scalar(2);\n\n    const tape: TapeNode[] = [{\n      id: 0,\n      kernelName: 'node0',\n      inputs: {x0, x1},\n      outputs: [y],\n      gradient: null\n    }];\n\n    const filteredTapeNodes = getFilteredNodesXToY(tape, [x0], y);\n\n    expect(filteredTapeNodes.length).toBe(1);\n    // x1 input should be pruned, we don't ask for the gradient of x1.\n    expect(filteredTapeNodes[0]).toEqual({\n      id: 0,\n      kernelName: 'node0',\n      inputs: {x0},\n      outputs: [y],\n      gradient: null\n    });\n  });\n\n  it('two operations x => intermediate => y', () => {\n    const x = tf.scalar(1);\n    const intermediate = tf.scalar(0);\n    const y = tf.scalar(2);\n\n    const tape: TapeNode[] = [\n      {\n        id: 0,\n        kernelName: 'node0',\n        inputs: {x},\n        outputs: [intermediate],\n        gradient: null\n      },\n      {\n        id: 1,\n        kernelName: 'node1',\n        inputs: {intermediate},\n        outputs: [y],\n        gradient: null\n      }\n    ];\n\n    const filteredTapeNodes = getFilteredNodesXToY(tape, [x], y);\n\n    expect(filteredTapeNodes.length).toBe(2);\n    expect(filteredTapeNodes).toEqual(tape);\n  });\n\n  it('two operations [x0, x1], [x2] => ' +\n         'intermediate => y',\n     () => {\n       const x0 = tf.scalar(1);\n       const x1 = tf.scalar(2);\n       const x2 = tf.scalar(3);\n       const intermediate = tf.scalar(4);\n       const y = tf.scalar(2);\n\n       const tape: TapeNode[] = [\n         {\n           id: 0,\n           kernelName: 'node0',\n           inputs: {x0, x1},\n           outputs: [intermediate],\n           gradient: null\n         },\n         {\n           id: 1,\n           kernelName: 'node1',\n           inputs: {x2, intermediate},\n           outputs: [y],\n           gradient: null\n         }\n       ];\n\n       const filteredTapeNodes = getFilteredNodesXToY(tape, [x0, x1, x2], y);\n\n       expect(filteredTapeNodes.length).toBe(2);\n       expect(filteredTapeNodes).toEqual(tape);\n     });\n\n  it('x => y and x => orphan', () => {\n    const x = tf.scalar(1);\n    const orphan = tf.scalar(0);\n    const y = tf.scalar(2);\n\n    const tape: TapeNode[] = [\n      {\n        id: 0,\n        kernelName: 'node0',\n        inputs: {x},\n        outputs: [orphan],\n        gradient: null\n      },\n      {id: 1, kernelName: 'node1', inputs: {x}, outputs: [y], gradient: null}\n    ];\n\n    const filteredTapeNodes = getFilteredNodesXToY(tape, [x], y);\n\n    expect(filteredTapeNodes.length).toBe(1);\n    // The orphan should be removed.\n    expect(filteredTapeNodes[0]).toEqual(tape[1]);\n  });\n\n  it('x => y and orphan => y', () => {\n    const x = tf.scalar(1);\n    const orphan = tf.scalar(0);\n    const y = tf.scalar(2);\n\n    const tape: TapeNode[] = [{\n      id: 0,\n      kernelName: 'node0',\n      inputs: {x, orphan},\n      outputs: [y],\n      gradient: null\n    }];\n\n    const filteredTapeNodes = getFilteredNodesXToY(tape, [x], y);\n\n    expect(filteredTapeNodes.length).toBe(1);\n    // The orphan should be pruned from the node's input.\n    expect(filteredTapeNodes[0]).toEqual({\n      id: 0,\n      kernelName: 'node0',\n      inputs: {x},\n      outputs: [y],\n      gradient: null\n    });\n  });\n\n  it('1 op with 3 outputs x => y1, y2, y3', () => {\n    const x = tf.scalar(1);\n    const y1 = tf.scalar(2);\n    const y2 = tf.scalar(2);\n    const y3 = tf.scalar(2);\n\n    const tape: TapeNode[] = [{\n      id: 0,\n      kernelName: 'node0',\n      inputs: {x},\n      outputs: [y1, y2, y3],\n      gradient: null\n    }];\n\n    const filteredNodes1 = getFilteredNodesXToY(tape, [x], y1);\n    expect(filteredNodes1.length).toBe(1);\n    expect(filteredNodes1).toEqual(tape);\n\n    const filteredNodes2 = getFilteredNodesXToY(tape, [x], y2);\n    expect(filteredNodes2.length).toBe(1);\n    expect(filteredNodes2).toEqual(tape);\n\n    const filteredNodes3 = getFilteredNodesXToY(tape, [x], y3);\n    expect(filteredNodes3.length).toBe(1);\n    expect(filteredNodes3).toEqual(tape);\n  });\n});\n\ndescribeWithFlags('backpropagateGradients', ALL_ENVS, () => {\n  it('Throws if gradient is not defined', () => {\n    const x = tf.scalar(0);\n    const y = tf.scalar(1);\n\n    const dy = tf.scalar(1);\n\n    const accumulatedGradientsMap: {[tensorId: number]: tf.Tensor} = {};\n    accumulatedGradientsMap[y.id] = dy;\n\n    const tape: TapeNode[] = [\n      {id: 0, kernelName: 'node0', inputs: {x}, outputs: [y], gradient: null}\n    ];\n\n    expect(\n        () => backpropagateGradients(\n            accumulatedGradientsMap, tape,\n            f => tf.tidy(f as ScopeFn<tf.Tensor>), add))\n        .toThrowError();\n  });\n\n  it('basic backprop with 1 node', async () => {\n    const x = tf.scalar(0);\n    const y = tf.scalar(1);\n\n    const dy = tf.scalar(1);\n\n    const accumulatedGradientsMap: {[tensorId: number]: tf.Tensor} = {};\n    accumulatedGradientsMap[y.id] = dy;\n\n    const tape: TapeNode[] = [{\n      id: 0,\n      kernelName: 'node0',\n      inputs: {x},\n      outputs: [y],\n      gradient: (dys: tf.Tensor[]) => {\n        return {x: () => dys[0].add(tf.scalar(1))};\n      }\n    }];\n\n    backpropagateGradients(\n        accumulatedGradientsMap, tape, f => tf.tidy(f as ScopeFn<tf.Tensor>),\n        add);\n\n    expectArraysClose(await accumulatedGradientsMap[x.id].data(), [2]);\n  });\n\n  it('basic backprop with 2 nodes', async () => {\n    const x = tf.scalar(0);\n    const intermediate = tf.scalar(1);\n    const y = tf.scalar(2);\n\n    const dy = tf.scalar(1);\n\n    const accumulatedGradientsMap: {[tensorId: number]: tf.Tensor} = {};\n    accumulatedGradientsMap[y.id] = dy;\n\n    const tape: TapeNode[] = [\n      {\n        id: 0,\n        kernelName: 'node0',\n        inputs: {x},\n        outputs: [intermediate],\n        gradient: (dys: tf.Tensor[]) => {\n          return {x: () => dys[0].add(tf.scalar(1))};\n        }\n      },\n      {\n        id: 1,\n        kernelName: 'node1',\n        inputs: {intermediate},\n        outputs: [y],\n        gradient: (dys: tf.Tensor[]) => {\n          return {intermediate: () => dys[0].add(tf.scalar(1))};\n        }\n      }\n    ];\n\n    backpropagateGradients(\n        accumulatedGradientsMap, tape, f => tf.tidy(f as ScopeFn<tf.Tensor>),\n        add);\n\n    // dx = dy + 1 + 1\n    expectArraysClose(await accumulatedGradientsMap[x.id].data(), [3]);\n  });\n\n  it('basic backprop with a split node accumulates gradients', async () => {\n    const x = tf.scalar(0);\n    const intermediate1 = tf.scalar(1);\n    const intermediate2 = tf.scalar(2);\n    const y = tf.scalar(3);\n\n    const dy = tf.scalar(1);\n\n    const accumulatedGradientsMap: {[tensorId: number]: tf.Tensor} = {};\n    accumulatedGradientsMap[y.id] = dy;\n\n    const tape: TapeNode[] = [\n      {\n        id: 0,\n        kernelName: 'node0',\n        inputs: {x},\n        outputs: [intermediate1],\n        gradient: (dys: tf.Tensor[]) => {\n          return {x: () => dys[0].add(tf.scalar(1))};\n        }\n      },\n      {\n        id: 1,\n        kernelName: 'node1',\n        inputs: {x},\n        outputs: [intermediate2],\n        gradient: (dys: tf.Tensor[]) => {\n          return {x: () => dys[0].add(tf.scalar(1))};\n        }\n      },\n      {\n        id: 2,\n        kernelName: 'node2',\n        inputs: {intermediate1, intermediate2},\n        outputs: [y],\n        gradient: (dys: tf.Tensor[]) => {\n          return {\n            intermediate1: () => dys[0].add(tf.scalar(1)),\n            intermediate2: () => dys[0].add(tf.scalar(1))\n          };\n        }\n      }\n    ];\n\n    backpropagateGradients(\n        accumulatedGradientsMap, tape, f => tf.tidy(f as ScopeFn<tf.Tensor>),\n        add);\n\n    // dx = dy + 1 + 1 + 1 + 1 + 1\n    expectArraysClose(\n        await accumulatedGradientsMap[x.id].data(), [(await dy.data())[0] + 5]);\n  });\n\n  it('backprop over 1 node with 3 outputs, w.r.t to the 2nd output',\n     async () => {\n       const x = tf.tensor1d([1, 1, 1]);\n       const y1 = tf.scalar(1);\n       const y2 = tf.scalar(1);\n       const y3 = tf.scalar(1);\n\n       const accumulatedGradientsMap: {[tensorId: number]: tf.Tensor} = {};\n       // Backproping through the 2nd output.\n       const dy2 = tf.scalar(5);\n       accumulatedGradientsMap[y2.id] = dy2;\n\n       let dys: tf.Scalar[];\n       const tape: TapeNode[] = [{\n         id: 0,\n         kernelName: 'node0',\n         inputs: {x},\n         outputs: [y1, y2, y3],\n         gradient: (dys_: tf.Scalar[]) => {\n           dys = dys_.map(dy => dy || zerosLike(y1));\n           return {x: () => tf.stack(dys)};\n         }\n       }];\n\n       backpropagateGradients(\n           accumulatedGradientsMap, tape, f => tf.tidy(f as ScopeFn<tf.Tensor>),\n           add);\n       expectArraysClose(await accumulatedGradientsMap[x.id].data(), [0, 5, 0]);\n       expectArraysClose(await dys[0].data(), [0]);\n       expectArraysClose(await dys[1].data(), [5]);\n       expectArraysClose(await dys[2].data(), [0]);\n     });\n});\n"]}