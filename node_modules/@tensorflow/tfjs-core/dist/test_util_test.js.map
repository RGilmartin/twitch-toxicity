{"version":3,"file":"test_util_test.js","sourceRoot":"","sources":["../src/test_util_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ALL_ENVS, describeWithFlags} from './jasmine_util';\nimport {expectArraysClose, expectArraysEqual} from './test_util';\n\ndescribeWithFlags('expectArraysEqual', ALL_ENVS, () => {\n  it('same arrays', () => {\n    expectArraysEqual([1, 2, 3], [1, 2, 3]);\n  });\n\n  it('throws on different arrays', () => {\n    expect(() => expectArraysEqual([1, 2, 3], [3, 2, 1]))\n        .toThrowError(/Arrays differ/);\n  });\n\n  it('same nested arrays', () => {\n    expectArraysEqual([[1, 2], [3, 4]], [[1, 2], [3, 4]]);\n  });\n\n  it('throws on different nested arrays', () => {\n    expect(() => expectArraysEqual([[1, 2], [3, 4]], [[1, 2], [4, 3]]))\n        .toThrowError(/Arrays differ/);\n  });\n\n  it('throws on different nested shapes', () => {\n    expect(() => expectArraysEqual([[1, 2], [3, 4]], [1, 2, 3, 4]))\n        .toThrowError(\n            /Arrays have different shapes. Actual: \\[2,2\\]. Expected: \\[4\\]/);\n  });\n\n  it('float32 with regular array', () => {\n    expectArraysEqual(new Float32Array([1, 2, 3]), [1, 2, 3]);\n  });\n\n  it('throws on different values of float32 with regular array', () => {\n    expect(() => expectArraysEqual(new Float32Array([1, 2, 3]), [1, 2, 4]))\n        .toThrowError(/Arrays differ/);\n  });\n\n  it('int32 with regular array', () => {\n    expectArraysEqual(new Int32Array([1, 2, 3]), [1, 2, 3]);\n  });\n\n  it('throws on different values of int32 with regular array', () => {\n    expect(() => expectArraysEqual(new Int32Array([1, 2, 3]), [1, 2, 4]))\n        .toThrowError(/Arrays differ/);\n  });\n\n  it('throws on float32 with int32', () => {\n    expect(\n        () => expectArraysEqual(\n            new Float32Array([1, 2, 3]), new Int32Array([1, 2, 3])))\n        .toThrowError(/Arrays are of different type/);\n  });\n\n  it('throws on int32 with uint8', () => {\n    expect(\n        () => expectArraysEqual(\n            new Int32Array([1, 2, 3]), new Uint8Array([1, 2, 3])))\n        .toThrowError(/Arrays are of different type/);\n  });\n});\n\ndescribeWithFlags('expectArraysClose', ALL_ENVS, () => {\n  it('same arrays', () => {\n    expectArraysClose([1, 2, 3], [1, 2, 3]);\n  });\n\n  it('throws on different arrays', () => {\n    expect(() => expectArraysClose([1, 2, 3], [3, 2, 1]))\n        .toThrowError(/Arrays differ/);\n  });\n\n  it('same nested arrays', () => {\n    expectArraysClose([[1, 2], [3, 4]], [[1, 2], [3, 4]]);\n  });\n\n  it('throws on different nested arrays', () => {\n    expect(() => expectArraysClose([[1, 2], [3, 4]], [[1, 2], [4, 3]]))\n        .toThrowError(/Arrays differ/);\n  });\n\n  it('throws on different nested shapes', () => {\n    expect(() => expectArraysClose([[1, 2], [3, 4]], [1, 2, 3, 4]))\n        .toThrowError(\n            /Arrays have different shapes. Actual: \\[2,2\\]. Expected: \\[4\\]/);\n  });\n\n  it('float32 with regular array', () => {\n    expectArraysClose(new Float32Array([1, 2, 3]), [1, 2, 3]);\n  });\n\n  it('throws on different values of float32 with regular array', () => {\n    expect(() => expectArraysClose(new Float32Array([1, 2, 3]), [1, 2, 4]))\n        .toThrowError(/Arrays differ/);\n  });\n\n  it('int32 with regular array', () => {\n    expectArraysClose(new Int32Array([1, 2, 3]), [1, 2, 3]);\n  });\n\n  it('throws on different values of int32 with regular array', () => {\n    expect(() => expectArraysClose(new Int32Array([1, 2, 3]), [1, 2, 4]))\n        .toThrowError(/Arrays differ/);\n  });\n\n  it('throws on float32 with int32', () => {\n    expect(\n        () => expectArraysClose(\n            new Float32Array([1, 2, 3]), new Int32Array([1, 2, 3])))\n        .toThrowError(/Arrays are of different type/);\n  });\n\n  it('throws on int32 with uint8', () => {\n    expect(\n        () => expectArraysClose(\n            new Int32Array([1, 2, 3]), new Uint8Array([1, 2, 3])))\n        .toThrowError(/Arrays are of different type/);\n  });\n\n  it('similar arrays with good epsilon', () => {\n    const epsilon = 0.1;\n    expectArraysClose(new Float32Array([1, 2, 3.08]), [1, 2, 3], epsilon);\n  });\n\n  it('similar arrays with bad epsilon', () => {\n    const epsilon = 0.01;\n    expect(\n        () => expectArraysClose(\n            new Float32Array([1, 2, 3.08]), [1, 2, 3], epsilon))\n        .toThrowError(/Arrays differ/);\n  });\n});\n"]}