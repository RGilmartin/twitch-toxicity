{"version":3,"file":"depthwise_conv2d_test.js","sourceRoot":"","sources":["../../src/ops/depthwise_conv2d_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../index';\nimport {ALL_ENVS, describeWithFlags} from '../jasmine_util';\nimport {expectArraysClose} from '../test_util';\nimport {Rank} from '../types';\n\ndescribeWithFlags('depthwiseConv2D', ALL_ENVS, () => {\n  it('input=1x3x3x1,f=2,s=1,d=1,p=valid,chMul=1', async () => {\n    const fSize = 2;\n    const pad = 'valid';\n    const stride = 1;\n    const chMul = 1;\n    const inDepth = 1;\n\n    const x = tf.tensor4d(\n        [\n          0.230664, 0.987388, 0.0685208, 0.419224, 0.887861, 0.731641,\n          0.0741907, 0.409265, 0.351377\n        ],\n        [1, 3, 3, inDepth]);\n    const w = tf.tensor4d(\n        [0.303873, 0.229223, 0.144333, 0.803373],\n        [fSize, fSize, inDepth, chMul],\n    );\n\n    const result = tf.depthwiseConv2d(x, w, stride, pad);\n    expect(result.shape).toEqual([1, 2, 2, 1]);\n    const expected = [1.07022, 1.03167, 0.67041, 0.778863];\n    expectArraysClose(await result.data(), expected);\n  });\n\n  it('input=1x3x3x1,f=2,s=1,d=1,p=explicit,chMul=1', async () => {\n    const fSize = 2;\n    const pad =\n        [[0, 0], [1, 2], [0, 1], [0, 0]] as tf.backend_util.ExplicitPadding;\n    const stride = 1;\n    const chMul = 1;\n    const inDepth = 1;\n\n    const x = tf.tensor4d(\n        [\n          0.230664, 0.987388, 0.0685208, 0.419224, 0.887861, 0.731641,\n          0.0741907, 0.409265, 0.351377\n        ],\n        [1, 3, 3, inDepth]);\n    const w = tf.tensor4d(\n        [0.303873, 0.229223, 0.144333, 0.803373],\n        [fSize, fSize, inDepth, chMul],\n    );\n\n    const result = tf.depthwiseConv2d(x, w, stride, pad);\n    expect(result.shape).toEqual([1, 5, 3, 1]);\n    const expected = [\n      0.826533, 0.197560, 0.0098898, 1.070216, 1.031675, 0.126422, 0.6704096,\n      0.778863, 0.273041, 0.116357, 0.204908, 0.106774, 0, 0, 0\n    ];\n    expectArraysClose(await result.data(), expected);\n  });\n\n  it('input=1x5x5x1,f=3,s=1,d=1,p=valid,chMul=1', async () => {\n    const fSize = 3;\n    const pad = 'valid';\n    const stride = 1;\n    const chMul = 1;\n    const inDepth = 1;\n\n    const x = tf.tensor4d(\n        [\n          0.149194, 0.089009, 0.654891, 0.083324, 0.537043, 0.644331, 0.563037,\n          0.211859, 0.633501, 0.186427, 0.777034, 0.50001,  0.607341, 0.95303,\n          0.696479, 0.050387, 0.62045,  0.728049, 0.028043, 0.437009, 0.712881,\n          0.741935, 0.974474, 0.621102, 0.171411\n        ],\n        [1, 5, 5, inDepth]);\n    const w = tf.tensor4d(\n        [\n          0.125386, 0.975199, 0.640437, 0.281895, 0.990968, 0.347208, 0.889702,\n          0.180695, 0.691992\n        ],\n        [fSize, fSize, inDepth, chMul],\n    );\n\n    const result = tf.depthwiseConv2d(x, w, stride, pad);\n    expect(result.shape).toEqual([1, 3, 3, 1]);\n    const expected = [\n      2.540022, 2.505885, 2.454062, 2.351701, 2.459601, 3.076421, 3.29848,\n      3.437421, 2.93419\n    ];\n    expectArraysClose(await result.data(), expected);\n  });\n\n  it('input=1x3x3x1,f=2,s=1,d=2,p=valid,chMul=1', async () => {\n    const fSize = 2;\n    const pad = 'valid';\n    const stride = 1;\n    const dilation = 2;\n    const chMul = 1;\n    const inDepth = 1;\n\n    const x = tf.tensor4d(\n        [\n          0.230664, 0.987388, 0.0685208, 0.419224, 0.887861, 0.731641,\n          0.0741907, 0.409265, 0.351377\n        ],\n        [1, 3, 3, inDepth]);\n    const w = tf.tensor4d(\n        [0.303873, 0.229223, 0.144333, 0.803373],\n        [fSize, fSize, inDepth, chMul],\n    );\n    // adding a dilation rate is equivalent to using a filter\n    // with 0s for the dilation rate\n    const fSizeDilated = fSize + (fSize - 1) * (dilation - 1);\n    const wDilated = tf.tensor4d(\n        [0.303873, 0, 0.229223, 0, 0, 0, 0.144333, 0, 0.803373],\n        [fSizeDilated, fSizeDilated, inDepth, chMul],\n    );\n\n    const result = tf.depthwiseConv2d(x, w, stride, pad, 'NHWC', dilation);\n\n    const expectedResult = tf.depthwiseConv2d(x, wDilated, stride, pad);\n\n    expect(result.shape).toEqual(expectedResult.shape);\n    expectArraysClose(await result.data(), await expectedResult.data());\n  });\n\n  it('input=1x5x5x1,f=3,s=1,d=2,p=valid,chMul=1', async () => {\n    const fSize = 3;\n    const pad = 'valid';\n    const stride = 1;\n    const dilation = 2;\n    const chMul = 1;\n    const inDepth = 1;\n\n    const x = tf.tensor4d(\n        [\n          0.149194, 0.089009, 0.654891, 0.083324, 0.537043, 0.644331, 0.563037,\n          0.211859, 0.633501, 0.186427, 0.777034, 0.50001,  0.607341, 0.95303,\n          0.696479, 0.050387, 0.62045,  0.728049, 0.028043, 0.437009, 0.712881,\n          0.741935, 0.974474, 0.621102, 0.171411\n        ],\n        [1, 5, 5, inDepth]);\n    const w = tf.tensor4d(\n        [\n          0.125386, 0.975199, 0.640437, 0.281895, 0.990968, 0.347208, 0.889702,\n          0.180695, 0.691992\n        ],\n        [fSize, fSize, inDepth, chMul],\n    );\n    // adding a dilation rate is equivalent to using a filter\n    // with 0s for the dilation rate\n    const fSizeDilated = fSize + (fSize - 1) * (dilation - 1);\n    const wDilated = tf.tensor4d(\n        [\n          0.125386, 0, 0.975199, 0, 0.640437, 0, 0, 0, 0, 0,\n          0.281895, 0, 0.990968, 0, 0.347208, 0, 0, 0, 0, 0,\n          0.889702, 0, 0.180695, 0, 0.691992\n        ],\n        [fSizeDilated, fSizeDilated, inDepth, chMul],\n    );\n\n    const result = tf.depthwiseConv2d(x, w, stride, pad, 'NHWC', dilation);\n\n    const expectedResult = tf.depthwiseConv2d(x, wDilated, stride, pad);\n\n    expect(result.shape).toEqual(expectedResult.shape);\n    expectArraysClose(await result.data(), await expectedResult.data());\n  });\n\n  it('input=1x3x3x2,f=2,s=1,d=1,p=same,chMul=1', async () => {\n    const fSize = 2;\n    const pad = 'same';\n    const stride = 1;\n    const chMul = 1;\n    const inDepth = 2;\n\n    const x = tf.tensor4d(\n        [\n          0.111057, 0.661818, 0.701979, 0.424362, 0.992854, 0.417599, 0.423036,\n          0.500499, 0.368484, 0.714135, 0.456693, 0.531058, 0.636636, 0.345024,\n          0.0506303, 0.789682, 0.177473, 0.793569\n        ],\n        [1, 3, 3, inDepth]);\n    const w = tf.tensor4d(\n        [\n          0.614293, 0.0648011, 0.101113, 0.452887, 0.0582746, 0.426481,\n          0.872743, 0.765767\n        ],\n        [fSize, fSize, inDepth, chMul]);\n    const result = tf.depthwiseConv2d(x, w, stride, pad);\n    expect(result.shape).toEqual([1, 3, 3, 2]);\n\n    const expected = [\n      0.485445, 0.995389, 0.95166, 0.927856, 0.636516, 0.253547, 0.378414,\n      1.10771, 0.430373, 1.23126, 0.290885, 0.372855, 0.3962, 0.379995,\n      0.0490466, 0.410569, 0.10902, 0.0514242\n    ];\n    expectArraysClose(await result.data(), expected);\n  });\n\n  it('input=1x5x5x1,f=3,s=1,d=1,p=same,chMul=1', async () => {\n    const fSize = 3;\n    const pad = 'same';\n    const stride = 1;\n    const chMul = 1;\n    const inDepth = 1;\n\n    const x = tf.tensor4d(\n        [\n          0.149194, 0.089009, 0.654891, 0.083324, 0.537043, 0.644331, 0.563037,\n          0.211859, 0.633501, 0.186427, 0.777034, 0.50001,  0.607341, 0.95303,\n          0.696479, 0.050387, 0.62045,  0.728049, 0.028043, 0.437009, 0.712881,\n          0.741935, 0.974474, 0.621102, 0.171411\n        ],\n        [1, 5, 5, inDepth]);\n    const w = tf.tensor4d(\n        [\n          0.125386, 0.975199, 0.640437, 0.281895, 0.990968, 0.347208, 0.889702,\n          0.180695, 0.691992\n        ],\n        [fSize, fSize, inDepth, chMul],\n    );\n\n    const result = tf.depthwiseConv2d(x, w, stride, pad);\n    expect(result.shape).toEqual([1, 5, 5, 1]);\n    const expected = [\n      0.684796, 1.179251, 1.680593, 0.885615, 1.152995, 1.52291,  2.540022,\n      2.505885, 2.454062, 1.871258, 2.371015, 2.351701, 2.459601, 3.076421,\n      1.323994, 1.985572, 3.29848,  3.437421, 2.93419,  1.823238, 1.410545,\n      2.352186, 2.19622,  1.348218, 0.774635\n    ];\n    expectArraysClose(await result.data(), expected);\n  });\n\n  it('input=1x3x3x2,f=2,s=1,d=2,p=same,chMul=1', async () => {\n    const fSize = 2;\n    const pad = 'same';\n    const stride = 1;\n    const dilation = 2;\n    const inDepth = 2;\n\n    const x = tf.tensor4d(\n        [\n          0.111057, 0.661818, 0.701979, 0.424362, 0.992854, 0.417599, 0.423036,\n          0.500499, 0.368484, 0.714135, 0.456693, 0.531058, 0.636636, 0.345024,\n          0.0506303, 0.789682, 0.177473, 0.793569\n        ],\n        [1, 3, 3, inDepth]);\n\n    const w: tf.Tensor4D =\n        tf.stack(\n              [\n                tf.tensor2d(\n                    [0.614293, 0.0648011, 0.101113, 0.452887], [fSize, fSize]),\n                tf.tensor2d(\n                    [0.0582746, 0.426481, 0.872743, 0.765767], [fSize, fSize])\n              ],\n              2)\n            .expandDims(3);\n\n    // adding a dilation rate is equivalent to using a filter\n    // with 0s for the dilation rate\n    const fSizeDilated = fSize + (fSize - 1) * (dilation - 1);\n    const wDilated: tf.Tensor4D =\n        tf.stack(\n              [\n                tf.tensor2d(\n                    [0.614293, 0, 0.0648011, 0, 0, 0, 0.101113, 0, 0.452887],\n                    [fSizeDilated, fSizeDilated]),\n                tf.tensor2d(\n                    [0.0582746, 0, 0.426481, 0, 0, 0, 0.872743, 0, 0.765767],\n                    [fSizeDilated, fSizeDilated])\n              ],\n              2)\n            .expandDims(3);\n\n    expect(wDilated.shape).toEqual([fSizeDilated, fSizeDilated, inDepth, 1]);\n\n    const result = tf.depthwiseConv2d(x, w, stride, pad, 'NHWC', dilation);\n\n    const expectedResult = tf.depthwiseConv2d(x, wDilated, stride, pad);\n\n    expect(result.shape).toEqual(expectedResult.shape);\n    expectArraysClose(await result.data(), await expectedResult.data());\n  });\n\n  it('input=1x5x5x1,f=3,s=1,d=2,p=same,chMul=1', async () => {\n    const fSize = 3;\n    const pad = 'valid';\n    const stride = 1;\n    const chMul = 1;\n    const inDepth = 1;\n\n    const x = tf.tensor4d(\n        [\n          0.149194, 0.089009, 0.654891, 0.083324, 0.537043, 0.644331, 0.563037,\n          0.211859, 0.633501, 0.186427, 0.777034, 0.50001,  0.607341, 0.95303,\n          0.696479, 0.050387, 0.62045,  0.728049, 0.028043, 0.437009, 0.712881,\n          0.741935, 0.974474, 0.621102, 0.171411\n        ],\n        [1, 5, 5, inDepth]);\n    const w = tf.tensor4d(\n        [\n          0.125386, 0.975199, 0.640437, 0.281895, 0.990968, 0.347208, 0.889702,\n          0.180695, 0.691992\n        ],\n        [fSize, fSize, inDepth, chMul],\n    );\n\n    const result = tf.depthwiseConv2d(x, w, stride, pad);\n    expect(result.shape).toEqual([1, 3, 3, 1]);\n    const expected = [\n      2.540022, 2.505885, 2.454062, 2.351701, 2.459601, 3.076421, 3.29848,\n      3.437421, 2.93419\n    ];\n    expectArraysClose(await result.data(), expected);\n  });\n\n  it('input=1x5x5x1,f=3,s=1,d=2,p=explicit,chMul=1', async () => {\n    const fSize = 3;\n    const pad =\n        [[0, 0], [0, 0], [0, 1], [0, 1]] as tf.backend_util.ExplicitPadding;\n    const stride = 1;\n    const chMul = 1;\n    const inDepth = 1;\n\n    const x = tf.tensor4d(\n        [\n          0.149194, 0.089009, 0.654891, 0.083324, 0.537043, 0.644331, 0.563037,\n          0.211859, 0.633501, 0.186427, 0.777034, 0.50001,  0.607341, 0.95303,\n          0.696479, 0.050387, 0.62045,  0.728049, 0.028043, 0.437009, 0.712881,\n          0.741935, 0.974474, 0.621102, 0.171411\n        ],\n        [1, 5, 5, inDepth]);\n    const w = tf.tensor4d(\n        [\n          0.125386, 0.975199, 0.640437, 0.281895, 0.990968, 0.347208, 0.889702,\n          0.180695, 0.691992\n        ],\n        [fSize, fSize, inDepth, chMul],\n    );\n\n    const result = tf.depthwiseConv2d(x, w, stride, pad);\n    expect(result.shape).toEqual([1, 3, 4, 1]);\n    const expected = [\n      2.540022, 2.505885, 2.454062, 1.871258, 2.35170, 2.459601, 3.076421,\n      1.32399, 3.298480, 3.437421, 2.93419, 1.823238\n    ];\n    expectArraysClose(await result.data(), expected);\n  });\n\n  it('input=1x3x3x2,f=2,s=1,p=same,chMul=2', async () => {\n    const fSize = 2;\n    const pad = 'same';\n    const stride = 1;\n    const chMul = 2;\n    const inDepth = 2;\n\n    const x = tf.tensor4d(\n        [\n          0.675707, 0.758567, 0.413529, 0.963967, 0.217291, 0.101335, 0.804231,\n          0.329673, 0.924503, 0.728742, 0.180217, 0.210459, 0.133869, 0.650827,\n          0.047613, 0.554795, 0.653365, 0.442196\n        ],\n        [1, 3, 3, inDepth]);\n    const w = tf.tensor4d(\n        [\n          0.347154, 0.386692, 0.327191, 0.483784, 0.591807, 0.24263, 0.95182,\n          0.174353, 0.592136, 0.623469, 0.988244, 0.660731, 0.946534, 0.0801365,\n          0.864889, 0.874602\n        ],\n        [fSize, fSize, inDepth, chMul]);\n    const result = tf.depthwiseConv2d(x, w, stride, pad);\n    expect(result.shape).toEqual([1, 3, 3, 4]);\n\n    const expected = [\n      1.83059,   0.937125,  2.1218,   1.39024,  0.990167, 0.803472,\n      1.31405,   1.14959,   0.182147, 0.196385, 0.241141, 0.188081,\n      0.950656,  0.622581,  1.92451,  1.20179,  1.07422,  0.483268,\n      1.36948,   1.14256,   0.449444, 0.477042, 0.505857, 0.393989,\n      0.0746509, 0.0633184, 0.74101,  0.41159,  0.403195, 0.176938,\n      0.602415,  0.345499,  0.226819, 0.252651, 0.144682, 0.213927\n    ];\n    expectArraysClose(await result.data(), expected);\n  });\n\n  it('input=2x3x3x2,f=2,s=1,p=same,chMul=2', async () => {\n    const fSize = 2;\n    const pad = 'same';\n    const stride = 1;\n    const chMul = 2;\n    const inDepth = 2;\n\n    const x = tf.tensor4d(\n        [\n          0.261945, 0.0528113, 0.656698,  0.127345,  0.610039, 0.169131,\n          0.458647, 0.0988288, 0.966109,  0.0421747, 0.82035,  0.274711,\n          0.359377, 0.512113,  0.689682,  0.941571,  0.31961,  0.743826,\n          0.858147, 0.984766,  0.926973,  0.579597,  0.444104, 0.505969,\n          0.241437, 0.937999,  0.0957074, 0.773611,  0.46023,  0.469379,\n          0.363789, 0.269745,  0.486136,  0.894215,  0.794299, 0.724615\n        ],\n        [2, 3, 3, inDepth]);\n    const w = tf.tensor4d(\n        [\n          0.240347, 0.906352, 0.478657, 0.825918, 0.380769, 0.184705, 0.238241,\n          0.201907, 0.294087, 0.181165, 0.191303, 0.7225, 0.430064, 0.900622,\n          0.670338, 0.33478\n        ],\n        [fSize, fSize, inDepth, chMul]);\n    const result = tf.depthwiseConv2d(x, w, stride, pad);\n    expect(result.shape).toEqual([2, 3, 3, 4]);\n\n    const expected = [\n      0.863379, 1.3119,   0.102795, 0.154853, 1.02704,   1.62173,  0.293466,\n      0.261764, 0.387876, 0.701529, 0.133508, 0.338167,  0.880395, 1.28039,\n      0.786492, 0.775361, 0.884845, 1.43995,  0.764374,  1.0196,   0.291162,\n      0.801428, 0.273788, 0.764303, 0.348985, 0.45311,   0.469447, 0.613073,\n      0.287461, 0.684128, 0.627899, 0.927844, 0.0768174, 0.28968,  0.356037,\n      0.614339, 0.67138,  1.07894,  1.30747,  1.86705,   0.617971, 1.35402,\n      0.860607, 1.29693,  0.242087, 0.485892, 0.331979,  0.757015, 0.410527,\n      0.740235, 1.28431,  1.42516,  0.68281,  0.975185,  1.13892,  1.62237,\n      0.344208, 0.561029, 0.363292, 0.911203, 0.272541,  0.419513, 0.342154,\n      0.403335, 0.419286, 0.587321, 0.600655, 0.884853,  0.190907, 0.719914,\n      0.346842, 0.598472\n    ];\n    expectArraysClose(await result.data(), expected);\n  });\n\n  it('input=2x3x3x2,f=2,s=1,d=2,p=same,chMul=2',\n     async () => {\n       const fSize = 2;\n       const pad = 'same';\n       const stride = 1;\n       const inDepth = 2;\n       const dilation = 2;\n       const noDilation = 1;\n\n       const x = tf.tensor4d(\n           [\n             0.261945, 0.0528113, 0.656698,  0.127345,  0.610039, 0.169131,\n             0.458647, 0.0988288, 0.966109,  0.0421747, 0.82035,  0.274711,\n             0.359377, 0.512113,  0.689682,  0.941571,  0.31961,  0.743826,\n             0.858147, 0.984766,  0.926973,  0.579597,  0.444104, 0.505969,\n             0.241437, 0.937999,  0.0957074, 0.773611,  0.46023,  0.469379,\n             0.363789, 0.269745,  0.486136,  0.894215,  0.794299, 0.724615\n           ],\n           [2, 3, 3, inDepth]);\n\n       const w = tf.stack(\n                     [\n                       tf.stack(\n                           [\n                             tf.tensor2d(\n                                 [0.240347, 0.906352, 0.478657, 0.825918],\n                                 [fSize, fSize]),\n                             tf.tensor2d(\n                                 [0.380769, 0.184705, 0.238241, 0.201907],\n                                 [fSize, fSize])\n                           ],\n                           2),\n                       tf.stack(\n                           [\n                             tf.tensor2d(\n                                 [0.294087, 0.181165, 0.191303, 0.7225],\n                                 [fSize, fSize]),\n                             tf.tensor2d(\n                                 [0.430064, 0.900622, 0.670338, 0.33478],\n                                 [fSize, fSize])\n                           ],\n                           2)\n                     ],\n                     3) as tf.Tensor4D;\n\n       const fSizeDilated = fSize + (fSize - 1) * (dilation - 1);\n       const wDilated = tf.stack([\n      tf.stack(\n          [\n            tf.tensor2d(\n              [0.240347, 0, 0.906352, 0, 0, 0, 0.478657, 0, 0.825918],\n              [fSizeDilated, fSizeDilated]),\n            tf.tensor2d(\n              [0.380769, 0, 0.184705, 0, 0, 0, 0.238241, 0, 0.201907],\n              [fSizeDilated, fSizeDilated])\n          ],\n          2),\n      tf.stack(\n          [\n            tf.tensor2d([0.294087, 0, 0.181165, 0, 0, 0, 0.191303, 0, 0.7225],\n              [fSizeDilated, fSizeDilated]),\n            tf.tensor2d(\n              [0.430064, 0, 0.900622, 0, 0, 0, 0.670338, 0, 0.33478],\n              [fSizeDilated, fSizeDilated])\n          ],\n          2)\n    ], 3) as tf.Tensor4D;\n\n       const result = tf.depthwiseConv2d(x, w, stride, pad, 'NHWC', dilation);\n\n       const expectedResult =\n           tf.depthwiseConv2d(x, wDilated, stride, pad, 'NHWC', noDilation);\n\n       expect(result.shape).toEqual(expectedResult.shape);\n       expectArraysClose(await result.data(), await expectedResult.data());\n     });\n\n  it('Tensor3D is allowed', async () => {\n    const fSize = 2;\n    const pad = 'same';\n    const stride = 1;\n    const chMul = 3;\n    const inDepth = 2;\n\n    const x = tf.zeros<Rank.R3>([3, 3, inDepth]);\n    const w = tf.zeros<Rank.R4>([fSize, fSize, inDepth, chMul]);\n    const result = tf.depthwiseConv2d(x, w, stride, pad);\n    expect(result.shape).toEqual([3, 3, inDepth * chMul]);\n  });\n\n  it('Pass null for dilations, which defaults to [1, 1]', () => {\n    const fSize = 2;\n    const pad = 'same';\n    const stride = 1;\n    const chMul = 3;\n    const inDepth = 2;\n    const dilations: [number, number] = null;\n\n    const x = tf.zeros<Rank.R3>([3, 3, inDepth]);\n    const w = tf.zeros<Rank.R4>([fSize, fSize, inDepth, chMul]);\n    const result = tf.depthwiseConv2d(x, w, stride, pad, 'NHWC', dilations);\n    expect(result.shape).toEqual([3, 3, inDepth * chMul]);\n  });\n\n  it('TensorLike', async () => {\n    const pad = 'valid';\n    const stride = 1;\n\n    const x = [[\n      [[0.230664], [0.987388], [0.0685208]],\n      [[0.419224], [0.887861], [0.731641]],\n      [[0.0741907], [0.409265], [0.351377]]\n    ]];\n    const w = [[[[0.303873]], [[0.229223]]], [[[0.144333]], [[0.803373]]]];\n\n    const result = tf.depthwiseConv2d(x, w, stride, pad);\n\n    const expected = [1.07022, 1.03167, 0.67041, 0.778863];\n    expectArraysClose(await result.data(), expected);\n  });\n  it('TensorLike Chained', async () => {\n    const pad = 'valid';\n    const stride = 1;\n    const inDepth = 1;\n\n    const x = tf.tensor4d(\n        [\n          0.230664, 0.987388, 0.0685208, 0.419224, 0.887861, 0.731641,\n          0.0741907, 0.409265, 0.351377\n        ],\n        [1, 3, 3, inDepth]);\n    const w = [[[[0.303873]], [[0.229223]]], [[[0.144333]], [[0.803373]]]];\n\n    const result = x.depthwiseConv2d(w, stride, pad);\n    expect(result.shape).toEqual([1, 2, 2, 1]);\n\n    const expected = [1.07022, 1.03167, 0.67041, 0.778863];\n    expectArraysClose(await result.data(), expected);\n  });\n\n  it('throws when passed x as a non-tensor', () => {\n    const inputDepth = 1;\n    const outputDepth = 1;\n    const fSize = 1;\n    const pad = 'same';\n    const stride = 2;\n    const dataFormat = 'NHWC';\n    const dilation = 2;\n\n    const w = tf.tensor4d([3], [fSize, fSize, inputDepth, outputDepth]);\n\n    const e = /Argument 'x' passed to 'depthwiseConv2d' must be a Tensor/;\n    expect(\n        () => tf.depthwiseConv2d(\n            {} as tf.Tensor3D, w, stride, pad, dataFormat, dilation))\n        .toThrowError(e);\n  });\n\n  it('throws when passed filter as a non-tensor', () => {\n    const inputDepth = 1;\n    const inputShape: [number, number, number] = [2, 2, inputDepth];\n    const pad = 'same';\n    const stride = 2;\n    const dataFormat = 'NHWC';\n    const dilation = 2;\n\n    const x = tf.tensor3d([1, 2, 3, 4], inputShape);\n\n    const e = /Argument 'filter' passed to 'depthwiseConv2d' must be a Tensor/;\n    expect(\n        () => tf.depthwiseConv2d(\n            x, {} as tf.Tensor4D, stride, pad, dataFormat, dilation))\n        .toThrowError(e);\n  });\n\n  it('accepts a tensor-like object', async () => {\n    const pad = 'valid';\n    const stride = 1;\n    // 1x3x3x1\n    const x = [[\n      [[0.230664], [0.987388], [0.0685208]],\n      [[0.419224], [0.887861], [0.731641]],\n      [[0.0741907], [0.409265], [0.351377]]\n    ]];\n    // 2x2x1x1\n    const w = [[[[0.303873]], [[0.229223]]], [[[0.144333]], [[0.803373]]]];\n    const result = tf.depthwiseConv2d(x, w, stride, pad);\n    expect(result.shape).toEqual([1, 2, 2, 1]);\n\n    const expected = [1.07022, 1.03167, 0.67041, 0.778863];\n    expectArraysClose(await result.data(), expected);\n  });\n});\n\ndescribeWithFlags('depthwiseConv2d gradients', ALL_ENVS, () => {\n  let images: tf.Tensor4D;\n  let filter: tf.Tensor4D;\n  let result: tf.Tensor4D;\n  const stride = 1;\n  const pad = 'same';\n\n  beforeEach(() => {\n    // two 2x2 RGB images => 2x2x2x3\n    images = tf.tensor4d([\n      [[[2, 3, 1], [3, 0, 2]], [[0, 4, 1], [3, 1, 3]]],\n      [[[2, 1, 0], [0, 3, 3]], [[4, 0, 1], [1, 4, 1]]]\n    ]);\n    // 2x2 filters, chMul = 2 => 2x2x3x2\n    filter = tf.tensor4d([\n      [[[1, 1], [1, 1], [0, 0]], [[0, 1], [1, 1], [1, 1]]],\n      [[[1, 0], [1, 1], [0, 0]], [[0, 1], [1, 0], [0, 0]]]\n    ]);\n    // result of convolution operatoin\n    result = tf.tensor4d([\n      [\n        [[2, 8, 8, 7, 2, 2], [6, 3, 1, 1, 0, 0]],\n        [[0, 3, 5, 5, 3, 3], [3, 3, 1, 1, 0, 0]]\n      ],\n      [\n        [[6, 3, 8, 4, 3, 3], [1, 0, 7, 7, 0, 0]],\n        [[4, 5, 4, 4, 1, 1], [1, 1, 4, 4, 0, 0]]\n      ]\n    ]);\n  });\n\n  it('wrt input', async () => {\n    const {value, grad} = tf.valueAndGrad(\n        (x: tf.Tensor4D) => tf.depthwiseConv2d(x, filter, stride, pad))(images);\n\n    expectArraysClose(await value.data(), await result.data());\n\n    const expectedGrad = tf.tensor4d([\n      [[[2., 2., 0.], [3., 4., 2.]], [[3., 4., 0.], [5., 7., 2.]]],\n      [[[2., 2., 0.], [3., 4., 2.]], [[3., 4., 0.], [5., 7., 2.]]]\n    ]);\n\n    expectArraysClose(await grad.data(), await expectedGrad.data());\n  });\n\n  // The gradients of normal and depthwise 2D convolutions are actually the same\n  // in the special case that dy = 1, so we also test the gradient of a function\n  // of the output to disambiguate the two methods.\n  it('wrt input, squared output', async () => {\n    const grad = tf.grad(\n        (x: tf.Tensor4D) =>\n            tf.square(tf.depthwiseConv2d(x, filter, stride, pad)))(images);\n\n    const expectedGrad = tf.tensor4d([\n      [[[20., 30., 0.], [34., 34., 8.]], [[10., 50., 0.], [46., 44., 12.]]],\n      [[[18., 24., 0.], [8., 52., 12.]], [[30., 40., 0.], [22., 76., 4.]]]\n    ]);\n\n    expectArraysClose(await grad.data(), await expectedGrad.data());\n  });\n\n  it('wrt filter', async () => {\n    const {value, grad} = tf.valueAndGrad(\n        (f: tf.Tensor4D) => tf.depthwiseConv2d(images, f, stride, pad))(filter);\n\n    expectArraysClose(await value.data(), await result.data());\n\n    const expectedGrad = tf.tensor4d([\n      [[[15., 15.], [16., 16.], [12., 12.]], [[7., 7.], [8., 8.], [9., 9.]]],\n      [[[8., 8.], [9., 9.], [6., 6.]], [[4., 4.], [5., 5.], [4., 4.]]]\n    ]);\n\n    expectArraysClose(await grad.data(), await expectedGrad.data());\n  });\n\n  it('gradient with clones', async () => {\n    const [dx, dFilter] = tf.grads(\n        (x: tf.Tensor4D, filter: tf.Tensor4D) =>\n            tf.depthwiseConv2d(x.clone(), filter.clone(), stride, pad).clone())(\n        [images, filter]);\n    expect(dx.shape).toEqual(images.shape);\n    expect(dFilter.shape).toEqual(filter.shape);\n  });\n\n  // Also disambiguate regular vs. depthwise filter gradients\n  it('wrt filter, squared output', async () => {\n    const grad = tf.grad(\n        (f: tf.Tensor4D) =>\n            tf.square(tf.depthwiseConv2d(images, f, stride, pad)))(filter);\n\n    const expectedGrad = tf.tensor4d([\n      [\n        [[120., 122.], [180., 166.], [12., 12.]],\n        [[20., 76.], [90., 66.], [46., 46.]]\n      ],\n      [\n        [[86., 42.], [122., 114.], [10., 10.]],\n        [[24., 54.], [80., 46.], [18., 18.]]\n      ]\n    ]);\n\n    expectArraysClose(await grad.data(), await expectedGrad.data());\n  });\n\n  it('throws error on dilations > 1', () => {\n    const grad = tf.grad(\n        (x: tf.Tensor4D) =>\n            tf.depthwiseConv2d(x, filter, stride, pad, 'NHWC', 2));\n\n    expect(() => grad(images))\n        .toThrowError(/dilation rates greater than 1 are not yet supported/);\n  });\n\n  it('wrt input, stride=2, pad=valid', async () => {\n    const dx = tf.grad(\n        (x: tf.Tensor4D) => tf.depthwiseConv2d(x, filter, 2, 'valid'))(images);\n\n    expectArraysClose(await dx.data(), [\n      2., 2., 0., 1., 2., 2., 1., 2., 0., 1., 1., 0.,\n      2., 2., 0., 1., 2., 2., 1., 2., 0., 1., 1., 0.\n    ]);\n    expect(dx.shape).toEqual([2, 2, 2, 3]);\n  });\n\n  it('wrt filter, stride=2, pad=valid', async () => {\n    const df = tf.grad(\n        (f: tf.Tensor4D) => tf.depthwiseConv2d(images, f, 2, 'valid'))(filter);\n\n    expectArraysClose(await df.data(), [\n      4., 4., 4., 4., 1., 1., 3., 3., 3., 3., 5., 5.,\n      4., 4., 4., 4., 2., 2., 4., 4., 5., 5., 4., 4.\n    ]);\n    expect(df.shape).toEqual([2, 2, 3, 2]);\n  });\n\n  it('gradient with clones', async () => {\n    const fSize = 2;\n    const pad = 'valid';\n    const stride = 1;\n    const chMul = 1;\n    const inDepth = 1;\n\n    const x = tf.tensor4d(\n        [\n          0.230664, 0.987388, 0.0685208, 0.419224, 0.887861, 0.731641,\n          0.0741907, 0.409265, 0.351377\n        ],\n        [1, 3, 3, inDepth]);\n\n    const f = tf.tensor4d(\n        [0.303873, 0.229223, 0.144333, 0.803373],\n        [fSize, fSize, inDepth, chMul],\n    );\n\n    const [dx, df] = tf.grads(\n        (x: tf.Tensor4D, f: tf.Tensor4D) =>\n            tf.depthwiseConv2d(x.clone(), f.clone(), stride, pad).clone())(\n        [x, f]);\n\n    expectArraysClose(await dx.data(), [\n      0.303873, 0.533096, 0.229223, 0.448206, 1.480802, 1.032596, 0.144333,\n      0.947706, 0.803373\n    ]);\n    expect(dx.shape).toEqual([1, 3, 3, 1]);\n\n    expectArraysClose(\n        await df.data(), [2.525137, 2.6754108, 1.7905407, 2.380144]);\n    expect(df.shape).toEqual([2, 2, 1, 1]);\n  });\n});\n"]}