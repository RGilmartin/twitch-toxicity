{"version":3,"file":"non_max_suppression_async_test.js","sourceRoot":"","sources":["../../../src/ops/image/non_max_suppression_async_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '../../index';\nimport {ALL_ENVS, describeWithFlags} from '../../jasmine_util';\nimport {expectArraysClose, expectArraysEqual} from '../../test_util';\n\ndescribeWithFlags('nonMaxSuppressionAsync', ALL_ENVS, () => {\n  describe('NonMaxSuppressionAsync basic', () => {\n    it('select from three clusters', async () => {\n      const boxes = tf.tensor2d(\n          [\n            0, 0,  1, 1,  0, 0.1,  1, 1.1,  0, -0.1, 1, 0.9,\n            0, 10, 1, 11, 0, 10.1, 1, 11.1, 0, 100,  1, 101\n          ],\n          [6, 4]);\n      const scores = tf.tensor1d([0.9, 0.75, 0.6, 0.95, 0.5, 0.3]);\n      const maxOutputSize = 3;\n      const iouThreshold = 0.5;\n      const scoreThreshold = 0;\n      const indices = await tf.image.nonMaxSuppressionAsync(\n          boxes, scores, maxOutputSize, iouThreshold, scoreThreshold);\n\n      expect(indices.shape).toEqual([3]);\n      expectArraysEqual(await indices.data(), [3, 0, 5]);\n    });\n\n    it('accepts a tensor-like object', async () => {\n      const boxes = [[0, 0, 1, 1], [0, 1, 1, 2]];\n      const scores = [1, 2];\n      const indices = await tf.image.nonMaxSuppressionAsync(boxes, scores, 10);\n      expect(indices.shape).toEqual([2]);\n      expect(indices.dtype).toEqual('int32');\n      expectArraysEqual(await indices.data(), [1, 0]);\n    });\n  });\n\n  describe('NonMaxSuppressionWithScoreAsync', () => {\n    it('select from three clusters with SoftNMS', async () => {\n      const boxes = tf.tensor2d(\n          [\n            0, 0,  1, 1,  0, 0.1,  1, 1.1,  0, -0.1, 1, 0.9,\n            0, 10, 1, 11, 0, 10.1, 1, 11.1, 0, 100,  1, 101\n          ],\n          [6, 4]);\n      const scores = tf.tensor1d([0.9, 0.75, 0.6, 0.95, 0.5, 0.3]);\n      const maxOutputSize = 6;\n      const iouThreshold = 1.0;\n      const scoreThreshold = 0;\n      const softNmsSigma = 0.5;\n\n      const numTensorsBefore = tf.memory().numTensors;\n\n      const {selectedIndices, selectedScores} =\n          await tf.image.nonMaxSuppressionWithScoreAsync(\n              boxes, scores, maxOutputSize, iouThreshold, scoreThreshold,\n              softNmsSigma);\n\n      const numTensorsAfter = tf.memory().numTensors;\n\n      expectArraysEqual(await selectedIndices.data(), [3, 0, 1, 5, 4, 2]);\n\n      expectArraysClose(\n          await selectedScores.data(), [0.95, 0.9, 0.384, 0.3, 0.256, 0.197]);\n\n      // The number of tensors should increase by the number of tensors\n      // returned (i.e. selectedIndices and selectedScores).\n      expect(numTensorsAfter).toEqual(numTensorsBefore + 2);\n    });\n  });\n\n  describe('NonMaxSuppressionPaddedAsync', () => {\n    it('select from three clusters with pad five.', async () => {\n      const boxes = tf.tensor2d(\n          [\n            0, 0,  1, 1,  0, 0.1,  1, 1.1,  0, -0.1, 1, 0.9,\n            0, 10, 1, 11, 0, 10.1, 1, 11.1, 0, 100,  1, 101\n          ],\n          [6, 4]);\n      const scores = tf.tensor1d([0.9, 0.75, 0.6, 0.95, 0.5, 0.3]);\n      const maxOutputSize = 5;\n      const iouThreshold = 0.5;\n      const scoreThreshold = 0.0;\n\n      const before = tf.memory().numTensors;\n\n      const {selectedIndices, validOutputs} =\n          await tf.image.nonMaxSuppressionPaddedAsync(\n              boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, true);\n\n      const after = tf.memory().numTensors;\n\n      expectArraysEqual(await selectedIndices.data(), [3, 0, 5, 0, 0]);\n      expectArraysEqual(await validOutputs.data(), 3);\n\n      // The number of tensors should increase by the number of tensors\n      // returned (i.e. selectedIndices and selectedScores).\n      expect(after).toEqual(before + 2);\n    });\n  });\n});\n"]}