{"version":3,"file":"resize_bilinear_test.js","sourceRoot":"","sources":["../../../src/ops/image/resize_bilinear_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../../index';\nimport {ALL_ENVS, describeWithFlags} from '../../jasmine_util';\nimport {expectArraysClose} from '../../test_util';\n\ndescribeWithFlags('resizeBilinear', ALL_ENVS, () => {\n  it('simple alignCorners=false', async () => {\n    const input = tf.tensor3d([2, 2, 4, 4], [2, 2, 1]);\n    const output = input.resizeBilinear([3, 3], false);\n\n    expectArraysClose(\n        await output.data(), [2, 2, 2, 10 / 3, 10 / 3, 10 / 3, 4, 4, 4]);\n  });\n\n  it('5x5-bilinear, no change in shape', async () => {\n    const image: tf.Tensor4D = tf.ones([1, 5, 5, 3]);\n\n    const alignCorners = false;\n    const output = tf.image.resizeBilinear(image, [5, 5], alignCorners);\n\n    expect(output.shape).toEqual([1, 5, 5, 3]);\n    expect(output.dtype).toBe('float32');\n    expectArraysClose(await output.data(), await image.data());\n  });\n\n  it('simple alignCorners=true', async () => {\n    const input = tf.tensor3d([2, 2, 4, 4], [2, 2, 1]);\n    const output = input.resizeBilinear([3, 3], true);\n\n    expectArraysClose(await output.data(), [2, 2, 2, 3, 3, 3, 4, 4, 4]);\n  });\n\n  it('works when rows are copied', async () => {\n    const input = tf.tensor3d(\n        [\n          1.56324531, 2.13817752, 1.44398421, 1.07632684, 0.59306785,\n          -0.36970865, 1.62451879, 1.8367334, 1.13944798, 2.01993218,\n          2.01919952, 2.67524054\n        ],\n        [2, 3, 2]);\n    const output = input.resizeBilinear([4, 3], false);\n\n    expectArraysClose(await output.data(), [\n      1.5632453,  2.13817763, 1.44398415, 1.07632685, 0.59306782, -0.36970866,\n      1.59388208, 1.98745549, 1.2917161,  1.54812956, 1.30613375, 1.15276587,\n      1.62451875, 1.83673334, 1.13944793, 2.01993227, 2.01919961, 2.67524052,\n      1.62451875, 1.83673334, 1.13944793, 2.01993227, 2.01919961, 2.67524052\n    ]);\n  });\n\n  it('works for ints', async () => {\n    const input = tf.tensor3d([1, 2, 3, 4, 5], [1, 5, 1], 'int32');\n    const output = input.resizeBilinear([1, 10], false);\n\n    expect(output.shape).toEqual([1, 10, 1]);\n    expect(output.dtype).toBe('float32');\n    expectArraysClose(\n        await output.data(), [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5]);\n  });\n\n  it('matches tensorflow w/ random numbers alignCorners=false, ' +\n         'halfPixelCenters=true',\n     async () => {\n       const input = tf.tensor3d(\n           [\n             1.19074044, 0.91373104, 2.01611669, -0.52270832, 0.38725395,\n             1.30809779, 0.61835143, 3.49600659, 2.09230986, 0.56473997,\n             0.03823943, 1.19864896\n           ],\n           [2, 3, 2]);\n       const output = input.resizeBilinear([4, 5], false, true);\n\n       expectArraysClose(await output.data(), [\n         1.1907405, 0.913731,  1.520891,  0.3391553,  2.0161166, -0.5227083,\n         1.0387988, 0.5757756, 0.3872539, 1.3080978,  1.0476432, 1.5592999,\n         1.442652,  0.8352414, 2.0351648, -0.2508462, 0.9940659, 0.6681031,\n         0.3000003, 1.2807356, 0.7614487, 2.8504376,  1.2861738, 1.8274136,\n         2.0732617, 0.2928779, 0.9046002, 0.8527579,  0.125493,  1.2260112,\n         0.6183515, 3.4960065, 1.2079349, 2.3234997,  2.09231,   0.5647399,\n         0.8598673, 0.9450854, 0.0382394, 1.1986489\n       ]);\n     });\n\n  it('batch of 2, simple, alignCorners=false, ' +\n         'halfPixelCenters=true',\n     async () => {\n       const input = tf.tensor4d([2, 2, 4, 4, 3, 3, 5, 5], [2, 2, 2, 1]);\n       const output =\n           input.resizeBilinear([3, 3], false /* alignCorners */, true);\n\n       expectArraysClose(\n           await output.data(),\n           [2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 4, 4, 4, 5, 5, 5]);\n     });\n\n  it('target width = 1, alignCorners=false, ' +\n         'halfPixelCenters=true',\n     async () => {\n       const input = tf.tensor3d([\n         [\n           [120.68856811523438, 134.51638793945312, 83.03671264648438],\n           [121.58008575439453, 113.28836059570312, 136.3172149658203],\n           [79.38370513916016, 101.87127685546875, 104.54979705810547],\n           [96.31678771972656, 111.77168273925781, 83.73509979248047]\n         ],\n         [\n           [119.45088195800781, 88.98846435546875, 97.47553253173828],\n           [117.5562973022461, 108.26356506347656, 99.62212371826172],\n           [136.62701416015625, 94.10433197021484, 80.97366333007812],\n           [83.61205291748047, 90.60148620605469, 81.82512664794922]\n         ],\n         [\n           [103.0362777709961, 123.1098403930664, 125.62944030761719],\n           [92.2915267944336, 103.15729522705078, 119.18060302734375],\n           [102.93293762207031, 117.821044921875, 99.40152740478516],\n           [96.32952117919922, 105.80963134765625, 104.8491439819336]\n         ],\n         [\n           [104.87507629394531, 134.0189208984375, 111.02627563476562],\n           [85.4534683227539, 107.68426513671875, 103.03722381591797],\n           [89.70533752441406, 98.25298309326172, 78.42916870117188],\n           [113.6744613647461, 95.8189697265625, 122.75005340576172]\n         ]\n       ]);\n\n       const output = input.resizeBilinear([3, 1], false, true);\n\n       const expected = [\n         104.917, 106.514, 115.411, 112.352, 105.837, 99.7945, 89.2515, 104.222,\n         93.8262\n       ];\n       expectArraysClose(await output.data(), expected);\n       expect(output.shape).toEqual([3, 1, 3]);\n     });\n\n  it('matches tensorflow w/ random numbers alignCorners=false', async () => {\n    const input = tf.tensor3d(\n        [\n          1.19074044, 0.91373104, 2.01611669, -0.52270832, 0.38725395,\n          1.30809779, 0.61835143, 3.49600659, 2.09230986, 0.56473997,\n          0.03823943, 1.19864896\n        ],\n        [2, 3, 2]);\n    const output = input.resizeBilinear([4, 5], false);\n\n    expectArraysClose(await output.data(), [\n      1.19074047, 0.91373104, 1.68596613, 0.05186744, 1.69034398, -0.15654698,\n      0.7130264,  0.94193673, 0.38725394, 1.30809784, 0.9045459,  2.20486879,\n      1.59434628, 0.89455694, 1.68591988, 0.26748738, 0.58103991, 1.00690198,\n      0.21274668, 1.25337338, 0.6183514,  3.49600649, 1.50272655, 1.73724651,\n      1.68149579, 0.69152176, 0.44905344, 1.07186723, 0.03823943, 1.19864893,\n      0.6183514,  3.49600649, 1.50272655, 1.73724651, 1.68149579, 0.69152176,\n      0.44905344, 1.07186723, 0.03823943, 1.19864893\n    ]);\n  });\n\n  it('matches tensorflow w/ random numbers alignCorners=true', async () => {\n    const input = tf.tensor3d(\n        [\n          1.56324531, 2.13817752, 1.44398421, 1.07632684, 0.59306785,\n          -0.36970865, 1.62451879, 1.8367334, 1.13944798, 2.01993218,\n          2.01919952, 2.67524054\n        ],\n        [2, 3, 2]);\n    const output = input.resizeBilinear([4, 5], true);\n\n    expectArraysClose(await output.data(), [\n      1.5632453,  2.13817763, 1.50361478, 1.60725224,  1.44398427, 1.07632685,\n      1.01852608, 0.35330909, 0.59306782, -0.36970866, 1.58366978, 2.03769612,\n      1.46307099, 1.71427906, 1.3424722,  1.39086199,  1.20545864, 1.01806819,\n      1.06844509, 0.6452744,  1.60409427, 1.93721485,  1.42252707, 1.82130599,\n      1.24096,    1.70539713, 1.3923912,  1.68282723,  1.54382229, 1.66025746,\n      1.62451875, 1.83673346, 1.38198328, 1.92833281,  1.13944793, 2.01993227,\n      1.57932377, 2.34758639, 2.01919961, 2.67524052\n    ]);\n  });\n\n  it('batch of 2, simple, alignCorners=true', async () => {\n    const input = tf.tensor4d([2, 2, 4, 4, 3, 3, 5, 5], [2, 2, 2, 1]);\n    const output = input.resizeBilinear([3, 3], true /* alignCorners */);\n\n    expectArraysClose(\n        await output.data(),\n        [2, 2, 2, 3, 3, 3, 4, 4, 4, 3, 3, 3, 4, 4, 4, 5, 5, 5]);\n  });\n\n  it('target width = 1, alignCorners=true', async () => {\n    const input = tf.tensor3d([\n      [\n        [120.68856811523438, 134.51638793945312, 83.03671264648438],\n        [121.58008575439453, 113.28836059570312, 136.3172149658203],\n        [79.38370513916016, 101.87127685546875, 104.54979705810547],\n        [96.31678771972656, 111.77168273925781, 83.73509979248047]\n      ],\n      [\n        [119.45088195800781, 88.98846435546875, 97.47553253173828],\n        [117.5562973022461, 108.26356506347656, 99.62212371826172],\n        [136.62701416015625, 94.10433197021484, 80.97366333007812],\n        [83.61205291748047, 90.60148620605469, 81.82512664794922]\n      ],\n      [\n        [103.0362777709961, 123.1098403930664, 125.62944030761719],\n        [92.2915267944336, 103.15729522705078, 119.18060302734375],\n        [102.93293762207031, 117.821044921875, 99.40152740478516],\n        [96.32952117919922, 105.80963134765625, 104.8491439819336]\n      ],\n      [\n        [104.87507629394531, 134.0189208984375, 111.02627563476562],\n        [85.4534683227539, 107.68426513671875, 103.03722381591797],\n        [89.70533752441406, 98.25298309326172, 78.42916870117188],\n        [113.6744613647461, 95.8189697265625, 122.75005340576172]\n      ]\n    ]);\n\n    const output = input.resizeBilinear([3, 1], true);\n\n    const expected = [\n      120.68857, 134.51639, 83.03671, 111.243576, 106.04915, 111.55249,\n      104.87508, 134.01892, 111.026276\n    ];\n    expectArraysClose(await output.data(), expected);\n    expect(output.shape).toEqual([3, 1, 3]);\n  });\n\n  it('target height = 1, alignCorners=true', async () => {\n    const input = tf.tensor3d([\n      [\n        [120.68856811523438, 134.51638793945312, 83.03671264648438],\n        [121.58008575439453, 113.28836059570312, 136.3172149658203],\n        [79.38370513916016, 101.87127685546875, 104.54979705810547],\n        [96.31678771972656, 111.77168273925781, 83.73509979248047]\n      ],\n      [\n        [119.45088195800781, 88.98846435546875, 97.47553253173828],\n        [117.5562973022461, 108.26356506347656, 99.62212371826172],\n        [136.62701416015625, 94.10433197021484, 80.97366333007812],\n        [83.61205291748047, 90.60148620605469, 81.82512664794922]\n      ],\n      [\n        [103.0362777709961, 123.1098403930664, 125.62944030761719],\n        [92.2915267944336, 103.15729522705078, 119.18060302734375],\n        [102.93293762207031, 117.821044921875, 99.40152740478516],\n        [96.32952117919922, 105.80963134765625, 104.8491439819336]\n      ],\n      [\n        [104.87507629394531, 134.0189208984375, 111.02627563476562],\n        [85.4534683227539, 107.68426513671875, 103.03722381591797],\n        [89.70533752441406, 98.25298309326172, 78.42916870117188],\n        [113.6744613647461, 95.8189697265625, 122.75005340576172]\n      ]\n    ]);\n\n    const output = input.resizeBilinear([1, 3], true);\n\n    const expected = [\n      120.68857, 134.51639, 83.03671, 100.481895, 107.57982, 120.4335, 96.31679,\n      111.77168, 83.7351\n    ];\n    expectArraysClose(await output.data(), expected);\n    expect(output.shape).toEqual([1, 3, 3]);\n  });\n\n  it('throws when passed a non-tensor', () => {\n    const e = /Argument 'images' passed to 'resizeBilinear' must be a Tensor/;\n    expect(() => tf.image.resizeBilinear({} as tf.Tensor3D, [\n      1, 1\n    ])).toThrowError(e);\n  });\n\n  it('accepts a tensor-like object', async () => {\n    const input = [[[2], [2]], [[4], [4]]];  // 2x2x1\n    const output = tf.image.resizeBilinear(input, [3, 3], false);\n    expectArraysClose(\n        await output.data(), [2, 2, 2, 10 / 3, 10 / 3, 10 / 3, 4, 4, 4]);\n  });\n});\n\ndescribeWithFlags('resizeBilinear gradients', ALL_ENVS, () => {\n  it('greyscale: upscale, same aspect ratio', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [4.0]], [[5.0], [6.0], [7.0], [8.0]],\n      [[9.0], [10.0], [11.0], [12.0]], [[13.0], [14.0], [15.0], [16.0]]\n    ]);\n\n    const size: [number, number] = [4, 4];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [6.0, 17.0, 38.0, 75.0];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('with clones, greyscale: upscale, same aspect ratio', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [4.0]], [[5.0], [6.0], [7.0], [8.0]],\n      [[9.0], [10.0], [11.0], [12.0]], [[13.0], [14.0], [15.0], [16.0]]\n    ]);\n\n    const size: [number, number] = [4, 4];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeBilinear(i.clone(), size, alignCorners).clone());\n\n    const output = g(input, dy);\n    const expected = [6.0, 17.0, 38.0, 75.0];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('greyscale: upscale, same aspect ratio, align corners', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [4.0]], [[5.0], [6.0], [7.0], [8.0]],\n      [[9.0], [10.0], [11.0], [12.0]], [[13.0], [14.0], [15.0], [16.0]]\n    ]);\n\n    const size: [number, number] = [4, 4];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected =\n        [17.333330154418945, 23.999998092651367, 44.0, 50.66666793823242];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('greyscale: upscale, taller than wider', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [4.0]], [[5.0], [6.0], [7.0], [8.0]],\n      [[9.0], [10.0], [11.0], [12.0]], [[13.0], [14.0], [15.0], [16.0]],\n      [[17.0], [18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0], [24.0]],\n      [[25.0], [26.0], [27.0], [28.0]], [[29.0], [30.0], [31.0], [32.0]],\n      [[33.0], [34.0], [35.0], [36.0]]\n    ]);\n\n    const size: [number, number] = [9, 4];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [\n      25.55555534362793, 55.5555534362793, 208.44444274902344, 376.4444274902344\n    ];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('greyscale: upscale, taller than wider, align corners', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [4.0]], [[5.0], [6.0], [7.0], [8.0]],\n      [[9.0], [10.0], [11.0], [12.0]], [[13.0], [14.0], [15.0], [16.0]],\n      [[17.0], [18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0], [24.0]],\n      [[25.0], [26.0], [27.0], [28.0]], [[29.0], [30.0], [31.0], [32.0]],\n      [[33.0], [34.0], [35.0], [36.0]]\n    ]);\n\n    const size: [number, number] = [9, 4];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [99.0, 114.0, 219.00001525878906, 233.99998474121094];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('greyscale: upscale, wider than taller', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [4.0], [5.0], [6.0], [7.0]],\n      [[8.0], [9.0], [10.0], [11.0], [12.0], [13.0], [14.0]],\n      [[15.0], [16.0], [17.0], [18.0], [19.0], [20.0], [21.0]],\n      [[22.0], [23.0], [24.0], [25.0], [26.0], [27.0], [28.0]]\n    ]);\n\n    const size: [number, number] = [4, 7];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [\n      14.428570747375488, 52.07142639160156, 98.71427917480469,\n      240.78573608398438\n    ];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('greyscale: upscale, wider than taller, align corners', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [4.0], [5.0], [6.0], [7.0]],\n      [[8.0], [9.0], [10.0], [11.0], [12.0], [13.0], [14.0]],\n      [[15.0], [16.0], [17.0], [18.0], [19.0], [20.0], [21.0]],\n      [[22.0], [23.0], [24.0], [25.0], [26.0], [27.0], [28.0]]\n    ]);\n\n    const size: [number, number] = [4, 7];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [51.33332824707031, 70.0, 133.0, 151.66668701171875];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  // Downscale\n\n  it('greyscale: downscale, same aspect ratio', async () => {\n    const input = tf.tensor3d([\n      [[100.0], [50.0], [25.0], [10.0]], [[60.0], [20.0], [80.0], [20.0]],\n      [[40.0], [15.0], [200.0], [203.0]], [[40.0], [10.0], [230.0], [200.0]]\n    ]);\n\n    const dy = tf.tensor3d([[[1.0], [2.0]], [[3.0], [4.0]]]);\n\n    const size: [number, number] = [2, 2];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [\n      1.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0,\n      0.0\n    ];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('greyscale: downscale, same aspect ratio, align corners', async () => {\n    const input = tf.tensor3d([\n      [[100.0], [50.0], [25.0], [10.0]], [[60.0], [20.0], [80.0], [20.0]],\n      [[40.0], [15.0], [200.0], [203.0]], [[40.0], [10.0], [230.0], [200.0]]\n    ]);\n\n    const dy = tf.tensor3d([[[1.0], [2.0]], [[3.0], [4.0]]]);\n\n    const size: [number, number] = [2, 2];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [\n      1.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0,\n      4.0\n    ];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('greyscale: downscale, taller than wider', async () => {\n    const input = tf.tensor3d([\n      [[100.0], [50.0], [25.0], [10.0]], [[60.0], [20.0], [80.0], [20.0]],\n      [[40.0], [15.0], [200.0], [203.0]], [[40.0], [10.0], [230.0], [200.0]]\n    ]);\n\n    const dy = tf.tensor3d([[[1.0], [2.0]], [[3.0], [4.0]], [[5.0], [6.0]]]);\n\n    const size: [number, number] = [3, 2];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [\n      1.0, 0.0, 2.0, 0.0, 1.9999998807907104, 0.0, 2.6666665077209473, 0.0,\n      2.6666665077209473, 0.0, 3.3333330154418945, 0.0, 3.333333730697632, 0.0,\n      4.000000476837158, 0.0\n    ];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('greyscale: downscale, taller than wider, align corners', async () => {\n    const input = tf.tensor3d([\n      [[100.0], [50.0], [25.0], [10.0]], [[60.0], [20.0], [80.0], [20.0]],\n      [[40.0], [15.0], [200.0], [203.0]], [[40.0], [10.0], [230.0], [200.0]]\n    ]);\n\n    const dy = tf.tensor3d([[[1.0], [2.0]], [[3.0], [4.0]], [[5.0], [6.0]]]);\n\n    const size: [number, number] = [3, 2];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [\n      1.0, 0.0, 0.0, 2.0, 1.5, 0.0, 0.0, 2.0, 1.5, 0.0, 0.0, 2.0, 5.0, 0.0, 0.0,\n      6.0\n    ];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('greyscale: downscale, wider than taller', async () => {\n    const input = tf.tensor3d([\n      [[100.0], [50.0], [25.0], [10.0]], [[60.0], [20.0], [80.0], [20.0]],\n      [[40.0], [15.0], [200.0], [203.0]], [[40.0], [10.0], [230.0], [200.0]]\n    ]);\n\n    const dy = tf.tensor3d([[[1.0], [2.0], [3.0]], [[4.0], [5.0], [6.0]]]);\n\n    const size: [number, number] = [2, 3];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [\n      1.0, 1.3333332538604736, 1.6666665077209473, 2.000000238418579, 0.0, 0.0,\n      0.0, 0.0, 4.0, 3.3333330154418945, 3.6666665077209473, 4.000000476837158,\n      0.0, 0.0, 0.0, 0.0\n    ];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('greyscale: downscale, wider than taller, align corners', async () => {\n    const input = tf.tensor3d([\n      [[100.0], [50.0], [25.0], [10.0]], [[60.0], [20.0], [80.0], [20.0]],\n      [[40.0], [15.0], [200.0], [203.0]], [[40.0], [10.0], [230.0], [200.0]]\n    ]);\n\n    const dy = tf.tensor3d([[[1.0], [2.0], [3.0]], [[4.0], [5.0], [6.0]]]);\n\n    const size: [number, number] = [2, 3];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [\n      1.0, 1.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 2.5, 2.5,\n      6.0\n    ];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  // No Op\n\n  it('greyscale: same size', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n\n    const dy = tf.tensor3d([[[1.0], [2.0]], [[3.0], [4.0]]]);\n\n    const size: [number, number] = [2, 2];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [1.0, 2.0, 3.0, 4.0];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('greyscale: same size, align corners', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n\n    const dy = tf.tensor3d([[[1.0], [2.0]], [[3.0], [4.0]]]);\n\n    const size: [number, number] = [2, 2];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [1.0, 2.0, 3.0, 4.0];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  // 3 channel upscale\n  it('color: upscale, wider than taller', async () => {\n    const input = tf.tensor3d([\n      [\n        [115.11029815673828, 111.90936279296875, 66.87433624267578],\n        [72.03849029541016, 81.86637878417969, 119.53585815429688]\n      ],\n      [\n        [68.555419921875, 97.49642181396484, 116.90741729736328],\n        [128.69467163085938, 86.78314208984375, 104.3116683959961]\n      ]\n    ]);\n\n    const dy = tf.tensor3d([\n      [\n        [1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [10.0, 11.0, 12.0],\n        [13.0, 14.0, 15.0]\n      ],\n      [\n        [16.0, 17.0, 18.0], [19.0, 20.0, 21.0], [22.0, 23.0, 24.0],\n        [25.0, 26.0, 27.0], [28.0, 29.0, 30.0]\n      ],\n      [\n        [31.0, 32.0, 33.0], [34.0, 35.0, 36.0], [37.0, 38.0, 39.0],\n        [40.0, 41.0, 42.0], [43.0, 44.0, 45.0]\n      ]\n    ]);\n\n    const size: [number, number] = [3, 5];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [\n      15.399999618530273, 17.799999237060547, 20.19999885559082,\n      56.26666259765625, 60.533329010009766, 64.79999542236328,\n      80.00000762939453, 83.0, 86.0, 178.33334350585938, 183.66668701171875,\n      189.00001525878906\n    ];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('color: upscale, wider than taller, align corners', async () => {\n    const input = tf.tensor3d([\n      [\n        [115.11029815673828, 111.90936279296875, 66.87433624267578],\n        [72.03849029541016, 81.86637878417969, 119.53585815429688]\n      ],\n      [\n        [68.555419921875, 97.49642181396484, 116.90741729736328],\n        [128.69467163085938, 86.78314208984375, 104.3116683959961]\n      ]\n    ]);\n\n    const dy = tf.tensor3d([\n      [\n        [1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [10.0, 11.0, 12.0],\n        [13.0, 14.0, 15.0]\n      ],\n      [\n        [16.0, 17.0, 18.0], [19.0, 20.0, 21.0], [22.0, 23.0, 24.0],\n        [25.0, 26.0, 27.0], [28.0, 29.0, 30.0]\n      ],\n      [\n        [31.0, 32.0, 33.0], [34.0, 35.0, 36.0], [37.0, 38.0, 39.0],\n        [40.0, 41.0, 42.0], [43.0, 44.0, 45.0]\n      ]\n    ]);\n\n    const size: [number, number] = [3, 5];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [\n      33.75, 37.5, 41.25, 56.25, 60.0, 63.75, 108.75, 112.5, 116.25, 131.25,\n      135.0, 138.75\n    ];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  // 3 channel downscale\n\n  it('color: downscale, taller than wider', async () => {\n    const input = tf.tensor3d([\n      [\n        [120.68856811523438, 134.51638793945312, 83.03671264648438],\n        [121.58008575439453, 113.28836059570312, 136.3172149658203],\n        [79.38370513916016, 101.87127685546875, 104.54979705810547],\n        [96.31678771972656, 111.77168273925781, 83.73509979248047]\n      ],\n      [\n        [119.45088195800781, 88.98846435546875, 97.47553253173828],\n        [117.5562973022461, 108.26356506347656, 99.62212371826172],\n        [136.62701416015625, 94.10433197021484, 80.97366333007812],\n        [83.61205291748047, 90.60148620605469, 81.82512664794922]\n      ],\n      [\n        [103.0362777709961, 123.1098403930664, 125.62944030761719],\n        [92.2915267944336, 103.15729522705078, 119.18060302734375],\n        [102.93293762207031, 117.821044921875, 99.40152740478516],\n        [96.32952117919922, 105.80963134765625, 104.8491439819336]\n      ],\n      [\n        [104.87507629394531, 134.0189208984375, 111.02627563476562],\n        [85.4534683227539, 107.68426513671875, 103.03722381591797],\n        [89.70533752441406, 98.25298309326172, 78.42916870117188],\n        [113.6744613647461, 95.8189697265625, 122.75005340576172]\n      ]\n    ]);\n\n    const dy =\n        tf.tensor3d([[[1.0, 2.0, 3.0]], [[4.0, 5.0, 6.0]], [[7.0, 8.0, 9.0]]]);\n\n    const size: [number, number] = [3, 1];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [\n      1.0,\n      2.0,\n      3.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      2.6666665077209473,\n      3.3333330154418945,\n      3.999999761581421,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      3.666666269302368,\n      4.3333330154418945,\n      4.999999523162842,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      4.6666669845581055,\n      5.333333969116211,\n      6.000000953674316,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0,\n      0.0\n    ];\n\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('color: downscale, width = 1, align corners', async () => {\n    const input = tf.tensor3d([\n      [\n        [120.68856811523438, 134.51638793945312, 83.03671264648438],\n        [121.58008575439453, 113.28836059570312, 136.3172149658203],\n        [79.38370513916016, 101.87127685546875, 104.54979705810547],\n        [96.31678771972656, 111.77168273925781, 83.73509979248047]\n      ],\n      [\n        [119.45088195800781, 88.98846435546875, 97.47553253173828],\n        [117.5562973022461, 108.26356506347656, 99.62212371826172],\n        [136.62701416015625, 94.10433197021484, 80.97366333007812],\n        [83.61205291748047, 90.60148620605469, 81.82512664794922]\n      ],\n      [\n        [103.0362777709961, 123.1098403930664, 125.62944030761719],\n        [92.2915267944336, 103.15729522705078, 119.18060302734375],\n        [102.93293762207031, 117.821044921875, 99.40152740478516],\n        [96.32952117919922, 105.80963134765625, 104.8491439819336]\n      ],\n      [\n        [104.87507629394531, 134.0189208984375, 111.02627563476562],\n        [85.4534683227539, 107.68426513671875, 103.03722381591797],\n        [89.70533752441406, 98.25298309326172, 78.42916870117188],\n        [113.6744613647461, 95.8189697265625, 122.75005340576172]\n      ]\n    ]);\n\n    const dy =\n        tf.tensor3d([[[1.0, 2.0, 3.0]], [[4.0, 5.0, 6.0]], [[7.0, 8.0, 9.0]]]);\n\n    const size: [number, number] = [3, 1];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [\n      1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      2.0, 2.5, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      2.0, 2.5, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      7.0, 8.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0\n    ];\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('color: downscale, height = 1, align corners', async () => {\n    const input = tf.tensor3d([\n      [\n        [120.68856811523438, 134.51638793945312, 83.03671264648438],\n        [121.58008575439453, 113.28836059570312, 136.3172149658203],\n        [79.38370513916016, 101.87127685546875, 104.54979705810547],\n        [96.31678771972656, 111.77168273925781, 83.73509979248047]\n      ],\n      [\n        [119.45088195800781, 88.98846435546875, 97.47553253173828],\n        [117.5562973022461, 108.26356506347656, 99.62212371826172],\n        [136.62701416015625, 94.10433197021484, 80.97366333007812],\n        [83.61205291748047, 90.60148620605469, 81.82512664794922]\n      ],\n      [\n        [103.0362777709961, 123.1098403930664, 125.62944030761719],\n        [92.2915267944336, 103.15729522705078, 119.18060302734375],\n        [102.93293762207031, 117.821044921875, 99.40152740478516],\n        [96.32952117919922, 105.80963134765625, 104.8491439819336]\n      ],\n      [\n        [104.87507629394531, 134.0189208984375, 111.02627563476562],\n        [85.4534683227539, 107.68426513671875, 103.03722381591797],\n        [89.70533752441406, 98.25298309326172, 78.42916870117188],\n        [113.6744613647461, 95.8189697265625, 122.75005340576172]\n      ]\n    ]);\n\n    const dy = tf.tensor3d([[[1., 2., 3.], [4., 5., 6.], [7., 8., 9.]]]);\n\n    const size: [number, number] = [1, 3];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [\n      1., 2., 3., 2., 2.5, 3., 2., 2.5, 3., 7., 8., 9., 0., 0., 0., 0.,\n      0., 0., 0., 0., 0.,  0., 0., 0.,  0., 0., 0., 0., 0., 0., 0., 0.,\n      0., 0., 0., 0., 0.,  0., 0., 0.,  0., 0., 0., 0., 0., 0., 0., 0.\n    ];\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('color: downscale, taller than wider, align corners', async () => {\n    const input = tf.tensor3d([\n      [\n        [120.68856811523438, 134.51638793945312, 83.03671264648438],\n        [121.58008575439453, 113.28836059570312, 136.3172149658203],\n        [79.38370513916016, 101.87127685546875, 104.54979705810547],\n        [96.31678771972656, 111.77168273925781, 83.73509979248047]\n      ],\n      [\n        [119.45088195800781, 88.98846435546875, 97.47553253173828],\n        [117.5562973022461, 108.26356506347656, 99.62212371826172],\n        [136.62701416015625, 94.10433197021484, 80.97366333007812],\n        [83.61205291748047, 90.60148620605469, 81.82512664794922]\n      ],\n      [\n        [103.0362777709961, 123.1098403930664, 125.62944030761719],\n        [92.2915267944336, 103.15729522705078, 119.18060302734375],\n        [102.93293762207031, 117.821044921875, 99.40152740478516],\n        [96.32952117919922, 105.80963134765625, 104.8491439819336]\n      ],\n      [\n        [104.87507629394531, 134.0189208984375, 111.02627563476562],\n        [85.4534683227539, 107.68426513671875, 103.03722381591797],\n        [89.70533752441406, 98.25298309326172, 78.42916870117188],\n        [113.6744613647461, 95.8189697265625, 122.75005340576172]\n      ]\n    ]);\n\n    const dy = tf.tensor3d([\n      [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[7.0, 8.0, 9.0], [10.0, 11.0, 12.0]],\n      [[13.0, 14.0, 15.0], [16.0, 17.0, 18.0]]\n    ]);\n\n    const size: [number, number] = [3, 2];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = [\n      1.0,  2.0,  3.0,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0,  5.0,  6.0,\n      3.5,  4.0,  4.5,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0,  5.5,  6.0,\n      3.5,  4.0,  4.5,  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0,  5.5,  6.0,\n      13.0, 14.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 17.0, 18.0\n    ];\n    expectArraysClose(await output.data(), expected);\n  });\n\n  // 3 channel no-op\n\n  it('color: same size', async () => {\n    const input = tf.tensor3d([\n      [\n        [115.11029815673828, 111.90936279296875, 66.87433624267578],\n        [72.03849029541016, 81.86637878417969, 119.53585815429688]\n      ],\n      [\n        [68.555419921875, 97.49642181396484, 116.90741729736328],\n        [128.69467163085938, 86.78314208984375, 104.3116683959961]\n      ]\n    ]);\n\n    const dy = tf.tensor3d([\n      [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[7.0, 8.0, 9.0], [10.0, 11.0, 12.0]]\n    ]);\n\n    const size: [number, number] = [2, 2];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected =\n        [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0];\n    expectArraysClose(await output.data(), expected);\n  });\n\n  it('color: same size, align corners', async () => {\n    const input = tf.tensor3d([\n      [\n        [115.11029815673828, 111.90936279296875, 66.87433624267578],\n        [72.03849029541016, 81.86637878417969, 119.53585815429688]\n      ],\n      [\n        [68.555419921875, 97.49642181396484, 116.90741729736328],\n        [128.69467163085938, 86.78314208984375, 104.3116683959961]\n      ]\n    ]);\n\n    const dy = tf.tensor3d([\n      [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[7.0, 8.0, 9.0], [10.0, 11.0, 12.0]]\n    ]);\n\n    const size: [number, number] = [2, 2];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) => tf.image.resizeBilinear(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected =\n        [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0];\n    expectArraysClose(await output.data(), expected);\n  });\n});\n"]}