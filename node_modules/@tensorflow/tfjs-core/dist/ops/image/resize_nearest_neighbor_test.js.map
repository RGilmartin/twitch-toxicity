{"version":3,"file":"resize_nearest_neighbor_test.js","sourceRoot":"","sources":["../../../src/ops/image/resize_nearest_neighbor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../../index';\nimport {ALL_ENVS, describeWithFlags} from '../../jasmine_util';\nimport {expectArraysClose} from '../../test_util';\n\ndescribeWithFlags('resizeNearestNeighbor', ALL_ENVS, () => {\n  it('simple alignCorners=false', async () => {\n    const input = tf.tensor3d([2, 2, 4, 4], [2, 2, 1]);\n    const output = input.resizeNearestNeighbor([3, 3], false);\n\n    expectArraysClose(await output.data(), [2, 2, 2, 2, 2, 2, 4, 4, 4]);\n  });\n\n  it('simple alignCorners=true', async () => {\n    const input = tf.tensor3d([2, 2, 4, 4], [2, 2, 1]);\n    const output = input.resizeNearestNeighbor([3, 3], true);\n\n    expectArraysClose(await output.data(), [2, 2, 2, 4, 4, 4, 4, 4, 4]);\n  });\n\n  it('5x2To2x2 alignCorners=false halfPixelCenters=true', async () => {\n    const input = tf.tensor4d([1, 2, 3, 4, 5, 1, 2, 3, 4, 5], [1, 2, 5, 1]);\n    const output = input.resizeNearestNeighbor([2, 2], false, true);\n\n    expectArraysClose(await output.data(), [2, 4, 2, 4]);\n  });\n\n  it('2x2To1x1 alignCorners=false halfPixelCenters=true', async () => {\n    const input = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);\n    const output = input.resizeNearestNeighbor([1, 1], false, true);\n\n    expectArraysClose(await output.data(), [4]);\n  });\n\n  it('2x2To3x3 alignCorners=false halfPixelCenters=true', async () => {\n    const input = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);\n    const output = input.resizeNearestNeighbor([3, 3], false, true);\n\n    expectArraysClose(await output.data(), [1, 2, 2, 3, 4, 4, 3, 4, 4]);\n  });\n\n  it('3x3To2x2 alignCorners=false halfPixelCenters=true', async () => {\n    const input = tf.tensor4d([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 3, 1]);\n    const output = input.resizeNearestNeighbor([2, 2], false, true);\n\n    expectArraysClose(await output.data(), [1, 3, 7, 9]);\n  });\n\n  it('2x2To2x5 alignCorners=false halfPixelCenters=true', async () => {\n    const input = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);\n    const output = input.resizeNearestNeighbor([2, 5], false, true);\n\n    expectArraysClose(await output.data(), [1, 1, 2, 2, 2, 3, 3, 4, 4, 4]);\n  });\n\n  it('4x4To3x3 alignCorners=false halfPixelCenters=true', async () => {\n    const input = tf.tensor4d(\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 4, 4, 1]);\n    const output = input.resizeNearestNeighbor([3, 3], false, true);\n\n    expectArraysClose(await output.data(), [1, 3, 4, 9, 11, 12, 13, 15, 16]);\n  });\n\n  it('2x2To5x2 alignCorners=false halfPixelCenters=true', async () => {\n    const input = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);\n    const output = input.resizeNearestNeighbor([5, 2], false, true);\n\n    expectArraysClose(await output.data(), [1, 2, 1, 2, 3, 4, 3, 4, 3, 4]);\n  });\n\n  it('2x2To4x4 alignCorners=false halfPixelCenters=true', async () => {\n    const input = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);\n    const output = input.resizeNearestNeighbor([4, 4], false, true);\n\n    expectArraysClose(\n        await output.data(), [1, 1, 2, 2, 1, 1, 2, 2, 3, 3, 4, 4, 3, 3, 4, 4]);\n  });\n\n  it('matches tensorflow w/ random numbers alignCorners=false', async () => {\n    const input = tf.tensor3d(\n        [\n          1.19074044, 0.91373104, 2.01611669, -0.52270832, 0.38725395,\n          1.30809779, 0.61835143, 3.49600659, 2.09230986, 0.56473997,\n          0.03823943, 1.19864896\n        ],\n        [2, 3, 2]);\n    const output = input.resizeNearestNeighbor([4, 5], false);\n\n    expectArraysClose(await output.data(), [\n      1.19074047,   0.913731039, 1.19074047,   0.913731039,  2.01611662,\n      -0.522708297, 2.01611662,  -0.522708297, 0.38725394,   1.30809784,\n      1.19074047,   0.913731039, 1.19074047,   0.913731039,  2.01611662,\n      -0.522708297, 2.01611662,  -0.522708297, 0.38725394,   1.30809784,\n      0.61835146,   3.49600649,  0.61835146,   3.49600649,   2.09230995,\n      0.564739943,  2.09230995,  0.564739943,  0.0382394306, 1.19864893,\n      0.61835146,   3.49600649,  0.61835146,   3.49600649,   2.09230995,\n      0.564739943,  2.09230995,  0.564739943,  0.0382394306, 1.19864893\n    ]);\n  });\n\n  it('matches tensorflow w/ random numbers alignCorners=true', async () => {\n    const input = tf.tensor3d(\n        [\n          1.19074044, 0.91373104, 2.01611669, -0.52270832, 0.38725395,\n          1.30809779, 0.61835143, 3.49600659, 2.09230986, 0.56473997,\n          0.03823943, 1.19864896\n        ],\n        [2, 3, 2]);\n    const output = input.resizeNearestNeighbor([4, 5], true);\n\n    expectArraysClose(await output.data(), [\n      1.19074044, 0.91373104,  2.01611669, -0.52270832, 2.01611669, -0.52270832,\n      0.38725395, 1.30809779,  0.38725395, 1.30809779,  1.19074044, 0.91373104,\n      2.01611669, -0.52270832, 2.01611669, -0.52270832, 0.38725395, 1.30809779,\n      0.38725395, 1.30809779,  0.61835143, 3.49600659,  2.09230986, 0.56473997,\n      2.09230986, 0.56473997,  0.03823943, 1.19864896,  0.03823943, 1.19864896,\n      0.61835143, 3.49600659,  2.09230986, 0.56473997,  2.09230986, 0.56473997,\n      0.03823943, 1.19864896,  0.03823943, 1.19864896\n    ]);\n  });\n\n  it('batch of 2, simple, alignCorners=true', async () => {\n    const input = tf.tensor4d([2, 2, 4, 4, 3, 3, 5, 5], [2, 2, 2, 1]);\n    const output = input.resizeNearestNeighbor([3, 3], true /* alignCorners */);\n\n    expectArraysClose(\n        await output.data(),\n        [2, 2, 2, 4, 4, 4, 4, 4, 4, 3, 3, 3, 5, 5, 5, 5, 5, 5]);\n  });\n\n  it('throws when passed a non-tensor', () => {\n    const e =\n        /Argument 'images' passed to 'resizeNearestNeighbor' must be a Tensor/;\n    expect(() => tf.image.resizeNearestNeighbor({} as tf.Tensor3D, [\n      1, 1\n    ])).toThrowError(e);\n  });\n\n  it('accepts a tensor-like object', async () => {\n    const input = [[[2], [2]], [[4], [4]]];  // 2x2x1\n    const output = tf.image.resizeNearestNeighbor(input, [3, 3], false);\n\n    expectArraysClose(await output.data(), [2, 2, 2, 2, 2, 2, 4, 4, 4]);\n  });\n\n  it('does not throw when some output dim is 1 and alignCorners=true', () => {\n    const input = tf.tensor3d([2, 2, 4, 4], [2, 2, 1]);\n    expect(() => input.resizeNearestNeighbor([1, 3], true)).not.toThrow();\n  });\n});\n\ndescribeWithFlags('resizeNearestNeighbor gradients', ALL_ENVS, () => {\n  it('greyscale: upscale, same aspect ratio', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [4.0]], [[5.0], [6.0], [7.0], [8.0]],\n      [[9.0], [10.0], [11.0], [12.0]], [[13.0], [14.0], [15.0], [16.0]]\n    ]);\n\n    const size: [number, number] = [4, 4];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([[[14.0], [22.0]], [[46.0], [54.0]]]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('with clones, greyscale: upscale, same aspect ratio', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [4.0]], [[5.0], [6.0], [7.0], [8.0]],\n      [[9.0], [10.0], [11.0], [12.0]], [[13.0], [14.0], [15.0], [16.0]]\n    ]);\n\n    const size: [number, number] = [4, 4];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i.clone(), size, alignCorners)\n                .clone());\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([[[14.0], [22.0]], [[46.0], [54.0]]]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('greyscale: upscale, same aspect ratio, align corners', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [4.0]], [[5.0], [6.0], [7.0], [8.0]],\n      [[9.0], [10.0], [11.0], [12.0]], [[13.0], [14.0], [15.0], [16.0]]\n    ]);\n\n    const size: [number, number] = [4, 4];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([[[14.0], [22.0]], [[46.0], [54.0]]]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('greyscale: upscale, taller than wider', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [4.0]], [[5.0], [6.0], [7.0], [8.0]],\n      [[9.0], [10.0], [11.0], [12.0]], [[13.0], [14.0], [15.0], [16.0]],\n      [[17.0], [18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0], [24.0]],\n      [[25.0], [26.0], [27.0], [28.0]], [[29.0], [30.0], [31.0], [32.0]],\n      [[33.0], [34.0], [35.0], [36.0]]\n    ]);\n\n    const size: [number, number] = [9, 4];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([[[95.0], [115.0]], [[220.0], [236.0]]]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('greyscale: upscale, taller than wider, align corners', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [4.0]], [[5.0], [6.0], [7.0], [8.0]],\n      [[9.0], [10.0], [11.0], [12.0]], [[13.0], [14.0], [15.0], [16.0]],\n      [[17.0], [18.0], [19.0], [20.0]], [[21.0], [22.0], [23.0], [24.0]],\n      [[25.0], [26.0], [27.0], [28.0]], [[29.0], [30.0], [31.0], [32.0]],\n      [[33.0], [34.0], [35.0], [36.0]]\n    ]);\n\n    const size: [number, number] = [9, 4];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([[[60.0], [76.0]], [[255.0], [275.0]]]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('greyscale: upscale, wider than taller', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [4.0], [5.0], [6.0], [7.0]],\n      [[8.0], [9.0], [10.0], [11.0], [12.0], [13.0], [14.0]],\n      [[15.0], [16.0], [17.0], [18.0], [19.0], [20.0], [21.0]],\n      [[22.0], [23.0], [24.0], [25.0], [26.0], [27.0], [28.0]]\n    ]);\n\n    const size: [number, number] = [4, 7];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([[[48.0], [57.0]], [[160.0], [141.0]]]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('greyscale: upscale, wider than taller, align corners', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [4.0], [5.0], [6.0], [7.0]],\n      [[8.0], [9.0], [10.0], [11.0], [12.0], [13.0], [14.0]],\n      [[15.0], [16.0], [17.0], [18.0], [19.0], [20.0], [21.0]],\n      [[22.0], [23.0], [24.0], [25.0], [26.0], [27.0], [28.0]]\n    ]);\n\n    const size: [number, number] = [4, 7];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([[[33.0], [72.0]], [[117.0], [184.0]]]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  //\n  // Downscaling\n  //\n\n  it('greyscale: downscale, same aspect ratio', async () => {\n    const input = tf.tensor3d([\n      [[100.0], [50.0], [25.0], [10.0]], [[60.0], [20.0], [80.0], [20.0]],\n      [[40.0], [15.0], [200.0], [203.0]], [[40.0], [10.0], [230.0], [200.0]]\n    ]);\n    const dy = tf.tensor3d([[[1.0], [2.0]], [[3.0], [4.0]]]);\n\n    const size: [number, number] = [2, 2];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([\n      [[1.0], [0.0], [2.0], [0.0]], [[0.0], [0.0], [0.0], [0.0]],\n      [[3.0], [0.0], [4.0], [0.0]], [[0.0], [0.0], [0.0], [0.0]]\n    ]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('greyscale: downscale, same aspect ratio, align corners', async () => {\n    const input = tf.tensor3d([\n      [[100.0], [50.0], [25.0], [10.0]], [[60.0], [20.0], [80.0], [20.0]],\n      [[40.0], [15.0], [200.0], [203.0]], [[40.0], [10.0], [230.0], [200.0]]\n    ]);\n    const dy = tf.tensor3d([[[1.0], [2.0]], [[3.0], [4.0]]]);\n\n    const size: [number, number] = [2, 2];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([\n      [[1.0], [0.0], [0.0], [2.0]], [[0.0], [0.0], [0.0], [0.0]],\n      [[0.0], [0.0], [0.0], [0.0]], [[3.0], [0.0], [0.0], [4.0]]\n    ]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('greyscale: downscale, taller than wider', async () => {\n    const input = tf.tensor3d([\n      [[100.0], [50.0], [25.0], [10.0]], [[60.0], [20.0], [80.0], [20.0]],\n      [[40.0], [15.0], [200.0], [203.0]], [[40.0], [10.0], [230.0], [200.0]]\n    ]);\n    const dy = tf.tensor3d([[[1.0], [2.0]], [[3.0], [4.0]], [[5.0], [6.0]]]);\n\n    const size: [number, number] = [3, 2];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([\n      [[1.0], [0.0], [2.0], [0.0]], [[3.0], [0.0], [4.0], [0.0]],\n      [[5.0], [0.0], [6.0], [0.0]], [[0.0], [0.0], [0.0], [0.0]]\n    ]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('greyscale: downscale, taller than wider, align corners', async () => {\n    const input = tf.tensor3d([\n      [[100.0], [50.0], [25.0], [10.0]], [[60.0], [20.0], [80.0], [20.0]],\n      [[40.0], [15.0], [200.0], [203.0]], [[40.0], [10.0], [230.0], [200.0]]\n    ]);\n    const dy = tf.tensor3d([[[1.0], [2.0]], [[3.0], [4.0]], [[5.0], [6.0]]]);\n\n    const size: [number, number] = [3, 2];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([\n      [[1.0], [0.0], [0.0], [2.0]], [[0.0], [0.0], [0.0], [0.0]],\n      [[3.0], [0.0], [0.0], [4.0]], [[5.0], [0.0], [0.0], [6.0]]\n    ]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('greyscale: downscale, taller than wider', async () => {\n    const input = tf.tensor3d([\n      [[100.0], [50.0], [25.0], [10.0]], [[60.0], [20.0], [80.0], [20.0]],\n      [[40.0], [15.0], [200.0], [203.0]], [[40.0], [10.0], [230.0], [200.0]]\n    ]);\n    const dy = tf.tensor3d([[[1.0], [2.0], [3.0]], [[4.0], [5.0], [6.0]]]);\n\n    const size: [number, number] = [2, 3];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([\n      [[1.0], [2.0], [3.0], [0.0]], [[0.0], [0.0], [0.0], [0.0]],\n      [[4.0], [5.0], [6.0], [0.0]], [[0.0], [0.0], [0.0], [0.0]]\n    ]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('greyscale: downscale, taller than wider, align corners', async () => {\n    const input = tf.tensor3d([\n      [[100.0], [50.0], [25.0], [10.0]], [[60.0], [20.0], [80.0], [20.0]],\n      [[40.0], [15.0], [200.0], [203.0]], [[40.0], [10.0], [230.0], [200.0]]\n    ]);\n    const dy = tf.tensor3d([[[1.0], [2.0], [3.0]], [[4.0], [5.0], [6.0]]]);\n\n    const size: [number, number] = [2, 3];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([\n      [[1.0], [0.0], [2.0], [3.0]], [[0.0], [0.0], [0.0], [0.0]],\n      [[0.0], [0.0], [0.0], [0.0]], [[4.0], [0.0], [5.0], [6.0]]\n    ]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('greyscale: downscale, same size', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([[[1.0], [2.0]], [[3.0], [4.0]]]);\n\n    const size: [number, number] = [2, 2];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([[[1.0], [2.0]], [[3.0], [4.0]]]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('greyscale: downscale, same size, align corners', async () => {\n    const input = tf.tensor3d([[[100.0], [50.0]], [[60.0], [20.0]]]);\n    const dy = tf.tensor3d([[[1.0], [2.0]], [[3.0], [4.0]]]);\n\n    const size: [number, number] = [2, 2];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([[[1.0], [2.0]], [[3.0], [4.0]]]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  //\n  // 3 channel images\n  //\n\n  it('color: upscale, wider than taller', async () => {\n    const input = tf.tensor3d([\n      [\n        [100.26818084716797, 74.61857604980469, 81.62117767333984],\n        [127.86964416503906, 85.0583267211914, 102.95439147949219]\n      ],\n      [\n        [104.3798828125, 96.70733642578125, 92.60601043701172],\n        [77.63021850585938, 68.55794525146484, 96.17212677001953]\n      ]\n    ]);\n\n    const dy = tf.tensor3d([\n      [\n        [1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [10.0, 11.0, 12.0],\n        [13.0, 14.0, 15.0]\n      ],\n      [\n        [16.0, 17.0, 18.0], [19.0, 20.0, 21.0], [22.0, 23.0, 24.0],\n        [25.0, 26.0, 27.0], [28.0, 29.0, 30.0]\n      ],\n      [\n        [31.0, 32.0, 33.0], [34.0, 35.0, 36.0], [37.0, 38.0, 39.0],\n        [40.0, 41.0, 42.0], [43.0, 44.0, 45.0]\n      ]\n    ]);\n\n    const size: [number, number] = [3, 5];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([\n      [[69.0, 75.0, 81.0], [76.0, 80.0, 84.0]],\n      [[102.0, 105.0, 108.0], [83.0, 85.0, 87.0]]\n    ]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('color: upscale, wider than taller, align corners', async () => {\n    const input = tf.tensor3d([\n      [\n        [100.26818084716797, 74.61857604980469, 81.62117767333984],\n        [127.86964416503906, 85.0583267211914, 102.95439147949219]\n      ],\n      [\n        [104.3798828125, 96.70733642578125, 92.60601043701172],\n        [77.63021850585938, 68.55794525146484, 96.17212677001953]\n      ]\n    ]);\n\n    const dy = tf.tensor3d([\n      [\n        [1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0], [10.0, 11.0, 12.0],\n        [13.0, 14.0, 15.0]\n      ],\n      [\n        [16.0, 17.0, 18.0], [19.0, 20.0, 21.0], [22.0, 23.0, 24.0],\n        [25.0, 26.0, 27.0], [28.0, 29.0, 30.0]\n      ],\n      [\n        [31.0, 32.0, 33.0], [34.0, 35.0, 36.0], [37.0, 38.0, 39.0],\n        [40.0, 41.0, 42.0], [43.0, 44.0, 45.0]\n      ]\n    ]);\n\n    const size: [number, number] = [3, 5];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([\n      [[5.0, 7.0, 9.0], [30.0, 33.0, 36.0]],\n      [[100.0, 104.0, 108.0], [195.0, 201.0, 207.0]]\n    ]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('color: downscale, taller than wider', async () => {\n    const input = tf.tensor3d([\n      [\n        [97.98934936523438, 77.24969482421875, 113.70111846923828],\n        [111.34081268310547, 113.15758514404297, 157.90521240234375],\n        [105.77980041503906, 85.75989532470703, 69.62374114990234],\n        [125.94231414794922, 73.11385345458984, 87.03099822998047]\n      ],\n      [\n        [62.25117111206055, 90.23927307128906, 119.1966552734375],\n        [93.55166625976562, 95.9106674194336, 115.56237030029297],\n        [102.98121643066406, 98.1983413696289, 97.55982971191406],\n        [86.47753143310547, 97.04051208496094, 121.50492095947266]\n      ],\n      [\n        [92.4140853881836, 118.45619201660156, 108.0341796875],\n        [126.43061065673828, 123.28077697753906, 121.03379821777344],\n        [128.6694793701172, 98.47042846679688, 114.47464752197266],\n        [93.31566619873047, 95.2713623046875, 102.51188659667969]\n      ],\n      [\n        [101.55884552001953, 83.31947326660156, 119.08016204833984],\n        [128.28546142578125, 92.56212615966797, 74.85054779052734],\n        [88.9786148071289, 119.43685913085938, 73.06110382080078],\n        [98.17908477783203, 105.54570007324219, 93.45832061767578]\n      ]\n    ]);\n\n    const dy =\n        tf.tensor3d([[[1.0, 2.0, 3.0]], [[4.0, 5.0, 6.0]], [[7.0, 8.0, 9.0]]]);\n\n    const size: [number, number] = [3, 1];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([\n      [[1.0, 2.0, 3.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],\n      [[4.0, 5.0, 6.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],\n      [[7.0, 8.0, 9.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]\n    ]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('color: downscale, taller than wider, align corners', async () => {\n    const input = tf.tensor3d([\n      [\n        [97.98934936523438, 77.24969482421875, 113.70111846923828],\n        [111.34081268310547, 113.15758514404297, 157.90521240234375],\n        [105.77980041503906, 85.75989532470703, 69.62374114990234],\n        [125.94231414794922, 73.11385345458984, 87.03099822998047]\n      ],\n      [\n        [62.25117111206055, 90.23927307128906, 119.1966552734375],\n        [93.55166625976562, 95.9106674194336, 115.56237030029297],\n        [102.98121643066406, 98.1983413696289, 97.55982971191406],\n        [86.47753143310547, 97.04051208496094, 121.50492095947266]\n      ],\n      [\n        [92.4140853881836, 118.45619201660156, 108.0341796875],\n        [126.43061065673828, 123.28077697753906, 121.03379821777344],\n        [128.6694793701172, 98.47042846679688, 114.47464752197266],\n        [93.31566619873047, 95.2713623046875, 102.51188659667969]\n      ],\n      [\n        [101.55884552001953, 83.31947326660156, 119.08016204833984],\n        [128.28546142578125, 92.56212615966797, 74.85054779052734],\n        [88.9786148071289, 119.43685913085938, 73.06110382080078],\n        [98.17908477783203, 105.54570007324219, 93.45832061767578]\n      ]\n    ]);\n\n    const dy =\n        tf.tensor3d([[[1.0, 2.0, 3.0]], [[4.0, 5.0, 6.0]], [[7.0, 8.0, 9.0]]]);\n\n    const size: [number, number] = [3, 1];\n    const alignCorners = true;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([\n      [[1.0, 2.0, 3.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],\n      [[4.0, 5.0, 6.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],\n      [[7.0, 8.0, 9.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]\n    ]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n\n  it('color: same size', async () => {\n    const input = tf.tensor3d([\n      [\n        [100.26818084716797, 74.61857604980469, 81.62117767333984],\n        [127.86964416503906, 85.0583267211914, 102.95439147949219]\n      ],\n      [\n        [104.3798828125, 96.70733642578125, 92.60601043701172],\n        [77.63021850585938, 68.55794525146484, 96.17212677001953]\n      ]\n    ]);\n\n    const dy = tf.tensor3d([\n      [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[7.0, 8.0, 9.0], [10.0, 11.0, 12.0]]\n    ]);\n\n    const size: [number, number] = [2, 2];\n    const alignCorners = false;\n    const g = tf.grad(\n        (i: tf.Tensor3D) =>\n            tf.image.resizeNearestNeighbor(i, size, alignCorners));\n\n    const output = g(input, dy);\n    const expected = tf.tensor3d([\n      [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[7.0, 8.0, 9.0], [10.0, 11.0, 12.0]]\n    ]);\n\n    expectArraysClose(await output.data(), await expected.data());\n    expect(output.shape).toEqual(expected.shape);\n    expect(output.dtype).toBe(expected.dtype);\n  });\n});\n"]}