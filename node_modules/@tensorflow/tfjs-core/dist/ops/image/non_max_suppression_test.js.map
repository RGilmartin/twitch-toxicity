{"version":3,"file":"non_max_suppression_test.js","sourceRoot":"","sources":["../../../src/ops/image/non_max_suppression_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '../../index';\nimport {ALL_ENVS, describeWithFlags} from '../../jasmine_util';\nimport {expectArraysClose, expectArraysEqual} from '../../test_util';\n\ndescribeWithFlags('nonMaxSuppression', ALL_ENVS, () => {\n  describe('NonMaxSuppression Basic', () => {\n    it('select from three clusters', async () => {\n      const boxes = tf.tensor2d(\n          [\n            0, 0,  1, 1,  0, 0.1,  1, 1.1,  0, -0.1, 1, 0.9,\n            0, 10, 1, 11, 0, 10.1, 1, 11.1, 0, 100,  1, 101\n          ],\n          [6, 4]);\n      const scores = tf.tensor1d([0.9, 0.75, 0.6, 0.95, 0.5, 0.3]);\n      const maxOutputSize = 3;\n      const iouThreshold = 0.5;\n      const scoreThreshold = 0;\n      const indices = tf.image.nonMaxSuppression(\n          boxes, scores, maxOutputSize, iouThreshold, scoreThreshold);\n\n      expect(indices.shape).toEqual([3]);\n      expectArraysEqual(await indices.data(), [3, 0, 5]);\n    });\n\n    it('select from three clusters flipped coordinates', async () => {\n      const boxes = tf.tensor2d(\n          [\n            1, 1,  0, 0,  0, 0.1,  1, 1.1,  0, .9,  1, -0.1,\n            0, 10, 1, 11, 1, 10.1, 0, 11.1, 1, 101, 0, 100\n          ],\n          [6, 4]);\n      const scores = tf.tensor1d([0.9, 0.75, 0.6, 0.95, 0.5, 0.3]);\n      const maxOutputSize = 3;\n      const iouThreshold = 0.5;\n      const scoreThreshold = 0;\n      const indices = tf.image.nonMaxSuppression(\n          boxes, scores, maxOutputSize, iouThreshold, scoreThreshold);\n\n      expect(indices.shape).toEqual([3]);\n      expectArraysEqual(await indices.data(), [3, 0, 5]);\n    });\n\n    it('select at most two boxes from three clusters', async () => {\n      const boxes = tf.tensor2d(\n          [\n            0, 0,  1, 1,  0, 0.1,  1, 1.1,  0, -0.1, 1, 0.9,\n            0, 10, 1, 11, 0, 10.1, 1, 11.1, 0, 100,  1, 101\n          ],\n          [6, 4]);\n      const scores = tf.tensor1d([0.9, 0.75, 0.6, 0.95, 0.5, 0.3]);\n      const maxOutputSize = 2;\n      const iouThreshold = 0.5;\n      const scoreThreshold = 0;\n      const indices = tf.image.nonMaxSuppression(\n          boxes, scores, maxOutputSize, iouThreshold, scoreThreshold);\n\n      expect(indices.shape).toEqual([2]);\n      expectArraysEqual(await indices.data(), [3, 0]);\n    });\n\n    it('select at most thirty boxes from three clusters', async () => {\n      const boxes = tf.tensor2d(\n          [\n            0, 0,  1, 1,  0, 0.1,  1, 1.1,  0, -0.1, 1, 0.9,\n            0, 10, 1, 11, 0, 10.1, 1, 11.1, 0, 100,  1, 101\n          ],\n          [6, 4]);\n      const scores = tf.tensor1d([0.9, 0.75, 0.6, 0.95, 0.5, 0.3]);\n      const maxOutputSize = 30;\n      const iouThreshold = 0.5;\n      const scoreThreshold = 0;\n      const indices = tf.image.nonMaxSuppression(\n          boxes, scores, maxOutputSize, iouThreshold, scoreThreshold);\n\n      expect(indices.shape).toEqual([3]);\n      expectArraysEqual(await indices.data(), [3, 0, 5]);\n    });\n\n    it('select single box', async () => {\n      const boxes = tf.tensor2d([0, 0, 1, 1], [1, 4]);\n      const scores = tf.tensor1d([0.9]);\n      const maxOutputSize = 3;\n      const iouThreshold = 0.5;\n      const scoreThreshold = 0;\n      const indices = tf.image.nonMaxSuppression(\n          boxes, scores, maxOutputSize, iouThreshold, scoreThreshold);\n\n      expect(indices.shape).toEqual([1]);\n      expectArraysEqual(await indices.data(), [0]);\n    });\n\n    it('select from ten identical boxes', async () => {\n      const numBoxes = 10;\n      const corners = new Array(numBoxes)\n                          .fill(0)\n                          .map(_ => [0, 0, 1, 1])\n                          .reduce((arr, curr) => arr.concat(curr));\n      const boxes = tf.tensor2d(corners, [numBoxes, 4]);\n      const scores = tf.tensor1d(Array(numBoxes).fill(0.9));\n      const maxOutputSize = 3;\n      const iouThreshold = 0.5;\n      const scoreThreshold = 0;\n      const indices = tf.image.nonMaxSuppression(\n          boxes, scores, maxOutputSize, iouThreshold, scoreThreshold);\n\n      expect(indices.shape).toEqual([1]);\n      expectArraysEqual(await indices.data(), [0]);\n    });\n\n    it('inconsistent box and score shapes', () => {\n      const boxes = tf.tensor2d(\n          [\n            0, 0,  1, 1,  0, 0.1,  1, 1.1,  0, -0.1, 1, 0.9,\n            0, 10, 1, 11, 0, 10.1, 1, 11.1, 0, 100,  1, 101\n          ],\n          [6, 4]);\n      const scores = tf.tensor1d([0.9, 0.75, 0.6, 0.95, 0.5]);\n      const maxOutputSize = 30;\n      const iouThreshold = 0.5;\n      const scoreThreshold = 0;\n      expect(\n          () => tf.image.nonMaxSuppression(\n              boxes, scores, maxOutputSize, iouThreshold, scoreThreshold))\n          .toThrowError(/scores has incompatible shape with boxes/);\n    });\n\n    it('invalid iou threshold', () => {\n      const boxes = tf.tensor2d([0, 0, 1, 1], [1, 4]);\n      const scores = tf.tensor1d([0.9]);\n      const maxOutputSize = 3;\n      const iouThreshold = 1.2;\n      const scoreThreshold = 0;\n      expect(\n          () => tf.image.nonMaxSuppression(\n              boxes, scores, maxOutputSize, iouThreshold, scoreThreshold))\n          .toThrowError(/iouThreshold must be in \\[0, 1\\]/);\n    });\n\n    it('empty input', async () => {\n      const boxes = tf.tensor2d([], [0, 4]);\n      const scores = tf.tensor1d([]);\n      const maxOutputSize = 3;\n      const iouThreshold = 0.5;\n      const scoreThreshold = 0;\n      const indices = tf.image.nonMaxSuppression(\n          boxes, scores, maxOutputSize, iouThreshold, scoreThreshold);\n\n      expect(indices.shape).toEqual([0]);\n      expectArraysEqual(await indices.data(), []);\n    });\n\n    it('accepts a tensor-like object', async () => {\n      const boxes = [[0, 0, 1, 1], [0, 1, 1, 2]];\n      const scores = [1, 2];\n      const indices = tf.image.nonMaxSuppression(boxes, scores, 10);\n      expect(indices.shape).toEqual([2]);\n      expect(indices.dtype).toEqual('int32');\n      expectArraysEqual(await indices.data(), [1, 0]);\n    });\n\n    it('works when inputs are not explicitly initialized on the CPU',\n       async () => {\n         // This test ensures that asynchronous backends work with NMS, which\n         // requires inputs to reside on the CPU.\n         const boxes = tf.tensor2d(\n             [\n               0, 0,  1, 1,  0, 0.1,  1, 1.1,  0, -0.1, 1, 0.9,\n               0, 10, 1, 11, 0, 10.1, 1, 11.1, 0, 100,  1, 101\n             ],\n             [6, 4]);\n         const a = tf.tensor1d([0, 1, -2, -4, 4, -4]);\n         const b = tf.tensor1d([0.15, 0.2, 0.25, 0.5, 0.7, 1.2]);\n         const scores = a.div(b);\n         const maxOutputSize = 2;\n         const iouThreshold = 0.5;\n         const scoreThreshold = 0;\n         await scores.data();\n         const indices = tf.image.nonMaxSuppression(\n             boxes, scores as tf.Tensor1D, maxOutputSize, iouThreshold,\n             scoreThreshold);\n\n         expect(indices.shape).toEqual([2]);\n         expectArraysEqual(await indices.data(), [4, 1]);\n       });\n  });\n\n  describe('NonMaxSuppressionWithScore', () => {\n    it('select from three clusters with SoftNMS', async () => {\n      const boxes = tf.tensor2d(\n          [\n            0, 0,  1, 1,  0, 0.1,  1, 1.1,  0, -0.1, 1, 0.9,\n            0, 10, 1, 11, 0, 10.1, 1, 11.1, 0, 100,  1, 101\n          ],\n          [6, 4]);\n      const scores = tf.tensor1d([0.9, 0.75, 0.6, 0.95, 0.5, 0.3]);\n      const maxOutputSize = 6;\n      const iouThreshold = 1.0;\n      const scoreThreshold = 0;\n      const softNmsSigma = 0.5;\n\n      const {selectedIndices, selectedScores} =\n          tf.image.nonMaxSuppressionWithScore(\n              boxes, scores, maxOutputSize, iouThreshold, scoreThreshold,\n              softNmsSigma);\n\n      expectArraysEqual(await selectedIndices.data(), [3, 0, 1, 5, 4, 2]);\n\n      expectArraysClose(\n          await selectedScores.data(), [0.95, 0.9, 0.384, 0.3, 0.256, 0.197]);\n    });\n  });\n\n  describe('NonMaxSuppressionPadded', () => {\n    it('select from three clusters with pad five.', async () => {\n      const boxes = tf.tensor2d(\n          [\n            0, 0,  1, 1,  0, 0.1,  1, 1.1,  0, -0.1, 1, 0.9,\n            0, 10, 1, 11, 0, 10.1, 1, 11.1, 0, 100,  1, 101\n          ],\n          [6, 4]);\n      const scores = tf.tensor1d([0.9, 0.75, 0.6, 0.95, 0.5, 0.3]);\n      const maxOutputSize = 5;\n      const iouThreshold = 0.5;\n      const scoreThreshold = 0;\n\n      const before = tf.memory().numTensors;\n      const {selectedIndices, validOutputs} = tf.image.nonMaxSuppressionPadded(\n          boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, true);\n      const after = tf.memory().numTensors;\n\n      expectArraysEqual(await selectedIndices.data(), [3, 0, 5, 0, 0]);\n      expectArraysEqual(await validOutputs.data(), 3);\n      expect(after).toEqual(before + 2);\n    });\n\n    it('select from three clusters with pad five and score threshold.',\n       async () => {\n         const boxes = tf.tensor2d(\n             [\n               0, 0,  1, 1,  0, 0.1,  1, 1.1,  0, -0.1, 1, 0.9,\n               0, 10, 1, 11, 0, 10.1, 1, 11.1, 0, 100,  1, 101\n             ],\n             [6, 4]);\n         const scores = tf.tensor1d([0.9, 0.75, 0.6, 0.95, 0.5, 0.3]);\n         const maxOutputSize = 6;\n         const iouThreshold = 0.5;\n         const scoreThreshold = 0.4;\n\n         const before = tf.memory().numTensors;\n         const {selectedIndices, validOutputs} =\n             tf.image.nonMaxSuppressionPadded(\n                 boxes, scores, maxOutputSize, iouThreshold, scoreThreshold,\n                 true);\n         const after = tf.memory().numTensors;\n\n         expectArraysEqual(await selectedIndices.data(), [3, 0, 0, 0, 0, 0]);\n         expectArraysEqual(await validOutputs.data(), 2);\n         expect(after).toEqual(before + 2);\n       });\n\n    it('select from three clusters with no padding when pad option is false.',\n       async () => {\n         const boxes = tf.tensor2d(\n             [\n               0, 0,  1, 1,  0, 0.1,  1, 1.1,  0, -0.1, 1, 0.9,\n               0, 10, 1, 11, 0, 10.1, 1, 11.1, 0, 100,  1, 101\n             ],\n             [6, 4]);\n         const scores = tf.tensor1d([0.9, 0.75, 0.6, 0.95, 0.5, 0.3]);\n         const maxOutputSize = 5;\n         const iouThreshold = 0.5;\n         const scoreThreshold = 0.0;\n\n         const {selectedIndices, validOutputs} =\n             tf.image.nonMaxSuppressionPadded(\n                 boxes, scores, maxOutputSize, iouThreshold, scoreThreshold,\n                 false);\n\n         expectArraysEqual(await selectedIndices.data(), [3, 0, 5]);\n         expectArraysEqual(await validOutputs.data(), 3);\n       });\n  });\n});\n"]}