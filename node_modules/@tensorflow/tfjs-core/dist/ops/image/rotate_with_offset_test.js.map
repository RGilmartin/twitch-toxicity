{"version":3,"file":"rotate_with_offset_test.js","sourceRoot":"","sources":["../../../src/ops/image/rotate_with_offset_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AACH,OAAO,EAAC,sBAAsB,EAAC,MAAM,uBAAuB,CAAC;AAC7D,OAAO,KAAK,EAAE,MAAM,aAAa,CAAC;AAClC,OAAO,EAAC,YAAY,EAAE,iBAAiB,EAAC,MAAM,oBAAoB,CAAC;AACnE,OAAO,EAAC,iBAAiB,EAAC,MAAM,iBAAiB,CAAC;AAElD,iBAAiB,CAAC,kBAAkB,EAAE,YAAY,EAAE,GAAG,EAAE;IACvD,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,aAAa,GACf,EAAE,CAAC,KAAK,CAAC,gBAAgB,CAAC,sBAAsB,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;aAClE,KAAK,EAAE,CAAC;QACjB,MAAM,iBAAiB,GAAG,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC;QAErD,MAAM,QAAQ,GAAG;YACf,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC;YACvE,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC;YACvE,CAAC,EAAI,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YACxE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG;YACzE,GAAG;SACJ,CAAC;QAEF,iBAAiB,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,aAAa,GACf,EAAE,CAAC,KAAK,CAAC,gBAAgB,CAAC,sBAAsB,EAAE,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;aACnE,KAAK,EAAE,CAAC;QACjB,MAAM,iBAAiB,GAAG,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC;QAErD,MAAM,QAAQ,GAAG;YACf,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YACxE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YACxE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,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EAAG,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,CAAC,EAAI,CAAC;YACvE,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YACxE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,EAAE,EAAG,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,EAAE;YACxE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC,EAAI,CAAC;YACvE,CAAC;SACF,CAAC;QAEF,iBAAiB,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,aAAa,GACf,EAAE,CAAC,KAAK;aACH,gBAAgB,CACb,sBAAsB,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACnE,KAAK,EAAE,CAAC;QACjB,MAAM,iBAAiB,GAAG,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC;QAErD,MAAM,QAAQ,GAAG;YACf,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YACxE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YACxE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YACxE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAI,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;YACzE,GAAG;SACJ,CAAC;QAEF,iBAAiB,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {getTestImageAsTensor4d} from '../../image_test_util';\nimport * as tf from '../../index';\nimport {BROWSER_ENVS, describeWithFlags} from '../../jasmine_util';\nimport {expectArraysClose} from '../../test_util';\n\ndescribeWithFlags('rotateWithOffset', BROWSER_ENVS, () => {\n  it('should rotate counterclockwise 90 degrees', async () => {\n    const rotatedPixels =\n        tf.image.rotateWithOffset(getTestImageAsTensor4d(), 90 * Math.PI / 180)\n            .toInt();\n    const rotatedPixelsData = await rotatedPixels.data();\n\n    const expected = [\n      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n      0,   0,   230, 133, 18,  255, 233, 148, 31,  255, 222, 164, 41,  255, 191,\n      170, 61,  255, 135, 166, 86,  255, 71,  143, 97,  255, 15,  115, 105, 255,\n      0,   102, 113, 255, 241, 153, 43,  255, 250, 177, 64,  255, 247, 201, 81,\n      255, 218, 210, 103, 255, 162, 206, 127, 255, 98,  181, 135, 255, 39,  150,\n      141, 255, 6,   133, 140, 255, 224, 156, 55,  255, 241, 188, 82,  255, 243,\n      220, 106, 255, 213, 230, 126, 255, 155, 226, 146, 255, 94,  206, 156, 255,\n      37,  177, 164, 255, 3,   158, 162, 255, 212, 157, 75,  255, 230, 193, 104,\n      255, 235, 227, 128, 255, 201, 236, 142, 255, 141, 232, 162, 255, 87,  220,\n      175, 255, 35,  200, 186, 255, 4,   182, 186, 255, 200, 155, 98,  255, 220,\n      190, 128, 255, 225, 228, 151, 255, 191, 239, 165, 255, 130, 235, 179, 255,\n      76,  225, 193, 255, 30,  209, 205, 255, 0,   194, 204, 255, 183, 138, 109,\n      255, 202, 174, 137, 255, 211, 216, 162, 255, 184, 234, 181, 255, 121, 231,\n      192, 255, 64,  219, 201, 255, 19,  203, 211, 255, 0,   189, 209, 255, 171,\n      120, 117, 255, 186, 152, 140, 255, 199, 198, 168, 255, 179, 226, 194, 255,\n      119, 226, 206, 255, 62,  217, 213, 255, 19,  204, 222, 255, 0,   192, 221,\n      255\n    ];\n\n    expectArraysClose(expected, rotatedPixelsData);\n  });\n\n  it('should rotate clockwise 90 degrees', async () => {\n    const rotatedPixels =\n        tf.image.rotateWithOffset(getTestImageAsTensor4d(), -90 * Math.PI / 180)\n            .toInt();\n    const rotatedPixelsData = await rotatedPixels.data();\n\n    const expected = [\n      0,   0,   0,   0,   0,   193, 228, 255, 18,  200, 224, 255, 55,  207, 212,\n      255, 108, 214, 202, 255, 163, 208, 187, 255, 179, 176, 159, 255, 168, 129,\n      130, 255, 0,   0,   0,   0,   0,   192, 221, 255, 19,  204, 222, 255, 62,\n      217, 213, 255, 119, 226, 206, 255, 179, 226, 194, 255, 199, 198, 168, 255,\n      186, 152, 140, 255, 0,   0,   0,   0,   0,   189, 209, 255, 19,  203, 211,\n      255, 64,  219, 201, 255, 121, 231, 192, 255, 184, 234, 181, 255, 211, 216,\n      162, 255, 202, 174, 137, 255, 0,   0,   0,   0,   0,   194, 204, 255, 30,\n      209, 205, 255, 76,  225, 193, 255, 130, 235, 179, 255, 191, 239, 165, 255,\n      225, 228, 151, 255, 220, 190, 128, 255, 0,   0,   0,   0,   4,   182, 186,\n      255, 35,  200, 186, 255, 87,  220, 175, 255, 141, 232, 162, 255, 201, 236,\n      142, 255, 235, 227, 128, 255, 230, 193, 104, 255, 0,   0,   0,   0,   3,\n      158, 162, 255, 37,  177, 164, 255, 94,  206, 156, 255, 155, 226, 146, 255,\n      213, 230, 126, 255, 243, 220, 106, 255, 241, 188, 82,  255, 0,   0,   0,\n      0,   6,   133, 140, 255, 39,  150, 141, 255, 98,  181, 135, 255, 162, 206,\n      127, 255, 218, 210, 103, 255, 247, 201, 81,  255, 250, 177, 64,  255, 0,\n      0,   0,   0,   0,   102, 113, 255, 15,  115, 105, 255, 71,  143, 97,  255,\n      135, 166, 86,  255, 191, 170, 61,  255, 222, 164, 41,  255, 233, 148, 31,\n      255\n    ];\n\n    expectArraysClose(expected, rotatedPixelsData);\n  });\n\n  it('offset center of rotation', async () => {\n    const rotatedPixels =\n        tf.image\n            .rotateWithOffset(\n                getTestImageAsTensor4d(), 45 * Math.PI / 180, 0, [0.25, 0.75])\n            .toInt();\n    const rotatedPixelsData = await rotatedPixels.data();\n\n    const expected = [\n      224, 156, 55,  255, 250, 177, 64,  255, 247, 201, 81,  255, 222, 164, 41,\n      255, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n      0,   0,   230, 193, 104, 255, 243, 220, 106, 255, 247, 201, 81,  255, 218,\n      210, 103, 255, 135, 166, 86,  255, 0,   0,   0,   0,   0,   0,   0,   0,\n      0,   0,   0,   0,   225, 228, 151, 255, 235, 227, 128, 255, 213, 230, 126,\n      255, 162, 206, 127, 255, 98,  181, 135, 255, 71,  143, 97,  255, 0,   0,\n      0,   0,   0,   0,   0,   0,   225, 228, 151, 255, 191, 239, 165, 255, 141,\n      232, 162, 255, 94,  206, 156, 255, 98,  181, 135, 255, 39,  150, 141, 255,\n      0,   102, 113, 255, 0,   0,   0,   0,   184, 234, 181, 255, 130, 235, 179,\n      255, 76,  225, 193, 255, 87,  220, 175, 255, 37,  177, 164, 255, 6,   133,\n      140, 255, 6,   133, 140, 255, 0,   0,   0,   0,   119, 226, 206, 255, 64,\n      219, 201, 255, 76,  225, 193, 255, 30,  209, 205, 255, 4,   182, 186, 255,\n      3,   158, 162, 255, 0,   0,   0,   0,   0,   0,   0,   0,   62,  217, 213,\n      255, 62,  217, 213, 255, 19,  203, 211, 255, 0,   194, 204, 255, 0,   194,\n      204, 255, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   55,\n      207, 212, 255, 19,  204, 222, 255, 0,   192, 221, 255, 0,   189, 209, 255,\n      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n      0\n    ];\n\n    expectArraysClose(expected, rotatedPixelsData);\n  });\n\n  it('offset center of rotation with white fill', async () => {\n    const rotatedPixels =\n        tf.image\n            .rotateWithOffset(\n                getTestImageAsTensor4d(), 45 * Math.PI / 180, 255, [0.25, 0.75])\n            .toInt();\n    const rotatedPixelsData = await rotatedPixels.data();\n\n    const expected = [\n      224, 156, 55,  255, 250, 177, 64,  255, 247, 201, 81,  255, 222, 164, 41,\n      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n      255, 255, 230, 193, 104, 255, 243, 220, 106, 255, 247, 201, 81,  255, 218,\n      210, 103, 255, 135, 166, 86,  255, 255, 255, 255, 255, 255, 255, 255, 255,\n      255, 255, 255, 255, 225, 228, 151, 255, 235, 227, 128, 255, 213, 230, 126,\n      255, 162, 206, 127, 255, 98,  181, 135, 255, 71,  143, 97,  255, 255, 255,\n      255, 255, 255, 255, 255, 255, 225, 228, 151, 255, 191, 239, 165, 255, 141,\n      232, 162, 255, 94,  206, 156, 255, 98,  181, 135, 255, 39,  150, 141, 255,\n      0,   102, 113, 255, 255, 255, 255, 255, 184, 234, 181, 255, 130, 235, 179,\n      255, 76,  225, 193, 255, 87,  220, 175, 255, 37,  177, 164, 255, 6,   133,\n      140, 255, 6,   133, 140, 255, 255, 255, 255, 255, 119, 226, 206, 255, 64,\n      219, 201, 255, 76,  225, 193, 255, 30,  209, 205, 255, 4,   182, 186, 255,\n      3,   158, 162, 255, 255, 255, 255, 255, 255, 255, 255, 255, 62,  217, 213,\n      255, 62,  217, 213, 255, 19,  203, 211, 255, 0,   194, 204, 255, 0,   194,\n      204, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 55,\n      207, 212, 255, 19,  204, 222, 255, 0,   192, 221, 255, 0,   189, 209, 255,\n      255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n      255\n    ];\n\n    expectArraysClose(expected, rotatedPixelsData);\n  });\n});\n"]}