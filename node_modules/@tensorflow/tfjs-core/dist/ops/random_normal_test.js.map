{"version":3,"file":"random_normal_test.js","sourceRoot":"","sources":["../../src/ops/random_normal_test.ts"],"names":[],"mappings":"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","sourcesContent":["\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../index';\nimport {ALL_ENVS, describeWithFlags} from '../jasmine_util';\nimport {expectArrayInMeanStdRange, jarqueBeraNormalityTest} from './rand_util';\n\ndescribeWithFlags('randomNormal', ALL_ENVS, () => {\n  const SEED = 2002;\n  const EPSILON = 0.05;\n\n  it('should return a float32 1D of random normal values', async () => {\n    const SAMPLES = 10000;\n\n    // Ensure defaults to float32.\n    let result = tf.randomNormal([SAMPLES], 0, 0.5, null, SEED);\n    expect(result.dtype).toBe('float32');\n    expect(result.shape).toEqual([SAMPLES]);\n    jarqueBeraNormalityTest(await result.data());\n    expectArrayInMeanStdRange(await result.data(), 0, 0.5, EPSILON);\n\n    result = tf.randomNormal([SAMPLES], 0, 1.5, 'float32', SEED);\n    expect(result.dtype).toBe('float32');\n    expect(result.shape).toEqual([SAMPLES]);\n    jarqueBeraNormalityTest(await result.data());\n    expectArrayInMeanStdRange(await result.data(), 0, 1.5, EPSILON);\n  });\n\n  it('should return a int32 1D of random normal values', async () => {\n    const SAMPLES = 10000;\n    const result = tf.randomNormal([SAMPLES], 0, 2, 'int32', SEED);\n    expect(result.dtype).toBe('int32');\n    expect(result.shape).toEqual([SAMPLES]);\n    jarqueBeraNormalityTest(await result.data());\n    expectArrayInMeanStdRange(await result.data(), 0, 2, EPSILON);\n  });\n\n  it('should return a float32 2D of random normal values', async () => {\n    const SAMPLES = 100;\n\n    // Ensure defaults to float32.\n    let result = tf.randomNormal([SAMPLES, SAMPLES], 0, 2.5, null, SEED);\n    expect(result.dtype).toBe('float32');\n    expect(result.shape).toEqual([SAMPLES, SAMPLES]);\n    jarqueBeraNormalityTest(await result.data());\n    expectArrayInMeanStdRange(await result.data(), 0, 2.5, EPSILON);\n\n    result = tf.randomNormal([SAMPLES, SAMPLES], 0, 3.5, 'float32', SEED);\n    expect(result.dtype).toBe('float32');\n    expect(result.shape).toEqual([SAMPLES, SAMPLES]);\n    jarqueBeraNormalityTest(await result.data());\n    expectArrayInMeanStdRange(await result.data(), 0, 3.5, EPSILON);\n  });\n\n  it('should return a int32 2D of random normal values', async () => {\n    const SAMPLES = 100;\n    const result = tf.randomNormal([SAMPLES, SAMPLES], 0, 2, 'int32', SEED);\n    expect(result.dtype).toBe('int32');\n    expect(result.shape).toEqual([SAMPLES, SAMPLES]);\n    jarqueBeraNormalityTest(await result.data());\n    expectArrayInMeanStdRange(await result.data(), 0, 2, EPSILON);\n  });\n\n  it('should return a float32 3D of random normal values', async () => {\n    const SAMPLES_SHAPE = [20, 20, 20];\n\n    // Ensure defaults to float32.\n    let result = tf.randomNormal(SAMPLES_SHAPE, 0, 0.5, null, SEED);\n    expect(result.dtype).toBe('float32');\n    expect(result.shape).toEqual(SAMPLES_SHAPE);\n    jarqueBeraNormalityTest(await result.data());\n    expectArrayInMeanStdRange(await result.data(), 0, 0.5, EPSILON);\n\n    result = tf.randomNormal(SAMPLES_SHAPE, 0, 1.5, 'float32', SEED);\n    expect(result.dtype).toBe('float32');\n    expect(result.shape).toEqual(SAMPLES_SHAPE);\n    jarqueBeraNormalityTest(await result.data());\n    expectArrayInMeanStdRange(await result.data(), 0, 1.5, EPSILON);\n  });\n\n  it('should return a int32 3D of random normal values', async () => {\n    const SAMPLES_SHAPE = [20, 20, 20];\n    const result = tf.randomNormal(SAMPLES_SHAPE, 0, 2, 'int32', SEED);\n    expect(result.dtype).toBe('int32');\n    expect(result.shape).toEqual(SAMPLES_SHAPE);\n    jarqueBeraNormalityTest(await result.data());\n    expectArrayInMeanStdRange(await result.data(), 0, 2, EPSILON);\n  });\n\n  it('should return a float32 4D of random normal values', async () => {\n    const SAMPLES_SHAPE = [10, 10, 10, 10];\n\n    // Ensure defaults to float32.\n    let result = tf.randomNormal(SAMPLES_SHAPE, 0, 0.5, null, SEED);\n    expect(result.dtype).toBe('float32');\n    expect(result.shape).toEqual(SAMPLES_SHAPE);\n    jarqueBeraNormalityTest(await result.data());\n    expectArrayInMeanStdRange(await result.data(), 0, 0.5, EPSILON);\n\n    result = tf.randomNormal(SAMPLES_SHAPE, 0, 1.5, 'float32', SEED);\n    expect(result.dtype).toBe('float32');\n    expect(result.shape).toEqual(SAMPLES_SHAPE);\n    jarqueBeraNormalityTest(await result.data());\n    expectArrayInMeanStdRange(await result.data(), 0, 1.5, EPSILON);\n  });\n\n  it('should return a int32 4D of random normal values', async () => {\n    const SAMPLES_SHAPE = [10, 10, 10, 10];\n\n    const result = tf.randomNormal(SAMPLES_SHAPE, 0, 2, 'int32', SEED);\n    expect(result.dtype).toBe('int32');\n    expect(result.shape).toEqual(SAMPLES_SHAPE);\n    jarqueBeraNormalityTest(await result.data());\n    expectArrayInMeanStdRange(await result.data(), 0, 2, EPSILON);\n  });\n\n  it('should return a int32 5D of random normal values', async () => {\n    const SAMPLES_SHAPE = [10, 10, 10, 10, 10];\n\n    const result = tf.randomNormal(SAMPLES_SHAPE, 0, 2, 'int32', SEED);\n    expect(result.dtype).toBe('int32');\n    expect(result.shape).toEqual(SAMPLES_SHAPE);\n    jarqueBeraNormalityTest(await result.data());\n    expectArrayInMeanStdRange(await result.data(), 0, 2, EPSILON);\n  });\n});\n"]}