{"version":3,"file":"conv1d_test.js","sourceRoot":"","sources":["../../src/ops/conv1d_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../index';\nimport {ALL_ENVS, describeWithFlags} from '../jasmine_util';\nimport {expectArraysClose} from '../test_util';\nimport {Rank} from '../types';\n\ndescribeWithFlags('conv1d', ALL_ENVS, () => {\n  it('conv1d input=2x2x1,d2=1,f=1,s=1,d=1,p=explicit', async () => {\n    const inputDepth = 1;\n    const inputShape: [number, number, number] = [2, 2, inputDepth];\n    const outputDepth = 1;\n    const fSize = 1;\n    const pad =\n        [[0, 0], [0, 0], [0, 0], [0, 0]] as tf.backend_util.ExplicitPadding;\n    const stride = 1;\n    const dataFormat = 'NWC';\n    const dilation = 1;\n\n    const x = tf.tensor3d([1, 2, 3, 4], inputShape);\n    const w = tf.tensor3d([3], [fSize, inputDepth, outputDepth]);\n\n    const result = tf.conv1d(x, w, stride, pad, dataFormat, dilation);\n\n    expect(result.shape).toEqual([2, 2, 1]);\n    expectArraysClose(await result.data(), [3, 6, 9, 12]);\n  });\n\n  it('conv1d input=2x2x1,d2=1,f=1,s=1,d=1,p=same', async () => {\n    const inputDepth = 1;\n    const inputShape: [number, number, number] = [2, 2, inputDepth];\n    const outputDepth = 1;\n    const fSize = 1;\n    const pad = 'same';\n    const stride = 1;\n    const dataFormat = 'NWC';\n    const dilation = 1;\n\n    const x = tf.tensor3d([1, 2, 3, 4], inputShape);\n    const w = tf.tensor3d([3], [fSize, inputDepth, outputDepth]);\n\n    const result = tf.conv1d(x, w, stride, pad, dataFormat, dilation);\n\n    expect(result.shape).toEqual([2, 2, 1]);\n    expectArraysClose(await result.data(), [3, 6, 9, 12]);\n  });\n\n  it('conv1d input=4x1,d2=1,f=2x1x1,s=1,d=1,p=valid', async () => {\n    const inputDepth = 1;\n    const inputShape: [number, number] = [4, inputDepth];\n    const outputDepth = 1;\n    const fSize = 2;\n    const pad = 'valid';\n    const stride = 1;\n    const dataFormat = 'NWC';\n    const dilation = 1;\n\n    const x = tf.tensor2d([1, 2, 3, 4], inputShape);\n    const w = tf.tensor3d([2, 1], [fSize, inputDepth, outputDepth]);\n\n    const result = tf.conv1d(x, w, stride, pad, dataFormat, dilation);\n\n    expect(result.shape).toEqual([3, 1]);\n    expectArraysClose(await result.data(), [4, 7, 10]);\n  });\n\n  it('conv1d input=4x1,d2=1,f=2x1x1,s=1,d=2,p=valid', async () => {\n    const inputDepth = 1;\n    const inputShape: [number, number] = [4, inputDepth];\n    const outputDepth = 1;\n    const fSize = 2;\n    const fSizeDilated = 3;\n    const pad = 'valid';\n    const stride = 1;\n    const dataFormat = 'NWC';\n    const dilation = 2;\n    const dilationWEffective = 1;\n\n    const x = tf.tensor2d([1, 2, 3, 4], inputShape);\n    const w = tf.tensor3d([2, 1], [fSize, inputDepth, outputDepth]);\n    // adding a dilation rate is equivalent to using a filter\n    // with 0s for the dilation rate\n    const wDilated =\n        tf.tensor3d([2, 0, 1], [fSizeDilated, inputDepth, outputDepth]);\n\n    const result = tf.conv1d(x, w, stride, pad, dataFormat, dilation);\n    const expectedResult =\n        tf.conv1d(x, wDilated, stride, pad, dataFormat, dilationWEffective);\n\n    expect(result.shape).toEqual(expectedResult.shape);\n    expectArraysClose(await result.data(), await expectedResult.data());\n  });\n\n  it('conv1d input=14x1,d2=1,f=3x1x1,s=1,d=3,p=valid', async () => {\n    const inputDepth = 1;\n    const inputShape: [number, number] = [14, inputDepth];\n    const outputDepth = 1;\n    const fSize = 3;\n    const fSizeDilated = 7;\n    const pad = 'valid';\n    const stride = 1;\n    const dataFormat = 'NWC';\n    const dilation = 3;\n    const dilationWEffective = 1;\n\n    const x = tf.tensor2d(\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], inputShape);\n    const w = tf.tensor3d([3, 2, 1], [fSize, inputDepth, outputDepth]);\n    // adding a dilation rate is equivalent to using a filter\n    // with 0s for the dilation rate\n    const wDilated = tf.tensor3d(\n        [3, 0, 0, 2, 0, 0, 1], [fSizeDilated, inputDepth, outputDepth]);\n\n    const result = tf.conv1d(x, w, stride, pad, dataFormat, dilation);\n    const expectedResult =\n        tf.conv1d(x, wDilated, stride, pad, dataFormat, dilationWEffective);\n\n    expect(result.shape).toEqual(expectedResult.shape);\n    expectArraysClose(await result.data(), await expectedResult.data());\n  });\n\n  it('TensorLike', async () => {\n    const pad = 'same';\n    const stride = 1;\n    const dataFormat = 'NWC';\n    const dilation = 1;\n\n    const x = [[[1], [2]], [[3], [4]]];\n    const w = [[[3]]];\n\n    const result = tf.conv1d(x, w, stride, pad, dataFormat, dilation);\n\n    expect(result.shape).toEqual([2, 2, 1]);\n    expectArraysClose(await result.data(), [3, 6, 9, 12]);\n  });\n  it('TensorLike Chained', async () => {\n    const inputDepth = 1;\n    const inputShape: [number, number, number] = [2, 2, inputDepth];\n    const pad = 'same';\n    const stride = 1;\n    const dataFormat = 'NWC';\n    const dilation = 1;\n\n    const x = tf.tensor3d([1, 2, 3, 4], inputShape);\n    const w = [[[3]]];\n\n    const result = x.conv1d(w, stride, pad, dataFormat, dilation);\n\n    expect(result.shape).toEqual([2, 2, 1]);\n    expectArraysClose(await result.data(), [3, 6, 9, 12]);\n  });\n\n  it('throws when x is not rank 3', () => {\n    const inputDepth = 1;\n    const outputDepth = 1;\n    const fSize = 2;\n    const pad = 0;\n    const stride = 1;\n    const dataFormat = 'NWC';\n    const dilation = 1;\n\n    // tslint:disable-next-line:no-any\n    const x: any = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n    const w = tf.tensor3d([3, 1], [fSize, inputDepth, outputDepth]);\n\n    expect(() => tf.conv1d(x, w, stride, pad, dataFormat, dilation))\n        .toThrowError();\n  });\n\n  it('throws when weights is not rank 3', () => {\n    const inputDepth = 1;\n    const inputShape: [number, number, number] = [2, 2, inputDepth];\n    const pad = 0;\n    const stride = 1;\n    const dataFormat = 'NWC';\n    const dilation = 1;\n\n    const x = tf.tensor3d([1, 2, 3, 4], inputShape);\n    // tslint:disable-next-line:no-any\n    const w: any = tf.tensor4d([3, 1, 5, 0], [2, 2, 1, 1]);\n\n    expect(() => tf.conv1d(x, w, stride, pad, dataFormat, dilation))\n        .toThrowError();\n  });\n\n  it('throws when x depth does not match weight depth', () => {\n    const inputDepth = 1;\n    const wrongInputDepth = 5;\n    const inputShape: [number, number, number] = [2, 2, inputDepth];\n    const outputDepth = 1;\n    const fSize = 2;\n    const pad = 0;\n    const stride = 1;\n    const dataFormat = 'NWC';\n    const dilation = 1;\n\n    const x = tf.tensor3d([1, 2, 3, 4], inputShape);\n    const w = tf.randomNormal<Rank.R3>([fSize, wrongInputDepth, outputDepth]);\n\n    expect(() => tf.conv1d(x, w, stride, pad, dataFormat, dilation))\n        .toThrowError();\n  });\n\n  it('throws when both stride and dilation are greater than 1', () => {\n    const inputDepth = 1;\n    const inputShape: [number, number, number] = [2, 2, inputDepth];\n    const outputDepth = 1;\n    const fSize = 1;\n    const pad = 'same';\n    const stride = 2;\n    const dataFormat = 'NWC';\n    const dilation = 2;\n\n    const x = tf.tensor3d([1, 2, 3, 4], inputShape);\n    const w = tf.tensor3d([3], [fSize, inputDepth, outputDepth]);\n\n    expect(() => tf.conv1d(x, w, stride, pad, dataFormat, dilation))\n        .toThrowError();\n  });\n\n  it('throws when passed x as a non-tensor', () => {\n    const inputDepth = 1;\n    const outputDepth = 1;\n    const fSize = 1;\n    const pad = 'same';\n    const stride = 2;\n    const dataFormat = 'NWC';\n    const dilation = 2;\n\n    const w = tf.tensor3d([3], [fSize, inputDepth, outputDepth]);\n\n    expect(\n        () =>\n            tf.conv1d({} as tf.Tensor3D, w, stride, pad, dataFormat, dilation))\n        .toThrowError(/Argument 'x' passed to 'conv1d' must be a Tensor/);\n  });\n\n  it('throws when passed filter as a non-tensor', () => {\n    const inputDepth = 1;\n    const inputShape: [number, number, number] = [2, 2, inputDepth];\n    const pad = 'same';\n    const stride = 2;\n    const dataFormat = 'NWC';\n    const dilation = 2;\n\n    const x = tf.tensor3d([1, 2, 3, 4], inputShape);\n\n    expect(\n        () =>\n            tf.conv1d(x, {} as tf.Tensor3D, stride, pad, dataFormat, dilation))\n        .toThrowError(/Argument 'filter' passed to 'conv1d' must be a Tensor/);\n  });\n\n  it('accepts a tensor-like object', async () => {\n    const pad = 'same';\n    const stride = 1;\n    const dataFormat = 'NWC';\n    const dilation = 1;\n    const x = [[[1], [2]], [[3], [4]]];  // 2x2x1\n    const w = [[[3]]];                   // 1x1x1\n\n    const result = tf.conv1d(x, w, stride, pad, dataFormat, dilation);\n\n    expect(result.shape).toEqual([2, 2, 1]);\n    expectArraysClose(await result.data(), [3, 6, 9, 12]);\n  });\n\n  it('gradient with clones, input=2x2x1,d2=1,f=1,s=1,d=1,p=same', async () => {\n    const inputDepth = 1;\n    const inputShape: [number, number, number] = [2, 2, inputDepth];\n    const outputDepth = 1;\n    const fSize = 1;\n    const filterShape: [number, number, number] =\n        [fSize, inputDepth, outputDepth];\n    const pad = 'same';\n    const stride = 1;\n    const dataFormat = 'NWC';\n    const dilation = 1;\n\n    const x = tf.tensor3d([1, 2, 3, 4], inputShape);\n    const w = tf.tensor3d([3], filterShape);\n\n    const dy = tf.tensor3d([3, 2, 1, 0], inputShape);\n\n    const grads = tf.grads(\n        (x: tf.Tensor3D, w: tf.Tensor3D) =>\n            tf.conv1d(x.clone(), w.clone(), stride, pad, dataFormat, dilation)\n                .clone());\n    const [dx, dw] = grads([x, w], dy);\n\n    expect(dx.shape).toEqual(x.shape);\n    expectArraysClose(await dx.data(), [9, 6, 3, 0]);\n\n    expect(dw.shape).toEqual(w.shape);\n    expectArraysClose(await dw.data(), [10]);\n  });\n\n  it('conv1d gradients input=14x1,d2=1,f=3x1x1,s=1,p=valid', async () => {\n    const inputDepth = 1;\n    const inputShape: [number, number] = [14, inputDepth];\n\n    const outputDepth = 1;\n    const fSize = 3;\n    const pad = 'valid';\n    const stride = 1;\n    const dataFormat = 'NWC';\n\n    const x = tf.tensor2d(\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], inputShape);\n    const w = tf.tensor3d([3, 2, 1], [fSize, inputDepth, outputDepth]);\n\n    const dy =\n        tf.tensor2d([3, 2, 1, 0, 3, 2, 1, 0, 3, 2, 1, 0], [12, inputDepth]);\n\n    const grads = tf.grads(\n        (x: tf.Tensor2D, w: tf.Tensor3D) =>\n            tf.conv1d(x, w, stride, pad, dataFormat));\n    const [dx, dw] = grads([x, w], dy);\n\n    expect(dx.shape).toEqual(x.shape);\n    expectArraysClose(\n        await dx.data(), [9, 12, 10, 4, 10, 12, 10, 4, 10, 12, 10, 4, 1, 0]);\n\n    expect(dw.shape).toEqual(w.shape);\n    expectArraysClose(await dw.data(), [102, 120, 138]);\n  });\n});\n"]}