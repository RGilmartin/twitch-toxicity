{"version":3,"file":"random_uniform_test.js","sourceRoot":"","sources":["../../src/ops/random_uniform_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../index';\nimport {ALL_ENVS, describeWithFlags} from '../jasmine_util';\nimport {expectValuesInRange} from '../test_util';\n\ndescribeWithFlags('randomUniform', ALL_ENVS, () => {\n  it('should return a random 1D float32 array', async () => {\n    const shape: [number] = [10];\n\n    // Ensure defaults to float32 w/o type:\n    let result = tf.randomUniform(shape, 0, 2.5);\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 2.5);\n\n    result = tf.randomUniform(shape, 0, 1.5, 'float32');\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 1.5);\n  });\n\n  it('should return a random 1D int32 array', async () => {\n    const shape: [number] = [10];\n    const result = tf.randomUniform(shape, 0, 2, 'int32');\n    expect(result.dtype).toBe('int32');\n    expectValuesInRange(await result.data(), 0, 2);\n  });\n\n  it('should return a random 1D bool array', async () => {\n    const shape: [number] = [10];\n    const result = tf.randomUniform(shape, 0, 1, 'bool');\n    expect(result.dtype).toBe('bool');\n    expectValuesInRange(await result.data(), 0, 1);\n  });\n\n  it('should return a random 2D float32 array', async () => {\n    const shape: [number, number] = [3, 4];\n\n    // Ensure defaults to float32 w/o type:\n    let result = tf.randomUniform(shape, 0, 2.5);\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 2.5);\n\n    result = tf.randomUniform(shape, 0, 1.5, 'float32');\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 1.5);\n  });\n\n  it('should return a random 2D int32 array', async () => {\n    const shape: [number, number] = [3, 4];\n    const result = tf.randomUniform(shape, 0, 2, 'int32');\n    expect(result.dtype).toBe('int32');\n    expectValuesInRange(await result.data(), 0, 2);\n  });\n\n  it('should return a random 2D bool array', async () => {\n    const shape: [number, number] = [3, 4];\n    const result = tf.randomUniform(shape, 0, 1, 'bool');\n    expect(result.dtype).toBe('bool');\n    expectValuesInRange(await result.data(), 0, 1);\n  });\n\n  it('should return a random 3D float32 array', async () => {\n    const shape: [number, number, number] = [3, 4, 5];\n\n    // Ensure defaults to float32 w/o type:\n    let result = tf.randomUniform(shape, 0, 2.5);\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 2.5);\n\n    result = tf.randomUniform(shape, 0, 1.5, 'float32');\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 1.5);\n  });\n\n  it('should return a random 3D int32 array', async () => {\n    const shape: [number, number, number] = [3, 4, 5];\n    const result = tf.randomUniform(shape, 0, 2, 'int32');\n    expect(result.dtype).toBe('int32');\n    expectValuesInRange(await result.data(), 0, 2);\n  });\n\n  it('should return a random 3D bool array', async () => {\n    const shape: [number, number, number] = [3, 4, 5];\n    const result = tf.randomUniform(shape, 0, 1, 'bool');\n    expect(result.dtype).toBe('bool');\n    expectValuesInRange(await result.data(), 0, 1);\n  });\n\n  it('should return a random 4D float32 array', async () => {\n    const shape: [number, number, number, number] = [3, 4, 5, 6];\n\n    // Ensure defaults to float32 w/o type:\n    let result = tf.randomUniform(shape, 0, 2.5);\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 2.5);\n\n    result = tf.randomUniform(shape, 0, 1.5, 'float32');\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 1.5);\n  });\n\n  it('should return a random 4D int32 array', async () => {\n    const shape: [number, number, number, number] = [3, 4, 5, 6];\n    const result = tf.randomUniform(shape, 0, 2, 'int32');\n    expect(result.dtype).toBe('int32');\n    expectValuesInRange(await result.data(), 0, 2);\n  });\n\n  it('should return a random 4D bool array', async () => {\n    const shape: [number, number, number, number] = [3, 4, 5, 6];\n    const result = tf.randomUniform(shape, 0, 1, 'bool');\n    expect(result.dtype).toBe('bool');\n    expectValuesInRange(await result.data(), 0, 1);\n  });\n\n  it('should return a random 5D float32 array', async () => {\n    const shape: [number, number, number, number, number] = [2, 3, 4, 5, 6];\n\n    // Ensure defaults to float32 w/o type:\n    let result = tf.randomUniform(shape, 0, 2.5);\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 2.5);\n\n    result = tf.randomUniform(shape, 0, 1.5, 'float32');\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 1.5);\n  });\n\n  it('should return a random 5D int32 array', async () => {\n    const shape: [number, number, number, number, number] = [2, 3, 4, 5, 6];\n    const result = tf.randomUniform(shape, 0, 2, 'int32');\n    expect(result.dtype).toBe('int32');\n    expectValuesInRange(await result.data(), 0, 2);\n  });\n\n  it('should return a random 5D bool array', async () => {\n    const shape: [number, number, number, number, number] = [2, 3, 4, 5, 6];\n    const result = tf.randomUniform(shape, 0, 1, 'bool');\n    expect(result.dtype).toBe('bool');\n    expectValuesInRange(await result.data(), 0, 1);\n  });\n});\n"]}