{"version":3,"file":"gram_schmidt_test.js","sourceRoot":"","sources":["../../../src/ops/linalg/gram_schmidt_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../../index';\nimport {ALL_ENVS, describeWithFlags} from '../../jasmine_util';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {expectArraysClose} from '../../test_util';\n\ndescribeWithFlags('gramSchmidt-tiny', ALL_ENVS, () => {\n  it('2x2, Array of Tensor1D', async () => {\n    const xs: Tensor1D[] = [\n      tf.randomNormal([2], 0, 1, 'float32', 1),\n      tf.randomNormal([2], 0, 1, 'float32', 2)\n    ];\n    const ys = tf.linalg.gramSchmidt(xs) as Tensor1D[];\n    const y = tf.stack(ys) as Tensor2D;\n    // Test that the results are orthogonalized and normalized.\n    expectArraysClose(\n        await y.transpose().matMul(y).array(), await tf.eye(2).array());\n    // Test angle between xs[0] and ys[0] is zero, i.e., the orientation of the\n    // first vector is kept.\n    expectArraysClose(\n        await tf.sum(xs[0].mul(ys[0])).array(),\n        await tf.norm(xs[0]).mul(tf.norm(ys[0])).array());\n  });\n\n  it('3x3, Array of Tensor1D', async () => {\n    const xs: Tensor1D[] = [\n      tf.randomNormal([3], 0, 1, 'float32', 1),\n      tf.randomNormal([3], 0, 1, 'float32', 2),\n      tf.randomNormal([3], 0, 1, 'float32', 3)\n    ];\n    const ys = tf.linalg.gramSchmidt(xs) as Tensor1D[];\n    const y = tf.stack(ys) as Tensor2D;\n    expectArraysClose(\n        await y.transpose().matMul(y).array(), await tf.eye(3).array());\n    expectArraysClose(\n        await tf.sum(xs[0].mul(ys[0])).array(),\n        await tf.norm(xs[0]).mul(tf.norm(ys[0])).array());\n  });\n\n  it('3x3, Matrix', async () => {\n    const xs: Tensor2D = tf.randomNormal([3, 3], 0, 1, 'float32', 1);\n    const y = tf.linalg.gramSchmidt(xs) as Tensor2D;\n    expectArraysClose(\n        await y.transpose().matMul(y).array(), await tf.eye(3).array());\n  });\n\n  it('2x3, Matrix', async () => {\n    const xs: Tensor2D = tf.randomNormal([2, 3], 0, 1, 'float32', 1);\n    const y = tf.linalg.gramSchmidt(xs) as Tensor2D;\n    const yT: Tensor2D = y.transpose();\n    expectArraysClose(await y.matMul(yT).array(), await tf.eye(2).array());\n  });\n\n  it('3x2 Matrix throws Error', () => {\n    const xs = tf.tensor2d([[1, 2], [3, -1], [5, 1]]);\n    expect(() => tf.linalg.gramSchmidt(xs))\n        .toThrowError(\n            /Number of vectors \\(3\\) exceeds number of dimensions \\(2\\)/);\n  });\n\n  it('Mismatching dimensions input throws Error', () => {\n    const xs: Tensor1D[] =\n        [tf.tensor1d([1, 2, 3]), tf.tensor1d([-1, 5, 1]), tf.tensor1d([0, 0])];\n\n    expect(() => tf.linalg.gramSchmidt(xs)).toThrowError(/Non-unique/);\n  });\n\n  it('Empty input throws Error', () => {\n    expect(() => tf.linalg.gramSchmidt([])).toThrowError(/empty/);\n  });\n});\n"]}