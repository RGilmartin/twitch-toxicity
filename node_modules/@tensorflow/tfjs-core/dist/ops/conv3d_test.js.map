{"version":3,"file":"conv3d_test.js","sourceRoot":"","sources":["../../src/ops/conv3d_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../index';\nimport {ALL_ENVS, describeWithFlags} from '../jasmine_util';\nimport {Tensor5D} from '../tensor';\nimport {expectArraysClose} from '../test_util';\nimport {sizeFromShape} from '../util';\n\n// Generates small floating point inputs to avoid overflows\nfunction generateCaseInputs(totalSizeTensor: number, totalSizeFilter: number) {\n  const inp = new Array(totalSizeTensor);\n  const filt = new Array(totalSizeFilter);\n\n  for (let i = 0; i < totalSizeTensor; i++) {\n    inp[i] = (i + 1) / totalSizeTensor;\n  }\n  for (let i = 0; i < totalSizeFilter; i++) {\n    filt[i] = (i + 1) / totalSizeFilter;\n  }\n\n  return {input: inp, filter: filt};\n}\n\nfunction generateGradientCaseInputs(\n    totalSizeTensor: number, totalSizeFilter: number) {\n  const inp = new Array(totalSizeTensor);\n  const filt = new Array(totalSizeFilter);\n\n  for (let i = 0; i < totalSizeTensor; i++) {\n    inp[i] = i + 1;\n  }\n  for (let i = 0; i < totalSizeFilter; i++) {\n    filt[i] = i + 1;\n  }\n\n  return {input: inp, filter: filt};\n}\n\nfunction runConv3DTestCase(\n    batch: number, inDepth: number, inHeight: number, inWidth: number,\n    inChannels: number, outChannels: number, fDepth: number, fHeight: number,\n    fWidth: number, pad: 'valid'|'same',\n    stride: [number, number, number]|number) {\n  const inputShape: [number, number, number, number, number] =\n      [batch, inDepth, inHeight, inWidth, inChannels];\n  const filterShape: [number, number, number, number, number] =\n      [fDepth, fHeight, fWidth, inChannels, outChannels];\n\n  const totalSizeTensor = sizeFromShape(inputShape);\n  const totalSizeFilter = sizeFromShape(filterShape);\n  const inputs = generateCaseInputs(totalSizeTensor, totalSizeFilter);\n\n  const x = tf.tensor5d(inputs.input, inputShape);\n  const w = tf.tensor5d(inputs.filter, filterShape);\n\n  const result = tf.conv3d(x, w, stride, pad);\n  return result;\n}\n\nfunction runGradientConv3DTestCase(\n    batch: number, inDepth: number, inHeight: number, inWidth: number,\n    inChannels: number, outChannels: number, fDepth: number, fHeight: number,\n    fWidth: number, pad: 'valid'|'same',\n    stride: [number, number, number]|number) {\n  const inputShape: [number, number, number, number, number] =\n      [batch, inDepth, inHeight, inWidth, inChannels];\n  const filterShape: [number, number, number, number, number] =\n      [fDepth, fHeight, fWidth, inChannels, outChannels];\n\n  const totalSizeTensor = sizeFromShape(inputShape);\n  const totalSizeFilter = sizeFromShape(filterShape);\n  const inputs = generateGradientCaseInputs(totalSizeTensor, totalSizeFilter);\n\n  const x = tf.tensor5d(inputs.input, inputShape);\n  const w = tf.tensor5d(inputs.filter, filterShape);\n\n  const grads = tf.grads(\n      (x: Tensor5D, filter: Tensor5D) =>\n          tf.conv3d(x.clone(), filter.clone(), stride, pad).clone());\n  const [dx, dfilter] = grads([x, w]);\n\n  expect(dx.shape).toEqual(x.shape);\n  expect(dfilter.shape).toEqual(w.shape);\n\n  return [dx, dfilter];\n}\n\ndescribeWithFlags('conv3d', ALL_ENVS, () => {\n  it('x=[1, 2, 3, 1, 3] f=[1, 1, 1, 3, 3] s=1 d=1 p=valid', async () => {\n    const batch = 1;\n    const inDepth = 2;\n    const inHeight = 3;\n    const inWidth = 1;\n    const inChannels = 3;\n    const outChannels = 3;\n    const fSize = 1;\n    const pad = 'valid';\n    const stride = 1;\n    const result = runConv3DTestCase(\n        batch, inDepth, inHeight, inWidth, inChannels, outChannels, fSize,\n        fSize, fSize, pad, stride);\n\n    const expectedOutput = [\n      0.18518519, 0.22222222, 0.25925926, 0.40740741, 0.5, 0.59259259,\n      0.62962963, 0.77777778, 0.92592593, 0.85185185, 1.05555556, 1.25925926,\n      1.07407407, 1.33333333, 1.59259259, 1.2962963, 1.61111111, 1.92592593\n    ];\n\n    expectArraysClose(await result.data(), expectedOutput);\n  });\n  it('x=[1, 2, 1, 3, 3] f=[1, 1, 1, 3, 3] s=1 d=1 p=valid', async () => {\n    const batch = 1;\n    const inDepth = 2;\n    const inHeight = 1;\n    const inWidth = 3;\n    const inChannels = 3;\n    const outChannels = 3;\n    const fSize = 1;\n    const pad = 'valid';\n    const stride = 1;\n    const result = runConv3DTestCase(\n        batch, inDepth, inHeight, inWidth, inChannels, outChannels, fSize,\n        fSize, fSize, pad, stride);\n\n    const expectedOutput = [\n      0.18518519, 0.22222222, 0.25925926, 0.40740741, 0.5, 0.59259259,\n      0.62962963, 0.77777778, 0.92592593, 0.85185185, 1.05555556, 1.25925926,\n      1.07407407, 1.33333333, 1.59259259, 1.2962963, 1.61111111, 1.92592593\n    ];\n\n    expectArraysClose(await result.data(), expectedOutput);\n  });\n\n  it('x=[1, 1, 2, 3, 3] f=[1, 1, 1, 3, 3] s=1 d=1 p=valid', async () => {\n    const batch = 1;\n    const inDepth = 1;\n    const inHeight = 2;\n    const inWidth = 3;\n    const inChannels = 3;\n    const outChannels = 3;\n    const fSize = 1;\n    const pad = 'valid';\n    const stride = 1;\n    const result = runConv3DTestCase(\n        batch, inDepth, inHeight, inWidth, inChannels, outChannels, fSize,\n        fSize, fSize, pad, stride);\n\n    const expectedOutput = [\n      0.18518519, 0.22222222, 0.25925926, 0.40740741, 0.5, 0.59259259,\n      0.62962963, 0.77777778, 0.92592593, 0.85185185, 1.05555556, 1.25925926,\n      1.07407407, 1.33333333, 1.59259259, 1.2962963, 1.61111111, 1.92592593\n    ];\n\n    expectArraysClose(await result.data(), expectedOutput);\n  });\n\n  it('x=[1, 4, 2, 3, 3] f=[2, 2, 2, 3, 3] s=1 d=1 p=valid', async () => {\n    const batch = 1;\n    const inDepth = 4;\n    const inHeight = 2;\n    const inWidth = 3;\n    const inChannels = 3;\n    const outChannels = 3;\n    const fSize = 2;\n    const pad = 'valid';\n    const stride = 1;\n    const result = runConv3DTestCase(\n        batch, inDepth, inHeight, inWidth, inChannels, outChannels, fSize,\n        fSize, fSize, pad, stride);\n\n    const expectedOutput = [\n      3.77199074, 3.85069444, 3.92939815, 4.2650463, 4.35763889, 4.45023148,\n      6.73032407, 6.89236111, 7.05439815, 7.22337963, 7.39930556, 7.57523148,\n      9.68865741, 9.93402778, 10.17939815, 10.18171296, 10.44097222, 10.70023148\n    ];\n\n    expectArraysClose(await result.data(), expectedOutput);\n  });\n\n  it('x=[1, 5, 8, 7, 1] f=[1, 2, 3, 1, 1] s=[2, 3, 1] d=1 p=same', async () => {\n    const batch = 1;\n    const inDepth = 5;\n    const inHeight = 8;\n    const inWidth = 7;\n    const inChannels = 1;\n    const outChannels = 1;\n    const fDepth = 1;\n    const fHeight = 2;\n    const fWidth = 3;\n    const pad = 'same';\n    const stride: [number, number, number] = [2, 3, 1];\n    const result = runConv3DTestCase(\n        batch, inDepth, inHeight, inWidth, inChannels, outChannels, fDepth,\n        fHeight, fWidth, pad, stride);\n\n    const expectedOutput = [\n      0.06071429, 0.08988095, 0.10238095, 0.11488095, 0.12738095, 0.13988095,\n      0.08452381, 0.26071429, 0.35238095, 0.36488095, 0.37738095, 0.38988095,\n      0.40238095, 0.23452381, 0.46071429, 0.61488095, 0.62738095, 0.63988095,\n      0.65238095, 0.66488095, 0.38452381, 1.12738095, 1.48988095, 1.50238095,\n      1.51488095, 1.52738095, 1.53988095, 0.88452381, 1.32738095, 1.75238095,\n      1.76488095, 1.77738095, 1.78988095, 1.80238095, 1.03452381, 1.52738095,\n      2.01488095, 2.02738095, 2.03988095, 2.05238095, 2.06488095, 1.18452381,\n      2.19404762, 2.88988095, 2.90238095, 2.91488095, 2.92738095, 2.93988095,\n      1.68452381, 2.39404762, 3.15238095, 3.16488095, 3.17738095, 3.18988095,\n      3.20238095, 1.83452381, 2.59404762, 3.41488095, 3.42738095, 3.43988095,\n      3.45238095, 3.46488095, 1.98452381\n    ];\n\n    expectArraysClose(await result.data(), expectedOutput);\n  });\n\n  it('x=[1, 4, 2, 3, 3] f=[2, 2, 2, 3, 3] s=2 d=1 p=valid', async () => {\n    const batch = 1;\n    const inDepth = 4;\n    const inHeight = 2;\n    const inWidth = 3;\n    const inChannels = 3;\n    const outChannels = 3;\n    const fSize = 2;\n    const pad = 'valid';\n    const stride = 2;\n    const result = runConv3DTestCase(\n        batch, inDepth, inHeight, inWidth, inChannels, outChannels, fSize,\n        fSize, fSize, pad, stride);\n\n    const expectedOutput = [\n      3.77199074, 3.85069444, 3.92939815, 9.68865741, 9.93402778, 10.17939815\n    ];\n\n    expectArraysClose(await result.data(), expectedOutput);\n  });\n\n  it('x=[1, 6, 7, 8, 2] f=[3, 2, 1, 2, 3] s=3 d=1 p=valid', async () => {\n    const batch = 1;\n    const inDepth = 6;\n    const inHeight = 7;\n    const inWidth = 8;\n    const inChannels = 2;\n    const outChannels = 3;\n    const fDepth = 3;\n    const fHeight = 2;\n    const fWidth = 1;\n    const pad = 'valid';\n    const stride = 3;\n    const result = runConv3DTestCase(\n        batch, inDepth, inHeight, inWidth, inChannels, outChannels, fDepth,\n        fHeight, fWidth, pad, stride);\n\n    const expectedOutput = [\n      1.51140873, 1.57167659, 1.63194444, 1.56349206, 1.62673611, 1.68998016,\n      1.6155754,  1.68179563, 1.74801587, 1.9280754,  2.01215278, 2.09623016,\n      1.98015873, 2.0672123,  2.15426587, 2.03224206, 2.12227183, 2.21230159,\n      4.4280754,  4.65500992, 4.88194444, 4.48015873, 4.71006944, 4.93998016,\n      4.53224206, 4.76512897, 4.99801587, 4.84474206, 5.09548611, 5.34623016,\n      4.8968254,  5.15054563, 5.40426587, 4.94890873, 5.20560516, 5.46230159\n    ];\n\n    expectArraysClose(await result.data(), expectedOutput);\n  });\n\n  it('x=[1, 4, 2, 3, 3] f=[2, 2, 2, 3, 3] s=2 d=1 p=same', async () => {\n    const batch = 1;\n    const inDepth = 4;\n    const inHeight = 2;\n    const inWidth = 3;\n    const inChannels = 3;\n    const outChannels = 3;\n    const fSize = 2;\n    const pad = 'same';\n    const stride = 2;\n    const result = runConv3DTestCase(\n        batch, inDepth, inHeight, inWidth, inChannels, outChannels, fSize,\n        fSize, fSize, pad, stride);\n\n    const expectedOutput = [\n      3.77199074, 3.85069444, 3.92939815, 2.0162037, 2.06597222, 2.11574074,\n      9.68865741, 9.93402778, 10.17939815, 4.59953704, 4.73263889, 4.86574074\n    ];\n\n    expectArraysClose(await result.data(), expectedOutput);\n  });\n\n  it('x=[1, 3, 3, 3, 1] f=[1, 1, 1, 1, 1] s=2 d=1 p=same', async () => {\n    const batch = 1;\n    const inDepth = 3;\n    const inHeight = 3;\n    const inWidth = 3;\n    const inChannels = 1;\n    const outChannels = 1;\n    const fSize = 1;\n    const pad = 'same';\n    const stride = 2;\n    const result = runConv3DTestCase(\n        batch, inDepth, inHeight, inWidth, inChannels, outChannels, fSize,\n        fSize, fSize, pad, stride);\n\n    const expectedOutput = [\n      0.03703704, 0.11111111, 0.25925926, 0.33333333, 0.7037037, 0.77777778,\n      0.92592593, 1.\n    ];\n\n    expectArraysClose(await result.data(), expectedOutput);\n  });\n\n  it('x=[1, 3, 3, 3, 1] f=[1, 1, 1, 1, 1] s=2 d=1 p=valid', async () => {\n    const batch = 1;\n    const inDepth = 3;\n    const inHeight = 3;\n    const inWidth = 3;\n    const inChannels = 1;\n    const outChannels = 1;\n    const fSize = 1;\n    const pad = 'valid';\n    const stride = 2;\n    const result = runConv3DTestCase(\n        batch, inDepth, inHeight, inWidth, inChannels, outChannels, fSize,\n        fSize, fSize, pad, stride);\n\n    const expectedOutput = [\n      0.03703704, 0.11111111, 0.25925926, 0.33333333, 0.7037037, 0.77777778,\n      0.92592593, 1.\n    ];\n\n    expectArraysClose(await result.data(), expectedOutput);\n  });\n\n  it('x=[1, 7, 7, 7, 1] f=[2, 2, 2, 1, 1] s=3 d=1 p=same', async () => {\n    const batch = 1;\n    const inDepth = 7;\n    const inHeight = 7;\n    const inWidth = 7;\n    const inChannels = 1;\n    const outChannels = 1;\n    const fSize = 2;\n    const pad = 'same';\n    const stride = 3;\n    const result = runConv3DTestCase(\n        batch, inDepth, inHeight, inWidth, inChannels, outChannels, fSize,\n        fSize, fSize, pad, stride);\n\n    const expectedOutput = [\n      0.54081633, 0.58017493, 0.28061224, 0.81632653, 0.85568513, 0.40306122,\n      0.41873178, 0.4340379,  0.19642857, 2.46938776, 2.50874636, 1.1377551,\n      2.74489796, 2.78425656, 1.26020408, 1.16873178, 1.1840379,  0.51785714,\n      1.09511662, 1.10604956, 0.44642857, 1.17164723, 1.18258017, 0.47704082,\n      0.3691691,  0.37244898, 0.125\n    ];\n\n    expectArraysClose(await result.data(), expectedOutput);\n  });\n\n  it('x=[1, 7, 7, 7, 1] f=[2, 2, 2, 1, 1] s=3 d=1 p=valid', async () => {\n    const batch = 1;\n    const inDepth = 7;\n    const inHeight = 7;\n    const inWidth = 7;\n    const inChannels = 1;\n    const outChannels = 1;\n    const fSize = 2;\n    const pad = 'valid';\n    const stride = 3;\n    const result = runConv3DTestCase(\n        batch, inDepth, inHeight, inWidth, inChannels, outChannels, fSize,\n        fSize, fSize, pad, stride);\n\n    const expectedOutput = [\n      0.540816, 0.580175, 0.816327, 0.855685, 2.469388, 2.508746, 2.744898,\n      2.784257\n    ];\n\n    expectArraysClose(await result.data(), expectedOutput);\n  });\n\n  it('x=[1, 2, 1, 2, 1] f=[2, 1, 2, 1, 2] s=1 d=1 p=valid', async () => {\n    const batch = 1;\n    const inDepth = 2;\n    const inHeight = 1;\n    const inWidth = 2;\n    const inChannels = 1;\n    const outChannels = 2;\n    const fDepth = 2;\n    const fHeight = 1;\n    const fWidth = 2;\n    const pad = 'valid';\n    const stride = 1;\n    const result = runConv3DTestCase(\n        batch, inDepth, inHeight, inWidth, inChannels, outChannels, fDepth,\n        fHeight, fWidth, pad, stride);\n\n    const expectedOutput = [1.5625, 1.875];\n\n    expectArraysClose(await result.data(), expectedOutput);\n  });\n\n  it('gradient with clones, x=[1,3,6,1,1] filter=[2,2,1,1,1] s=1 d=1 p=valid',\n     async () => {\n       const batch = 1;\n       const inDepth = 3;\n       const inHeight = 6;\n       const inWidth = 1;\n       const inChannels = 1;\n       const outChannels = 1;\n       const fDepth = 2;\n       const fHeight = 2;\n       const fWidth = 1;\n       const pad = 'valid';\n       const stride = 1;\n       const [dx, dfilter] = runGradientConv3DTestCase(\n           batch, inDepth, inHeight, inWidth, inChannels, outChannels, fDepth,\n           fHeight, fWidth, pad, stride);\n\n       const expectedFilterOutput = [60.0, 70.0, 120.0, 130.0];\n       const expectedOutput = [\n         1.0, 3.0, 3.0, 3.0, 3.0, 2.0, 4.0, 10.0, 10.0, 10.0, 10.0, 6.0, 3.0,\n         7.0, 7.0, 7.0, 7.0, 4.0\n       ];\n       expectArraysClose(await dx.data(), expectedOutput);\n       expectArraysClose(await dfilter.data(), expectedFilterOutput);\n     });\n\n  it('throws when passed x as a non-tensor', () => {\n    const inputDepth = 1;\n    const outputDepth = 1;\n    const fSize = 1;\n    const pad = 'valid';\n    const stride = 1;\n\n    const w = tf.tensor5d([2], [fSize, fSize, fSize, inputDepth, outputDepth]);\n\n    expect(() => tf.conv3d({} as tf.Tensor4D, w, stride, pad))\n        .toThrowError(/Argument 'x' passed to 'conv3d' must be a Tensor/);\n  });\n\n  it('throws when passed filter as a non-tensor', () => {\n    const inputDepth = 1;\n    const inputShape: [number, number, number, number] = [2, 2, 1, inputDepth];\n    const pad = 'valid';\n    const stride = 1;\n\n    const x = tf.tensor4d([1, 2, 3, 4], inputShape);\n\n    expect(() => tf.conv3d(x, {} as Tensor5D, stride, pad))\n        .toThrowError(/Argument 'filter' passed to 'conv3d' must be a Tensor/);\n  });\n\n  it('accepts a tensor-like object', async () => {\n    const pad = 'valid';\n    const stride = 1;\n    const x = [[[[1], [2]], [[3], [4]]]];  // 2x2x1x1\n    const w = [[[[[2]]]]];                 // 1x1x1x1x1\n\n    const result = tf.conv3d(x, w, stride, pad);\n    expectArraysClose(await result.data(), [2, 4, 6, 8]);\n  });\n\n  it('throws when data format not NDHWC', () => {\n    const inputDepth = 1;\n    const outputDepth = 1;\n    const inputShape: [number, number, number, number] = [2, 2, 1, inputDepth];\n    const pad = 'valid';\n    const fSize = 1;\n    const stride = 1;\n    const dataFormat = 'NCDHW';\n\n    const x = tf.tensor4d([1, 2, 3, 4], inputShape);\n    const w = tf.tensor5d([2], [fSize, fSize, fSize, inputDepth, outputDepth]);\n\n    expect(() => tf.conv3d(x, w, stride, pad, dataFormat)).toThrowError();\n  });\n});\n"]}