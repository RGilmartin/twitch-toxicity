{"version":3,"file":"mirror_pad.js","sourceRoot":"","sources":["../../src/ops/mirror_pad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAC,MAAM,EAAC,MAAM,WAAW,CAAC;AACjC,OAAO,EAAC,SAAS,EAAkC,MAAM,iBAAiB,CAAC;AAI3E,OAAO,EAAC,eAAe,EAAC,MAAM,oBAAoB,CAAC;AAEnD,OAAO,KAAK,IAAI,MAAM,SAAS,CAAC;AAEhC,OAAO,EAAC,EAAE,EAAC,MAAM,aAAa,CAAC;AAE/B;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,+DAA+D;AAC/D,SAAS,UAAU,CACf,CAAe,EAAE,QAAiC,EAClD,IAA2B;IAC7B,IAAI,CAAC,MAAM,CACP,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,WAAW,EAC1C,GAAG,EAAE,CAAC,0DAA0D;QAC5D,OAAO,IAAI,GAAG,CAAC,CAAC;IAExB,MAAM,EAAE,GAAG,eAAe,CAAC,CAAC,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC;IAChD,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC,EAAE;QACjB,MAAM,IAAI,KAAK,CACX,oCAAoC;YACpC,8BAA8B,CAAC,CAAC;KACrC;IACD,IAAI,CAAC,MAAM,CACP,QAAQ,CAAC,MAAM,KAAK,EAAE,CAAC,IAAI,EAC3B,GAAG,EAAE,CAAC,wCAAwC,EAAE,CAAC,IAAI,IAAI;QACrD,OAAO,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;IACnC,MAAM,WAAW,GAAG,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;QAChC,IAAI,CAAC,MAAM,CACP,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,EACxB,GAAG,EAAE,CAAC,uDAAuD,CAAC,CAAC;QACnE,IAAI,CAAC,MAAM,CACP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,WAAW;YAC9D,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,WAAW,EACtE,GAAG,EAAE,CAAC,wBAAwB,CAAC,mCAAmC;YAC9D,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,WAAW,+BAA+B;YAC9D,SAAS,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;KAC9B;IAED,MAAM,KAAK,GAAmB,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC;IAC/C,MAAM,MAAM,GAAoB,EAAC,CAAC,EAAE,EAAE,EAAC,CAAC;IACxC,OAAO,MAAM,CAAC,SAAS,CACnB,SAAS,EAAE,MAA8B,EAAE,KAA2B,CAAC,CAAC;AAC9E,CAAC;AAED,MAAM,CAAC,MAAM,SAAS,GAAG,EAAE,CAAC,EAAC,UAAU,EAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {MirrorPad, MirrorPadAttrs, MirrorPadInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Pads a `tf.Tensor` using mirror padding.\n *\n * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.\n *\n * ```js\n * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);\n * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();\n * ```\n * @param x The tensor to pad.\n * @param paddings An array of length `R` (the rank of the tensor), where\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\n * specifying how much to pad along each dimension of the tensor.\n * In \"reflect\" mode, the padded regions do not include the borders,\n * while in \"symmetric\" mode the padded regions do include the borders.\n * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,\n * then the output is `[1, 2, 3, 2, 1]` in \"reflect\" mode, and\n * `[1, 2, 3, 3, 2]` in \"symmetric\" mode.\n * If `mode` is \"reflect\" then both `paddings[D, 0]` and `paddings[D, 1]`\n * must be no greater than `x.shape[D] - 1`. If mode is \"symmetric\"\n * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than\n * `x.shape[D]`\n * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction mirrorPad_<T extends Tensor>(\n    x: T|TensorLike, paddings: Array<[number, number]>,\n    mode: 'reflect'|'symmetric'): T {\n  util.assert(\n      mode === 'reflect' || mode === 'symmetric',\n      () => `Invalid mode. Mode must be either reflect or symmetric. ` +\n          `Got ${mode}.`);\n\n  const $x = convertToTensor(x, 'x', 'mirrorPad');\n  if ($x.rank === 0) {\n    throw new Error(\n        'mirrorPad(scalar) is not defined. ' +\n        'Pass non-scalar to mirrorPad');\n  }\n  util.assert(\n      paddings.length === $x.rank,\n      () => `Padding doesn't match input. Must be ${$x.rank}. ` +\n          `Got ${paddings.length}.`);\n  const shapeOffset = mode === 'reflect' ? 1 : 0;\n  for (let i = 0; i < $x.rank; i++) {\n    util.assert(\n        paddings[i].length === 2,\n        () => `Invalid number of paddings. Must be length of 2 each.`);\n    util.assert(\n        paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset &&\n            paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset,\n        () => `Padding in dimension ${i} cannot be greater than or equal ` +\n            `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` +\n            `shape ${$x.shape}`);\n  }\n\n  const attrs: MirrorPadAttrs = {paddings, mode};\n  const inputs: MirrorPadInputs = {x: $x};\n  return ENGINE.runKernel(\n      MirrorPad, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const mirrorPad = op({mirrorPad_});\n"]}