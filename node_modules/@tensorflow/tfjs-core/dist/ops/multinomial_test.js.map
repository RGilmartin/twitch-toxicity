{"version":3,"file":"multinomial_test.js","sourceRoot":"","sources":["../../src/ops/multinomial_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../index';\nimport {ALL_ENVS, describeWithFlags} from '../jasmine_util';\nimport {Tensor1D} from '../tensor';\nimport {expectArraysClose} from '../test_util';\n\ndescribeWithFlags('multinomial', ALL_ENVS, () => {\n  const NUM_SAMPLES = 1000;\n  // Allowed Variance in probability (in %).\n  const EPSILON = 0.05;\n  const SEED = 3.14;\n\n  it('Flip a fair coin and check bounds', async () => {\n    const probs = tf.tensor1d([1, 1]);\n    const result = tf.multinomial(probs, NUM_SAMPLES, SEED);\n    expect(result.dtype).toBe('int32');\n    expect(result.shape).toEqual([NUM_SAMPLES]);\n    const outcomeProbs = computeProbs(await result.data(), 2);\n    expectArraysClose(outcomeProbs, [0.5, 0.5], EPSILON);\n  });\n\n  it('Flip a two-sided coin with 100% of heads', async () => {\n    const logits = tf.tensor1d([1, -100]);\n    const result = tf.multinomial(logits, NUM_SAMPLES, SEED);\n    expect(result.dtype).toBe('int32');\n    expect(result.shape).toEqual([NUM_SAMPLES]);\n    const outcomeProbs = computeProbs(await result.data(), 2);\n    expectArraysClose(outcomeProbs, [1, 0], EPSILON);\n  });\n\n  it('Flip a two-sided coin with 100% of tails', async () => {\n    const logits = tf.tensor1d([-100, 1]);\n    const result = tf.multinomial(logits, NUM_SAMPLES, SEED);\n    expect(result.dtype).toBe('int32');\n    expect(result.shape).toEqual([NUM_SAMPLES]);\n    const outcomeProbs = computeProbs(await result.data(), 2);\n    expectArraysClose(outcomeProbs, [0, 1], EPSILON);\n  });\n\n  it('Flip a single-sided coin throws error', () => {\n    const probs = tf.tensor1d([1]);\n    expect(() => tf.multinomial(probs, NUM_SAMPLES, SEED)).toThrowError();\n  });\n\n  it('Flip a ten-sided coin and check bounds', async () => {\n    const numOutcomes = 10;\n    const logits = tf.fill([numOutcomes], 1).as1D();\n    const result = tf.multinomial(logits, NUM_SAMPLES, SEED);\n    expect(result.dtype).toBe('int32');\n    expect(result.shape).toEqual([NUM_SAMPLES]);\n    const outcomeProbs = computeProbs(await result.data(), numOutcomes);\n    expect(outcomeProbs.length).toBeLessThanOrEqual(numOutcomes);\n  });\n\n  it('Flip 3 three-sided coins, each coin is 100% biases', async () => {\n    const numOutcomes = 3;\n    const logits = tf.tensor2d(\n        [[-100, -100, 1], [-100, 1, -100], [1, -100, -100]], [3, numOutcomes]);\n    const result = tf.multinomial(logits, NUM_SAMPLES, SEED);\n    expect(result.dtype).toBe('int32');\n    expect(result.shape).toEqual([3, NUM_SAMPLES]);\n\n    // First coin always gets last event.\n    let outcomeProbs =\n        computeProbs((await result.data()).slice(0, NUM_SAMPLES), numOutcomes);\n    expectArraysClose(outcomeProbs, [0, 0, 1], EPSILON);\n\n    // Second coin always gets middle event.\n    outcomeProbs = computeProbs(\n        (await result.data()).slice(NUM_SAMPLES, 2 * NUM_SAMPLES), numOutcomes);\n    expectArraysClose(outcomeProbs, [0, 1, 0], EPSILON);\n\n    // Third coin always gets first event\n    outcomeProbs =\n        computeProbs((await result.data()).slice(2 * NUM_SAMPLES), numOutcomes);\n    expectArraysClose(outcomeProbs, [1, 0, 0], EPSILON);\n  });\n\n  it('passing Tensor3D throws error', () => {\n    const probs = tf.zeros([3, 2, 2]);\n    const normalized = true;\n    expect(() => tf.multinomial(probs as Tensor1D, 3, SEED, normalized))\n        .toThrowError();\n  });\n\n  it('throws when passed a non-tensor', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tf.multinomial({} as any, NUM_SAMPLES, SEED))\n        .toThrowError(\n            /Argument 'logits' passed to 'multinomial' must be a Tensor/);\n  });\n\n  it('accepts a tensor-like object for logits (biased coin)', async () => {\n    const res = tf.multinomial([-100, 1], NUM_SAMPLES, SEED);\n    expect(res.dtype).toBe('int32');\n    expect(res.shape).toEqual([NUM_SAMPLES]);\n    const outcomeProbs = computeProbs(await res.data(), 2);\n    expectArraysClose(outcomeProbs, [0, 1], EPSILON);\n  });\n\n  function computeProbs(\n      events: Float32Array|Uint8Array|Int32Array, numOutcomes: number) {\n    const counts = [];\n    for (let i = 0; i < numOutcomes; ++i) {\n      counts[i] = 0;\n    }\n    const numSamples = events.length;\n    for (let i = 0; i < events.length; ++i) {\n      counts[events[i]]++;\n    }\n    // Normalize counts to be probabilities between [0, 1].\n    for (let i = 0; i < counts.length; i++) {\n      counts[i] /= numSamples;\n    }\n    return counts;\n  }\n});\n"]}