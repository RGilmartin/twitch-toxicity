{"version":3,"file":"tensor_ops_util.js","sourceRoot":"","sources":["../../src/ops/tensor_ops_util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAC,MAAM,EAAC,MAAM,WAAW,CAAC;AAIjC,OAAO,EAAC,MAAM,EAAE,kCAAkC,EAAE,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,aAAa,EAAE,YAAY,EAAC,MAAM,SAAS,CAAC;AAEnI,8DAA8D;AAC9D,MAAM,UAAU,UAAU,CACtB,MAAkB,EAAE,KAAe,EAAE,aAAuB,EAC5D,KAAgB;IAClB,IAAI,KAAK,IAAI,IAAI,EAAE;QACjB,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;KAC5B;IACD,IAAI,KAAK,KAAK,WAAW,EAAE;QACzB,MAAM,IAAI,KAAK,CACX,gDAAgD;YAChD,oCAAoC,CAAC,CAAC;KAC3C;IACD,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;QAC/C,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,SAAS;QACzD,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,MAAM,IAAI,KAAK,CACX,qEAAqE;YACrE,uDAAuD,CAAC,CAAC;KAC9D;IACD,IAAI,KAAK,IAAI,IAAI,EAAE;QACjB,kCAAkC,CAAC,KAAK,CAAC,CAAC;QAE1C,MAAM,YAAY,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,YAAY,GAAG,aAAa,CAAC,aAAa,CAAC,CAAC;QAClD,MAAM,CACF,YAAY,KAAK,YAAY,EAC7B,GAAG,EAAE,CACD,iCAAiC,KAAK,4BAA4B;YAClE,GAAG,YAAY,mBAAmB,YAAY,EAAE,CAAC,CAAC;QAE1D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YAC7C,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,iBAAiB,GAAG,CAAC,KAAK,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACtD,QAAQ,KAAK,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,IAAI,CAAC;YACT,MAAM,CACF,aAAa,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EACnD,GAAG,EAAE,CAAC,8CAA8C;gBAChD,IAAI,aAAa,gCAAgC;gBACjD,UAAU,KAAK,KAAK,CAAC,CAAC;SAC/B;KACF;IAED,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QACnD,MAAM,GAAG,CAAC,MAAM,CAAa,CAAC;KAC/B;IAED,KAAK,GAAG,KAAK,IAAI,aAAa,CAAC;IAC/B,MAAM,GAAG,KAAK,KAAK,QAAQ,CAAC,CAAC;QACzB,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;QAC7B,OAAO,CAAC,MAAkB,EAAE,EAAE,EAAE,IAAI,CAAa,CAAC;IACtD,OAAO,MAAM,CAAC,UAAU,CAAC,MAAoB,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAC/D,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {TensorLike, TypedArray} from '../types';\nimport {DataType} from '../types';\nimport {assert, assertNonNegativeIntegerDimensions, flatten, inferDtype, isTypedArray, sizeFromShape, toTypedArray} from '../util';\n\n/** This is shared code across all tensor creation methods. */\nexport function makeTensor(\n    values: TensorLike, shape: number[], inferredShape: number[],\n    dtype?: DataType): Tensor {\n  if (dtype == null) {\n    dtype = inferDtype(values);\n  }\n  if (dtype === 'complex64') {\n    throw new Error(\n        `Cannot construct a complex64 tensor directly. ` +\n        `Please use tf.complex(real, imag).`);\n  }\n  if (!isTypedArray(values) && !Array.isArray(values) &&\n      typeof values !== 'number' && typeof values !== 'boolean' &&\n      typeof values !== 'string') {\n    throw new Error(\n        'values passed to tensor(values) must be a number/boolean/string or ' +\n        'an array of numbers/booleans/strings, or a TypedArray');\n  }\n  if (shape != null) {\n    assertNonNegativeIntegerDimensions(shape);\n\n    const providedSize = sizeFromShape(shape);\n    const inferredSize = sizeFromShape(inferredShape);\n    assert(\n        providedSize === inferredSize,\n        () =>\n            `Based on the provided shape, [${shape}], the tensor should have ` +\n            `${providedSize} values but has ${inferredSize}`);\n\n    for (let i = 0; i < inferredShape.length; ++i) {\n      const inferred = inferredShape[i];\n      const flatDimsDontMatch = i === inferredShape.length - 1 ?\n          inferred !== sizeFromShape(shape.slice(i)) :\n          true;\n      assert(\n          inferredShape[i] === shape[i] || !flatDimsDontMatch,\n          () => `Error creating a new Tensor. Inferred shape ` +\n              `(${inferredShape}) does not match the provided ` +\n              `shape (${shape}). `);\n    }\n  }\n\n  if (!isTypedArray(values) && !Array.isArray(values)) {\n    values = [values] as number[];\n  }\n\n  shape = shape || inferredShape;\n  values = dtype !== 'string' ?\n      toTypedArray(values, dtype) :\n      flatten(values as string[], [], true) as string[];\n  return ENGINE.makeTensor(values as TypedArray, shape, dtype);\n}\n"]}