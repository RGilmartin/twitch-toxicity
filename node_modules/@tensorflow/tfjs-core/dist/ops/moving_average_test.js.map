{"version":3,"file":"moving_average_test.js","sourceRoot":"","sources":["../../src/ops/moving_average_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../index';\nimport {ALL_ENVS, describeWithFlags} from '../jasmine_util';\nimport {expectArraysClose} from '../test_util';\n\ndescribeWithFlags('movingAverage', ALL_ENVS, () => {\n  // Use the following tensorflow to generate reference values for\n  // `zeroDebias` = `true`;\n  //\n  // ```python\n  // import tensorflow as tf\n  // from tensorflow.python.training.moving_averages import\n  // assign_moving_average\n  //\n  // with tf.Session() as sess:\n  //   v = tf.get_variable(\"v1\", shape=[2, 2], dtype=tf.float32,\n  //                       initializer=tf.zeros_initializer)\n  //   x = tf.Variable([[1.0, 2.0], [3.0, 4.0]])\n  //   inc_x = x.assign_add([[10.0, 10.0], [10.0, 10.0]])\n  //   update = assign_moving_average(v, x, 0.6)\n  //\n  //   sess.run(tf.global_variables_initializer())\n  //\n  //   sess.run(update)\n  //   print(sess.run(v))\n  //\n  //   sess.run(inc_x)\n  //   sess.run(update)\n  //   print(sess.run(v))\n  // ```\n\n  it('zeroDebias=true, decay and step are numbers', async () => {\n    const v0 = tf.tensor2d([[0, 0], [0, 0]], [2, 2]);\n    const x = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n    const decay = 0.6;\n\n    const v1 = tf.movingAverage(v0, x, decay, 1);\n    expectArraysClose(await v1.array(), [[1, 2], [3, 4]]);\n\n    const y = tf.tensor2d([[11, 12], [13, 14]], [2, 2]);\n    const v2 = tf.movingAverage(v1, y, decay, 2);\n    expectArraysClose(await v2.array(), [[7.25, 8.25], [9.25, 10.25]]);\n  });\n\n  it('zeroDebias=true, decay and step are scalars', async () => {\n    const v0 = tf.tensor2d([[0, 0], [0, 0]], [2, 2]);\n    const x = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n    const decay = tf.scalar(0.6);\n\n    const v1 = tf.movingAverage(v0, x, decay, tf.scalar(1));\n    expectArraysClose(await v1.array(), [[1, 2], [3, 4]]);\n\n    const y = tf.tensor2d([[11, 12], [13, 14]], [2, 2]);\n    const v2 = tf.movingAverage(v1, y, decay, tf.scalar(2));\n    expectArraysClose(await v2.array(), [[7.25, 8.25], [9.25, 10.25]]);\n  });\n\n  // Use the following tensorflow to generate reference values for\n  // `zeroDebias` = `false`;\n  //\n  // ```python\n  // import tensorflow as tf\n  // from tensorflow.python.training.moving_averages import\n  // assign_moving_average\n  //\n  // with tf.Session() as sess:\n  //   v = tf.get_variable(\"v1\", shape=[2, 2], dtype=tf.float32,\n  //                       initializer=tf.zeros_initializer)\n  //   x = tf.Variable([[1.0, 2.0], [3.0, 4.0]])\n  //   inc_x = x.assign_add([[10.0, 10.0], [10.0, 10.0]])\n  //   update = assign_moving_average(v, x, 0.6, zero_debias=False)\n  //\n  //   sess.run(tf.global_variables_initializer())\n  //\n  //   sess.run(update)\n  //   print(sess.run(v))\n  //\n  //   sess.run(inc_x)\n  //   sess.run(update)\n  //   print(sess.run(v))\n  // ```\n\n  it('zeroDebias=false, decay and step are numbers', async () => {\n    const v0 = tf.tensor2d([[0, 0], [0, 0]], [2, 2]);\n    const x = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n    const decay = 0.6;\n\n    const v1 = tf.movingAverage(v0, x, decay, null, false);\n    expectArraysClose(await v1.array(), [[0.4, 0.8], [1.2, 1.6]]);\n\n    const y = tf.tensor2d([[11, 12], [13, 14]], [2, 2]);\n    const v2 = tf.movingAverage(v1, y, decay, null, false);\n    expectArraysClose(await v2.array(), [[4.64, 5.28], [5.92, 6.56]]);\n  });\n\n  it('zeroDebias=false, decay is scalar', async () => {\n    const v0 = tf.tensor2d([[0, 0], [0, 0]], [2, 2]);\n    const x = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n    const decay = tf.scalar(0.6);\n\n    const v1 = tf.movingAverage(v0, x, decay, null, false);\n    expectArraysClose(await v1.array(), [[0.4, 0.8], [1.2, 1.6]]);\n\n    const y = tf.tensor2d([[11, 12], [13, 14]], [2, 2]);\n    const v2 = tf.movingAverage(v1, y, decay, null, false);\n    expectArraysClose(await v2.array(), [[4.64, 5.28], [5.92, 6.56]]);\n  });\n\n  it('zeroDebias=true, no step throws error', () => {\n    const v0 = tf.tensor2d([[0, 0], [0, 0]], [2, 2]);\n    const x = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n    const decay = tf.scalar(0.6);\n\n    expect(() => tf.movingAverage(v0, x, decay, null)).toThrowError();\n  });\n\n  it('shape mismatch in v and x throws error', () => {\n    const v0 = tf.tensor2d([[0, 0], [0, 0]], [2, 2]);\n    const x = tf.tensor2d([[1, 2]], [1, 2]);\n    const decay = tf.scalar(0.6);\n\n    expect(() => tf.movingAverage(v0, x, decay, null)).toThrowError();\n  });\n\n  it('throws when passed v as a non-tensor', () => {\n    const x = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n\n    expect(() => tf.movingAverage({} as tf.Tensor, x, 1))\n        .toThrowError(\n            /Argument 'v' passed to 'movingAverage' must be a Tensor/);\n  });\n  it('throws when passed v as a non-tensor', () => {\n    const v = tf.tensor2d([[0, 0], [0, 0]], [2, 2]);\n\n    expect(() => tf.movingAverage(v, {} as tf.Tensor, 1))\n        .toThrowError(\n            /Argument 'x' passed to 'movingAverage' must be a Tensor/);\n  });\n\n  it('accepts a tensor-like object', async () => {\n    const v0 = [[0, 0], [0, 0]];  // 2x2\n    const x = [[1, 2], [3, 4]];   // 2x2\n    const decay = 0.6;\n\n    const v1 = tf.movingAverage(v0, x, decay, 1);\n    expectArraysClose(await v1.array(), [[1, 2], [3, 4]]);\n  });\n});\n"]}