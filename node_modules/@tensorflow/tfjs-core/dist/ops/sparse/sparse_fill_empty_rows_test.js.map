{"version":3,"file":"sparse_fill_empty_rows_test.js","sourceRoot":"","sources":["../../../src/ops/sparse/sparse_fill_empty_rows_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../../index';\nimport {ALL_ENVS, describeWithFlags} from '../../jasmine_util';\nimport {expectArraysClose} from '../../test_util';\n\ndescribeWithFlags('sparseFillEmptyRows', ALL_ENVS, () => {\n  it('fill number', async () => {\n    const sparseTensor = {\n      ind: tf.tensor2d(\n          [[0, 0], [1, 0], [1, 3], [1, 4], [3, 2], [3, 3]], [6, 2], 'int32'),\n      val: [0, 10, 13, 14, 32, 33],\n      shape: [5, 6],\n    };\n    const result = tf.sparse.sparseFillEmptyRows(\n        sparseTensor.ind, sparseTensor.val, sparseTensor.shape, -1);\n    expectArraysClose(\n        await result.outputIndices.data(),\n        [[0, 0], [1, 0], [1, 3], [1, 4], [2, 0], [3, 2], [3, 3], [4, 0]]);\n    expectArraysClose(\n        await result.outputValues.data(), [0, 10, 13, 14, -1, 32, 33, -1]);\n    expectArraysClose(await result.emptyRowIndicator.data(), [0, 0, 1, 0, 1]);\n    expectArraysClose(await result.reverseIndexMap.data(), [0, 1, 2, 3, 5, 6]);\n  });\n\n  it('fill float', async () => {\n    const sparseTensor = {\n      ind: tf.tensor2d(\n          [[0, 0], [1, 0], [1, 3], [1, 4], [3, 2], [3, 3]], [6, 2], 'float32'),\n      val: [0.0, 10.0, 13.0, 14.0, 32.0, 33.0],\n      shape: [5, 6],\n    };\n    const result = tf.sparse.sparseFillEmptyRows(\n        sparseTensor.ind, sparseTensor.val, sparseTensor.shape, -1);\n    expectArraysClose(\n        await result.outputIndices.data(),\n        [[0, 0], [1, 0], [1, 3], [1, 4], [2, 0], [3, 2], [3, 3], [4, 0]]);\n    expectArraysClose(\n        await result.outputValues.data(), [0, 10, 13, 14, -1, 32, 33, -1]);\n    expectArraysClose(await result.emptyRowIndicator.data(), [0, 0, 1, 0, 1]);\n    expectArraysClose(await result.reverseIndexMap.data(), [0, 1, 2, 3, 5, 6]);\n  });\n\n  it('no empty rows', async () => {\n    const sparseTensor = {\n      ind: tf.tensor2d([[0, 0], [1, 0], [1, 3], [1, 4]], [4, 2], 'int32'),\n      val: [0, 10, 13, 14],\n      shape: [2, 6],\n    };\n    const result = tf.sparse.sparseFillEmptyRows(\n        sparseTensor.ind, sparseTensor.val, sparseTensor.shape, -1);\n    expectArraysClose(\n        await result.outputIndices.data(), [[0, 0], [1, 0], [1, 3], [1, 4]]);\n    expectArraysClose(await result.outputValues.data(), [0, 10, 13, 14]);\n    expectArraysClose(await result.emptyRowIndicator.data(), [0, 0]);\n    expectArraysClose(await result.reverseIndexMap.data(), [0, 1, 2, 3]);\n  });\n\n  it('no empty rows and unordered', async () => {\n    const sparseTensor = {\n      ind: tf.tensor2d([[1, 2], [1, 3], [0, 1], [0, 3]], [4, 2], 'float32'),\n      val: [1, 3, 2, 4],\n      shape: [2, 5],\n    };\n    const result = tf.sparse.sparseFillEmptyRows(\n        sparseTensor.ind, sparseTensor.val, sparseTensor.shape, -1);\n    expectArraysClose(\n        await result.outputIndices.data(), [[0, 1], [0, 3], [1, 2], [1, 3]]);\n    expectArraysClose(await result.outputValues.data(), [2, 4, 1, 3]);\n    expectArraysClose(await result.emptyRowIndicator.data(), [0, 0]);\n    expectArraysClose(await result.reverseIndexMap.data(), [2, 3, 0, 1]);\n  });\n\n  it('no rows', async () => {\n    const sparseTensor = {\n      ind: tf.tensor2d([], [0, 2], 'int32'),\n      val: [] as number[],\n      shape: [0, 5],\n    };\n    const result = tf.sparse.sparseFillEmptyRows(\n        sparseTensor.ind, sparseTensor.val, sparseTensor.shape, -1);\n    expectArraysClose(await result.outputIndices.data(), []);\n    expectArraysClose(await result.outputValues.data(), []);\n    expectArraysClose(await result.emptyRowIndicator.data(), []);\n    expectArraysClose(await result.reverseIndexMap.data(), []);\n  });\n\n  it('throw error if dense rows is empty and indices is not', async () => {\n    const sparseTensor = {\n      ind: tf.tensor2d([[0, 0]], [1, 2], 'int32'),\n      val: [1],\n      shape: [0, 5],\n    };\n    expect(\n        () => tf.sparse.sparseFillEmptyRows(\n            sparseTensor.ind, sparseTensor.val, sparseTensor.shape, -1))\n        .toThrowError(/indices\\.shape\\[0\\] = 1/);\n  });\n\n  it('throw error if negative row', async () => {\n    const sparseTensor = {\n      ind: tf.tensor2d([[-1, 0]], [1, 2], 'int32'),\n      val: [1],\n      shape: [5, 5],\n    };\n    expect(\n        () => tf.sparse.sparseFillEmptyRows(\n            sparseTensor.ind, sparseTensor.val, sparseTensor.shape, -1))\n        .toThrowError('indices(0, 0) is invalid: -1 < 0');\n  });\n\n  it('throw error if row exceeds number of dense rows', async () => {\n    const sparseTensor = {\n      ind: tf.tensor2d([[5, 0]], [1, 2], 'int32'),\n      val: [1],\n      shape: [5, 5],\n    };\n    expect(\n        () => tf.sparse.sparseFillEmptyRows(\n            sparseTensor.ind, sparseTensor.val, sparseTensor.shape, -1))\n        .toThrowError('indices(0, 0) is invalid: 5 >= 5');\n  });\n});\n"]}