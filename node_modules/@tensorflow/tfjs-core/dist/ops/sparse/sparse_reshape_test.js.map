{"version":3,"file":"sparse_reshape_test.js","sourceRoot":"","sources":["../../../src/ops/sparse/sparse_reshape_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../../index';\nimport {ALL_ENVS, describeWithFlags} from '../../jasmine_util';\nimport {expectArraysClose} from '../../test_util';\n\nfunction sparseTensorValue5x6() {\n  const ind = tf.tensor2d(\n      [[0, 0], [1, 0], [1, 3], [1, 4], [3, 2], [3, 3]], [6, 2], 'int32');\n  const val = [0, 10, 13, 14, 32, 33];\n  const shape = [5, 6];\n  return {ind, val, shape};\n}\n\nfunction sparseTensorValue2x3x4() {\n  const ind = tf.tensor2d(\n      [\n        [0, 0, 1], [0, 1, 0], [0, 1, 2], [1, 0, 3], [1, 1, 1], [1, 1, 3],\n        [1, 2, 2]\n      ],\n      [7, 3], 'int32');\n  const val = [1, 10, 12, 103, 111, 113, 122];\n  const shape = [2, 3, 4];\n  return {ind, val, shape};\n}\ndescribeWithFlags('sparseReshape', ALL_ENVS, () => {\n  it('preserve static shape info', async () => {\n    const sparseTensor = sparseTensorValue5x6();\n    const result = tf.sparse.sparseReshape(\n        sparseTensor.ind, sparseTensor.shape, [1, 5, 2, 3]);\n    expectArraysClose(await result.outputShape.data(), [1, 5, 2, 3]);\n  });\n\n  it('preserve shape info with inferred dim', async () => {\n    const sparseTensor = sparseTensorValue2x3x4();\n    const result =\n        tf.sparse.sparseReshape(sparseTensor.ind, sparseTensor.shape, [2, -1]);\n    expectArraysClose(await result.outputShape.data(), [2, 3 * 4]);\n  });\n\n  it('throw error if more than one inferred dim', async () => {\n    const sparseTensor = sparseTensorValue2x3x4();\n    expect(() => tf.sparse.sparseReshape(sparseTensor.ind, sparseTensor.shape, [\n      -1, 2, -1\n    ])).toThrowError(/only one output dimension may be -1/);\n  });\n\n  it('throw error if impossible new shape', async () => {\n    const sparseTensor = sparseTensorValue2x3x4();\n    expect(() => tf.sparse.sparseReshape(sparseTensor.ind, sparseTensor.shape, [\n      -1, 7\n    ])).toThrowError(/multiple of 7/);\n  });\n  it('same shape', async () => {\n    const sparseTensor = sparseTensorValue5x6();\n    const result =\n        tf.sparse.sparseReshape(sparseTensor.ind, sparseTensor.shape, [5, 6]);\n    expectArraysClose(\n        await result.outputIndices.data(), await sparseTensor.ind.data());\n    expectArraysClose(await result.outputShape.data(), sparseTensor.shape);\n  });\n\n  it('same shape with inferred dim', async () => {\n    const sparseTensor = sparseTensorValue5x6();\n    const result =\n        tf.sparse.sparseReshape(sparseTensor.ind, sparseTensor.shape, [-1, 6]);\n    expectArraysClose(\n        await result.outputIndices.data(), await sparseTensor.ind.data());\n    expectArraysClose(await result.outputShape.data(), sparseTensor.shape);\n  });\n\n  it('new shape with same rank', async () => {\n    const sparseTensor = sparseTensorValue5x6();\n    const result =\n        tf.sparse.sparseReshape(sparseTensor.ind, sparseTensor.shape, [3, 10]);\n    expectArraysClose(\n        await result.outputIndices.data(),\n        [[0, 0], [0, 6], [0, 9], [1, 0], [2, 0], [2, 1]]);\n    expectArraysClose(await result.outputShape.data(), [3, 10]);\n  });\n\n  it('new shape with same rank with inferred dim', async () => {\n    const sparseTensor = sparseTensorValue5x6();\n    const result =\n        tf.sparse.sparseReshape(sparseTensor.ind, sparseTensor.shape, [3, -1]);\n    expectArraysClose(\n        await result.outputIndices.data(),\n        [[0, 0], [0, 6], [0, 9], [1, 0], [2, 0], [2, 1]]);\n    expectArraysClose(await result.outputShape.data(), [3, 10]);\n  });\n  it('up rank', async () => {\n    const sparseTensor = sparseTensorValue5x6();\n    const result = tf.sparse.sparseReshape(\n        sparseTensor.ind, sparseTensor.shape, [2, 3, 5]);\n    expectArraysClose(\n        await result.outputIndices.data(),\n        [[0, 0, 0], [0, 1, 1], [0, 1, 4], [0, 2, 0], [1, 1, 0], [1, 1, 1]]);\n    expectArraysClose(await result.outputShape.data(), [2, 3, 5]);\n  });\n  it('up rank with inferred dim', async () => {\n    const sparseTensor = sparseTensorValue5x6();\n    const result = tf.sparse.sparseReshape(\n        sparseTensor.ind, sparseTensor.shape, [2, -1, 5]);\n    expectArraysClose(\n        await result.outputIndices.data(),\n        [[0, 0, 0], [0, 1, 1], [0, 1, 4], [0, 2, 0], [1, 1, 0], [1, 1, 1]]);\n    expectArraysClose(await result.outputShape.data(), [2, 3, 5]);\n  });\n\n  it('down rank', async () => {\n    const sparseTensor = sparseTensorValue2x3x4();\n    const result =\n        tf.sparse.sparseReshape(sparseTensor.ind, sparseTensor.shape, [6, 4]);\n    expectArraysClose(\n        await result.outputIndices.data(),\n        [[0, 1], [1, 0], [1, 2], [3, 3], [4, 1], [4, 3], [5, 2]]);\n    expectArraysClose(await result.outputShape.data(), [6, 4]);\n  });\n\n  it('down rank with inferred dim', async () => {\n    const sparseTensor = sparseTensorValue2x3x4();\n    const result =\n        tf.sparse.sparseReshape(sparseTensor.ind, sparseTensor.shape, [6, -1]);\n    expectArraysClose(\n        await result.outputIndices.data(),\n        [[0, 1], [1, 0], [1, 2], [3, 3], [4, 1], [4, 3], [5, 2]]);\n    expectArraysClose(await result.outputShape.data(), [6, 4]);\n  });\n\n  it('throw error if mismatch size', async () => {\n    const sparseTensor = sparseTensorValue5x6();\n    expect(() => tf.sparse.sparseReshape(sparseTensor.ind, sparseTensor.shape, [\n      4, 7\n    ])).toThrowError(/Input to reshape is a tensor with 30 dense values/);\n  });\n});\n"]}