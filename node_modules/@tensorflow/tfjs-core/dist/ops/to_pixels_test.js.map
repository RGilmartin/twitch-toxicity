{"version":3,"file":"to_pixels_test.js","sourceRoot":"","sources":["../../src/ops/to_pixels_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../index';\nimport {ALL_ENVS, describeWithFlags} from '../jasmine_util';\nimport {expectPromiseToFail} from '../test_util';\n\ndescribeWithFlags('toPixels no canvas', ALL_ENVS, () => {\n  it('draws a rank-2 float32 tensor', async () => {\n    const x = tf.tensor2d([.15, .2], [2, 1], 'float32');\n\n    const data = await tf.browser.toPixels(x);\n    const expected = new Uint8ClampedArray([\n      Math.round(.15 * 255), Math.round(.15 * 255), Math.round(.15 * 255), 255,\n      Math.round(.2 * 255), Math.round(.2 * 255), Math.round(.2 * 255), 255\n    ]);\n    expect(data).toEqual(expected);\n  });\n\n  it('draws a rank-2 int32 tensor', async () => {\n    const x = tf.tensor2d([10, 20], [2, 1], 'int32');\n    const data = await tf.browser.toPixels(x);\n    const expected = new Uint8ClampedArray([10, 10, 10, 255, 20, 20, 20, 255]);\n    expect(data).toEqual(expected);\n  });\n\n  it('draws a rank-3 float32 tensor, 1 channel', async () => {\n    const x = tf.tensor3d([.15, .2], [2, 1, 1], 'float32');\n\n    const data = await tf.browser.toPixels(x);\n    const expected = new Uint8ClampedArray([\n      Math.round(.15 * 255), Math.round(.15 * 255), Math.round(.15 * 255), 255,\n      Math.round(.2 * 255), Math.round(.2 * 255), Math.round(.2 * 255), 255\n    ]);\n    expect(data).toEqual(expected);\n  });\n\n  it('draws a rank-3 int32 tensor, 1 channel', async () => {\n    const x = tf.tensor3d([10, 20], [2, 1, 1], 'int32');\n\n    const data = await tf.browser.toPixels(x);\n    const expected = new Uint8ClampedArray([10, 10, 10, 255, 20, 20, 20, 255]);\n    expect(data).toEqual(expected);\n  });\n\n  it('draws a rank-3 float32 tensor, 3 channel', async () => {\n    // 0.1 and 0.3 are changed to 0.1001 and 0.3001 to avoid boundary conditions\n    // such as Math.round(~25.5) which on Mobile Safari gives 25 and Desktop\n    // gives 26.\n    const x =\n        tf.tensor3d([.05, .1001, .15, .2, .25, .3001], [2, 1, 3], 'float32');\n\n    const data = await tf.browser.toPixels(x);\n    const expected = new Uint8ClampedArray([\n      Math.round(.05 * 255), Math.round(.1001 * 255), Math.round(.15 * 255),\n      255, Math.round(.2 * 255), Math.round(.25 * 255), Math.round(.3001 * 255),\n      255\n    ]);\n    expect(data).toEqual(expected);\n  });\n\n  it('draws a rank-3 int32 tensor, 3 channel', async () => {\n    const x = tf.tensor3d([10, 20, 30, 40, 50, 60], [2, 1, 3], 'int32');\n\n    const data = await tf.browser.toPixels(x);\n    const expected = new Uint8ClampedArray([10, 20, 30, 255, 40, 50, 60, 255]);\n    expect(data).toEqual(expected);\n  });\n\n  it('draws a rank-3 float32 tensor, 4 channel', async () => {\n    const x = tf.tensor3d(\n        [.05, .1001, .15, .2, .25, .3001, .35, .4], [2, 1, 4], 'float32');\n\n    const data = await tf.browser.toPixels(x);\n    const expected = new Uint8ClampedArray([\n      Math.round(.05 * 255), Math.round(.1001 * 255), Math.round(.15 * 255),\n      Math.round(.20 * 255), Math.round(.25 * 255), Math.round(.3001 * 255),\n      Math.round(.35 * 255), Math.round(.4 * 255)\n    ]);\n    expect(data).toEqual(expected);\n  });\n\n  it('draws a rank-3 int32 tensor, 4 channel', async () => {\n    const x = tf.tensor3d([10, 20, 30, 40, 50, 60, 70, 80], [2, 1, 4], 'int32');\n\n    const data = await tf.browser.toPixels(x);\n    const expected = new Uint8ClampedArray([10, 20, 30, 40, 50, 60, 70, 80]);\n    expect(data).toEqual(expected);\n  });\n\n  it('throws for scalars', done => {\n    // tslint:disable-next-line:no-any\n    expectPromiseToFail(() => tf.browser.toPixels(tf.scalar(1) as any), done);\n  });\n\n  it('throws for rank-1 tensors', done => {\n    expectPromiseToFail(\n        // tslint:disable-next-line:no-any\n        () => tf.browser.toPixels(tf.tensor1d([1]) as any), done);\n  });\n  it('throws for rank-4 tensors', done => {\n    expectPromiseToFail(\n        // tslint:disable-next-line:no-any\n        () => tf.browser.toPixels(tf.tensor4d([1], [1, 1, 1, 1]) as any), done);\n  });\n  it('throws for bool dtype', done => {\n    expectPromiseToFail(\n        () => tf.browser.toPixels(tf.tensor2d([1], [1, 1], 'bool')), done);\n  });\n  it('throws for rank-3 depth = 2', done => {\n    expectPromiseToFail(\n        () => tf.browser.toPixels(tf.tensor3d([1, 2], [1, 1, 2])), done);\n  });\n  it('throws for rank-3 depth = 5', done => {\n    expectPromiseToFail(\n        () => tf.browser.toPixels(tf.tensor3d([1, 2, 3, 4, 5], [1, 1, 5])),\n        done);\n  });\n  it('throws for float32 tensor with values not in [0 - 1]', done => {\n    expectPromiseToFail(\n        () => tf.browser.toPixels(tf.tensor2d([-1, .5], [1, 2])), done);\n  });\n  it('throws for int32 tensor with values not in [0 - 255]', done => {\n    expectPromiseToFail(\n        () => tf.browser.toPixels(tf.tensor2d([-1, 100], [1, 2], 'int32')),\n        done);\n  });\n  it('throws when passed a non-tensor', done => {\n    // tslint:disable-next-line:no-any\n    expectPromiseToFail(() => tf.browser.toPixels({} as any), done);\n  });\n\n  it('accepts a tensor-like object', async () => {\n    const x = [[10], [20]];  // 2x1;\n    const data = await tf.browser.toPixels(x);\n\n    const expected = new Uint8ClampedArray([10, 10, 10, 255, 20, 20, 20, 255]);\n    expect(data).toEqual(expected);\n  });\n\n  it('does not leak memory', async () => {\n    const x = tf.tensor2d([[.1], [.2]], [2, 1]);\n    const startNumTensors = tf.memory().numTensors;\n    await tf.browser.toPixels(x);\n    expect(tf.memory().numTensors).toEqual(startNumTensors);\n  });\n\n  it('does not leak memory given a tensor-like object', async () => {\n    const x = [[10], [20]];  // 2x1;\n    const startNumTensors = tf.memory().numTensors;\n    await tf.browser.toPixels(x);\n    expect(tf.memory().numTensors).toEqual(startNumTensors);\n  });\n});\n"]}