{"version":3,"file":"conv_util_test.js","sourceRoot":"","sources":["../../src/ops/conv_util_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as conv_util from './conv_util';\n\ndescribe('conv_util computeConv2DInfo', () => {\n  it('1x1 conv over 1x1 array with same pad', () => {\n    const inShape: [number, number, number, number] = [1, 1, 1, 1];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [1, 1, 1, 1], stride, dilation, 'same');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(1);\n    expect(convInfo.outWidth).toEqual(1);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(1);\n    expect(convInfo.effectiveFilterHeight).toEqual(1);\n  });\n\n  it('2x2 conv over 3x3 array with same pad', () => {\n    const inShape: [number, number, number, number] = [1, 3, 3, 1];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [2, 2, 1, 1], stride, dilation, 'same');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(2);\n    expect(convInfo.effectiveFilterHeight).toEqual(2);\n    // Should produce non-even padding with extra pixel at the right/bottom.\n    expect(convInfo.padInfo.left).toBe(0);\n    expect(convInfo.padInfo.right).toBe(1);\n    expect(convInfo.padInfo.top).toBe(0);\n    expect(convInfo.padInfo.bottom).toBe(1);\n  });\n\n  it('2x2 conv over 3x3 array with same pad', () => {\n    const inShape: [number, number, number, number] = [1, 3, 3, 1];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [2, 2, 1, 1], stride, dilation, 'same');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(2);\n    expect(convInfo.effectiveFilterHeight).toEqual(2);\n  });\n\n  it('2x2 conv over 3x3 array with valid pad', () => {\n    const inShape: [number, number, number, number] = [1, 3, 3, 1];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [2, 2, 1, 1], stride, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(2);\n    expect(convInfo.outWidth).toEqual(2);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(2);\n    expect(convInfo.effectiveFilterHeight).toEqual(2);\n  });\n\n  it('3x3 conv over 5x5 array with same pad with stride 2', () => {\n    const inShape: [number, number, number, number] = [1, 5, 5, 1];\n    const stride = 2;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [3, 3, 1, 1], stride, dilation, 'same');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(3);\n    expect(convInfo.effectiveFilterHeight).toEqual(3);\n\n    expect(convInfo.padInfo.left).toBe(1);\n    expect(convInfo.padInfo.right).toBe(1);\n    expect(convInfo.padInfo.top).toBe(1);\n    expect(convInfo.padInfo.bottom).toBe(1);\n  });\n\n  it('2x2 conv over 3x3 array with valid pad with stride 2', () => {\n    const inShape: [number, number, number, number] = [1, 3, 3, 1];\n    const stride = 2;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [2, 2, 1, 1], stride, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(1);\n    expect(convInfo.outWidth).toEqual(1);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(2);\n    expect(convInfo.effectiveFilterHeight).toEqual(2);\n  });\n\n  it('2x1 conv over 3x3 array with valid pad with stride 1', () => {\n    const inShape: [number, number, number, number] = [1, 3, 3, 1];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [2, 1, 1, 1], stride, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(2);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(1);\n    expect(convInfo.effectiveFilterHeight).toEqual(2);\n  });\n\n  it('2x1 conv over 3x3 array with valid pad with strides h=2, w=1', () => {\n    const inShape: [number, number, number, number] = [1, 3, 3, 1];\n    const strides: [number, number] = [2, 1];\n    const dilation = 1;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [2, 1, 1, 1], strides, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(1);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(1);\n    expect(convInfo.effectiveFilterHeight).toEqual(2);\n  });\n\n  it('1x2 conv over 3x3 array with valid pad with stride 1', () => {\n    const inShape: [number, number, number, number] = [1, 3, 3, 1];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [1, 2, 1, 1], stride, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(2);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(2);\n    expect(convInfo.effectiveFilterHeight).toEqual(1);\n  });\n\n  it('1x2 conv over 3x3 array with valid pad with stride 1, batch=5', () => {\n    const inShape: [number, number, number, number] = [5, 3, 3, 1];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [1, 2, 1, 1], stride, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(5);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(2);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(2);\n    expect(convInfo.effectiveFilterHeight).toEqual(1);\n  });\n\n  it('2x2 conv over 3x3 array with same pad with dilations 2', () => {\n    const inShape: [number, number, number, number] = [1, 3, 3, 1];\n    const stride = 1;\n    const dilations = 2;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [2, 2, 1, 1], stride, dilations, 'same');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n    // pad evenly on all sides\n    expect(convInfo.padInfo.left).toBe(1);\n    expect(convInfo.padInfo.right).toBe(1);\n    expect(convInfo.padInfo.top).toBe(1);\n    expect(convInfo.padInfo.bottom).toBe(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(3);\n    expect(convInfo.effectiveFilterHeight).toEqual(3);\n  });\n\n  it('2x1 conv over 3x3 array with same pad with dilations 2', () => {\n    const inShape: [number, number, number, number] = [1, 3, 3, 1];\n    const stride = 1;\n    const dilations = 2;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [2, 1, 1, 1], stride, dilations, 'same');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n    // pad top and bottom\n    expect(convInfo.padInfo.left).toBe(0);\n    expect(convInfo.padInfo.right).toBe(0);\n    expect(convInfo.padInfo.top).toBe(1);\n    expect(convInfo.padInfo.bottom).toBe(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(1);\n    expect(convInfo.effectiveFilterHeight).toEqual(3);\n  });\n\n  it('3x4 conv over 8x8 array with same pad with dilations h=4 w=3', () => {\n    const inShape: [number, number, number, number] = [1, 8, 8, 1];\n    const stride = 1;\n    const dilations: [number, number] = [4, 3];\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [3, 4, 1, 1], stride, dilations, 'same');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(8);\n    expect(convInfo.outWidth).toEqual(8);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(10);\n    expect(convInfo.effectiveFilterHeight).toEqual(9);\n\n    expect(convInfo.padInfo.left).toBe(4);\n    expect(convInfo.padInfo.right).toBe(5);\n    expect(convInfo.padInfo.top).toBe(4);\n    expect(convInfo.padInfo.bottom).toBe(4);\n  });\n\n  it('2x1 conv over 3x3 array with valid pad with dilations 2', () => {\n    const inShape: [number, number, number, number] = [1, 3, 3, 1];\n    const stride = 1;\n    const dilations = 2;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [2, 1, 1, 1], stride, dilations, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(1);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(1);\n    expect(convInfo.effectiveFilterHeight).toEqual(3);\n  });\n\n  it('2x2 conv over 3x3 array with valid pad with dilations 2', () => {\n    const inShape: [number, number, number, number] = [1, 3, 3, 1];\n    const stride = 1;\n    const dilations = 2;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [2, 2, 1, 1], stride, dilations, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(1);\n    expect(convInfo.outWidth).toEqual(1);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(3);\n    expect(convInfo.effectiveFilterHeight).toEqual(3);\n  });\n\n  it('2x2 conv over 4x4 array with valid pad with dilations 2', () => {\n    const inShape: [number, number, number, number] = [1, 4, 4, 1];\n    const stride = 1;\n    const dilations = 2;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [2, 2, 1, 1], stride, dilations, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(2);\n    expect(convInfo.outWidth).toEqual(2);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(3);\n    expect(convInfo.effectiveFilterHeight).toEqual(3);\n  });\n});\n\ndescribe('conv_util computeConv3DInfo', () => {\n  it('1x1x1 conv over 1x1x1 array with same pad', () => {\n    const inShape: [number, number, number, number, number] = [1, 1, 1, 1, 1];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [1, 1, 1, 1, 1], stride, dilation, 'same');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(1);\n    expect(convInfo.outHeight).toEqual(1);\n    expect(convInfo.outWidth).toEqual(1);\n    expect(convInfo.outChannels).toEqual(1);\n  });\n\n  it('2x2x2 conv over 3x3x3 array with same pad', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [2, 2, 2, 1, 1], stride, dilation, 'same');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(3);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n    // Should produce non-even padding with extra pixel at the back/right/bottom\n    expect(convInfo.padInfo.front).toBe(0);\n    expect(convInfo.padInfo.back).toBe(1);\n    expect(convInfo.padInfo.left).toBe(0);\n    expect(convInfo.padInfo.right).toBe(1);\n    expect(convInfo.padInfo.top).toBe(0);\n    expect(convInfo.padInfo.bottom).toBe(1);\n  });\n\n  it('2x2x2 conv over 3x3x3 array with same pad', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [2, 2, 2, 1, 1], stride, dilation, 'same');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(3);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n  });\n\n  it('2x2x2 conv over 3x3x3 array with valid pad', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [2, 2, 2, 1, 1], stride, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(2);\n    expect(convInfo.outHeight).toEqual(2);\n    expect(convInfo.outWidth).toEqual(2);\n    expect(convInfo.outChannels).toEqual(1);\n  });\n\n  it('3x3x3 conv over 5x5x5 array with same pad with stride 2', () => {\n    const inShape: [number, number, number, number, number] = [1, 5, 5, 5, 1];\n    const stride = 2;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [3, 3, 3, 1, 1], stride, dilation, 'same');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(3);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n\n    expect(convInfo.padInfo.front).toBe(1);\n    expect(convInfo.padInfo.back).toBe(1);\n    expect(convInfo.padInfo.left).toBe(1);\n    expect(convInfo.padInfo.right).toBe(1);\n    expect(convInfo.padInfo.top).toBe(1);\n    expect(convInfo.padInfo.bottom).toBe(1);\n  });\n\n  it('2x2x2 conv over 3x3x3 array with valid pad with stride 2', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const stride = 2;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [2, 2, 2, 1, 1], stride, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(1);\n    expect(convInfo.outHeight).toEqual(1);\n    expect(convInfo.outWidth).toEqual(1);\n    expect(convInfo.outChannels).toEqual(1);\n  });\n\n  it('2x1x1 conv over 3x3x3 array with valid pad with stride 1', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [2, 1, 1, 1, 1], stride, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(2);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n  });\n\n  it('2x1x1 conv over 3x3x3 array with valid pad with strides d=2, h=1, w=1',\n     () => {\n       const inShape: [number, number, number, number, number] =\n           [1, 3, 3, 3, 1];\n       const strides: [number, number, number] = [2, 1, 1];\n       const dilation = 1;\n       const convInfo = conv_util.computeConv3DInfo(\n           inShape, [2, 1, 1, 1, 1], strides, dilation, 'valid');\n       expect(convInfo.batchSize).toEqual(1);\n       expect(convInfo.outDepth).toEqual(1);\n       expect(convInfo.outHeight).toEqual(3);\n       expect(convInfo.outWidth).toEqual(3);\n       expect(convInfo.outChannels).toEqual(1);\n     });\n\n  it('1x2x2 conv over 3x3x3 array with valid pad with stride 1', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [1, 2, 2, 1, 1], stride, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(3);\n    expect(convInfo.outHeight).toEqual(2);\n    expect(convInfo.outWidth).toEqual(2);\n    expect(convInfo.outChannels).toEqual(1);\n  });\n\n  it('1x2x2 conv over 3x3x3 array with valid pad with stride 1, batch=5',\n     () => {\n       const inShape: [number, number, number, number, number] =\n           [5, 3, 3, 3, 1];\n       const stride = 1;\n       const dilation = 1;\n       const convInfo = conv_util.computeConv3DInfo(\n           inShape, [1, 2, 2, 1, 1], stride, dilation, 'valid');\n       expect(convInfo.batchSize).toEqual(5);\n       expect(convInfo.outDepth).toEqual(3);\n       expect(convInfo.outHeight).toEqual(2);\n       expect(convInfo.outWidth).toEqual(2);\n       expect(convInfo.outChannels).toEqual(1);\n     });\n\n  it('2x2x2 conv over 3x3x3 array with same pad with dilations 2', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const stride = 1;\n    const dilations = 2;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [2, 2, 2, 1, 1], stride, dilations, 'same');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(3);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n    // pad evenly on all sides\n    expect(convInfo.padInfo.front).toBe(1);\n    expect(convInfo.padInfo.back).toBe(1);\n    expect(convInfo.padInfo.left).toBe(1);\n    expect(convInfo.padInfo.right).toBe(1);\n    expect(convInfo.padInfo.top).toBe(1);\n    expect(convInfo.padInfo.bottom).toBe(1);\n  });\n\n  it('2x1x1 conv over 3x3x3 array with same pad with dilations 2', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const stride = 1;\n    const dilations = 2;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [2, 1, 1, 1, 1], stride, dilations, 'same');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(3);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n    // pad top and bottom\n    expect(convInfo.padInfo.front).toBe(1);\n    expect(convInfo.padInfo.back).toBe(1);\n    expect(convInfo.padInfo.left).toBe(0);\n    expect(convInfo.padInfo.right).toBe(0);\n    expect(convInfo.padInfo.top).toBe(0);\n    expect(convInfo.padInfo.bottom).toBe(0);\n  });\n\n  it('3x4x4 conv over 8x8 array with same pad with dilations d=4 h=3 w=3',\n     () => {\n       const inShape: [number, number, number, number, number] =\n           [1, 8, 8, 8, 1];\n       const stride = 1;\n       const dilations: [number, number, number] = [4, 3, 3];\n       const convInfo = conv_util.computeConv3DInfo(\n           inShape, [3, 4, 4, 1, 1], stride, dilations, 'same');\n       expect(convInfo.batchSize).toEqual(1);\n       expect(convInfo.outDepth).toEqual(8);\n       expect(convInfo.outHeight).toEqual(8);\n       expect(convInfo.outWidth).toEqual(8);\n       expect(convInfo.outChannels).toEqual(1);\n\n       expect(convInfo.padInfo.front).toBe(4);\n       expect(convInfo.padInfo.back).toBe(4);\n       expect(convInfo.padInfo.left).toBe(4);\n       expect(convInfo.padInfo.right).toBe(5);\n       expect(convInfo.padInfo.top).toBe(4);\n       expect(convInfo.padInfo.bottom).toBe(5);\n     });\n\n  it('2x1x1 conv over 3x3x3 array with valid pad with dilations 2', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const stride = 1;\n    const dilations = 2;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [2, 1, 1, 1, 1], stride, dilations, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(1);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n  });\n\n  it('2x2x2 conv over 3x3x3 array with valid pad with dilations 2', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const stride = 1;\n    const dilations = 2;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [2, 2, 2, 1, 1], stride, dilations, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(1);\n    expect(convInfo.outHeight).toEqual(1);\n    expect(convInfo.outWidth).toEqual(1);\n    expect(convInfo.outChannels).toEqual(1);\n  });\n\n  it('2x2x2 conv over 4x4x4 array with valid pad with dilations 2', () => {\n    const inShape: [number, number, number, number, number] = [1, 4, 4, 4, 1];\n    const stride = 1;\n    const dilations = 2;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [2, 2, 2, 1, 1], stride, dilations, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(2);\n    expect(convInfo.outHeight).toEqual(2);\n    expect(convInfo.outWidth).toEqual(2);\n    expect(convInfo.outChannels).toEqual(1);\n  });\n});\n\ndescribe('conv_util computeConv2DInfo with depthwise=true', () => {\n  it('1x1 filter over 1x1 array with same pad', () => {\n    const inChannels = 1;\n    const inShape: [number, number, number, number] = [1, 1, 1, inChannels];\n    const fSize = 1;\n    const chMul = 1;\n    const stride = 1;\n    const dilation = 1;\n    const pad = 'same';\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [fSize, fSize, inChannels, chMul], stride, dilation, pad, null,\n        true);\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(1);\n    expect(convInfo.outWidth).toEqual(1);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(1);\n    expect(convInfo.effectiveFilterHeight).toEqual(1);\n  });\n\n  it('2x2 filter over 3x3 array with same pad, chMul=3, depth=2', () => {\n    const inChannels = 2;\n    const batchSize = 1;\n    const inSize = 3;\n    const inShape: [number, number, number, number] =\n        [batchSize, inSize, inSize, inChannels];\n    const fSize = 2;\n    const chMul = 3;\n    const stride = 1;\n    const dilation = 1;\n    const pad = 'same';\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [fSize, fSize, inChannels, chMul], stride, dilation, pad, null,\n        true);\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(6);\n    expect(convInfo.effectiveFilterWidth).toEqual(2);\n    expect(convInfo.effectiveFilterHeight).toEqual(2);\n  });\n\n  it('2x2 filter over 3x3 array with valid pad, chMul=3, depth=2', () => {\n    const inChannels = 2;\n    const batchSize = 1;\n    const inSize = 3;\n    const inShape: [number, number, number, number] =\n        [batchSize, inSize, inSize, inChannels];\n    const fSize = 2;\n    const chMul = 3;\n    const stride = 1;\n    const dilation = 1;\n    const pad = 'valid';\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [fSize, fSize, inChannels, chMul], stride, dilation, pad, null,\n        true);\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(2);\n    expect(convInfo.outWidth).toEqual(2);\n    expect(convInfo.outChannels).toEqual(6);\n    expect(convInfo.effectiveFilterWidth).toEqual(2);\n    expect(convInfo.effectiveFilterHeight).toEqual(2);\n  });\n});\n\ndescribe('conv_util computeConv3DInfo with depthwise=true', () => {\n  it('1x1x1 filter over 1x1x1 array with same pad', () => {\n    const inChannels = 1;\n    const inShape: [number, number, number, number, number] =\n        [1, 1, 1, 1, inChannels];\n    const fSize = 1;\n    const chMul = 1;\n    const stride = 1;\n    const dilation = 1;\n    const pad = 'same';\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [fSize, fSize, fSize, inChannels, chMul], stride, dilation,\n        pad, true);\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(1);\n    expect(convInfo.outHeight).toEqual(1);\n    expect(convInfo.outWidth).toEqual(1);\n    expect(convInfo.outChannels).toEqual(1);\n  });\n\n  it('2x2x2 filter over 3x3x3 array with same pad, chMul=3, depth=2', () => {\n    const inChannels = 2;\n    const batchSize = 1;\n    const inSize = 3;\n    const inShape: [number, number, number, number, number] =\n        [batchSize, inSize, inSize, inSize, inChannels];\n    const fSize = 2;\n    const chMul = 3;\n    const stride = 1;\n    const dilation = 1;\n    const pad = 'same';\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [fSize, fSize, fSize, inChannels, chMul], stride, dilation,\n        pad, true);\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(3);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(6);\n  });\n\n  it('2x2x2 filter over 3x3x3 array with valid pad, chMul=3, depth=2', () => {\n    const inChannels = 2;\n    const batchSize = 1;\n    const inSize = 3;\n    const inShape: [number, number, number, number, number] =\n        [batchSize, inSize, inSize, inSize, inChannels];\n    const fSize = 2;\n    const chMul = 3;\n    const stride = 1;\n    const dilation = 1;\n    const pad = 'valid';\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [fSize, fSize, fSize, inChannels, chMul], stride, dilation,\n        pad, true);\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(2);\n    expect(convInfo.outHeight).toEqual(2);\n    expect(convInfo.outWidth).toEqual(2);\n    expect(convInfo.outChannels).toEqual(6);\n  });\n});\n\ndescribe('conv_util computeConv2DInfo channelsFirst', () => {\n  it('2x2 conv over 3x3 array with same pad', () => {\n    const inDepth = 2;\n    const outDepth = 4;\n    const inShape: [number, number, number, number] = [1, inDepth, 3, 3];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [2, 2, inDepth, outDepth], stride, dilation, 'same', null,\n        false, 'channelsFirst');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(4);\n    expect(convInfo.outShape).toEqual([1, 4, 3, 3]);\n    expect(convInfo.effectiveFilterWidth).toEqual(2);\n    expect(convInfo.effectiveFilterHeight).toEqual(2);\n    // Should produce non-even padding with extra pixel at the right/bottom.\n    expect(convInfo.padInfo.left).toBe(0);\n    expect(convInfo.padInfo.right).toBe(1);\n    expect(convInfo.padInfo.top).toBe(0);\n    expect(convInfo.padInfo.bottom).toBe(1);\n  });\n\n  it('2x2 conv over 3x3 array with valid pad', () => {\n    const inDepth = 6;\n    const outDepth = 16;\n    const inShape: [number, number, number, number] = [1, inDepth, 3, 3];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [2, 2, inDepth, outDepth], stride, dilation, 'valid', null,\n        false, 'channelsFirst');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outHeight).toEqual(2);\n    expect(convInfo.outWidth).toEqual(2);\n    expect(convInfo.outChannels).toEqual(16);\n    expect(convInfo.outShape).toEqual([1, 16, 2, 2]);\n    expect(convInfo.effectiveFilterWidth).toEqual(2);\n    expect(convInfo.effectiveFilterHeight).toEqual(2);\n    // Should produce no padding.\n    expect(convInfo.padInfo.left).toBe(0);\n    expect(convInfo.padInfo.right).toBe(0);\n    expect(convInfo.padInfo.top).toBe(0);\n    expect(convInfo.padInfo.bottom).toBe(0);\n  });\n});\n\ndescribe('conv_util computeConv3DInfo channelsFirst', () => {\n  it('2x2x2 conv over 3x3x3 array with same pad', () => {\n    const inDepth = 2;\n    const outDepth = 4;\n    const inShape: [number, number, number, number, number] =\n        [1, inDepth, 3, 3, 3];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [2, 2, 2, inDepth, outDepth], stride, dilation, 'same', false,\n        'channelsFirst');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(3);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(4);\n    expect(convInfo.outShape).toEqual([1, 4, 3, 3, 3]);\n    // Should produce non-even padding with extra pixel at the back/right/bottom\n    expect(convInfo.padInfo.front).toBe(0);\n    expect(convInfo.padInfo.back).toBe(1);\n    expect(convInfo.padInfo.left).toBe(0);\n    expect(convInfo.padInfo.right).toBe(1);\n    expect(convInfo.padInfo.top).toBe(0);\n    expect(convInfo.padInfo.bottom).toBe(1);\n  });\n\n  it('2x2x2 conv over 3x3x3 array with valid pad', () => {\n    const inDepth = 6;\n    const outDepth = 16;\n    const inShape: [number, number, number, number, number] =\n        [1, inDepth, 3, 3, 3];\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computeConv3DInfo(\n        inShape, [2, 2, 2, inDepth, outDepth], stride, dilation, 'valid', false,\n        'channelsFirst');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(2);\n    expect(convInfo.outHeight).toEqual(2);\n    expect(convInfo.outWidth).toEqual(2);\n    expect(convInfo.outChannels).toEqual(16);\n    expect(convInfo.outShape).toEqual([1, 16, 2, 2, 2]);\n    // Should produce no padding.\n    expect(convInfo.padInfo.front).toBe(0);\n    expect(convInfo.padInfo.back).toBe(0);\n    expect(convInfo.padInfo.left).toBe(0);\n    expect(convInfo.padInfo.right).toBe(0);\n    expect(convInfo.padInfo.top).toBe(0);\n    expect(convInfo.padInfo.bottom).toBe(0);\n  });\n});\n\ndescribe('conv_util computeConv2DInfo roundingMode', () => {\n  const inChannels = 6;\n  const batchSize = 1;\n  const inSize = 5;\n  const inShape: [number, number, number, number] =\n      [batchSize, inSize, inSize, inChannels];\n  const fSize = 2;\n  const chMul = 12;\n  const stride = 2;\n  const dilation = 1;\n  const pad = 1;\n\n  it('Default truncate the output dimension of Conv Layer', () => {\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [fSize, fSize, inChannels, chMul], stride, dilation, pad);\n\n    expect(convInfo.outShape).toEqual([batchSize, 3, 3, chMul]);\n  });\n\n  it('Floor the output dimension of Conv Layer', () => {\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [fSize, fSize, inChannels, chMul], stride, dilation, pad,\n        'floor');\n\n    expect(convInfo.outShape).toEqual([batchSize, 3, 3, chMul]);\n  });\n\n  it('Round the output dimension of Conv Layer', () => {\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [fSize, fSize, inChannels, chMul], stride, dilation, pad,\n        'round');\n\n    expect(convInfo.outShape).toEqual([batchSize, 4, 4, chMul]);\n  });\n\n  it('Ceil the output dimension of Conv Layer', () => {\n    const convInfo = conv_util.computeConv2DInfo(\n        inShape, [fSize, fSize, inChannels, chMul], stride, dilation, pad,\n        'ceil');\n\n    expect(convInfo.outShape).toEqual([batchSize, 4, 4, chMul]);\n  });\n});\n\ndescribe('conv_util computePoolInfo roundingMode', () => {\n  const inChannels = 6;\n  const batchSize = 1;\n  const inSize = 5;\n  const inShape: [number, number, number, number] =\n      [batchSize, inSize, inSize, inChannels];\n  const fSize = 2;\n  const stride = 2;\n  const dilation = 1;\n  const pad = 1;\n\n  it('Default truncate the output dimension of Pool Layer', () => {\n    const poolInfo = conv_util.computePool2DInfo(\n        inShape, [fSize, fSize], stride, pad, dilation, 'floor');\n\n    expect(poolInfo.outShape).toEqual([batchSize, 3, 3, inChannels]);\n  });\n\n  it('Floor the output dimension of Pool Layer', () => {\n    const poolInfo = conv_util.computePool2DInfo(\n        inShape, [fSize, fSize], stride, pad, dilation, 'floor');\n\n    expect(poolInfo.outShape).toEqual([batchSize, 3, 3, inChannels]);\n  });\n\n  it('Round the output dimension of Pool Layer', () => {\n    const poolInfo = conv_util.computePool2DInfo(\n        inShape, [fSize, fSize], stride, pad, dilation, 'round');\n\n    expect(poolInfo.outShape).toEqual([batchSize, 4, 4, inChannels]);\n  });\n\n  it('Ceil the output dimension of Pool Layer', () => {\n    const poolInfo = conv_util.computePool2DInfo(\n        inShape, [fSize, fSize], stride, pad, dilation, 'ceil');\n\n    expect(poolInfo.outShape).toEqual([batchSize, 4, 4, inChannels]);\n  });\n});\n\ndescribe('conv_util computePool3dInfo', () => {\n  it('1x1x1 pool over 1x1x1 array with valid pad', () => {\n    const inShape: [number, number, number, number, number] = [1, 1, 1, 1, 1];\n    const filterSize = 1;\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computePool3DInfo(\n        inShape, filterSize, stride, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(1);\n    expect(convInfo.outHeight).toEqual(1);\n    expect(convInfo.outWidth).toEqual(1);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterDepth).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(1);\n    expect(convInfo.effectiveFilterHeight).toEqual(1);\n  });\n\n  it('1x1x1 pool over 3x3x3 array with valid pad', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const filterSize = 1;\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computePool3DInfo(\n        inShape, filterSize, stride, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(3);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterDepth).toEqual(1);\n    expect(convInfo.effectiveFilterWidth).toEqual(1);\n    expect(convInfo.effectiveFilterHeight).toEqual(1);\n  });\n\n  it('2x2x2 pool over 3x3x3 array with same pad', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const filterSize = 2;\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computePool3DInfo(\n        inShape, filterSize, stride, dilation, 'same');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(3);\n    expect(convInfo.outHeight).toEqual(3);\n    expect(convInfo.outWidth).toEqual(3);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterDepth).toEqual(2);\n    expect(convInfo.effectiveFilterWidth).toEqual(2);\n    expect(convInfo.effectiveFilterHeight).toEqual(2);\n    expect(convInfo.padInfo.top).toEqual(0);\n    expect(convInfo.padInfo.bottom).toEqual(1);\n    expect(convInfo.padInfo.left).toEqual(0);\n    expect(convInfo.padInfo.right).toEqual(1);\n    expect(convInfo.padInfo.front).toEqual(0);\n    expect(convInfo.padInfo.back).toEqual(1);\n    expect(convInfo.padInfo.type).toEqual('SAME');\n  });\n\n  it('2x2x2 pool over 3x3x3 array with valid pad', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const filterSize = 2;\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computePool3DInfo(\n        inShape, filterSize, stride, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(2);\n    expect(convInfo.outHeight).toEqual(2);\n    expect(convInfo.outWidth).toEqual(2);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterDepth).toEqual(2);\n    expect(convInfo.effectiveFilterWidth).toEqual(2);\n    expect(convInfo.effectiveFilterHeight).toEqual(2);\n  });\n\n  it('2x2x2 pool over 4x4x4 array with valid pad, stride 2', () => {\n    const inShape: [number, number, number, number, number] = [1, 4, 4, 4, 1];\n    const filterSize = 2;\n    const stride = 2;\n    const dilation = 1;\n    const convInfo = conv_util.computePool3DInfo(\n        inShape, filterSize, stride, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(2);\n    expect(convInfo.outHeight).toEqual(2);\n    expect(convInfo.outWidth).toEqual(2);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterDepth).toEqual(2);\n    expect(convInfo.effectiveFilterWidth).toEqual(2);\n    expect(convInfo.effectiveFilterHeight).toEqual(2);\n  });\n\n  it('2x2x2 pool over 3x3x3 array with valid pad, dilation 2', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const filterSize = 2;\n    const stride = 1;\n    const dilation = 2;\n    const convInfo = conv_util.computePool3DInfo(\n        inShape, filterSize, stride, dilation, 'valid');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(1);\n    expect(convInfo.outHeight).toEqual(1);\n    expect(convInfo.outWidth).toEqual(1);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterDepth).toEqual(3);\n    expect(convInfo.effectiveFilterWidth).toEqual(3);\n    expect(convInfo.effectiveFilterHeight).toEqual(3);\n  });\n\n  it('2x2x2 pool over 3x3x3 array with pad 1, roundingMode floor', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const filterSize = 2;\n    const stride = 1;\n    const dilation = 1;\n    const convInfo = conv_util.computePool3DInfo(\n        inShape, filterSize, stride, dilation, 1, 'floor');\n    expect(convInfo.batchSize).toEqual(1);\n    expect(convInfo.outDepth).toEqual(4);\n    expect(convInfo.outHeight).toEqual(4);\n    expect(convInfo.outWidth).toEqual(4);\n    expect(convInfo.outChannels).toEqual(1);\n    expect(convInfo.effectiveFilterDepth).toEqual(2);\n    expect(convInfo.effectiveFilterWidth).toEqual(2);\n    expect(convInfo.effectiveFilterHeight).toEqual(2);\n    expect(convInfo.padInfo.top).toEqual(1);\n    expect(convInfo.padInfo.bottom).toEqual(1);\n    expect(convInfo.padInfo.left).toEqual(1);\n    expect(convInfo.padInfo.right).toEqual(1);\n    expect(convInfo.padInfo.front).toEqual(1);\n    expect(convInfo.padInfo.back).toEqual(1);\n    expect(convInfo.padInfo.type).toEqual('NUMBER');\n  });\n\n  it('throws unknown dataFormat', () => {\n    const inShape: [number, number, number, number, number] = [1, 3, 3, 3, 1];\n    const filterSize = 2;\n    const stride = 1;\n    const dilation = 1;\n    const fakeDataFormat = 'fakeFormat' as 'NDHWC' | 'NCDHW';\n    expect(\n        () => conv_util.computePool3DInfo(\n            inShape, filterSize, stride, dilation, 1, 'floor', fakeDataFormat))\n        .toThrowError();\n  });\n});\n\ndescribe('conv_util convertConv2DDataFormat', () => {\n  it('convert NHWC to channelsLast', () => {\n    const dataFormat: 'NHWC'|'NCHW' = 'NHWC';\n    const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);\n    expect($dataFormat).toEqual('channelsLast');\n  });\n\n  it('convert NCHW to channelsFirst', () => {\n    const dataFormat: 'NHWC'|'NCHW' = 'NCHW';\n    const $dataFormat = conv_util.convertConv2DDataFormat(dataFormat);\n    expect($dataFormat).toEqual('channelsFirst');\n  });\n\n  it('throws unknown dataFormat', () => {\n    const dataFormat = 'FakeFormat';\n    expect(\n        () => conv_util.convertConv2DDataFormat(dataFormat as 'NHWC' | 'NCHW'))\n        .toThrowError();\n  });\n});\n"]}