{"version":3,"file":"nonmax_util.js","sourceRoot":"","sources":["../../src/ops/nonmax_util.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAGH,OAAO,KAAK,IAAI,MAAM,SAAS,CAAC;AAEhC,SAAS,qBAAqB,CAC1B,KAAe,EAAE,MAAgB,EAAE,aAAqB,EACxD,YAAoB,EAAE,cAAsB,EAAE,YAAqB;IAMrE,IAAI,YAAY,IAAI,IAAI,EAAE;QACxB,YAAY,GAAG,GAAG,CAAC;KACpB;IACD,IAAI,cAAc,IAAI,IAAI,EAAE;QAC1B,cAAc,GAAG,MAAM,CAAC,iBAAiB,CAAC;KAC3C;IACD,IAAI,YAAY,IAAI,IAAI,EAAE;QACxB,YAAY,GAAG,GAAG,CAAC;KACpB;IAED,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IAElD,IAAI,CAAC,MAAM,CACP,CAAC,IAAI,YAAY,IAAI,YAAY,IAAI,CAAC,EACtC,GAAG,EAAE,CAAC,4CAA4C,YAAY,GAAG,CAAC,CAAC;IACvE,IAAI,CAAC,MAAM,CACP,KAAK,CAAC,IAAI,KAAK,CAAC,EAChB,GAAG,EAAE,CAAC,+CAA+C,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;IACxE,IAAI,CAAC,MAAM,CACP,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EACpB,GAAG,EAAE,CACD,oDAAoD,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC9E,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,4BAA4B,CAAC,CAAC;IACnE,IAAI,CAAC,MAAM,CACP,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAC5B,GAAG,EAAE,CAAC,sDAAsD,QAAQ,IAAI;QACpE,WAAW,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACtC,IAAI,CAAC,MAAM,CACP,CAAC,IAAI,YAAY,IAAI,YAAY,IAAI,CAAC,EACtC,GAAG,EAAE,CAAC,4CAA4C,YAAY,GAAG,CAAC,CAAC;IACvE,OAAO,EAAC,aAAa,EAAE,YAAY,EAAE,cAAc,EAAE,YAAY,EAAC,CAAC;AACrE,CAAC;AAED,OAAO,EAAC,qBAAqB,EAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport * as util from '../util';\n\nfunction nonMaxSuppSanityCheck(\n    boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number, softNmsSigma?: number): {\n  maxOutputSize: number,\n  iouThreshold: number,\n  scoreThreshold: number,\n  softNmsSigma: number\n} {\n  if (iouThreshold == null) {\n    iouThreshold = 0.5;\n  }\n  if (scoreThreshold == null) {\n    scoreThreshold = Number.NEGATIVE_INFINITY;\n  }\n  if (softNmsSigma == null) {\n    softNmsSigma = 0.0;\n  }\n\n  const numBoxes = boxes.shape[0];\n  maxOutputSize = Math.min(maxOutputSize, numBoxes);\n\n  util.assert(\n      0 <= iouThreshold && iouThreshold <= 1,\n      () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n  util.assert(\n      boxes.rank === 2,\n      () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n  util.assert(\n      boxes.shape[1] === 4,\n      () =>\n          `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n  util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n  util.assert(\n      scores.shape[0] === numBoxes,\n      () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +\n          `but was ${scores.shape[0]}`);\n  util.assert(\n      0 <= softNmsSigma && softNmsSigma <= 1,\n      () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n  return {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma};\n}\n\nexport {nonMaxSuppSanityCheck};\n"]}