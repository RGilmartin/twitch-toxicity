{"version":3,"file":"rand_test.js","sourceRoot":"","sources":["../../src/ops/rand_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '..';\nimport * as tf from '../index';\nimport {ALL_ENVS, describeWithFlags} from '../jasmine_util';\nimport {expectValuesInRange} from '../test_util';\n\nimport {MPRandGauss, RandGamma, UniformRandom} from './rand_util';\nimport {expectArrayInMeanStdRange, jarqueBeraNormalityTest} from './rand_util';\n\ndescribeWithFlags('rand', ALL_ENVS, () => {\n  it('should return a random 1D float32 array', async () => {\n    const shape: [number] = [10];\n\n    // Enusre defaults to float32 w/o type:\n    let result = tf.rand(shape, () => util.randUniform(0, 2));\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 2);\n\n    result = tf.rand(shape, () => util.randUniform(0, 1.5));\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 1.5);\n  });\n\n  it('should return a random 1D int32 array', async () => {\n    const shape: [number] = [10];\n    const result = tf.rand(shape, () => util.randUniform(0, 2), 'int32');\n    expect(result.dtype).toBe('int32');\n    expectValuesInRange(await result.data(), 0, 2);\n  });\n\n  it('should return a random 1D bool array', async () => {\n    const shape: [number] = [10];\n    const result = tf.rand(shape, () => util.randUniform(0, 1), 'bool');\n    expect(result.dtype).toBe('bool');\n    expectValuesInRange(await result.data(), 0, 1);\n  });\n\n  it('should return a random 2D float32 array', async () => {\n    const shape = [3, 4];\n\n    // Enusre defaults to float32 w/o type:\n    let result = tf.rand(shape, () => util.randUniform(0, 2.5));\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 2.5);\n\n    result = tf.rand(shape, () => util.randUniform(0, 1.5), 'float32');\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 1.5);\n  });\n\n  it('should return a random 2D int32 array', async () => {\n    const shape = [3, 4];\n    const result = tf.rand(shape, () => util.randUniform(0, 2), 'int32');\n    expect(result.dtype).toBe('int32');\n    expectValuesInRange(await result.data(), 0, 2);\n  });\n\n  it('should return a random 2D bool array', async () => {\n    const shape = [3, 4];\n    const result = tf.rand(shape, () => util.randUniform(0, 1), 'bool');\n    expect(result.dtype).toBe('bool');\n    expectValuesInRange(await result.data(), 0, 1);\n  });\n\n  it('should return a random 3D float32 array', async () => {\n    const shape = [3, 4, 5];\n\n    // Enusre defaults to float32 w/o type:\n    let result = tf.rand(shape, () => util.randUniform(0, 2.5));\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 2.5);\n\n    result = tf.rand(shape, () => util.randUniform(0, 1.5), 'float32');\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 1.5);\n  });\n\n  it('should return a random 3D int32 array', async () => {\n    const shape = [3, 4, 5];\n    const result = tf.rand(shape, () => util.randUniform(0, 2), 'int32');\n    expect(result.dtype).toBe('int32');\n    expectValuesInRange(await result.data(), 0, 2);\n  });\n\n  it('should return a random 3D bool array', async () => {\n    const shape = [3, 4, 5];\n    const result = tf.rand(shape, () => util.randUniform(0, 1), 'bool');\n    expect(result.dtype).toBe('bool');\n    expectValuesInRange(await result.data(), 0, 1);\n  });\n\n  it('should return a random 4D float32 array', async () => {\n    const shape = [3, 4, 5, 6];\n\n    // Enusre defaults to float32 w/o type:\n    let result = tf.rand(shape, () => util.randUniform(0, 2.5));\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 2.5);\n\n    result = tf.rand(shape, () => util.randUniform(0, 1.5));\n    expect(result.dtype).toBe('float32');\n    expectValuesInRange(await result.data(), 0, 1.5);\n  });\n\n  it('should return a random 4D int32 array', async () => {\n    const shape = [3, 4, 5, 6];\n    const result = tf.rand(shape, () => util.randUniform(0, 2), 'int32');\n    expect(result.dtype).toBe('int32');\n    expectValuesInRange(await result.data(), 0, 2);\n  });\n\n  it('should return a random 4D bool array', async () => {\n    const shape = [3, 4, 5, 6];\n    const result = tf.rand(shape, () => util.randUniform(0, 1), 'bool');\n    expect(result.dtype).toBe('bool');\n    expectValuesInRange(await result.data(), 0, 1);\n  });\n});\n\nfunction isFloat(n: number): boolean {\n  return Number(n) === n && n % 1 !== 0;\n}\n\ndescribe('MPRandGauss', () => {\n  const EPSILON = 0.05;\n  const SEED = 2002;\n\n  it('should default to float32 numbers', () => {\n    const rand = new MPRandGauss(0, 1.5);\n    expect(isFloat(rand.nextValue())).toBe(true);\n  });\n\n  it('should handle a mean/stdv of float32 numbers', () => {\n    const rand =\n        new MPRandGauss(0, 1.5, 'float32', false /* truncated */, SEED);\n    const values = [];\n    const size = 10000;\n    for (let i = 0; i < size; i++) {\n      values.push(rand.nextValue());\n    }\n    expectArrayInMeanStdRange(values, 0, 1.5, EPSILON);\n    jarqueBeraNormalityTest(values);\n  });\n\n  it('should handle int32 numbers', () => {\n    const rand = new MPRandGauss(0, 1, 'int32');\n    expect(isFloat(rand.nextValue())).toBe(false);\n  });\n\n  it('should handle a mean/stdv of int32 numbers', () => {\n    const rand = new MPRandGauss(0, 2, 'int32', false /* truncated */, SEED);\n    const values = [];\n    const size = 10000;\n    for (let i = 0; i < size; i++) {\n      values.push(rand.nextValue());\n    }\n    expectArrayInMeanStdRange(values, 0, 2, EPSILON);\n    jarqueBeraNormalityTest(values);\n  });\n\n  it('Should not have a more than 2x std-d from mean for truncated values',\n     () => {\n       const stdv = 1.5;\n       const rand = new MPRandGauss(0, stdv, 'float32', true /* truncated */);\n       for (let i = 0; i < 1000; i++) {\n         expect(Math.abs(rand.nextValue())).toBeLessThan(stdv * 2);\n       }\n     });\n});\n\ndescribe('RandGamma', () => {\n  const SEED = 2002;\n\n  it('should default to float32 numbers', () => {\n    const rand = new RandGamma(2, 2, 'float32');\n    expect(isFloat(rand.nextValue())).toBe(true);\n  });\n\n  it('should handle an alpha/beta of float32 numbers', () => {\n    const rand = new RandGamma(2, 2, 'float32', SEED);\n    const values = [];\n    const size = 10000;\n    for (let i = 0; i < size; i++) {\n      values.push(rand.nextValue());\n    }\n    expectValuesInRange(values, 0, 30);\n  });\n\n  it('should handle int32 numbers', () => {\n    const rand = new RandGamma(2, 2, 'int32');\n    expect(isFloat(rand.nextValue())).toBe(false);\n  });\n\n  it('should handle an alpha/beta of int32 numbers', () => {\n    const rand = new RandGamma(2, 2, 'int32', SEED);\n    const values = [];\n    const size = 10000;\n    for (let i = 0; i < size; i++) {\n      values.push(rand.nextValue());\n    }\n    expectValuesInRange(values, 0, 30);\n  });\n});\n\ndescribe('UniformRandom', () => {\n  it('float32, no seed', () => {\n    const min = 0.2;\n    const max = 0.24;\n    const dtype = 'float32';\n    const xs: number[] = [];\n    for (let i = 0; i < 10; ++i) {\n      const rand = new UniformRandom(min, max, dtype);\n      const x = rand.nextValue();\n      xs.push(x);\n    }\n    expect(Math.min(...xs)).toBeGreaterThanOrEqual(min);\n    expect(Math.max(...xs)).toBeLessThan(max);\n  });\n\n  it('int32, no seed', () => {\n    const min = 13;\n    const max = 37;\n    const dtype = 'int32';\n    const xs: number[] = [];\n    for (let i = 0; i < 10; ++i) {\n      const rand = new UniformRandom(min, max, dtype);\n      const x = rand.nextValue();\n      expect(Number.isInteger(x)).toEqual(true);\n      xs.push(x);\n    }\n    expect(Math.min(...xs)).toBeGreaterThanOrEqual(min);\n    expect(Math.max(...xs)).toBeLessThanOrEqual(max);\n  });\n\n  it('seed is number', () => {\n    const min = -1.2;\n    const max = -0.4;\n    const dtype = 'float32';\n    const seed = 1337;\n    const xs: number[] = [];\n    for (let i = 0; i < 10; ++i) {\n      const rand = new UniformRandom(min, max, dtype, seed);\n      const x = rand.nextValue();\n      expect(x).toBeGreaterThanOrEqual(min);\n      expect(x).toBeLessThan(max);\n      xs.push(x);\n    }\n    // Assert deterministic results.\n    expect(Math.min(...xs)).toEqual(Math.max(...xs));\n  });\n\n  it('seed === null', () => {\n    const min = 0;\n    const max = 1;\n    const dtype = 'float32';\n    const seed: number = null;\n    const rand = new UniformRandom(min, max, dtype, seed);\n    const x = rand.nextValue();\n    expect(x).toBeGreaterThanOrEqual(0);\n    expect(x).toBeLessThan(1);\n  });\n\n  it('seed === undefined', () => {\n    const min = 0;\n    const max = 1;\n    const dtype = 'float32';\n    const seed: number = undefined;\n    const rand = new UniformRandom(min, max, dtype, seed);\n    const x = rand.nextValue();\n    expect(x).toBeGreaterThanOrEqual(0);\n    expect(x).toBeLessThan(1);\n  });\n});\n"]}