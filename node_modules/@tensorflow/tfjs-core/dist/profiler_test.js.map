{"version":3,"file":"profiler_test.js","sourceRoot":"","sources":["../src/profiler_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimer, BackendTimingInfo} from './backends/backend';\nimport * as tf from './index';\nimport {ALL_ENVS, describeWithFlags, SYNC_BACKEND_ENVS} from './jasmine_util';\nimport {checkComputationForErrors, KernelProfile, Logger, Profiler} from './profiler';\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {TypedArray} from './types';\n\nclass TestBackendTimer implements BackendTimer {\n  private counter = 1;\n  constructor(\n      private delayMs: number, private queryTimeMs: number,\n      private extraInfo: string) {}\n\n  timerAvailable() {\n    return true;\n  }\n\n  async time(query: () => void): Promise<BackendTimingInfo> {\n    query();\n    const kernelMs = await new Promise<number>(\n        resolve => setTimeout(\n            () => resolve(this.queryTimeMs * this.counter++), this.delayMs));\n    return {kernelMs, getExtraProfileInfo: () => this.extraInfo};\n  }\n}\n\nclass TestLogger extends Logger {\n  logKernelProfile(\n      name: string, result: Tensor, vals: TypedArray, timeMs: number) {}\n}\n\nfunction promiseCheckWrapper(acturalValPromise: Promise<{}>, truthVal: {}) {\n  return acturalValPromise.then(acturalVal => {\n    expect(acturalVal).toEqual(truthVal);\n  });\n}\n\nfunction checkKernelProfile(acturalVal: KernelProfile, truthVal: {\n  kernelName: string,\n  outputs: Tensor[],\n  timeMs: number|{error: string},\n  inputs: NamedTensorMap,\n  extraInfo: string\n}) {\n  expect(acturalVal.kernelName).toBe(truthVal.kernelName);\n  expect(acturalVal.inputs).toBe(truthVal.inputs);\n  acturalVal.outputs.forEach((output, index) => {\n    expect(output).toBe(truthVal.outputs[index]);\n  });\n\n  const promiseContainer = [\n    promiseCheckWrapper(acturalVal.timeMs, truthVal.timeMs),\n    promiseCheckWrapper(acturalVal.extraInfo, truthVal.extraInfo),\n  ];\n  return Promise.all(promiseContainer);\n}\n\ndescribeWithFlags('profiler.Profiler', SYNC_BACKEND_ENVS, () => {\n  it('profiles simple function', doneFn => {\n    const delayMs = 5;\n    const queryTimeMs = 10;\n    const inputs = {'x': tf.tensor1d([1])};\n    const extraInfo = '';\n    const timer = new TestBackendTimer(delayMs, queryTimeMs, extraInfo);\n    const logger = new TestLogger();\n    const profiler = new Profiler(timer, logger);\n\n    spyOn(timer, 'time').and.callThrough();\n    spyOn(logger, 'logKernelProfile').and.callThrough();\n\n    const timeSpy = timer.time as jasmine.Spy;\n\n    let kernelCalled = false;\n    const result = 1;\n    const resultScalar = tf.scalar(result);\n\n    const kernelProfile = profiler.profileKernel('MatMul', inputs, () => {\n      kernelCalled = true;\n      return [resultScalar];\n    });\n    setTimeout(() => {\n      expect(timeSpy.calls.count()).toBe(1);\n      expect(kernelCalled).toBe(true);\n\n      checkKernelProfile(kernelProfile, {\n        kernelName: 'MatMul',\n        outputs: [resultScalar],\n        timeMs: queryTimeMs,\n        inputs,\n        extraInfo,\n      }).then(() => doneFn());\n    }, delayMs * 2);\n  });\n\n  it('profiles nested kernel with optional inputs', doneFn => {\n    const delayMs = 5;\n    const queryTimeMs = 10;\n    const inputs: {'x': tf.Tensor,\n                   'bias': null} = {'x': tf.tensor1d([1]), 'bias': null};\n    const extraInfo = '';\n    const timer = new TestBackendTimer(delayMs, queryTimeMs, extraInfo);\n    const logger = new TestLogger();\n    const profiler = new Profiler(timer, logger);\n\n    spyOn(timer, 'time').and.callThrough();\n    spyOn(logger, 'logKernelProfile').and.callThrough();\n    const timeSpy = timer.time as jasmine.Spy;\n\n    let matmulKernelCalled = false;\n    let maxKernelCalled = false;\n    const result = 1;\n    const resultScalar = tf.scalar(result);\n\n    let innerKernelProfile: KernelProfile;\n    const outerKernelProfile = profiler.profileKernel('MatMul', inputs, () => {\n      innerKernelProfile = profiler.profileKernel('Max', inputs, () => {\n        maxKernelCalled = true;\n        return [resultScalar];\n      });\n      matmulKernelCalled = true;\n      return innerKernelProfile.outputs;\n    });\n\n    setTimeout(() => {\n      expect(timeSpy.calls.count()).toBe(2);\n      expect(matmulKernelCalled).toBe(true);\n      expect(maxKernelCalled).toBe(true);\n\n      const checkInnerKernelProfile = checkKernelProfile(innerKernelProfile, {\n        kernelName: 'Max',\n        outputs: [resultScalar],\n        timeMs: queryTimeMs,\n        inputs,\n        extraInfo\n      });\n      const checkOuterKernelProfile = checkKernelProfile(outerKernelProfile, {\n        kernelName: 'MatMul',\n        outputs: [resultScalar],\n        timeMs: queryTimeMs * 2,\n        inputs,\n        extraInfo\n      });\n      Promise.all([checkInnerKernelProfile, checkOuterKernelProfile])\n          .then(() => doneFn());\n    }, delayMs * 2);\n  });\n\n  it('log kernelProfile', doneFn => {\n    const delayMs = 5;\n    const queryTimeMs = 10;\n    const inputs = {'x': tf.tensor1d([1])};\n    const extraInfo = '';\n    const timer = new TestBackendTimer(delayMs, queryTimeMs, extraInfo);\n    const logger = new TestLogger();\n    const profiler = new Profiler(timer, logger);\n\n    spyOn(logger, 'logKernelProfile').and.callThrough();\n    const logKernelProfileSpy = logger.logKernelProfile as jasmine.Spy;\n\n    const result = 1;\n    const resultScalar = tf.scalar(result);\n\n    const kernelProfiles = profiler.profileKernel('MatMul', inputs, () => {\n      return [resultScalar];\n    });\n    profiler.logKernelProfile(kernelProfiles);\n\n    setTimeout(() => {\n      expect(logKernelProfileSpy.calls.count()).toBe(1);\n\n      expect(logKernelProfileSpy.calls.first().args).toEqual([\n        'MatMul', resultScalar, new Float32Array([result]), queryTimeMs, inputs,\n        extraInfo\n      ]);\n      doneFn();\n    }, delayMs * 2);\n  });\n});\n\ndescribe('profiler.checkComputationForErrors', () => {\n  beforeAll(() => {\n    // Silence warnings.\n    spyOn(console, 'warn');\n  });\n\n  it('Float32Array has NaN', () => {\n    expect(checkComputationForErrors(\n               new Float32Array([1, 2, 3, NaN, 4, 255]), 'float32', 'test'))\n        .toBe(true);\n  });\n\n  it('Float32Array has Infinity', () => {\n    expect(\n        checkComputationForErrors(\n            new Float32Array([1, 2, 3, Infinity, 4, 255]), 'float32', 'test'))\n        .toBe(true);\n  });\n\n  it('Float32Array no NaN', () => {\n    // Int32 and Bool NaNs should not trigger an error.\n    expect(checkComputationForErrors(\n               new Float32Array([1, 2, 3, -1, 4, 255]), 'float32', 'test'))\n        .toBe(false);\n  });\n});\n\ndescribeWithFlags('profiler.Logger', ALL_ENVS, () => {\n  it('skips logging for undefined input node in input tensor map', () => {\n    const kernelName = 'FusedConv2D';\n    const vals = new Float32Array(1);\n    const outputs = tf.tensor1d([1]);\n    const timeMs = 10;\n    const inputs: NamedTensorMap = {\n      'x': tf.tensor1d([1]),\n      'filter': tf.tensor1d([1]),\n      'bias': tf.tensor1d([1]),\n      'preluActivationWeights': undefined\n    };\n    const extraInfo = '';\n    const logger = new Logger();\n    spyOn(console, 'log');\n    const consoleLogSpy = console.log as jasmine.Spy;\n\n    logger.logKernelProfile(\n        kernelName, outputs, vals, timeMs, inputs, extraInfo);\n\n    expect(consoleLogSpy.calls.first().args)\n        .not.toContain('preluActivationWeights');\n  });\n});\n"]}