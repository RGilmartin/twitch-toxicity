{"version":3,"file":"Dilation2D_grad.js","sourceRoot":"","sources":["../../src/gradients/Dilation2D_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AACH,OAAO,EAAC,MAAM,EAAC,MAAM,WAAW,CAAC;AACjC,OAAO,EAAC,UAAU,EAAE,wBAAwB,EAAkC,uBAAuB,EAAgC,MAAM,iBAAiB,CAAC;AAM7J,MAAM,CAAC,MAAM,oBAAoB,GAAe;IAC9C,UAAU,EAAE,UAAU;IACtB,YAAY,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC;IAC7B,QAAQ,EAAE,CAAC,EAAY,EAAE,KAAe,EAAE,KAAmB,EAAE,EAAE;QAC/D,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,GAAG,KAA6B,CAAC;QAElD,MAAM,WAAW,GAAkC,EAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAC,CAAC;QACnE,MAAM,YAAY,GAAmC,EAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAC,CAAC;QAErE,OAAO;YACL,CAAC,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,SAAS,CACrB,uBAAuB,EAAE,WAAmC,EAAE,KAAK,CAAC;YACxE,MAAM,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,SAAS,CAC1B,wBAAwB,EAAE,YAAoC,EAAE,KAAK,CAAC;SAC3E,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Dilation2D, Dilation2DBackpropFilter, Dilation2DBackpropFilterInputs, Dilation2DBackpropInput, Dilation2DBackpropInputInputs} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\n\nexport const dilation2dGradConfig: GradConfig = {\n  kernelName: Dilation2D,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy: Tensor4D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x, filter] = saved as [Tensor4D, Tensor3D];\n\n    const inputInputs: Dilation2DBackpropInputInputs = {x, filter, dy};\n    const filterInputs: Dilation2DBackpropFilterInputs = {x, filter, dy};\n\n    return {\n      x: () => ENGINE.runKernel(\n          Dilation2DBackpropInput, inputInputs as {} as NamedTensorMap, attrs),\n      filter: () => ENGINE.runKernel(\n          Dilation2DBackpropFilter, filterInputs as {} as NamedTensorMap, attrs)\n    };\n  }\n};\n"]}