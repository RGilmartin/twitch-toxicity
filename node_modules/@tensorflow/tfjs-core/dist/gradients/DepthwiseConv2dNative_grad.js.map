{"version":3,"file":"DepthwiseConv2dNative_grad.js","sourceRoot":"","sources":["../../src/gradients/DepthwiseConv2dNative_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AACH,OAAO,EAAC,qBAAqB,EAA6B,MAAM,iBAAiB,CAAC;AAElF,OAAO,KAAK,SAAS,MAAM,kBAAkB,CAAC;AAC9C,OAAO,EAAC,mCAAmC,EAAC,MAAM,gDAAgD,CAAC;AACnG,OAAO,EAAC,kCAAkC,EAAC,MAAM,+CAA+C,CAAC;AAEjG,OAAO,KAAK,IAAI,MAAM,SAAS,CAAC;AAEhC,MAAM,CAAC,MAAM,+BAA+B,GAAe;IACzD,UAAU,EAAE,qBAAqB;IACjC,YAAY,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC;IAC7B,QAAQ,EAAE,CAAC,EAAY,EAAE,KAAe,EAAE,KAAmB,EAAE,EAAE;QAC/D,MAAM,EAAC,SAAS,EAAE,OAAO,EAAE,GAAG,EAAE,eAAe,EAAC,GAC5C,KAAyC,CAAC;QAE9C,MAAM,UAAU,GAAG,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAE1D,IAAI,CAAC,MAAM,CACP,SAAS,CAAC,iBAAiB,CAAC,UAAU,CAAC,EACvC,GAAG,EAAE,CAAC,6DAA6D;YAC/D,sDAAsD;YACtD,IAAI,UAAU,GAAG,CAAC,CAAC;QAE3B,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,GAAG,KAA6B,CAAC;QAElD,IAAI,CAAC,MAAM,CACP,CAAC,CAAC,IAAI,KAAK,CAAC,EACZ,GAAG,EAAE,CAAC,4DAA4D;YAC9D,wBAAwB,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAC,MAAM,CACP,MAAM,CAAC,IAAI,KAAK,CAAC,EACjB,GAAG,EAAE,CAAC,6DAA6D;YAC/D,wBAAwB,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC;QAChD,IAAI,CAAC,MAAM,CACP,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAC9B,GAAG,EAAE,CAAC,wDAAwD;YAC1D,aAAa,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,wCAAwC;YAC/D,aAAa,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAEzC,IAAI,CAAC,MAAM,CACP,SAAS,CAAC,8BAA8B,CAAC,OAAO,EAAE,UAAU,CAAC,EAC7D,GAAG,EAAE,CAAC,0DAA0D;YAC5D,qCAAqC,OAAO,iBAAiB;YAC7D,IAAI,UAAU,IAAI,CAAC,CAAC;QAE5B,IAAI,eAAe,IAAI,IAAI,EAAE;YAC3B,IAAI,CAAC,MAAM,CACP,IAAI,CAAC,KAAK,CAAC,GAAa,CAAC,EACzB,GAAG,EAAE,CACD,+DAA+D;gBAC/D,mBAAmB,eAAe,gBAAgB,GAAG,GAAG,CAAC,CAAC;SACnE;QAED,OAAO;YACL,CAAC,EAAE,GAAG,EAAE,CAAC,kCAAkC,CACvC,CAAC,CAAC,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,eAAe,CAAC;YAClE,MAAM,EAAE,GAAG,EAAE,CAAC,mCAAmC,CAC7C,CAAC,EAAE,EAAE,EAAE,MAAM,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,eAAe,CAAC;SACnE,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport * as conv_util from '../ops/conv_util';\nimport {depthwiseConv2dNativeBackpropFilter} from '../ops/depthwise_conv2d_native_backprop_filter';\nimport {depthwiseConv2dNativeBackpropInput} from '../ops/depthwise_conv2d_native_backprop_input';\nimport {Tensor, Tensor4D} from '../tensor';\nimport * as util from '../util';\n\nexport const depthwiseConv2dNativeGradConfig: GradConfig = {\n  kernelName: DepthwiseConv2dNative,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy: Tensor4D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {dilations, strides, pad, dimRoundingMode} =\n        attrs as {} as DepthwiseConv2dNativeAttrs;\n\n    const $dilations = dilations == null ? [1, 1] : dilations;\n\n    util.assert(\n        conv_util.tupleValuesAreOne($dilations),\n        () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${$dilations}'`);\n\n    const [x, filter] = saved as [Tensor4D, Tensor4D];\n\n    util.assert(\n        x.rank === 4,\n        () => `Error in gradient of depthwiseConv2dNative: input must be ` +\n            `rank 4, but got rank ${x.rank}.`);\n    util.assert(\n        filter.rank === 4,\n        () => `Error in gradient of depthwiseConv2dNative: filter must be ` +\n            `rank 4, but got rank ${filter.rank}.`);\n    util.assert(\n        x.shape[3] === filter.shape[2],\n        () => `Error in gradient of depthwiseConv2d: number of input ` +\n            `channels (${x.shape[3]}) must match the inChannels dimension ` +\n            `in filter ${filter.shape[2]}.`);\n\n    util.assert(\n        conv_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n        () => 'Error in gradient of depthwiseConv2d: Either strides or ' +\n            `dilations must be  1. Got strides ${strides} and dilations ` +\n            `'${$dilations}'.`);\n\n    if (dimRoundingMode != null) {\n      util.assert(\n          util.isInt(pad as number),\n          () =>\n              `Error in depthwiseConv2d: pad must be an integer when using, ` +\n              `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n\n    return {\n      x: () => depthwiseConv2dNativeBackpropInput(\n          x.shape, dy, filter, strides, pad, dilations, dimRoundingMode),\n      filter: () => depthwiseConv2dNativeBackpropFilter(\n          x, dy, filter.shape, strides, pad, dilations, dimRoundingMode),\n    };\n  }\n};\n"]}