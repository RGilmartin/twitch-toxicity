{"version":3,"file":"model_types.js","sourceRoot":"","sources":["../src/model_types.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {DataType} from './types';\n\nexport interface ModelPredictConfig {\n  /**\n   * Optional. Batch size (Integer). If unspecified, it will default to 32.\n   */\n  batchSize?: number;\n\n  /**\n   * Optional. Verbosity mode. Defaults to false.\n   */\n  verbose?: boolean;\n}\n\n/**\n * Interface for model input/output tensor info.\n */\nexport interface ModelTensorInfo {\n  // Name of the tensor.\n  name: string;\n  // Tensor shape information, Optional.\n  shape?: number[];\n  // Data type of the tensor.\n  dtype: DataType;\n  // TensorFlow native Data type of the tensor.\n  tfDtype?: string;\n}\n\n/**\n * Common interface for a machine learning model that can do inference.\n */\nexport interface InferenceModel {\n  /**\n   * Return the array of input tensor info.\n   */\n  readonly inputs: ModelTensorInfo[];\n\n  /**\n   * Return the array of output tensor info.\n   */\n  readonly outputs: ModelTensorInfo[];\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a Tensor. For models with multiple inputs, inputs\n   * params should be in either Tensor[] if the input order is fixed, or\n   * otherwise NamedTensorMap format.\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size.\n   *\n   * @returns Inference result tensors. The output would be single Tensor if\n   * model has single output node, otherwise Tensor[] or NamedTensorMap[] will\n   * be returned for model with multiple outputs.\n   */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap;\n\n  /**\n   * Single Execute the inference for the input tensors and return activation\n   * values for specified output node names without batching.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a Tensor. For models with multiple inputs, inputs\n   * params should be in either Tensor[] if the input order is fixed, or\n   * otherwise NamedTensorMap format.\n   *\n   * @param outputs string|string[]. List of output node names to retrieve\n   * activation from.\n   *\n   * @returns Activation values for the output nodes result tensors. The return\n   * type matches specified parameter outputs type. The output would be single\n   * Tensor if single output is specified, otherwise Tensor[] for multiple\n   * outputs.\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs: string|string[]):\n      Tensor|Tensor[];\n}\n\n/**\n * @deprecated Deprecated interface for SavedModel/GraphModel MetaGraph info.\n *     User MetaGraph instead.\n */\nexport interface MetaGraphInfo {\n  tags: string[];\n  signatureDefs: SignatureDefInfo;\n}\n\n/**\n * @deprecated Deprecated interface for SavedModel/GraphModel SignatureDef info.\n *     User SignatureDef instead.\n */\nexport interface SignatureDefInfo {\n  [key: string]: {\n    inputs: {[key: string]: SavedModelTensorInfo};\n    outputs: {[key: string]: SavedModelTensorInfo};\n  };\n}\n\n/**\n * @deprecated Deprecated interface for SavedModel/GraphModel signature\n *     input/output Tensor info. User ModelTensorInfo instead.\n */\nexport interface SavedModelTensorInfo {\n  dtype: string;\n  shape: number[];\n  name: string;\n}\n\n/**\n * Interface for SavedModel/GraphModel MetaGraph info.\n */\nexport interface MetaGraph {\n  tags: string[];\n  signatureDefs: SignatureDef;\n}\n\n/**\n * Interface for SavedModel/GraphModel SignatureDef entry.\n */\nexport interface SignatureDefEntry {\n  inputs: {[key: string]: ModelTensorInfo};\n  outputs: {[key: string]: ModelTensorInfo};\n}\n\n/**\n * Interface for SavedModel/GraphModel SignatureDef info.\n */\nexport interface SignatureDef {\n  [key: string]: SignatureDefEntry;\n}\n"]}