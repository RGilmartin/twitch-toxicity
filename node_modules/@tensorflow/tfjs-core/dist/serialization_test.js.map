{"version":3,"file":"serialization_test.js","sourceRoot":"","sources":["../src/serialization_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAC,SAAS,EAAC,MAAM,wBAAwB,CAAC;AACjD,OAAO,EAAa,aAAa,EAAE,gBAAgB,EAAC,MAAM,iBAAiB,CAAC;AAG5E,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,MAAM,eAAe,GAAG,mBAAmB,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;IAC3D,MAAM,gBAAiB,SAAQ,SAAS;QAEtC;YACE,KAAK,EAAE,CAAC;QACV,CAAC;QACD,cAAc,CAAC,iBAAmC,IAAG,CAAC;QAEtD,SAAS;YACP,OAAO,EAAE,CAAC;QACZ,CAAC;;IARM,0BAAS,GAAG,eAAe,CAAC;IAUrC,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,aAAa,CAAC,gBAAgB,CAAC,CAAC;QAChC,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC;aAClE,OAAO,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,MAAM,yBAA0B,SAAQ,SAAS;QAC/C;YACE,KAAK,EAAE,CAAC;QACV,CAAC;QACD,cAAc,CAAC,iBAAmC,IAAG,CAAC;QAEtD,SAAS;YACP,OAAO,EAAE,CAAC;QACZ,CAAC;KACF;IACD,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,kCAAkC;QAClC,MAAM,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,yBAAgC,CAAC,CAAC;aACxD,YAAY,CAAC,6CAA6C,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,MAAM,2BAA4B,SAAQ,SAAS;QAEjD;YACE,KAAK,EAAE,CAAC;QACV,CAAC;QACD,cAAc,CAAC,iBAAmC,IAAG,CAAC;QAEtD,SAAS;YACP,OAAO,EAAE,CAAC;QACZ,CAAC;;IARM,qCAAS,GAAG,EAAE,CAAC;IAUxB,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,2BAA2B,CAAC,CAAC;aACnD,YAAY,CAAC,sCAAsC,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,MAAM,+BAAgC,SAAQ,SAAS;QAErD;YACE,KAAK,EAAE,CAAC;QACV,CAAC;QACD,cAAc,CAAC,iBAAmC,IAAG,CAAC;QAEtD,SAAS;YACP,OAAO,EAAE,CAAC;QACZ,CAAC;;IARM,yCAAS,GAAG,EAAE,CAAC;IAUxB,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,kCAAkC;QAClC,MAAM,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,+BAAsC,CAAC,CAAC;aAC9D,YAAY,CAAC,iDAAiD,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Optimizer} from './optimizers/optimizer';\nimport {ConfigDict, registerClass, SerializationMap} from './serialization';\nimport {NamedVariableMap} from './tensor_types';\n\ndescribe('registerClass', () => {\n  const randomClassName = `OptimizerForTest${Math.random()}`;\n  class OptimizerForTest extends Optimizer {\n    static className = randomClassName;\n    constructor() {\n      super();\n    }\n    applyGradients(variableGradients: NamedVariableMap) {}\n\n    getConfig(): ConfigDict {\n      return {};\n    }\n  }\n  it('registerClass succeeds', () => {\n    registerClass(OptimizerForTest);\n    expect(SerializationMap.getMap().classNameMap[randomClassName] != null)\n        .toEqual(true);\n  });\n\n  class OptimizerWithoutClassName extends Optimizer {\n    constructor() {\n      super();\n    }\n    applyGradients(variableGradients: NamedVariableMap) {}\n\n    getConfig(): ConfigDict {\n      return {};\n    }\n  }\n  it('registerClass fails on missing className', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => registerClass(OptimizerWithoutClassName as any))\n        .toThrowError(/does not have the static className property/);\n  });\n\n  class OptimizerWithEmptyClassName extends Optimizer {\n    static className = '';\n    constructor() {\n      super();\n    }\n    applyGradients(variableGradients: NamedVariableMap) {}\n\n    getConfig(): ConfigDict {\n      return {};\n    }\n  }\n  it('registerClass fails on missing className', () => {\n    expect(() => registerClass(OptimizerWithEmptyClassName))\n        .toThrowError(/has an empty-string as its className/);\n  });\n\n  class OptimizerWithNonStringClassName extends Optimizer {\n    static className = 42;\n    constructor() {\n      super();\n    }\n    applyGradients(variableGradients: NamedVariableMap) {}\n\n    getConfig(): ConfigDict {\n      return {};\n    }\n  }\n  it('registerClass fails on missing className', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => registerClass(OptimizerWithNonStringClassName as any))\n        .toThrowError(/is required to be a string, but got type number/);\n  });\n});\n"]}