{"version":3,"file":"platform_node_test.js","sourceRoot":"","sources":["../../src/platforms/platform_node_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../index';\nimport {describeWithFlags, NODE_ENVS} from '../jasmine_util';\nimport * as platform_node from './platform_node';\nimport {PlatformNode} from './platform_node';\n\ndescribeWithFlags('PlatformNode', NODE_ENVS, () => {\n  it('fetch should use global.fetch if defined', async () => {\n    const globalFetch = tf.env().global.fetch;\n\n    spyOn(tf.env().global, 'fetch').and.returnValue(() => {});\n\n    const platform = new PlatformNode();\n\n    await platform.fetch('test/url', {method: 'GET'});\n\n    expect(tf.env().global.fetch).toHaveBeenCalledWith('test/url', {\n      method: 'GET'\n    });\n\n    tf.env().global.fetch = globalFetch;\n  });\n\n  it('fetch should use node-fetch with tf.env().global.fetch is null',\n     async () => {\n       const globalFetch = tf.env().global.fetch;\n       tf.env().global.fetch = null;\n\n       const platform = new PlatformNode();\n\n       const savedFetch = platform_node.getSystemFetch();\n\n       // Null out the system fetch so we force it to require node-fetch.\n       platform_node.resetSystemFetch();\n\n       const testFetch = {fetch: (url: string, init: RequestInit) => {}};\n\n       // Mock the actual fetch call.\n       spyOn(testFetch, 'fetch').and.returnValue(() => {});\n       // Mock the import to override the real require of node-fetch.\n       spyOn(platform_node.getNodeFetch, 'importFetch')\n           .and.callFake(\n               () => (url: string, init: RequestInit) =>\n                   testFetch.fetch(url, init));\n\n       await platform.fetch('test/url', {method: 'GET'});\n\n       expect(platform_node.getNodeFetch.importFetch).toHaveBeenCalled();\n       expect(testFetch.fetch).toHaveBeenCalledWith('test/url', {\n         method: 'GET'\n       });\n\n       platform_node.setSystemFetch(savedFetch);\n       tf.env().global.fetch = globalFetch;\n     });\n\n  it('now should use process.hrtime', async () => {\n    const time = [100, 200];\n    spyOn(process, 'hrtime').and.returnValue(time);\n    expect(tf.env().platform.now()).toEqual(time[0] * 1000 + time[1] / 1000000);\n  });\n\n  it('encodeUTF8 single string', () => {\n    const platform = new PlatformNode();\n    const bytes = platform.encode('hello', 'utf-8');\n    expect(bytes.length).toBe(5);\n    expect(bytes).toEqual(new Uint8Array([104, 101, 108, 108, 111]));\n  });\n\n  it('encodeUTF8 two strings delimited', () => {\n    const platform = new PlatformNode();\n    const bytes = platform.encode('hello\\x00world', 'utf-8');\n    expect(bytes.length).toBe(11);\n    expect(bytes).toEqual(\n        new Uint8Array([104, 101, 108, 108, 111, 0, 119, 111, 114, 108, 100]));\n  });\n\n  it('encodeUTF8 cyrillic', () => {\n    const platform = new PlatformNode();\n    const bytes = platform.encode('Здраво', 'utf-8');\n    expect(bytes.length).toBe(12);\n    expect(bytes).toEqual(new Uint8Array(\n        [208, 151, 208, 180, 209, 128, 208, 176, 208, 178, 208, 190]));\n  });\n\n  it('decode single string', () => {\n    const platform = new PlatformNode();\n    const s =\n        platform.decode(new Uint8Array([104, 101, 108, 108, 111]), 'utf8');\n    expect(s.length).toBe(5);\n    expect(s).toEqual('hello');\n  });\n\n  it('decode two strings delimited', () => {\n    const platform = new PlatformNode();\n    const s = platform.decode(\n        new Uint8Array([104, 101, 108, 108, 111, 0, 119, 111, 114, 108, 100]),\n        'utf8');\n    expect(s.length).toBe(11);\n    expect(s).toEqual('hello\\x00world');\n  });\n\n  it('decode cyrillic', () => {\n    const platform = new PlatformNode();\n    const s = platform.decode(\n        new Uint8Array(\n            [208, 151, 208, 180, 209, 128, 208, 176, 208, 178, 208, 190]),\n        'utf8');\n    expect(s.length).toBe(6);\n    expect(s).toEqual('Здраво');\n  });\n});\n"]}