{"version":3,"file":"jasmine_util_test.js","sourceRoot":"","sources":["../src/jasmine_util_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Environment} from './environment';\nimport {envSatisfiesConstraints, parseTestEnvFromKarmaFlags, TestEnv} from './jasmine_util';\n\ndescribe('jasmine_util.envSatisfiesConstraints', () => {\n  it('ENV satisfies empty constraints', () => {\n    const env = new Environment({});\n    env.setFlags({});\n\n    const constraints = {};\n\n    const backendName = 'test-backend';\n\n    expect(\n        envSatisfiesConstraints(env, {name: 'test', backendName}, constraints))\n        .toBe(true);\n  });\n\n  it('ENV satisfies matching flag constraints no predicate', () => {\n    const env = new Environment({});\n    env.setFlags({'TEST-FLAG': true});\n\n    const constraints = {flags: {'TEST-FLAG': true}};\n\n    const backendName = 'test-backend';\n\n    expect(\n        envSatisfiesConstraints(env, {name: 'test', backendName}, constraints))\n        .toBe(true);\n  });\n\n  it('ENV satisfies matching flag and predicate is true', () => {\n    const env = new Environment({});\n    env.setFlags({'TEST-FLAG': true});\n\n    const constraints = {flags: {'TEST-FLAG': true}, predicate: () => true};\n\n    const backendName = 'test-backend';\n\n    expect(\n        envSatisfiesConstraints(env, {name: 'test', backendName}, constraints))\n        .toBe(true);\n  });\n\n  it('ENV doesnt satisfy flags and predicate is true', () => {\n    const env = new Environment({});\n    env.setFlags({'TEST-FLAG': true});\n\n    const constraints = {flags: {'TEST-FLAG': false}, predicate: () => true};\n\n    const backendName = 'test-backend';\n\n    expect(\n        envSatisfiesConstraints(env, {name: 'test', backendName}, constraints))\n        .toBe(false);\n  });\n\n  it('ENV satisfies flags and predicate is false', () => {\n    const env = new Environment({});\n    env.setFlags({'TEST-FLAG': true});\n\n    const constraints = {flags: {'TEST-FLAG': true}, predicate: () => false};\n\n    const backendName = 'test-backend';\n\n    expect(\n        envSatisfiesConstraints(env, {name: 'test', backendName}, constraints))\n        .toBe(false);\n  });\n\n  it('ENV doesnt satiisfy flags and predicate is false', () => {\n    const env = new Environment({});\n    env.setFlags({'TEST-FLAG': true});\n\n    const constraints = {flags: {'TEST-FLAG': false}, predicate: () => false};\n\n    const backendName = 'test-backend';\n\n    expect(\n        envSatisfiesConstraints(env, {name: 'test', backendName}, constraints))\n        .toBe(false);\n  });\n});\n\ndescribe('jasmine_util.parseKarmaFlags', () => {\n  const registeredTestEnvs: TestEnv[] = [\n    {name: 'test-env', backendName: 'test-backend', isDataSync: true, flags: {}}\n  ];\n\n  it('parse empty args', () => {\n    const res = parseTestEnvFromKarmaFlags([], registeredTestEnvs);\n    expect(res).toBeNull();\n  });\n\n  it('--testEnv test-env --flags {\"IS_NODE\": true}', () => {\n    const res = parseTestEnvFromKarmaFlags(\n        ['--testEnv', 'test-env', '--flags', '{\"IS_NODE\": true}'],\n        registeredTestEnvs);\n    expect(res.name).toBe('test-env');\n    expect(res.backendName).toBe('test-backend');\n    expect(res.flags).toEqual({IS_NODE: true});\n  });\n\n  it('\"--testEnv unknown\" throws error', () => {\n    expect(\n        () => parseTestEnvFromKarmaFlags(\n            ['--testEnv', 'unknown'], registeredTestEnvs))\n        .toThrowError();\n  });\n\n  it('\"--flags {}\" throws error since --testEnv is missing', () => {\n    expect(\n        () => parseTestEnvFromKarmaFlags(['--flags', '{}'], registeredTestEnvs))\n        .toThrowError();\n  });\n\n  it('\"--testEnv cpu --flags\" throws error since features value is missing',\n     () => {\n       expect(\n           () => parseTestEnvFromKarmaFlags(\n               ['--testEnv', 'test-env', '--flags'], registeredTestEnvs))\n           .toThrowError();\n     });\n\n  it('\"--backend cpu --flags notJson\" throws error', () => {\n    expect(\n        () => parseTestEnvFromKarmaFlags(\n            ['--testEnv', 'test-env', '--flags', 'notJson'],\n            registeredTestEnvs))\n        .toThrowError();\n  });\n});\n"]}