{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../scripts/test_snippets/util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nprocess.on('unhandledRejection', ex => {\n  throw ex;\n});\n\n// Used for logging the number of snippets that have been found.\nlet snippetCount = 0;\n// Used for counting the number of errors that have been found.\nlet errorCount = 0;\n\n/**\n * Parse and evaluate snippets for the src/index.ts from where this script is\n * run.\n * @param tf The TensorFlow.js module to use when evaluating snippets. If used\n *     outside core, this should be a union of core and the separate package.\n *     This is unused here but is used in eval() of the snippets.\n */\n// tslint:disable-next-line:no-any\nexport async function parseAndEvaluateSnippets(tf: any) {\n  const index = path.join(process.cwd(), 'src/index.ts');\n  const tsconfigPath = path.join(process.cwd(), 'tsconfig.json');\n\n  // Use the same compiler options that we use to compile the library\n  // here.\n  const tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf8'));\n\n  delete tsconfig.compilerOptions.moduleResolution;\n  const program = ts.createProgram([index], tsconfig.compilerOptions);\n\n  const checker = program.getTypeChecker();\n\n  for (const sourceFile of program.getSourceFiles()) {\n    if (!sourceFile.isDeclarationFile) {\n      const children = sourceFile.getChildren();\n      for (let i = 0; i < children.length; i++) {\n        await visit(tf, checker, children[i], sourceFile);\n      }\n    }\n  }\n\n  if (errorCount === 0) {\n    console.log(`Parsed and evaluated ${snippetCount} snippets successfully.`);\n  } else {\n    console.log(\n        `Evaluated ${snippetCount} snippets with ${errorCount} errors.`);\n    process.exit(1);\n  }\n}\n\nasync function visit(\n    // tslint:disable-next-line:no-any\n    tf: any, checker: ts.TypeChecker, node: ts.Node,\n    sourceFile: ts.SourceFile) {\n  const children = node.getChildren();\n  for (let i = 0; i < children.length; i++) {\n    await visit(tf, checker, children[i], sourceFile);\n  }\n\n  if (ts.isClassDeclaration(node) || ts.isFunctionDeclaration(node) ||\n      ts.isMethodDeclaration(node) || ts.isInterfaceDeclaration(node)) {\n    const symbol = checker.getSymbolAtLocation(node.name);\n    const jsdoc = getJSDocTag(symbol);\n    if (jsdoc == null) {\n      return;\n    }\n    // Ignore snippets of methods that have been marked with ignoreCI.\n    if (jsdoc['ignoreCI']) {\n      return;\n    }\n\n    const documentation = symbol.getDocumentationComment(checker);\n    if (documentation == null) {\n      return;\n    }\n    for (let i = 0; i < documentation.length; i++) {\n      const doc = documentation[i];\n      const re = /```js.*?```/gs;\n      const matches = re.exec(doc.text);\n      if (matches == null) {\n        return;\n      }\n\n      for (let k = 0; k < matches.length; k++) {\n        snippetCount++;\n\n        const match = matches[k];\n        const lines = match.split('\\n');\n        const evalLines: string[] = [];\n        for (let j = 0; j < lines.length; j++) {\n          let line = lines[j];\n          if (line.startsWith('```js')) {\n            line = line.substring('```js'.length);\n          }\n          if (line.endsWith('```')) {\n            line = line.substring(0, line.length - '```'.length);\n          }\n          line = line.trim();\n          if (line.startsWith('*')) {\n            line = line.substring(1).trim();\n          }\n          evalLines.push(line);\n        }\n\n        const srcCode = evalLines.join('\\n');\n\n        const evalString = '(async function runner() { try { ' + srcCode +\n            '} catch (e) { reportError(e); } })()';\n\n        const oldLog = console.log;\n        const oldWarn = console.warn;\n\n        const reportError = (e: string|Error) => {\n          oldLog();\n          oldLog(`Error executing snippet for ${symbol.name} at ${\n              sourceFile.fileName}`);\n          oldLog();\n          oldLog(`\\`\\`\\`js${srcCode}\\`\\`\\``);\n          oldLog();\n\n          console.error(e);\n          errorCount++;\n        };\n\n        // Overrwrite console.log so we don't spam the console.\n        console.log = (msg: string) => {};\n        console.warn = (msg: string) => {};\n        try {\n          await eval(evalString);\n        } catch (e) {\n          reportError(e);\n        }\n        console.log = oldLog;\n        console.warn = oldWarn;\n      }\n    }\n  }\n}\n\ninterface JSDoc {\n  namespace?: string;\n  ignoreCI?: boolean;\n}\n\nfunction getJSDocTag(symbol: ts.Symbol): JSDoc {\n  const tags = symbol.getJsDocTags();\n  for (let i = 0; i < tags.length; i++) {\n    const jsdocTag = tags[i];\n    if (jsdocTag.name === 'doc' && jsdocTag.text != null) {\n      const json = convertDocStringToDocInfoObject(jsdocTag.text.trim());\n      return json;\n    }\n  }\n  return null;\n}\n\nfunction convertDocStringToDocInfoObject(docString: string): JSDoc {\n  const jsonString =\n      docString.replace(/([a-zA-Z0-9]+):/g, '\"$1\":').replace(/\\'/g, '\"');\n  return JSON.parse(jsonString);\n}\n"]}