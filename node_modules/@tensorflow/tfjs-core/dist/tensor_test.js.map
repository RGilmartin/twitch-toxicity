{"version":3,"file":"tensor_test.js","sourceRoot":"","sources":["../src/tensor_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from './index';\nimport {ALL_ENVS, describeWithFlags, SYNC_BACKEND_ENVS} from './jasmine_util';\nimport {tensor5d} from './ops/ops';\nimport {Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from './tensor';\nimport {encodeStrings, expectArraysClose, expectArraysEqual, expectNumbersClose} from './test_util';\nimport {Rank, TensorLike1D, TensorLike2D, TensorLike3D, TensorLike4D, TypedArray} from './types';\nimport {encodeString} from './util';\n\ndescribeWithFlags('tensor', ALL_ENVS, () => {\n  it('Tensors of arbitrary size', async () => {\n    // [1, 2, 3]\n    let t: Tensor = tf.tensor1d([1, 2, 3]);\n    expect(t.rank).toBe(1);\n    expect(t.size).toBe(3);\n    expectArraysClose(await t.data(), [1, 2, 3]);\n\n    // [[1, 2, 3]]\n    t = tf.tensor2d([1, 2, 3], [1, 3]);\n    expect(t.rank).toBe(2);\n    expect(t.size).toBe(3);\n    expectArraysClose(await t.data(), [1, 2, 3]);\n\n    // [[1, 2, 3],\n    //  [4, 5, 6]]\n    t = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n    expect(t.rank).toBe(2);\n    expect(t.size).toBe(6);\n\n    expectArraysClose(await t.data(), [1, 2, 3, 4, 5, 6]);\n\n    // Shape mismatch with the values.\n    expect(() => tf.tensor2d([1], [1, 2])).toThrowError();\n  });\n\n  it('Tensors of explicit size', async () => {\n    const t = tf.tensor1d([5, 3, 2]);\n    expect(t.rank).toBe(1);\n    expect(t.shape).toEqual([3]);\n\n    // tslint:disable-next-line:no-any\n    expect(() => tf.tensor3d([1, 2], [1, 2, 3, 5] as any)).toThrowError();\n\n    const t4 = tf.tensor4d([1, 2, 3, 4], [1, 2, 1, 2]);\n    expectArraysClose(await t4.data(), [1, 2, 3, 4]);\n\n    // Tensor of ones.\n    const x = tf.ones<Rank.R3>([3, 4, 2]);\n    expect(x.rank).toBe(3);\n    expect(x.size).toBe(24);\n    expectArraysClose(await x.data(), [\n      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n    ]);\n\n    // Tensor of zeros.\n    const z = tf.zeros<Rank.R3>([3, 4, 2]);\n    expect(z.rank).toBe(3);\n    expect(z.size).toBe(24);\n    expectArraysClose(await z.data(), [\n      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ]);\n  });\n\n  it('Tensor dataSync CPU --> GPU', async () => {\n    const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n    expectArraysClose(await a.data(), new Float32Array([1, 2, 3, 4, 5, 6]));\n  });\n\n  it('Tensor.data() CPU --> GPU', async () => {\n    const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n    expectArraysClose(await a.data(), new Float32Array([1, 2, 3, 4, 5, 6]));\n  });\n\n  it('Tensor.data() packed CPU --> GPU', async () => {\n    const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n    tf.matMul(a, tf.tensor2d([1, 2], [2, 1]));\n    expectArraysClose(await a.data(), new Float32Array([1, 2, 3, 4, 5, 6]));\n  });\n\n  it('Scalar basic methods', async () => {\n    const a = tf.scalar(5);\n    expectArraysClose(await a.data(), [5]);\n    expect(a.rank).toBe(0);\n    expect(a.size).toBe(1);\n    expect(a.shape).toEqual([]);\n  });\n\n  it('indexToLoc Scalar', async () => {\n    const a = await tf.scalar(0).buffer();\n    expect(a.indexToLoc(0)).toEqual([]);\n\n    const b = await tf.zeros<Rank.R0>([]).buffer();\n    expect(b.indexToLoc(0)).toEqual([]);\n  });\n\n  it('indexToLoc Tensor1D', async () => {\n    const a = await tf.zeros([3]).buffer();\n    expect(a.indexToLoc(0)).toEqual([0]);\n    expect(a.indexToLoc(1)).toEqual([1]);\n    expect(a.indexToLoc(2)).toEqual([2]);\n\n    const b = await tf.zeros<Rank.R1>([3]).buffer();\n    expect(b.indexToLoc(0)).toEqual([0]);\n    expect(b.indexToLoc(1)).toEqual([1]);\n    expect(b.indexToLoc(2)).toEqual([2]);\n  });\n\n  it('indexToLoc Tensor2D', async () => {\n    const a = await tf.zeros([3, 2]).buffer();\n    expect(a.indexToLoc(0)).toEqual([0, 0]);\n    expect(a.indexToLoc(1)).toEqual([0, 1]);\n    expect(a.indexToLoc(2)).toEqual([1, 0]);\n    expect(a.indexToLoc(3)).toEqual([1, 1]);\n    expect(a.indexToLoc(4)).toEqual([2, 0]);\n    expect(a.indexToLoc(5)).toEqual([2, 1]);\n\n    const b = await tf.zeros<Rank.R2>([3, 2]).buffer();\n    expect(b.indexToLoc(0)).toEqual([0, 0]);\n    expect(b.indexToLoc(1)).toEqual([0, 1]);\n    expect(b.indexToLoc(2)).toEqual([1, 0]);\n    expect(b.indexToLoc(3)).toEqual([1, 1]);\n    expect(b.indexToLoc(4)).toEqual([2, 0]);\n    expect(b.indexToLoc(5)).toEqual([2, 1]);\n  });\n\n  it('indexToLoc Tensor3D', async () => {\n    const a = await tf.zeros([3, 2, 2]).buffer();\n    expect(a.indexToLoc(0)).toEqual([0, 0, 0]);\n    expect(a.indexToLoc(1)).toEqual([0, 0, 1]);\n    expect(a.indexToLoc(2)).toEqual([0, 1, 0]);\n    expect(a.indexToLoc(3)).toEqual([0, 1, 1]);\n    expect(a.indexToLoc(4)).toEqual([1, 0, 0]);\n    expect(a.indexToLoc(5)).toEqual([1, 0, 1]);\n    expect(a.indexToLoc(11)).toEqual([2, 1, 1]);\n\n    const b = await tf.zeros<Rank.R3>([3, 2, 2]).buffer();\n    expect(b.indexToLoc(0)).toEqual([0, 0, 0]);\n    expect(b.indexToLoc(1)).toEqual([0, 0, 1]);\n    expect(b.indexToLoc(2)).toEqual([0, 1, 0]);\n    expect(b.indexToLoc(3)).toEqual([0, 1, 1]);\n    expect(b.indexToLoc(4)).toEqual([1, 0, 0]);\n    expect(b.indexToLoc(5)).toEqual([1, 0, 1]);\n    expect(b.indexToLoc(11)).toEqual([2, 1, 1]);\n  });\n\n  it('indexToLoc Tensor 5D', async () => {\n    const values = new Float32Array([1, 2, 3, 4]);\n    const a = await tensor5d(values, [2, 1, 1, 1, 2]).buffer();\n    expect(a.indexToLoc(0)).toEqual([0, 0, 0, 0, 0]);\n    expect(a.indexToLoc(1)).toEqual([0, 0, 0, 0, 1]);\n    expect(a.indexToLoc(2)).toEqual([1, 0, 0, 0, 0]);\n    expect(a.indexToLoc(3)).toEqual([1, 0, 0, 0, 1]);\n  });\n\n  it('locToIndex Scalar', async () => {\n    const a = await tf.scalar(0).buffer();\n    expect(a.locToIndex([])).toEqual(0);\n\n    const b = await tf.zeros<Rank.R0>([]).buffer();\n    expect(b.locToIndex([])).toEqual(0);\n  });\n\n  it('locToIndex Tensor1D', async () => {\n    const a = await tf.zeros<Rank.R1>([3]).buffer();\n    expect(a.locToIndex([0])).toEqual(0);\n    expect(a.locToIndex([1])).toEqual(1);\n    expect(a.locToIndex([2])).toEqual(2);\n\n    const b = await tf.zeros<Rank.R1>([3]).buffer();\n    expect(b.locToIndex([0])).toEqual(0);\n    expect(b.locToIndex([1])).toEqual(1);\n    expect(b.locToIndex([2])).toEqual(2);\n  });\n\n  it('locToIndex Tensor2D', async () => {\n    const a = await tf.zeros<Rank.R2>([3, 2]).buffer();\n    expect(a.locToIndex([0, 0])).toEqual(0);\n    expect(a.locToIndex([0, 1])).toEqual(1);\n    expect(a.locToIndex([1, 0])).toEqual(2);\n    expect(a.locToIndex([1, 1])).toEqual(3);\n    expect(a.locToIndex([2, 0])).toEqual(4);\n    expect(a.locToIndex([2, 1])).toEqual(5);\n\n    const b = await tf.zeros<Rank.R2>([3, 2]).buffer();\n    expect(b.locToIndex([0, 0])).toEqual(0);\n    expect(b.locToIndex([0, 1])).toEqual(1);\n    expect(b.locToIndex([1, 0])).toEqual(2);\n    expect(b.locToIndex([1, 1])).toEqual(3);\n    expect(b.locToIndex([2, 0])).toEqual(4);\n    expect(b.locToIndex([2, 1])).toEqual(5);\n  });\n\n  it('locToIndex Tensor3D', async () => {\n    const a = await tf.zeros<Rank.R3>([3, 2, 2]).buffer();\n    expect(a.locToIndex([0, 0, 0])).toEqual(0);\n    expect(a.locToIndex([0, 0, 1])).toEqual(1);\n    expect(a.locToIndex([0, 1, 0])).toEqual(2);\n    expect(a.locToIndex([0, 1, 1])).toEqual(3);\n    expect(a.locToIndex([1, 0, 0])).toEqual(4);\n    expect(a.locToIndex([1, 0, 1])).toEqual(5);\n    expect(a.locToIndex([2, 1, 1])).toEqual(11);\n\n    const b = await tf.zeros<Rank.R3>([3, 2, 2]).buffer();\n    expect(b.locToIndex([0, 0, 0])).toEqual(0);\n    expect(b.locToIndex([0, 0, 1])).toEqual(1);\n    expect(b.locToIndex([0, 1, 0])).toEqual(2);\n    expect(b.locToIndex([0, 1, 1])).toEqual(3);\n    expect(b.locToIndex([1, 0, 0])).toEqual(4);\n    expect(b.locToIndex([1, 0, 1])).toEqual(5);\n    expect(b.locToIndex([2, 1, 1])).toEqual(11);\n  });\n\n  it('Tensor assignability (asserts compiler)', () => {\n    // This test asserts compilation, not doing any run-time assertion.\n    const a: Tensor<Rank.R0> = null;\n    const b: Scalar = a;\n    expect(b).toBeNull();\n\n    const a1: Tensor<Rank.R1> = null;\n    const b1: Tensor1D = a1;\n    expect(b1).toBeNull();\n\n    const a2: Tensor<Rank.R2> = null;\n    const b2: Tensor2D = a2;\n    expect(b2).toBeNull();\n\n    const a3: Tensor<Rank.R3> = null;\n    const b3: Tensor3D = a3;\n    expect(b3).toBeNull();\n\n    const a4: Tensor<Rank.R4> = null;\n    const b4: Tensor4D = a4;\n    expect(b4).toBeNull();\n  });\n\n  it('tf.tensor1d() from number[]', async () => {\n    const a = tf.tensor1d([1, 2, 3]);\n    expectArraysClose(await a.data(), [1, 2, 3]);\n  });\n\n  it('tf.tensor1d() throw error with null input value', () => {\n    expect(() => tf.tensor1d(null))\n        .toThrowError(\n            'The input to the tensor constructor ' +\n            'must be a non-null value.');\n  });\n\n  it('tf.tensor1d() from string[]', async () => {\n    const a = tf.tensor1d(['aa', 'bb', 'cc']);\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([3]);\n    expectArraysEqual(await a.data(), ['aa', 'bb', 'cc']);\n  });\n\n  it('tf.tensor1d() from encoded strings', async () => {\n    const bytes = encodeStrings(['aa', 'bb', 'cc']) as TensorLike1D;\n    const a = tf.tensor1d(bytes, 'string');\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([3]);\n    expectArraysEqual(await a.data(), ['aa', 'bb', 'cc']);\n  });\n\n  it('tf.tensor1d() from encoded strings without dtype errors', async () => {\n    // We do not want to infer 'string' when the user passes Uint8Array in order\n    // to be forward compatible in the future when we add uint8 dtype.\n    const bytes = encodeStrings(['aa', 'bb', 'cc']) as TensorLike1D;\n    expect(() => tf.tensor1d(bytes)).toThrowError();\n  });\n\n  it('tf.tensor1d() from encoded strings, shape mismatch', () => {\n    const bytes = encodeStrings([['aa'], ['bb'], ['cc']]) as TensorLike1D;\n    expect(() => tf.tensor1d(bytes)).toThrowError();\n  });\n\n  it('tf.tensor1d() from number[][], shape mismatch', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tf.tensor1d([[1], [2], [3]] as any)).toThrowError();\n  });\n\n  it('tf.tensor1d() from string[][], shape mismatch', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tf.tensor1d([['a'], ['b'], ['c']] as any)).toThrowError();\n  });\n\n  it('tf.tensor2d() from number[][]', async () => {\n    const a = tf.tensor2d([[1, 2, 3], [4, 5, 6]], [2, 3]);\n    expectArraysClose(await a.data(), [1, 2, 3, 4, 5, 6]);\n  });\n\n  it('tf.tensor2d() from string[][]', async () => {\n    const a = tf.tensor2d([['aa', 'bb'], ['cc', 'dd']]);\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([2, 2]);\n    expectArraysEqual(await a.data(), ['aa', 'bb', 'cc', 'dd']);\n  });\n\n  it('tf.tensor2d() from encoded strings', async () => {\n    const bytes = encodeStrings([['aa', 'bb'], ['cc', 'dd']]) as TensorLike2D;\n    const a = tf.tensor2d(bytes, [2, 2], 'string');\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([2, 2]);\n    expectArraysEqual(await a.data(), ['aa', 'bb', 'cc', 'dd']);\n  });\n\n  it('tf.tensor2d() from encoded strings without dtype errors', async () => {\n    // We do not want to infer 'string' when the user passes Uint8Array in order\n    // to be forward compatible in the future when we add uint8 dtype.\n    const bytes = encodeStrings([['aa', 'bb'], ['cc', 'dd']]) as TensorLike2D;\n    expect(() => tf.tensor2d(bytes)).toThrowError();\n  });\n\n  it('tf.tensor2d() from encoded strings, shape mismatch', () => {\n    const bytes = encodeStrings([['aa', 'bb'], ['cc', 'dd']]) as TensorLike2D;\n    expect(() => tf.tensor2d(bytes, [3, 2], 'string')).toThrowError();\n  });\n\n  it('tf.tensor2d() requires shape to be of length 2', () => {\n    // tslint:disable-next-line:no-any\n    const shape: any = [4];\n    expect(() => tf.tensor2d([1, 2, 3, 4], shape)).toThrowError();\n  });\n\n  it('tf.tensor2d() from number[][], but shape does not match', () => {\n    // Actual shape is [2, 3].\n    expect(() => tf.tensor2d([[1, 2, 3], [4, 5, 6]], [3, 2])).toThrowError();\n  });\n\n  it('tf.tensor2d() from string[][], but shape does not match', () => {\n    // Actual shape is [2, 3].\n    const vals = [['a', 'b', 'c'], ['d', 'e', 'f']];\n    expect(() => tf.tensor2d(vals, [3, 2])).toThrowError();\n  });\n\n  it('tf.tensor2d() from number[], but no shape throws error', () => {\n    expect(() => tf.tensor2d([1, 2, 3, 4])).toThrowError();\n  });\n\n  it('tf.tensor2d() from string[], but no shape throws error', () => {\n    expect(() => tf.tensor2d(['a', 'b', 'c', 'd'])).toThrowError();\n  });\n\n  it('tf.tensor2d() throw error with null input value', () => {\n    expect(() => tf.tensor2d(null))\n        .toThrowError(\n            'The input to the tensor constructor ' +\n            'must be a non-null value.');\n  });\n\n  it('tensor3d() from number[][][]', async () => {\n    const a = tf.tensor3d([[[1], [2], [3]], [[4], [5], [6]]], [2, 3, 1]);\n    expectArraysClose(await a.data(), [1, 2, 3, 4, 5, 6]);\n  });\n\n  it('tensor3d() from string[][][]', async () => {\n    const vals = [[['a'], ['b'], ['c']], [['d'], ['e'], ['f']]];\n    const a = tf.tensor3d(vals, [2, 3, 1]);\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([2, 3, 1]);\n    expectArraysEqual(await a.data(), ['a', 'b', 'c', 'd', 'e', 'f']);\n  });\n\n  it('tf.tensor3d() from encoded strings', async () => {\n    const bytes = encodeStrings([[['a'], ['b'], ['c']], [['d'], ['e'], ['f']]]);\n    const a = tf.tensor3d(bytes as TensorLike3D, [2, 3, 1], 'string');\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([2, 3, 1]);\n    expectArraysEqual(await a.data(), ['a', 'b', 'c', 'd', 'e', 'f']);\n  });\n\n  it('tf.tensor3d() from encoded strings without dtype errors', async () => {\n    // We do not want to infer 'string' when the user passes Uint8Array in order\n    // to be forward compatible in the future when we add uint8 dtype.\n    const bytes = encodeStrings([[['a'], ['b'], ['c']], [['d'], ['e'], ['f']]]);\n    expect(() => tf.tensor3d(bytes as TensorLike3D)).toThrowError();\n  });\n\n  it('tf.tensor3d() from encoded strings, shape mismatch', () => {\n    const bytes = encodeStrings([[['a'], ['b'], ['c']], [['d'], ['e'], ['f']]]);\n    // Actual shape is [2, 3, 1].\n    expect(() => tf.tensor3d(bytes as TensorLike3D, [3, 2, 1], 'string'))\n        .toThrowError();\n  });\n\n  it('tensor3d() from number[][][], but shape does not match', () => {\n    const values = [[[1], [2], [3]], [[4], [5], [6]]];\n    // Actual shape is [2, 3, 1].\n    expect(() => tf.tensor3d(values, [3, 2, 1])).toThrowError();\n  });\n\n  it('tf.tensor3d() from number[], but no shape throws error', () => {\n    expect(() => tf.tensor3d([1, 2, 3, 4])).toThrowError();\n  });\n\n  it('tf.tensor3d() requires shape to be of length 3', () => {\n    // tslint:disable-next-line:no-any\n    const shape: any = [4, 1];\n    expect(() => tf.tensor3d([1, 2, 3, 4], shape)).toThrowError();\n  });\n\n  it('tf.tensor3d() throw error with null input value', () => {\n    expect(() => tf.tensor3d(null))\n        .toThrowError(\n            'The input to the tensor constructor ' +\n            'must be a non-null value.');\n  });\n\n  it('tensor4d() from number[][][][]', async () => {\n    const a = tf.tensor4d([[[[1]], [[2]]], [[[4]], [[5]]]], [2, 2, 1, 1]);\n    expectArraysClose(await a.data(), [1, 2, 4, 5]);\n  });\n\n  it('tensor4d() from string[][][][]', async () => {\n    const vals = [[[['a']], [['b']]], [[['c']], [['d']]]];\n    const a = tf.tensor4d(vals, [2, 2, 1, 1]);\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([2, 2, 1, 1]);\n    expectArraysEqual(await a.data(), ['a', 'b', 'c', 'd']);\n  });\n\n  it('tf.tensor4d() from encoded strings', async () => {\n    const bytes = encodeStrings([[[['a']], [['b']]], [[['c']], [['d']]]]);\n    const a = tf.tensor4d(bytes as TensorLike4D, [2, 2, 1, 1], 'string');\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([2, 2, 1, 1]);\n    expectArraysEqual(await a.data(), ['a', 'b', 'c', 'd']);\n  });\n\n  it('tf.tensor4d() from encoded strings without dtype errors', async () => {\n    // We do not want to infer 'string' when the user passes Uint8Array in order\n    // to be forward compatible in the future when we add uint8 dtype.\n    const bytes = encodeStrings([[[['a']], [['b']]], [[['c']], [['d']]]]);\n    expect(() => tf.tensor4d(bytes as TensorLike4D)).toThrowError();\n  });\n\n  it('tf.tensor4d() from encoded strings, shape mismatch', () => {\n    const bytes = encodeStrings([[[['a']], [['b']]], [[['c']], [['d']]]]);\n    // Actual shape is [2, 2, 1. 1].\n    expect(() => tf.tensor4d(bytes as TensorLike4D, [2, 1, 2, 1], 'string'))\n        .toThrowError();\n  });\n\n  it('tensor4d() from string[][][][] infer shape', async () => {\n    const vals = [[[['a']], [['b']]], [[['c']], [['d']]]];\n    const a = tf.tensor4d(vals);\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([2, 2, 1, 1]);\n    expectArraysEqual(await a.data(), ['a', 'b', 'c', 'd']);\n  });\n\n  it('tensor4d() from number[][][][], but shape does not match', () => {\n    const f = () => {\n      // Actual shape is [2, 2, 1, 1].\n      tf.tensor4d([[[[1]], [[2]]], [[[4]], [[5]]]], [2, 1, 2, 1]);\n    };\n    expect(f).toThrowError();\n  });\n\n  it('tf.tensor4d() from number[], but no shape throws error', () => {\n    expect(() => tf.tensor4d([1, 2, 3, 4])).toThrowError();\n  });\n\n  it('tf.tensor4d() requires shape to be of length 4', () => {\n    // tslint:disable-next-line:no-any\n    const shape: any = [4, 1];\n    expect(() => tf.tensor4d([1, 2, 3, 4], shape)).toThrowError();\n  });\n\n  it('tf.tensor4d() throw error with null input value', () => {\n    expect(() => tf.tensor4d(null))\n        .toThrowError(\n            'The input to the tensor constructor ' +\n            'must be a non-null value.');\n  });\n\n  it('tf.tensor5d() throw error with null input value', () => {\n    expect(() => tf.tensor5d(null))\n        .toThrowError(\n            'The input to the tensor constructor ' +\n            'must be a non-null value.');\n  });\n\n  it('tf.tensor6d() throw error with null input value', () => {\n    expect(() => tf.tensor6d(null))\n        .toThrowError(\n            'The input to the tensor constructor ' +\n            'must be a non-null value.');\n  });\n\n  it('default dtype', async () => {\n    const a = tf.scalar(3);\n    expect(a.dtype).toBe('float32');\n    expectArraysClose(await a.data(), 3);\n  });\n\n  it('float32 dtype', async () => {\n    const a = tf.scalar(3, 'float32');\n    expect(a.dtype).toBe('float32');\n    expectArraysClose(await a.data(), 3);\n  });\n\n  it('int32 dtype', async () => {\n    const a = tf.scalar(3, 'int32');\n    expect(a.dtype).toBe('int32');\n    expectArraysEqual(await a.data(), 3);\n  });\n\n  it('int32 dtype, 3.9 => 3, like numpy', async () => {\n    const a = tf.scalar(3.9, 'int32');\n    expect(a.dtype).toBe('int32');\n    expectArraysEqual(await a.data(), 3);\n  });\n\n  it('int32 dtype, -3.9 => -3, like numpy', async () => {\n    const a = tf.scalar(-3.9, 'int32');\n    expect(a.dtype).toBe('int32');\n    expectArraysEqual(await a.data(), -3);\n  });\n\n  it('bool dtype, 3 => true, like numpy', async () => {\n    const a = tf.scalar(3, 'bool');\n    expect(a.dtype).toBe('bool');\n    expectArraysEqual(await a.data(), 1);\n  });\n\n  it('bool dtype, -2 => true, like numpy', async () => {\n    const a = tf.scalar(-2, 'bool');\n    expect(a.dtype).toBe('bool');\n    expectArraysEqual(await a.data(), 1);\n  });\n\n  it('bool dtype, 0 => false, like numpy', async () => {\n    const a = tf.scalar(0, 'bool');\n    expect(a.dtype).toBe('bool');\n    expectArraysEqual(await a.data(), 0);\n  });\n\n  it('bool dtype from boolean', async () => {\n    const a = tf.scalar(false, 'bool');\n    expectArraysEqual(await a.data(), 0);\n    expect(a.dtype).toBe('bool');\n\n    const b = tf.scalar(true, 'bool');\n    expectArraysEqual(await a.data(), 0);\n    expect(b.dtype).toBe('bool');\n  });\n\n  it('int32 dtype from boolean', async () => {\n    const a = tf.scalar(true, 'int32');\n    expectArraysEqual(await a.data(), 1);\n    expect(a.dtype).toBe('int32');\n  });\n\n  it('default dtype from boolean', async () => {\n    const a = tf.scalar(false);\n    expectArraysEqual(await a.data(), 0);\n    expect(a.dtype).toBe('bool');\n  });\n\n  it('default dtype', async () => {\n    const a = tf.tensor1d([1, 2, 3]);\n    expect(a.dtype).toBe('float32');\n    expect(a.shape).toEqual([3]);\n    expectArraysClose(await a.data(), [1, 2, 3]);\n  });\n\n  it('float32 dtype', async () => {\n    const a = tf.tensor1d([1, 2, 3], 'float32');\n    expect(a.dtype).toBe('float32');\n    expect(a.shape).toEqual([3]);\n    expectArraysClose(await a.data(), [1, 2, 3]);\n  });\n\n  it('int32 dtype', async () => {\n    const a = tf.tensor1d([1, 2, 3], 'int32');\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([3]);\n    expectArraysEqual(await a.data(), [1, 2, 3]);\n  });\n\n  it('int32 dtype, non-ints get floored, like numpy', async () => {\n    const a = tf.tensor1d([1.1, 2.5, 3.9], 'int32');\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([3]);\n    expectArraysEqual(await a.data(), [1, 2, 3]);\n  });\n\n  it('int32 dtype, negative non-ints get ceiled, like numpy', async () => {\n    const a = tf.tensor1d([-1.1, -2.5, -3.9], 'int32');\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([3]);\n    expectArraysEqual(await a.data(), [-1, -2, -3]);\n  });\n\n  it('bool dtype, !=0 is truthy, 0 is falsy, like numpy', async () => {\n    const a = tf.tensor1d([1, -2, 0, 3], 'bool');\n    expect(a.dtype).toBe('bool');\n    expect(a.shape).toEqual([4]);\n    expectArraysEqual(await a.data(), [1, 1, 0, 1]);\n  });\n\n  it('default dtype from boolean[]', async () => {\n    const a = tf.tensor1d([false, false, true]);\n    expect(a.dtype).toBe('bool');\n    expectArraysClose(await a.data(), [0, 0, 1]);\n  });\n\n  it('default dtype from UInt8Array', async () => {\n    const a = tf.tensor1d(new Uint8Array([1, 5, 2]));\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([3]);\n    expectArraysClose(await a.data(), [1, 5, 2]);\n  });\n\n  it('default dtype from Int32Array', async () => {\n    const a = tf.tensor1d(new Int32Array([1, 5, 2]));\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([3]);\n    expectArraysClose(await a.data(), [1, 5, 2]);\n  });\n\n  it('tf.tensor() from Float32Array and number[]', async () => {\n    const a = tf.tensor([\n      new Float32Array([1, 2]), new Float32Array([3, 4]),\n      new Float32Array([5, 6]), [7, 8]\n    ]);\n    expect(a.dtype).toBe('float32');\n    expect(a.shape).toEqual([4, 2]);\n    expectArraysClose(await a.data(), [1, 2, 3, 4, 5, 6, 7, 8]);\n  });\n\n  it('tf.tensor() from Int32Array and number[]', async () => {\n    const a = tf.tensor([\n      new Int32Array([1, 2]), new Int32Array([3, 4]), new Int32Array([5, 6]),\n      [7, 8]\n    ]);\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([4, 2]);\n    expectArraysClose(await a.data(), [1, 2, 3, 4, 5, 6, 7, 8]);\n  });\n\n  it('tf.tensor() from mixed TypedArray', async () => {\n    const a = tf.tensor([\n      new Float32Array([1, 2]), new Int32Array([3, 4]), new Uint8Array([5, 6]),\n      [7, 8]\n    ]);\n    expect(a.dtype).toBe('float32');\n    expect(a.shape).toEqual([4, 2]);\n    expectArraysClose(await a.data(), [1, 2, 3, 4, 5, 6, 7, 8]);\n  });\n\n  it('tf.tensor() from TypedArrays which are themselves 3D', () => {\n    // 2 tensors, each with shape 20x20x3, as flat Float32Arrays.\n    const img1 = new Float32Array(20 * 20 * 3);\n    const img2 = new Float32Array(20 * 20 * 3);\n    const t = tf.tensor([img1, img2], [2, 20, 20, 3]);\n    expect(t.dtype).toBe('float32');\n    expect(t.shape).toEqual([2, 20, 20, 3]);\n  });\n\n  it('tf.tensor() from TypedArrays which are themselves 3D, wrong shape',\n     () => {\n       const img1 = new Float32Array(20 * 20 * 3);\n       const img2 = new Float32Array(20 * 20 * 3);\n       expect(() => tf.tensor([img1, img2], [3, 20, 20, 3])).toThrowError();\n     });\n\n  it('default dtype from ascii string', async () => {\n    const a = tf.tensor('hello');\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([]);\n    expectArraysEqual(await a.data(), ['hello']);\n  });\n\n  it('default dtype from utf-8 string', async () => {\n    const a = tf.tensor('даниел');\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([]);\n    expectArraysEqual(await a.data(), ['даниел']);\n  });\n\n  it('default dtype from empty string', async () => {\n    const a = tf.tensor('');\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([]);\n    expectArraysEqual(await a.data(), ['']);\n  });\n\n  it('default dtype from unicode escaped string', async () => {\n    const a = tf.tensor('\\u0434\\u0430\\u043d\\u0438\\u0435\\u043b');\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([]);\n    expectArraysEqual(await a.data(), ['даниел']);\n  });\n\n  it('default dtype from string[]', async () => {\n    const a = tf.tensor(['a', 'b']);\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([2]);\n    expectArraysEqual(await a.data(), ['a', 'b']);\n  });\n\n  it('float32 dtype from boolean[]', async () => {\n    const a = tf.tensor1d([false, false, true], 'float32');\n    expect(a.dtype).toBe('float32');\n    expectArraysClose(await a.data(), [0, 0, 1]);\n  });\n\n  it('int32 dtype from boolean[]', async () => {\n    const a = tf.tensor1d([false, false, true], 'int32');\n    expect(a.dtype).toBe('int32');\n    expectArraysEqual(await a.data(), [0, 0, 1]);\n  });\n\n  it('bool dtype from boolean[]', async () => {\n    const a = tf.tensor1d([false, false, true], 'bool');\n    expect(a.dtype).toBe('bool');\n    expectArraysEqual(await a.data(), [0, 0, 1]);\n  });\n\n  it('default dtype', async () => {\n    const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n    expect(a.dtype).toBe('float32');\n    expect(a.shape).toEqual([2, 2]);\n    expectArraysClose(await a.data(), [1, 2, 3, 4]);\n  });\n\n  it('float32 dtype', async () => {\n    const a = tf.tensor2d([1, 2, 3, 4], [2, 2], 'float32');\n    expect(a.dtype).toBe('float32');\n    expect(a.shape).toEqual([2, 2]);\n    expectArraysClose(await a.data(), [1, 2, 3, 4]);\n  });\n\n  it('int32 dtype', async () => {\n    const a = tf.tensor2d([[1, 2], [3, 4]], [2, 2], 'int32');\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([2, 2]);\n    expectArraysEqual(await a.data(), [1, 2, 3, 4]);\n  });\n\n  it('int32 dtype, non-ints get floored, like numpy', async () => {\n    const a = tf.tensor2d([1.1, 2.5, 3.9, 4.0], [2, 2], 'int32');\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([2, 2]);\n    expectArraysEqual(await a.data(), [1, 2, 3, 4]);\n  });\n\n  it('int32 dtype, negative non-ints get ceiled, like numpy', async () => {\n    const a = tf.tensor2d([-1.1, -2.5, -3.9, -4.0], [2, 2], 'int32');\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([2, 2]);\n    expectArraysEqual(await a.data(), [-1, -2, -3, -4]);\n  });\n\n  it('bool dtype, !=0 is truthy, 0 is falsy, like numpy', async () => {\n    const a = tf.tensor2d([1, -2, 0, 3], [2, 2], 'bool');\n    expect(a.dtype).toBe('bool');\n    expect(a.shape).toEqual([2, 2]);\n    expectArraysEqual(await a.data(), [1, 1, 0, 1]);\n  });\n\n  it('default dtype from boolean[]', async () => {\n    const a = tf.tensor2d([[false, false], [true, false]], [2, 2]);\n    expect(a.dtype).toBe('bool');\n    expectArraysClose(await a.data(), [0, 0, 1, 0]);\n  });\n\n  it('float32 dtype from boolean[]', async () => {\n    const a = tf.tensor2d([[false, false], [true, false]], [2, 2], 'float32');\n    expect(a.dtype).toBe('float32');\n    expectArraysEqual(await a.data(), [0, 0, 1, 0]);\n  });\n\n  it('int32 dtype from boolean[]', async () => {\n    const a = tf.tensor2d([[false, false], [true, false]], [2, 2], 'int32');\n    expect(a.dtype).toBe('int32');\n    expectArraysEqual(await a.data(), [0, 0, 1, 0]);\n  });\n\n  it('bool dtype from boolean[]', async () => {\n    const a = tf.tensor2d([[false, false], [true, false]], [2, 2], 'bool');\n    expect(a.dtype).toBe('bool');\n    expectArraysEqual(await a.data(), [0, 0, 1, 0]);\n  });\n\n  it('default dtype', async () => {\n    const a = tf.tensor3d([1, 2, 3, 4], [2, 2, 1]);\n    expect(a.dtype).toBe('float32');\n    expect(a.shape).toEqual([2, 2, 1]);\n    expectArraysClose(await a.data(), [1, 2, 3, 4]);\n  });\n\n  it('float32 dtype', async () => {\n    const a = tf.tensor3d([1, 2, 3, 4], [2, 2, 1], 'float32');\n    expect(a.dtype).toBe('float32');\n    expect(a.shape).toEqual([2, 2, 1]);\n    expectArraysClose(await a.data(), [1, 2, 3, 4]);\n  });\n\n  it('int32 dtype', async () => {\n    const a = tf.tensor3d([[[1], [2]], [[3], [4]]], [2, 2, 1], 'int32');\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([2, 2, 1]);\n    expectArraysEqual(await a.data(), [1, 2, 3, 4]);\n  });\n\n  it('int32 dtype, non-ints get floored, like numpy', async () => {\n    const a = tf.tensor3d([1.1, 2.5, 3.9, 4.0], [2, 2, 1], 'int32');\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([2, 2, 1]);\n    expectArraysEqual(await a.data(), [1, 2, 3, 4]);\n  });\n\n  it('int32 dtype, negative non-ints get ceiled, like numpy', async () => {\n    const a = tf.tensor3d([-1.1, -2.5, -3.9, -4.0], [2, 2, 1], 'int32');\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([2, 2, 1]);\n    expectArraysEqual(await a.data(), [-1, -2, -3, -4]);\n  });\n\n  it('bool dtype, !=0 is truthy, 0 is falsy, like numpy', async () => {\n    const a = tf.tensor3d([1, -2, 0, 3], [2, 2, 1], 'bool');\n    expect(a.dtype).toBe('bool');\n    expect(a.shape).toEqual([2, 2, 1]);\n    expectArraysEqual(await a.data(), [1, 1, 0, 1]);\n  });\n\n  it('default dtype from boolean[]', async () => {\n    const a = tf.tensor3d([[[false], [false]], [[true], [false]]], [2, 2, 1]);\n    expect(a.dtype).toBe('bool');\n    expectArraysClose(await a.data(), [0, 0, 1, 0]);\n  });\n\n  it('float32 dtype from boolean[]', async () => {\n    const a = tf.tensor3d(\n        [[[false], [false]], [[true], [false]]], [2, 2, 1], 'float32');\n    expect(a.dtype).toBe('float32');\n    expectArraysClose(await a.data(), [0, 0, 1, 0]);\n  });\n\n  it('int32 dtype from boolean[]', async () => {\n    const a = tf.tensor3d(\n        [[[false], [false]], [[true], [false]]], [2, 2, 1], 'int32');\n    expect(a.dtype).toBe('int32');\n    expectArraysEqual(await a.data(), [0, 0, 1, 0]);\n  });\n\n  it('bool dtype from boolean[]', async () => {\n    const a =\n        tf.tensor3d([[[false], [false]], [[true], [false]]], [2, 2, 1], 'bool');\n    expect(a.dtype).toBe('bool');\n    expectArraysEqual(await a.data(), [0, 0, 1, 0]);\n  });\n\n  it('default dtype', async () => {\n    const a = tf.tensor4d([1, 2, 3, 4], [2, 2, 1, 1]);\n    expect(a.dtype).toBe('float32');\n    expect(a.shape).toEqual([2, 2, 1, 1]);\n    expectArraysClose(await a.data(), [1, 2, 3, 4]);\n  });\n\n  it('float32 dtype', async () => {\n    const a = tf.tensor4d([1, 2, 3, 4], [2, 2, 1, 1], 'float32');\n    expect(a.dtype).toBe('float32');\n    expect(a.shape).toEqual([2, 2, 1, 1]);\n    expectArraysClose(await a.data(), [1, 2, 3, 4]);\n  });\n\n  it('int32 dtype', async () => {\n    const a =\n        tf.tensor4d([[[[1]], [[2]]], [[[3]], [[4]]]], [2, 2, 1, 1], 'int32');\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([2, 2, 1, 1]);\n    expectArraysEqual(await a.data(), [1, 2, 3, 4]);\n  });\n\n  it('int32 dtype, non-ints get floored, like numpy', async () => {\n    const a = tf.tensor4d([1.1, 2.5, 3.9, 4.0], [2, 2, 1, 1], 'int32');\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([2, 2, 1, 1]);\n    expectArraysEqual(await a.data(), [1, 2, 3, 4]);\n  });\n\n  it('int32 dtype, negative non-ints get ceiled, like numpy', async () => {\n    const a = tf.tensor4d([-1.1, -2.5, -3.9, -4.0], [2, 2, 1, 1], 'int32');\n    expect(a.dtype).toBe('int32');\n    expect(a.shape).toEqual([2, 2, 1, 1]);\n    expectArraysEqual(await a.data(), [-1, -2, -3, -4]);\n  });\n\n  it('bool dtype, !=0 is truthy, 0 is falsy, like numpy', async () => {\n    const a = tf.tensor4d([1, -2, 0, 3], [2, 2, 1, 1], 'bool');\n    expect(a.dtype).toBe('bool');\n    expect(a.shape).toEqual([2, 2, 1, 1]);\n    expectArraysEqual(await a.data(), [1, 1, 0, 1]);\n  });\n\n  it('default dtype from boolean[]', async () => {\n    const a =\n        tf.tensor4d([[[[false], [false]], [[true], [false]]]], [1, 2, 2, 1]);\n    expect(a.dtype).toBe('bool');\n    expectArraysClose(await a.data(), [0, 0, 1, 0]);\n  });\n\n  it('float32 dtype from boolean[]', async () => {\n    const a = tf.tensor4d(\n        [[[[false], [false]], [[true], [false]]]], [1, 2, 2, 1], 'float32');\n    expect(a.dtype).toBe('float32');\n    expectArraysClose(await a.data(), [0, 0, 1, 0]);\n  });\n\n  it('int32 dtype from boolean[]', async () => {\n    const a = tf.tensor4d(\n        [[[[false], [false]], [[true], [false]]]], [1, 2, 2, 1], 'int32');\n    expect(a.dtype).toBe('int32');\n    expectArraysEqual(await a.data(), [0, 0, 1, 0]);\n  });\n\n  it('bool dtype from boolean[]', async () => {\n    const a = tf.tensor4d(\n        [[[[false], [false]], [[true], [false]]]], [1, 2, 2, 1], 'bool');\n    expect(a.dtype).toBe('bool');\n    expectArraysEqual(await a.data(), [0, 0, 1, 0]);\n  });\n\n  it('Scalar default dtype', async () => {\n    const a = tf.scalar(4);\n    const b = a.reshape([1, 1]);\n    expect(b.dtype).toBe('float32');\n    expect(b.shape).toEqual([1, 1]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Scalar float32 dtype', () => {\n    const a = tf.scalar(4, 'float32');\n    const b = a.reshape([1, 1]);\n    expect(b.dtype).toBe('float32');\n    expect(b.shape).toEqual([1, 1]);\n  });\n\n  it('Scalar string dtype', () => {\n    const a = tf.scalar('test', 'string');\n    const b = a.reshape([1, 1]);\n    expect(b.dtype).toBe('string');\n    expect(b.shape).toEqual([1, 1]);\n  });\n\n  it('scalar from encoded string', async () => {\n    const a = tf.scalar(encodeString('hello'), 'string');\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([]);\n    expectArraysEqual(await a.data(), ['hello']);\n  });\n\n  it('scalar from encoded string, but missing dtype', async () => {\n    // We do not want to infer 'string' when the user passes Uint8Array in order\n    // to be forward compatible in the future when we add uint8 dtype.\n    expect(() => tf.scalar(encodeString('hello'))).toThrowError();\n  });\n\n  it('scalar from encoded string, but value is not uint8array', async () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tf.scalar(new Float32Array([1, 2, 3]) as any)).toThrowError();\n  });\n\n  it('Scalar inferred dtype from bool', async () => {\n    const a = tf.scalar(true);\n    expect(a.dtype).toBe('bool');\n    expect(a.shape).toEqual([]);\n    expectArraysClose(await a.data(), [1]);\n  });\n\n  it('Scalar inferred dtype from string', async () => {\n    const a = tf.scalar('hello');\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([]);\n    expectArraysEqual(await a.data(), ['hello']);\n  });\n\n  it('Scalar int32 dtype', () => {\n    const a = tf.scalar(4, 'int32');\n    const b = a.reshape([1, 1]);\n    expect(b.dtype).toBe('int32');\n    expect(b.shape).toEqual([1, 1]);\n  });\n\n  it('Scalar bool dtype', async () => {\n    const a = tf.scalar(4, 'bool');\n    const b = a.reshape([1, 1, 1]);\n    expect(b.dtype).toBe('bool');\n    expect(b.shape).toEqual([1, 1, 1]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Scalar complex64 dtype', async () => {\n    const a = tf.complex(4, 5);\n    const b = a.reshape([1, 1]);\n    expectArraysClose(await a.data(), [4, 5]);\n    expect(b.dtype).toBe('complex64');\n    expect(b.shape).toEqual([1, 1]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Tensor1D default dtype', async () => {\n    const a = tf.tensor1d([1, 2, 3, 4]);\n    const b = a.reshape([2, 2]);\n    expect(b.dtype).toBe('float32');\n    expect(b.shape).toEqual([2, 2]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Tensor1D inferred dtype from bools', async () => {\n    const a = tf.tensor1d([true, false, false, true]);\n    expect(a.dtype).toBe('bool');\n    expect(a.shape).toEqual([4]);\n    expectArraysClose(await a.data(), [1, 0, 0, 1]);\n  });\n\n  it('Tensor1D inferred dtype from strings', async () => {\n    const a = tf.tensor1d(['a', 'b', 'c']);\n    expect(a.dtype).toBe('string');\n    expect(a.shape).toEqual([3]);\n    expectArraysEqual(await a.data(), ['a', 'b', 'c']);\n  });\n\n  it('Tensor1D float32 dtype', () => {\n    const a = tf.tensor1d([1, 2, 3, 4], 'float32');\n    const b = a.reshape([2, 2]);\n    expect(b.dtype).toBe('float32');\n    expect(b.shape).toEqual([2, 2]);\n  });\n\n  it('Tensor1D int32 dtype', async () => {\n    const a = tf.tensor1d([1, 2, 3, 4], 'int32');\n    const b = a.reshape([2, 2]);\n    expect(b.dtype).toBe('int32');\n    expect(b.shape).toEqual([2, 2]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Tensor1D complex64 dtype', async () => {\n    const a = tf.complex([1, 3, 5, 7], [2, 4, 6, 8]);\n    const b = a.reshape([2, 2]);\n    expect(b.dtype).toBe('complex64');\n    expect(b.shape).toEqual([2, 2]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Tensor2D default dtype', async () => {\n    const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n    const b = a.reshape([6]);\n    expect(b.dtype).toBe('float32');\n    expect(b.shape).toEqual([6]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Tensor2D float32 dtype', () => {\n    const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3], 'float32');\n    const b = a.reshape([6]);\n    expect(b.dtype).toBe('float32');\n    expect(b.shape).toEqual([6]);\n  });\n\n  it('Tensor2D int32 dtype', () => {\n    const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3], 'int32');\n    const b = a.reshape([6]);\n    expect(b.dtype).toBe('int32');\n    expect(b.shape).toEqual([6]);\n  });\n\n  it('Tensor2D bool dtype', async () => {\n    const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3], 'bool');\n    const b = a.reshape([6]);\n    expect(b.dtype).toBe('bool');\n    expect(b.shape).toEqual([6]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Tensor2D complex64 dtype', async () => {\n    const a = tf.complex([[1, 3, 5], [7, 9, 11]], [[2, 4, 6], [8, 10, 12]]);\n    const b = a.reshape([6]);\n    expect(b.dtype).toBe('complex64');\n    expect(b.shape).toEqual([6]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Tensor3D default dtype', async () => {\n    const a = tf.tensor3d([1, 2, 3, 4, 5, 6], [2, 3, 1]);\n    const b = a.reshape([6]);\n    expect(b.dtype).toBe('float32');\n    expect(b.shape).toEqual([6]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Tensor3D float32 dtype', () => {\n    const a = tf.tensor3d([1, 2, 3, 4, 5, 6], [2, 3, 1], 'float32');\n    const b = a.reshape([6]);\n    expect(b.dtype).toBe('float32');\n    expect(b.shape).toEqual([6]);\n  });\n\n  it('Tensor3D int32 dtype', () => {\n    const a = tf.tensor3d([1, 2, 3, 4, 5, 6], [2, 3, 1], 'int32');\n    const b = a.reshape([6]);\n    expect(b.dtype).toBe('int32');\n    expect(b.shape).toEqual([6]);\n  });\n\n  it('Tensor3D bool dtype', async () => {\n    const a = tf.tensor3d([1, 2, 3, 4, 5, 6], [2, 3, 1], 'bool');\n    const b = a.reshape([6]);\n    expect(b.dtype).toBe('bool');\n    expect(b.shape).toEqual([6]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Tensor3D complex64 dtype', async () => {\n    const a = tf.complex(\n        [[[1], [3], [5]], [[7], [9], [11]]],\n        [[[2], [4], [6]], [[8], [10], [12]]]);\n    const b = a.reshape([6]);\n    expect(b.dtype).toBe('complex64');\n    expect(b.shape).toEqual([6]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Tensor4D default dtype', async () => {\n    const a = tf.tensor4d([1, 2, 3, 4, 5, 6], [2, 3, 1, 1]);\n    const b = a.reshape([2, 3]);\n    expect(b.dtype).toBe('float32');\n    expect(b.shape).toEqual([2, 3]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Tensor4D float32 dtype', () => {\n    const a = tf.tensor4d([1, 2, 3, 4, 5, 6], [2, 3, 1, 1], 'float32');\n    const b = a.reshape([2, 3]);\n    expect(b.dtype).toBe('float32');\n    expect(b.shape).toEqual([2, 3]);\n  });\n\n  it('Tensor4D int32 dtype', async () => {\n    const a = tf.tensor4d([1, 2, 3, 4, 5, 6], [2, 3, 1, 1], 'int32');\n    const b = a.reshape([3, 2]);\n    expect(b.dtype).toBe('int32');\n    expect(b.shape).toEqual([3, 2]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Tensor4D complex64 dtype', async () => {\n    const a = tf.complex(\n        [[[[1]], [[3]], [[5]]], [[[7]], [[9]], [[11]]]],\n        [[[[2]], [[4]], [[6]]], [[[8]], [[10]], [[12]]]]);\n    const b = a.reshape([3, 2]);\n    expect(b.dtype).toBe('complex64');\n    expect(b.shape).toEqual([3, 2]);\n    expectArraysClose(await a.data(), await b.data());\n  });\n\n  it('Tensor4D bool dtype', () => {\n    const a = tf.tensor4d([1, 2, 3, 4, 5, 6], [2, 3, 1, 1], 'bool');\n    const b = a.reshape([3, 2]);\n    expect(b.dtype).toBe('bool');\n    expect(b.shape).toEqual([3, 2]);\n  });\n\n  it('.data() with casting, string tensor', async () => {\n    const a = tf.tensor(['a', 'b']);\n    const data: string[] = await a.data<'string'>();\n    expect(data).toEqual(['a', 'b']);\n  });\n\n  it('reshape is functional', async () => {\n    const a = tf.scalar(2.4);\n    const b = a.reshape([]);\n    expect(a.id).not.toBe(b.id);\n    b.dispose();\n    expectArraysClose(await a.data(), [2.4]);\n  });\n\n  it('reshape a string tensor', async () => {\n    const a = tf.tensor(['a', 'b']);\n    const b = a.reshape([2, 1, 1]);\n    expect(b.dtype).toBe('string');\n    expect(b.shape).toEqual([2, 1, 1]);\n    expectArraysEqual(await b.data(), ['a', 'b']);\n  });\n\n  it('reshape throws when passed a non-tensor', () => {\n    // tslint:disable-next-line:no-any\n    expect(() => tf.reshape({} as any, []))\n        .toThrowError(/Argument 'x' passed to 'reshape' must be a Tensor/);\n  });\n\n  it('reshape accepts a tensor-like object', async () => {\n    const res = tf.reshape([[1, 2, 3], [4, 5, 6]], [3, 2]);\n    expect(res.dtype).toBe('float32');\n    expect(res.shape).toEqual([3, 2]);\n    expectArraysClose(await res.data(), [1, 2, 3, 4, 5, 6]);\n  });\n\n  it('cast bool -> bool', () => {\n    const a = tf.tensor1d([1, 0], 'bool');\n    expect(a.cast('bool').dtype).toEqual('bool');\n  });\n\n  it('cast bool -> int32', () => {\n    const a = tf.tensor1d([1, 0], 'bool');\n    expect(a.cast('int32').dtype).toEqual('int32');\n  });\n\n  it('cast bool -> float32', () => {\n    const a = tf.tensor1d([1, 0], 'bool');\n    expect(a.cast('float32').dtype).toEqual('float32');\n  });\n\n  it('cast int32 -> bool', () => {\n    const a = tf.tensor1d([1, 0], 'int32');\n    expect(a.cast('bool').dtype).toEqual('bool');\n  });\n\n  it('cast int32 -> int32', () => {\n    const a = tf.tensor1d([1, 2], 'int32');\n    expect(a.cast('int32').dtype).toEqual('int32');\n  });\n\n  it('cast int32 -> float32', () => {\n    const a = tf.tensor1d([1, 2], 'int32');\n    expect(a.cast('float32').dtype).toEqual('float32');\n  });\n\n  it('cast float32 -> bool', () => {\n    const a = tf.tensor1d([1.0, 0.0]);\n    expect(a.cast('bool').dtype).toEqual('bool');\n  });\n\n  it('cast float32 -> int32', () => {\n    const a = tf.tensor1d([1.0, 2.0]);\n    expect(a.cast('int32').dtype).toEqual('int32');\n  });\n\n  it('cast float32 -> int32. async download', async () => {\n    const a = tf.tensor1d([1, 2]);\n    const aInt = a.cast('int32');\n    expect(aInt.dtype).toEqual('int32');\n\n    const asyncData = await aInt.data();\n    expect(asyncData instanceof Int32Array).toEqual(true);\n  });\n\n  it('cast float32 -> int32. queued async download', async () => {\n    const a = tf.tensor1d([1, 2]);\n    const aInt = a.cast('int32');\n    expect(aInt.dtype).toEqual('int32');\n\n    const [first, second] = await Promise.all([aInt.data(), aInt.data()]);\n    expect(first instanceof Int32Array).toEqual(true);\n    expect(second instanceof Int32Array).toEqual(true);\n  });\n\n  it('cast float32 -> int32. sync download', async () => {\n    const a = tf.tensor1d([1, 2]).cast('int32');\n    expect(a.dtype).toEqual('int32');\n\n    const data = await a.data();\n    expect(data instanceof Int32Array).toEqual(true);\n  });\n\n  it('cast float32 -> float32', () => {\n    const a = tf.tensor1d([1.0, 2.0]);\n    expect(a.cast('float32').dtype).toEqual('float32');\n  });\n\n  it('cast complex64 -> float32', async () => {\n    const a = tf.complex([1.0, 2.0], [3.0, 4.0]);\n    const result = a.cast('float32');\n\n    expect(result.dtype).toEqual('float32');\n    expectArraysClose(await result.data(), [1.0, 2.0]);\n  });\n\n  it('cast complex64 -> int32', async () => {\n    const a = tf.complex([1.0, 2.0], [3.0, 4.0]);\n    const result = a.cast('int32');\n\n    expect(result.dtype).toEqual('int32');\n    expectArraysEqual(await result.data(), [1, 2]);\n  });\n\n  it('cast complex64 -> bool', async () => {\n    const a = tf.complex([1.0, 0.0], [1.0, 1.0]);\n    const result = a.cast('bool');\n\n    expect(result.dtype).toEqual('bool');\n    expectArraysEqual(await result.data(), [true, false]);\n  });\n\n  it('cast throws when passed a non-tensor', () => {\n    expect(() => tf.cast({} as tf.Tensor, 'float32'))\n        .toThrowError(/Argument 'x' passed to 'cast' must be a Tensor/);\n  });\n\n  it('cast accepts a tensor-like object', async () => {\n    const a = [1.0, 2.0];\n    const res = tf.cast(a, 'int32');\n    expect(res.dtype).toEqual('int32');\n    expectArraysClose(await res.data(), [1, 2]);\n  });\n\n  it('cast string -> !string throws error', () => {\n    const a = ['a', 'b'];\n    expect(() => tf.cast(a, 'int32')).toThrowError();\n    expect(() => tf.cast(a, 'float32')).toThrowError();\n    expect(() => tf.cast(a, 'bool')).toThrowError();\n    expect(() => tf.cast(a, 'complex64')).toThrowError();\n  });\n\n  it('cast !string -> string throws error', () => {\n    expect(() => tf.cast(tf.tensor(1, [], 'float32'), 'string')).toThrowError();\n    expect(() => tf.cast(tf.tensor(1, [], 'int32'), 'string')).toThrowError();\n    expect(() => tf.cast(tf.tensor(1, [], 'bool'), 'string')).toThrowError();\n    expect(() => tf.cast(tf.tensor(1, [], 'complex64'), 'string'))\n        .toThrowError();\n  });\n\n  it('scalar bool -> int32', async () => {\n    const a = tf.scalar(true, 'bool').toInt();\n    expect(a.dtype).toBe('int32');\n    expectArraysEqual(await a.data(), 1);\n  });\n\n  it('Tensor1D float32 -> int32', async () => {\n    const a = tf.tensor1d([1.1, 3.9, -2.9, 0]).toInt();\n    expect(a.dtype).toBe('int32');\n    expectArraysEqual(await a.data(), [1, 3, -2, 0]);\n  });\n\n  it('Tensor2D float32 -> bool', async () => {\n    const a = tf.tensor2d([1.1, 3.9, -2.9, 0], [2, 2]).asType('bool');\n    expect(a.dtype).toBe('bool');\n    expectArraysEqual(await a.data(), [1, 1, 1, 0]);\n  });\n\n  it('Tensor2D int32 -> bool', async () => {\n    const a = tf.tensor2d([1, 3, 0, -1], [2, 2], 'int32').toBool();\n    expect(a.dtype).toBe('bool');\n    expectArraysEqual(await a.data(), [1, 1, 0, 1]);\n  });\n\n  it('Tensor3D bool -> float32', async () => {\n    const a =\n        tf.tensor3d([true, false, false, true], [2, 2, 1], 'bool').toFloat();\n    expect(a.dtype).toBe('float32');\n    expectArraysClose(await a.data(), [1, 0, 0, 1]);\n  });\n\n  it('bool CPU -> GPU -> CPU', async () => {\n    const a = tf.tensor1d([1, 2, 0, 0, 5], 'bool');\n    expectArraysEqual(await a.data(), [1, 1, 0, 0, 1]);\n  });\n\n  it('int32 CPU -> GPU -> CPU', async () => {\n    const a = tf.tensor1d([1, 2, 0, 0, 5], 'int32');\n    expectArraysEqual(await a.data(), [1, 2, 0, 0, 5]);\n  });\n\n  it('asType is functional', async () => {\n    const a = tf.scalar(2.4, 'float32');\n    const b = a.toFloat();\n    expect(a.id).not.toBe(b.id);\n    b.dispose();\n    expectArraysClose(await a.data(), [2.4]);\n  });\n\n  it('squeeze no axis', () => {\n    const a = tf.tensor2d([4, 2, 1], [3, 1], 'bool');\n    const b = a.squeeze();\n    expect(b.shape).toEqual([3]);\n  });\n\n  it('squeeze with axis', () => {\n    const a = tf.tensor3d([4, 2, 1], [3, 1, 1], 'bool');\n    const b = a.squeeze([1]);\n    expect(b.shape).toEqual([3, 1]);\n  });\n\n  it('squeeze with negative axis', () => {\n    const a = tf.tensor3d([4, 2, 1], [3, 1, 1], 'bool');\n    const b = a.squeeze([-1]);\n    expect(b.shape).toEqual([3, 1]);\n  });\n\n  it('squeeze with multiple negative axis', () => {\n    const a = tf.tensor3d([4, 2, 1], [3, 1, 1], 'bool');\n    const b = a.squeeze([-1, -2]);\n    expect(b.shape).toEqual([3]);\n  });\n\n  it('squeeze wrong axis', () => {\n    const a = tf.tensor3d([4, 2, 1], [3, 1, 1], 'bool');\n    expect(() => a.squeeze([0, 1])).toThrowError();\n  });\n\n  it('squeeze wrong negative axis', () => {\n    const a = tf.tensor3d([4, 2, 1], [3, 1, 1], 'bool');\n    expect(() => a.squeeze([-3, -2])).toThrowError();\n  });\n\n  it('squeeze axis out of range', () => {\n    const a = tf.tensor3d([4, 2, 1], [3, 1, 1], 'bool');\n    expect(() => a.squeeze([10, 11])).toThrowError();\n  });\n\n  it('squeeze negative axis out of range', () => {\n    const a = tf.tensor3d([4, 2, 1], [3, 1, 1], 'bool');\n    expect(() => a.squeeze([-13, -12])).toThrowError();\n  });\n\n  it('squeeze throws when passed a non-tensor', () => {\n    expect(() => tf.squeeze({} as tf.Tensor))\n        .toThrowError(/Argument 'x' passed to 'squeeze' must be a Tensor/);\n  });\n\n  it('squeeze accepts a tensor-like object', async () => {\n    const res = tf.squeeze([[[4]], [[2]], [[1]]] /* shape is [3, 1, 1] */);\n    expect(res.shape).toEqual([3]);\n    expectArraysClose(await res.data(), [4, 2, 1]);\n  });\n\n  it('squeeze a zero-sized tensor', () => {\n    const a = tf.tensor3d([], [0, 1, 0]);\n    const res = tf.squeeze(a);\n    expect(res.shape).toEqual([0, 0]);\n  });\n\n  it('squeeze can take an empty list of axis', () => {\n    const a = tf.zeros([2, 1, 3, 1, 4]);\n    const axes: number[] = [];\n    // Empty axes list means all possible axes.\n    const res = tf.squeeze(a, axes);\n    expect(res.shape).toEqual([2, 3, 4]);\n  });\n\n  it('squeeze a complex64 tensor', async () => {\n    const a = tf.complex([[4], [1], [5]], [[2], [3], [6]]);\n    const b = a.squeeze();\n    expect(b.shape).toEqual([3]);\n    expectArraysClose(await b.data(), [4, 2, 1, 3, 5, 6]);\n  });\n\n  it('scalar -> 2d', () => {\n    const a = tf.scalar(4, 'int32');\n    const b = a.as2D(1, 1);\n    expect(b.dtype).toBe('int32');\n    expect(b.shape).toEqual([1, 1]);\n  });\n\n  it('1d -> 2d', () => {\n    const a = tf.tensor1d([4, 2, 1], 'bool');\n    const b = a.as2D(3, 1);\n    expect(b.dtype).toBe('bool');\n    expect(b.shape).toEqual([3, 1]);\n  });\n\n  it('2d -> 4d', () => {\n    const a = tf.tensor2d([4, 2, 1, 3], [2, 2]);\n    const b = a.as4D(1, 1, 2, 2);\n    expect(b.dtype).toBe('float32');\n    expect(b.shape).toEqual([1, 1, 2, 2]);\n  });\n\n  it('3d -> 2d', () => {\n    const a = tf.tensor3d([4, 2, 1, 3], [2, 2, 1], 'float32');\n    const b = a.as2D(2, 2);\n    expect(b.dtype).toBe('float32');\n    expect(b.shape).toEqual([2, 2]);\n  });\n\n  it('4d -> 1d', () => {\n    const a = tf.tensor4d([4, 2, 1, 3], [2, 2, 1, 1], 'bool');\n    const b = a.as1D();\n    expect(b.dtype).toBe('bool');\n    expect(b.shape).toEqual([4]);\n  });\n\n  it('throws when passed non-integer shape', () => {\n    const msg = 'Tensor must have a shape comprised of positive ' +\n        'integers but got shape [2,2.2].';\n    expect(() => tf.tensor([1, 2, 3, 4], [2, 2.2])).toThrowError(msg);\n  });\n\n  it('throws when passed negative shape', () => {\n    const msg = 'Tensor must have a shape comprised of positive ' +\n        'integers but got shape [2,-2].';\n    expect(() => tf.tensor([1, 2, 3, 4], [2, -2])).toThrowError(msg);\n  });\n\n  it('ones with complex type', async () => {\n    // Imaginary part should be zero.\n    const a = tf.ones([2, 2], 'complex64');\n    expectArraysClose(await a.data(), [1, 0, 1, 0, 1, 0, 1, 0]);\n  });\n\n  it('can create a tensor where values.size != buffer.size', async () => {\n    const a = new Float32Array([1, 2, 3, 4, 5]);\n    const b = a.subarray(0, 2);\n    const t = tf.tensor1d(b);\n    expect(t.shape).toEqual([2]);\n    expectArraysClose(await t.data(), [1, 2]);\n  });\n});\n\ndescribeWithFlags('tensor debug mode', ALL_ENVS, () => {\n  beforeAll(() => {\n    // Silence debug warnings.\n    spyOn(console, 'warn');\n    tf.enableDebugMode();\n  });\n\n  it('tf.tensor() from TypedArray + number[] fails due to wrong shape', () => {\n    expect(() => tf.tensor([\n      new Float32Array([1, 2]),\n      new Float32Array([3, 4]),\n      new Float32Array([5, 6]),\n      // Should be of length 4\n      [7, 8, 9, 10],\n    ]))\n        .toThrowError(\n            /Element arr\\[3\\] should have 2 elements, but has 4 elements/);\n  });\n});\n\ndescribeWithFlags('tensor dataSync', SYNC_BACKEND_ENVS, () => {\n  it('.dataSync() with casting, string tensor', () => {\n    const a = tf.tensor(['a', 'b']);\n    const data: string[] = a.dataSync<'string'>();\n    expect(data).toEqual(['a', 'b']);\n  });\n});\n\ndescribeWithFlags('tensor arraySync', SYNC_BACKEND_ENVS, () => {\n  it('.arraySync() with a non-complex tensor', () => {\n    const a = tf.tensor([1, 2, 3, 4, 5, 6], [2, 3]);\n    expect(a.arraySync()).toEqual([[1, 2, 3], [4, 5, 6]]);\n  });\n\n  it('.arraySync() with a complex tensor', () => {\n    const a = tf.complex([[1, 2], [3, 4]], [[11, 12], [13, 14]]);\n    expect(a.arraySync()).toEqual([[1, 11, 2, 12], [3, 13, 4, 14]]);\n  });\n\n  // The other cases should be covered by toNestedArray tests in util_test.ts.\n});\n\ndescribeWithFlags('tensor.toString', SYNC_BACKEND_ENVS, () => {\n  it('scalar verbose', () => {\n    const verbose = true;\n    const str = tf.scalar(5).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: float32\\n' +\n        '  rank: 0\\n' +\n        '  shape: []\\n' +\n        '  values:\\n' +\n        '    5');\n  });\n\n  it('string scalar verbose', () => {\n    const verbose = true;\n    const str = tf.scalar('test').toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: string\\n' +\n        '  rank: 0\\n' +\n        '  shape: []\\n' +\n        '  values:\\n' +\n        '    test');\n  });\n\n  it('bool scalar verbose', () => {\n    const verbose = true;\n    const str = tf.scalar(true).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: bool\\n' +\n        '  rank: 0\\n' +\n        '  shape: []\\n' +\n        '  values:\\n' +\n        '    true');\n  });\n\n  it('1d tensor verbose', () => {\n    const verbose = true;\n    const str = tf.zeros([4]).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: float32\\n' +\n        '  rank: 1\\n' +\n        '  shape: [4]\\n' +\n        '  values:\\n' +\n        '    [0, 0, 0, 0]');\n  });\n\n  it('1d string tensor verbose', () => {\n    const verbose = true;\n    const str = tf.tensor(['a', 'bb', 'ccc']).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: string\\n' +\n        '  rank: 1\\n' +\n        '  shape: [3]\\n' +\n        '  values:\\n' +\n        '    [\\'a\\', \\'bb\\', \\'ccc\\']');\n  });\n\n  it('1d bool tensor verbose', () => {\n    const verbose = true;\n    const str = tf.tensor([true, false, true]).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: bool\\n' +\n        '  rank: 1\\n' +\n        '  shape: [3]\\n' +\n        '  values:\\n' +\n        '    [true, false, true]');\n  });\n\n  it('2d tensor verbose', () => {\n    const verbose = true;\n    const str = tf.zeros([3, 3]).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: float32\\n' +\n        '  rank: 2\\n' +\n        '  shape: [3,3]\\n' +\n        '  values:\\n' +\n        '    [[0, 0, 0],\\n' +\n        '     [0, 0, 0],\\n' +\n        '     [0, 0, 0]]');\n  });\n\n  it('2d string tensor verbose', () => {\n    const verbose = true;\n    const vals = [\n      ['a', 'bb', 'ccc'],\n      ['d', 'e', 'f'],\n      ['g', 'h', 'i'],\n    ];\n    const str = tf.tensor(vals).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: string\\n' +\n        '  rank: 2\\n' +\n        '  shape: [3,3]\\n' +\n        '  values:\\n' +\n        '    [[\\'a\\', \\'bb\\', \\'ccc\\'],\\n' +\n        '     [\\'d\\', \\'e\\' , \\'f\\'  ],\\n' +\n        '     [\\'g\\', \\'h\\' , \\'i\\'  ]]');\n  });\n\n  it('2d bool tensor verbose', () => {\n    const verbose = true;\n    const str = tf.zeros([3, 3], 'bool').toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: bool\\n' +\n        '  rank: 2\\n' +\n        '  shape: [3,3]\\n' +\n        '  values:\\n' +\n        '    [[false, false, false],\\n' +\n        '     [false, false, false],\\n' +\n        '     [false, false, false]]');\n  });\n\n  it('3d tensor verbose', () => {\n    const verbose = true;\n    const str = tf.zeros([3, 3, 2]).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: float32\\n' +\n        '  rank: 3\\n' +\n        '  shape: [3,3,2]\\n' +\n        '  values:\\n' +\n        '    [[[0, 0],\\n' +\n        '      [0, 0],\\n' +\n        '      [0, 0]],\\n\\n' +\n        '     [[0, 0],\\n' +\n        '      [0, 0],\\n' +\n        '      [0, 0]],\\n\\n' +\n        '     [[0, 0],\\n' +\n        '      [0, 0],\\n' +\n        '      [0, 0]]]');\n  });\n\n  it('3d string tensor verbose', () => {\n    const verbose = true;\n    const vals = [\n      [['a', 'bb'], ['ccc', 'dddd']],\n      [['e', 'ff'], ['ggg', 'hhhh']],\n      [['i', 'jj'], ['kkk', 'llll']],\n    ];\n    const str = tf.tensor(vals).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: string\\n' +\n        '  rank: 3\\n' +\n        '  shape: [3,2,2]\\n' +\n        '  values:\\n' +\n        '    [[[\\'a\\'  , \\'bb\\'  ],\\n' +\n        '      [\\'ccc\\', \\'dddd\\']],\\n\\n' +\n        '     [[\\'e\\'  , \\'ff\\'  ],\\n' +\n        '      [\\'ggg\\', \\'hhhh\\']],\\n\\n' +\n        '     [[\\'i\\'  , \\'jj\\'  ],\\n' +\n        '      [\\'kkk\\', \\'llll\\']]]');\n  });\n\n  it('3d bool tensor verbose', () => {\n    const verbose = true;\n    const str = tf.ones([3, 3, 2], 'bool').toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: bool\\n' +\n        '  rank: 3\\n' +\n        '  shape: [3,3,2]\\n' +\n        '  values:\\n' +\n        '    [[[true, true],\\n' +\n        '      [true, true],\\n' +\n        '      [true, true]],\\n\\n' +\n        '     [[true, true],\\n' +\n        '      [true, true],\\n' +\n        '      [true, true]],\\n\\n' +\n        '     [[true, true],\\n' +\n        '      [true, true],\\n' +\n        '      [true, true]]]');\n  });\n\n  it('1d long tensor verbose', () => {\n    const verbose = true;\n    const str = tf.zeros([100]).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: float32\\n' +\n        '  rank: 1\\n' +\n        '  shape: [100]\\n' +\n        '  values:\\n' +\n        '    [0, 0, 0, ..., 0, 0, 0]');\n  });\n\n  it('1d long string tensor verbose', () => {\n    const verbose = true;\n    const str = tf.fill([100], 'hi').toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: string\\n' +\n        '  rank: 1\\n' +\n        '  shape: [100]\\n' +\n        '  values:\\n' +\n        '    [\\'hi\\', \\'hi\\', \\'hi\\', ..., \\'hi\\', \\'hi\\', \\'hi\\']');\n  });\n\n  it('2d long tensor verbose', () => {\n    const verbose = true;\n    const str = tf.zeros([100, 100]).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: float32\\n' +\n        '  rank: 2\\n' +\n        '  shape: [100,100]\\n' +\n        '  values:\\n' +\n        '    [[0, 0, 0, ..., 0, 0, 0],\\n' +\n        '     [0, 0, 0, ..., 0, 0, 0],\\n' +\n        '     [0, 0, 0, ..., 0, 0, 0],\\n' +\n        '     ...,\\n' +\n        '     [0, 0, 0, ..., 0, 0, 0],\\n' +\n        '     [0, 0, 0, ..., 0, 0, 0],\\n' +\n        '     [0, 0, 0, ..., 0, 0, 0]]');\n  });\n\n  it('2d long string tensor verbose', () => {\n    const verbose = true;\n    const str = tf.fill([100, 100], 'a').toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: string\\n' +\n        '  rank: 2\\n' +\n        '  shape: [100,100]\\n' +\n        '  values:\\n' +\n        '    [[\\'a\\', \\'a\\', \\'a\\', ..., \\'a\\', \\'a\\', \\'a\\'],\\n' +\n        '     [\\'a\\', \\'a\\', \\'a\\', ..., \\'a\\', \\'a\\', \\'a\\'],\\n' +\n        '     [\\'a\\', \\'a\\', \\'a\\', ..., \\'a\\', \\'a\\', \\'a\\'],\\n' +\n        '     ...,\\n' +\n        '     [\\'a\\', \\'a\\', \\'a\\', ..., \\'a\\', \\'a\\', \\'a\\'],\\n' +\n        '     [\\'a\\', \\'a\\', \\'a\\', ..., \\'a\\', \\'a\\', \\'a\\'],\\n' +\n        '     [\\'a\\', \\'a\\', \\'a\\', ..., \\'a\\', \\'a\\', \\'a\\']]');\n  });\n\n  it('2d with padding to align columns verbose', () => {\n    const verbose = true;\n    const str = tf.tensor([\n                    [0.8597712, 3, 0.2740789], [0.6696132, 0.4825962, 2.75],\n                    [1.991, 0.0640865, 0.2983858]\n                  ]).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: float32\\n' +\n        '  rank: 2\\n' +\n        '  shape: [3,3]\\n' +\n        '  values:\\n' +\n        '    [[0.8597712, 3        , 0.2740789],\\n' +\n        '     [0.6696132, 0.4825962, 2.75     ],\\n' +\n        '     [1.9910001, 0.0640865, 0.2983858]]');\n  });\n\n  it('2d string tensor with padding verbose', () => {\n    const verbose = true;\n    const str = tf.tensor([\n                    ['abcdef', 'a', 'abcdef'],\n                    ['abcdef', 'abcdef', 'abc'],\n                    ['abcd', 'abcdef', 'abcdef'],\n                  ]).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: string\\n' +\n        '  rank: 2\\n' +\n        '  shape: [3,3]\\n' +\n        '  values:\\n' +\n        '    [[\\'abcdef\\', \\'a\\'     , \\'abcdef\\'],\\n' +\n        '     [\\'abcdef\\', \\'abcdef\\', \\'abc\\'   ],\\n' +\n        '     [\\'abcd\\'  , \\'abcdef\\', \\'abcdef\\']]');\n  });\n\n  it('scalar', () => {\n    const str = tf.scalar(5).toString();\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '    5');\n  });\n\n  it('scalar string', () => {\n    const str = tf.scalar('hello').toString();\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '    hello');\n  });\n\n  it('1d tensor', () => {\n    const str = tf.zeros([4]).toString();\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '    [0, 0, 0, 0]');\n  });\n\n  it('2d tensor', () => {\n    const str = tf.zeros([3, 3]).toString();\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '    [[0, 0, 0],\\n' +\n        '     [0, 0, 0],\\n' +\n        '     [0, 0, 0]]');\n  });\n\n  it('3d tensor', () => {\n    const str = tf.zeros([3, 3, 2]).toString();\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '    [[[0, 0],\\n' +\n        '      [0, 0],\\n' +\n        '      [0, 0]],\\n\\n' +\n        '     [[0, 0],\\n' +\n        '      [0, 0],\\n' +\n        '      [0, 0]],\\n\\n' +\n        '     [[0, 0],\\n' +\n        '      [0, 0],\\n' +\n        '      [0, 0]]]');\n  });\n\n  it('1d long tensor', () => {\n    const str = tf.zeros([100]).toString();\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '    [0, 0, 0, ..., 0, 0, 0]');\n  });\n\n  it('2d long tensor', () => {\n    const str = tf.zeros([100, 100]).toString();\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '    [[0, 0, 0, ..., 0, 0, 0],\\n' +\n        '     [0, 0, 0, ..., 0, 0, 0],\\n' +\n        '     [0, 0, 0, ..., 0, 0, 0],\\n' +\n        '     ...,\\n' +\n        '     [0, 0, 0, ..., 0, 0, 0],\\n' +\n        '     [0, 0, 0, ..., 0, 0, 0],\\n' +\n        '     [0, 0, 0, ..., 0, 0, 0]]');\n  });\n\n  it('2d with padding to align columns', () => {\n    const str = tf.tensor([\n                    [0.8597712, 3, 0.2740789], [0.6696132, 0.4825962, 2.75],\n                    [1.991, 0.0640865, 0.2983858]\n                  ]).toString();\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '    [[0.8597712, 3        , 0.2740789],\\n' +\n        '     [0.6696132, 0.4825962, 2.75     ],\\n' +\n        '     [1.9910001, 0.0640865, 0.2983858]]');\n  });\n\n  it('scalar complex64 verbose', () => {\n    const verbose = true;\n    const str = tf.complex(5, 6).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: complex64\\n' +\n        '  rank: 0\\n' +\n        '  shape: []\\n' +\n        '  values:\\n' +\n        '    5 + 6j');\n  });\n\n  it('1d complex64 tensor verbose', () => {\n    const verbose = true;\n    const str = tf.complex([3, 5], [4, 6]).toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: complex64\\n' +\n        '  rank: 1\\n' +\n        '  shape: [2]\\n' +\n        '  values:\\n' +\n        '    [3 + 4j, 5 + 6j]');\n  });\n\n  it('2d complex64 tensor verbose', () => {\n    const verbose = true;\n    const str = tf.complex(tf.linspace(0, 8, 9), tf.linspace(8, 0, 9))\n                    .reshape([3, 3])\n                    .toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: complex64\\n' +\n        '  rank: 2\\n' +\n        '  shape: [3,3]\\n' +\n        '  values:\\n' +\n        '    [[0 + 8j, 1 + 7j, 2 + 6j],\\n' +\n        '     [3 + 5j, 4 + 4j, 5 + 3j],\\n' +\n        '     [6 + 2j, 7 + 1j, 8 + 0j]]');\n  });\n\n  it('3d complex64 tensor verbose', () => {\n    const verbose = true;\n    const str = tf.complex(tf.linspace(0, 17, 18), tf.linspace(17, 0, 18))\n                    .reshape([3, 3, 2])\n                    .toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: complex64\\n' +\n        '  rank: 3\\n' +\n        '  shape: [3,3,2]\\n' +\n        '  values:\\n' +\n        '    [[[0 + 17j, 1 + 16j],\\n' +\n        '      [2 + 15j, 3 + 14j],\\n' +\n        '      [4 + 13j, 5 + 12j]],\\n\\n' +\n        '     [[6 + 11j, 7 + 10j],\\n' +\n        '      [8 + 9j , 9 + 8j ],\\n' +\n        '      [10 + 7j, 11 + 6j]],\\n\\n' +\n        '     [[12 + 5j, 13 + 4j],\\n' +\n        '      [14 + 3j, 15 + 2j],\\n' +\n        '      [16 + 1j, 17 + 0j]]]');\n  });\n\n  it('1d long complex64 tensor verbose', () => {\n    const verbose = true;\n    const str = tf.complex(tf.linspace(0, 99, 100), tf.linspace(99, 0, 100))\n                    .toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: complex64\\n' +\n        '  rank: 1\\n' +\n        '  shape: [100]\\n' +\n        '  values:\\n' +\n        '    [0 + 99j, 1 + 98j, 2 + 97j, ..., 97 + 2j, 98 + 1j, 99 + 0j]');\n  });\n\n  it('2d long complex64 tensor verbose', () => {\n    const verbose = true;\n\n    const dim = 100;\n    const str = tf.complex(\n                      tf.linspace(0, dim * dim - 1, dim * dim),\n                      tf.linspace(dim * dim - 1, 0, dim * dim))\n                    .reshape([dim, dim])\n                    .toString(verbose);\n\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: complex64\\n' +\n        '  rank: 2\\n' +\n        '  shape: [100,100]\\n' +\n        '  values:\\n' +\n        // tslint:disable:max-line-length\n        '    [[0 + 9999j   , 1 + 9998j   , 2 + 9997j   , ..., 97 + 9902j  , 98 + 9901j  , 99 + 9900j  ],\\n' +\n        '     [100 + 9899j , 101 + 9898j , 102 + 9897j , ..., 197 + 9802j , 198 + 9801j , 199 + 9800j ],\\n' +\n        '     [200 + 9799j , 201 + 9798j , 202 + 9797j , ..., 297 + 9702j , 298 + 9701j , 299 + 9700j ],\\n' +\n        '     ...,\\n' +\n        '     [9700 + 299j , 9701 + 298j , 9702 + 297j , ..., 9797 + 202j , 9798 + 201j , 9799 + 200j ],\\n' +\n        '     [9800 + 199j , 9801 + 198j , 9802 + 197j , ..., 9897 + 102j , 9898 + 101j , 9899 + 100j ],\\n' +\n        '     [9900 + 99j  , 9901 + 98j  , 9902 + 97j  , ..., 9997 + 2j   , 9998 + 1j   , 9999 + 0j   ]]');\n    // tslint:enable:max-line-length\n  });\n\n  it('2d complex64 with padding to align columns verbose', () => {\n    const verbose = true;\n\n    const str = tf.complex(\n                      [\n                        [0.8597712, 3, 0.2740789], [0.6696132, 0.4825962, 2.75],\n                        [1.991, 0.0640865, 0.2983858]\n                      ],\n                      [[1, 1.0102332, 3], [2, 5, 2.34424], [1.23, 2, 0.123]])\n                    .toString(verbose);\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '  dtype: complex64\\n' +\n        '  rank: 2\\n' +\n        '  shape: [3,3]\\n' +\n        '  values:\\n' +\n        '    [[0.8597712 + 1j   , 3 + 1.0102332j, 0.2740789 + 3j    ],\\n' +\n        '     [0.6696132 + 2j   , 0.4825962 + 5j, 2.75 + 2.34424j   ],\\n' +\n        '     [1.9910001 + 1.23j, 0.0640865 + 2j, 0.2983858 + 0.123j]]');\n  });\n\n  it('scalar complex64', () => {\n    const str = tf.complex(5, 4).toString();\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '    5 + 4j');\n  });\n\n  it('1d complex64 tensor', () => {\n    const str =\n        tf.complex(tf.linspace(0, 3, 4), tf.linspace(3, 0, 4)).toString();\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '    [0 + 3j, 1 + 2j, 2 + 1j, 3 + 0j]');\n  });\n\n  it('2d complex64 tensor', () => {\n    const str = tf.complex(tf.linspace(0, 8, 9), tf.linspace(8, 0, 9))\n                    .reshape([3, 3])\n                    .toString();\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '    [[0 + 8j, 1 + 7j, 2 + 6j],\\n' +\n        '     [3 + 5j, 4 + 4j, 5 + 3j],\\n' +\n        '     [6 + 2j, 7 + 1j, 8 + 0j]]');\n  });\n\n  it('3d complex64 tensor', () => {\n    const str = tf.complex(tf.linspace(0, 17, 18), tf.linspace(17, 0, 18))\n                    .reshape([3, 3, 2])\n                    .toString();\n\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '    [[[0 + 17j, 1 + 16j],\\n' +\n        '      [2 + 15j, 3 + 14j],\\n' +\n        '      [4 + 13j, 5 + 12j]],\\n\\n' +\n        '     [[6 + 11j, 7 + 10j],\\n' +\n        '      [8 + 9j , 9 + 8j ],\\n' +\n        '      [10 + 7j, 11 + 6j]],\\n\\n' +\n        '     [[12 + 5j, 13 + 4j],\\n' +\n        '      [14 + 3j, 15 + 2j],\\n' +\n        '      [16 + 1j, 17 + 0j]]]');\n  });\n\n  it('1d long complex64 tensor', () => {\n    const str =\n        tf.complex(tf.linspace(0, 99, 100), tf.linspace(99, 0, 100)).toString();\n\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '    [0 + 99j, 1 + 98j, 2 + 97j, ..., 97 + 2j, 98 + 1j, 99 + 0j]');\n  });\n\n  it('2d long complex64 tensor', () => {\n    const dim = 100;\n    const str = tf.complex(\n                      tf.linspace(0, dim * dim - 1, dim * dim),\n                      tf.linspace(dim * dim - 1, 0, dim * dim))\n                    .reshape([dim, dim])\n                    .toString();\n\n    expect(str).toEqual(\n        'Tensor\\n' +\n        // tslint:disable:max-line-length\n        '    [[0 + 9999j   , 1 + 9998j   , 2 + 9997j   , ..., 97 + 9902j  , 98 + 9901j  , 99 + 9900j  ],\\n' +\n        '     [100 + 9899j , 101 + 9898j , 102 + 9897j , ..., 197 + 9802j , 198 + 9801j , 199 + 9800j ],\\n' +\n        '     [200 + 9799j , 201 + 9798j , 202 + 9797j , ..., 297 + 9702j , 298 + 9701j , 299 + 9700j ],\\n' +\n        '     ...,\\n' +\n        '     [9700 + 299j , 9701 + 298j , 9702 + 297j , ..., 9797 + 202j , 9798 + 201j , 9799 + 200j ],\\n' +\n        '     [9800 + 199j , 9801 + 198j , 9802 + 197j , ..., 9897 + 102j , 9898 + 101j , 9899 + 100j ],\\n' +\n        '     [9900 + 99j  , 9901 + 98j  , 9902 + 97j  , ..., 9997 + 2j   , 9998 + 1j   , 9999 + 0j   ]]');\n    // tslint:enable:max-line-length\n  });\n\n  it('2d complex64 with padding to align columns', () => {\n    const str = tf.complex(\n                      [\n                        [0.8597712, 3, 0.2740789], [0.6696132, 0.4825962, 2.75],\n                        [1.991, 0.0640865, 0.2983858]\n                      ],\n                      [[1, 1.0102332, 3], [2, 5, 2.34424], [1.23, 2, 0.123]])\n                    .toString();\n    expect(str).toEqual(\n        'Tensor\\n' +\n        '    [[0.8597712 + 1j   , 3 + 1.0102332j, 0.2740789 + 3j    ],\\n' +\n        '     [0.6696132 + 2j   , 0.4825962 + 5j, 2.75 + 2.34424j   ],\\n' +\n        '     [1.9910001 + 1.23j, 0.0640865 + 2j, 0.2983858 + 0.123j]]');\n  });\n});\n\ndescribeWithFlags('tensor grad', ALL_ENVS, () => {\n  it('grad with second derivative', async () => {\n    // f(x) = x ^ 3\n    const f = (x: Tensor) => x.pow(tf.scalar(3, 'int32'));\n    // f'(x) = 3x ^ 2\n    const g = tf.grad(f);\n    // f''(x) = 6x\n    const gg = tf.grad(g);\n    const x = tf.tensor1d([2, 3]);\n    const data = gg(x);\n    expectArraysClose(await data.data(), [12, 18]);\n  });\n});\n\ndescribeWithFlags('tensor.data', ALL_ENVS, () => {\n  it('interleaving .data() and .dataSync()', async () => {\n    const a = tf.tensor1d([1, 2, 3]);\n    const b = tf.tensor1d([4, 5, 6]);\n\n    const ra = a.square();\n    const rb = b.square();\n\n    expectArraysClose(await a.data(), [1, 2, 3]);\n    expectArraysClose(await b.data(), [4, 5, 6]);\n    expectArraysClose(await rb.data(), [16, 25, 36]);\n    expectArraysClose(await ra.data(), [1, 4, 9]);\n  });\n\n  it('.data() postpones disposal of tensor', done => {\n    expect(tf.memory().numTensors).toBe(0);\n    tf.tidy(() => {\n      const a = tf.scalar(5);\n      expect(tf.memory().numTensors).toBe(1);\n      a.square();  // Uploads it on GPU.\n      a.data().then(vals => {\n        // The tidy above should not dispose the scalar since there is\n        // a pending data read.\n        expectNumbersClose(vals[0], 5);\n      });\n    });\n\n    // tidy ends immediately, but should not dispose the scalar.\n\n    setTimeout(() => {\n      // tidy should dispose the tensor.\n      expect(tf.memory().numTensors).toBe(0);\n      done();\n    });\n  });\n\n  it('calling .data() twice works (2 subscribers to a single read)', done => {\n    tf.tidy(() => {\n      const a = tf.scalar(5);\n      a.square();  // Uploads it on GPU.\n      a.data().then(vals => {\n        expectNumbersClose(vals[0], 5);\n      });\n      a.data()\n          .then(vals => {\n            expectNumbersClose(vals[0], 5);\n          })\n          .then(done);\n    });\n    // tidy ends immediately, but should not dispose the scalar since there is\n    // a pending data read.\n  });\n});\n\ndescribeWithFlags('x instanceof Tensor', ALL_ENVS, () => {\n  it('x: Tensor', () => {\n    const t = tf.scalar(1);\n    expect(t instanceof Tensor).toBe(true);\n  });\n\n  it('x: other object, fails', () => {\n    const t = {something: 'else'};\n    expect(t instanceof Tensor).toBe(false);\n  });\n\n  it('x: undefined or null, fails', () => {\n    // tslint:disable-next-line:no-any\n    expect((undefined as any) instanceof Tensor).toBe(false);\n    // tslint:disable-next-line:no-any\n    expect((null as any) instanceof Tensor).toBe(false);\n  });\n});\n\ndescribeWithFlags('tensor with 0 in shape', ALL_ENVS, () => {\n  it('1d of shape [0]', async () => {\n    const a = tf.tensor1d([]);\n    expect(a.dtype).toBe('float32');\n    expect(a.rank).toBe(1);\n    expect(a.shape).toEqual([0]);\n    expectArraysEqual(await a.data(), []);\n  });\n\n  it('1d string tensor of shape [0]', async () => {\n    const a = tf.tensor1d([], 'string');\n    expect(a.dtype).toBe('string');\n    expect(a.rank).toBe(1);\n    expect(a.shape).toEqual([0]);\n    expectArraysEqual(await a.data(), []);\n  });\n\n  it('2d of shape [0, 5]', async () => {\n    const a = tf.tensor2d([], [0, 5]);\n    expect(a.dtype).toBe('float32');\n    expect(a.rank).toBe(2);\n    expect(a.shape).toEqual([0, 5]);\n    expectArraysEqual(await a.data(), []);\n  });\n\n  it('2d string tensor of shape [0, 5]', async () => {\n    const a = tf.tensor2d([], [0, 5], 'string');\n    expect(a.dtype).toBe('string');\n    expect(a.rank).toBe(2);\n    expect(a.shape).toEqual([0, 5]);\n    expectArraysEqual(await a.data(), []);\n  });\n\n  it('2d throws when values are not empty', () => {\n    const values = [1, 2, 3, 4];\n    expect(() => tf.tensor2d(values, [0, 5], 'float32'))\n        .toThrowError(\n            'Based on the provided shape, [0,5], the ' +\n            'tensor should have 0 values but has 4');\n  });\n\n  it('3d of shape [0, 3, 0]', async () => {\n    const a = tf.tensor3d([], [0, 3, 0]);\n    expect(a.dtype).toBe('float32');\n    expect(a.rank).toBe(3);\n    expect(a.shape).toEqual([0, 3, 0]);\n    expectArraysEqual(await a.data(), []);\n  });\n\n  it('3d throws when values are not empty', () => {\n    const values = [1, 2, 3];\n    expect(() => tf.tensor3d(values, [0, 3, 0], 'float32'))\n        .toThrowError(\n            'Based on the provided shape, [0,3,0], the ' +\n            'tensor should have 0 values but has 3');\n  });\n\n  it('4d of shape [1, 3, 0, 5]', async () => {\n    const a = tf.tensor4d([], [1, 3, 0, 5]);\n    expect(a.dtype).toBe('float32');\n    expect(a.rank).toBe(4);\n    expect(a.shape).toEqual([1, 3, 0, 5]);\n    expectArraysEqual(await a.data(), []);\n  });\n\n  it('4d throws when values are not empty', () => {\n    const values = [1, 2, 3];\n    expect(() => tf.tensor4d(values, [1, 3, 0, 5], 'float32'))\n        .toThrowError(\n            'Based on the provided shape, [1,3,0,5], the ' +\n            'tensor should have 0 values but has 3');\n  });\n\n  it('complex64 with 0 in shape', async () => {\n    const areal = tf.tensor2d([], [0, 5]);\n    const breal = tf.tensor2d([], [0, 5]);\n    const a = tf.complex(areal, breal);\n    expect(a.dtype).toBe('complex64');\n    expect(a.rank).toBe(2);\n    expect(a.shape).toEqual([0, 5]);\n    expectArraysEqual(await a.data(), []);\n  });\n});\n\ndescribeWithFlags('tensor.bytes()', ALL_ENVS, () => {\n  /** Helper method to get the bytes from a typed array. */\n  function getBytes(a: TypedArray): Uint8Array {\n    return new Uint8Array(a.buffer);\n  }\n\n  it('float32 tensor', async () => {\n    const a = tf.tensor([1.1, 3.2, 7], [3], 'float32');\n    expect(await a.bytes()).toEqual(getBytes(new Float32Array([1.1, 3.2, 7])));\n  });\n\n  it('int32 tensor', async () => {\n    const a = tf.tensor([1.1, 3.2, 7], [3], 'int32');\n    expect(await a.bytes()).toEqual(getBytes(new Int32Array([1, 3, 7])));\n  });\n\n  it('bool tensor', async () => {\n    const a = tf.tensor([true, true, false], [3], 'bool');\n    expect(await a.bytes()).toEqual(new Uint8Array([1, 1, 0]));\n  });\n\n  it('string tensor from native strings', async () => {\n    const a = tf.tensor(['hello', 'world'], [2], 'string');\n    expect(await a.bytes()).toEqual([\n      encodeString('hello'), encodeString('world')\n    ]);\n  });\n\n  it('string tensor from encoded bytes', async () => {\n    const a = tf.tensor(\n        [encodeString('hello'), encodeString('world')], [2], 'string');\n    expect(await a.bytes()).toEqual([\n      encodeString('hello'), encodeString('world')\n    ]);\n  });\n});\n"]}