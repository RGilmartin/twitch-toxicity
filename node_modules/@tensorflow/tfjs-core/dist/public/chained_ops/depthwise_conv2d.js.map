{"version":3,"file":"depthwise_conv2d.js","sourceRoot":"","sources":["../../../src/public/chained_ops/depthwise_conv2d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AACH,OAAO,EAAC,eAAe,EAAC,MAAM,4BAA4B,CAAC;AAC3D,OAAO,EAAC,oBAAoB,EAAqB,MAAM,cAAc,CAAC;AAatE,oBAAoB,EAAE,CAAC,SAAS,CAAC,eAAe;IAC5C,UACI,MAA6B,EAAE,OAAgC,EAC/D,GAA0B,EAAE,UAA0B,EACtD,SAAmC,EACnC,eAAwC;QAC9C,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,OAAO,eAAe,CACX,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,SAAS,EACjD,eAAe,CAAM,CAAC;IACnC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {depthwiseConv2d} from '../../ops/depthwise_conv2d';\nimport {getGlobalTensorClass, Tensor3D, Tensor4D} from '../../tensor';\nimport {Rank, TensorLike4D} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    depthwiseConv2d<T extends Tensor3D|Tensor4D>(\n        filter: Tensor4D|TensorLike4D, strides: [number, number]|number,\n        pad: 'valid'|'same'|number, dataFormat?: 'NHWC'|'NCHW',\n        dilations?: [number, number]|number,\n        dimRoundingMode?: 'floor'|'round'|'ceil'): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.depthwiseConv2d =\n    function<T extends Tensor3D|Tensor4D>(\n        filter: Tensor4D|TensorLike4D, strides: [number, number]|number,\n        pad: 'valid'|'same'|number, dataFormat?: 'NHWC'|'NCHW',\n        dilations?: [number, number]|number,\n        dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  this.throwIfDisposed();\n  return depthwiseConv2d(\n             this, filter, strides, pad, dataFormat, dilations,\n             dimRoundingMode) as T;\n};\n"]}