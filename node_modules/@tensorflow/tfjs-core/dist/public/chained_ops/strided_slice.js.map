{"version":3,"file":"strided_slice.js","sourceRoot":"","sources":["../../../src/public/chained_ops/strided_slice.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,kDAAkD;AAClD,OAAO,EAAC,YAAY,EAAC,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAC,oBAAoB,EAAS,MAAM,cAAc,CAAC;AAY1D,oBAAoB,EAAE,CAAC,SAAS,CAAC,YAAY,GAAG,UAC9B,KAAe,EAAE,GAAa,EAAE,OAAiB,EAC/D,SAAkB,EAAE,OAAgB,EAAE,YAAqB,EAC3D,WAAoB,EAAE,cAAuB;IAC/C,IAAI,CAAC,eAAe,EAAE,CAAC;IACvB,OAAO,YAAY,CACR,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,YAAY,EAC3D,WAAW,EAAE,cAAc,CAAM,CAAC;AAC/C,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {stridedSlice} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    stridedSlice<T extends Tensor>(\n        this: Tensor, begin: number[], end: number[], strides: number[],\n        beginMask?: number, endMask?: number, ellipsisMask?: number,\n        newAxisMask?: number, shrinkAxisMask?: number): Tensor;\n  }\n}\n\ngetGlobalTensorClass().prototype.stridedSlice = function<T extends Tensor>(\n    this: Tensor, begin: number[], end: number[], strides: number[],\n    beginMask?: number, endMask?: number, ellipsisMask?: number,\n    newAxisMask?: number, shrinkAxisMask?: number): T {\n  this.throwIfDisposed();\n  return stridedSlice(\n             this, begin, end, strides, beginMask, endMask, ellipsisMask,\n             newAxisMask, shrinkAxisMask) as T;\n};\n"]}