{"version":3,"file":"register_all_chained_ops_test.js","sourceRoot":"","sources":["../../../src/public/chained_ops/register_all_chained_ops_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,mDAAmD,CAAC;AAE3D,OAAO,KAAK,EAAE,MAAM,aAAa,CAAC;AAClC,OAAO,EAAC,QAAQ,EAAE,iBAAiB,EAAC,MAAM,oBAAoB,CAAC;AAE/D,+EAA+E;AAC/E,4EAA4E;AAC5E,4EAA4E;AAC5E,mCAAmC;AAEnC,MAAM,WAAW,GAAG;IAClB,KAAK;IACL,MAAM;IACN,OAAO;IACP,KAAK;IACL,KAAK;IACL,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,OAAO;IACP,UAAU;IACV,QAAQ;IACR,MAAM;IACN,OAAO;IACP,OAAO;IACP,SAAS;IACT,WAAW;IACX,gBAAgB;IAChB,aAAa;IACb,MAAM;IACN,MAAM;IACN,aAAa;IACb,QAAQ;IACR,QAAQ;IACR,QAAQ;IACR,iBAAiB;IACjB,KAAK;IACL,MAAM;IACN,QAAQ;IACR,cAAc;IACd,iBAAiB;IACjB,YAAY;IACZ,KAAK;IACL,UAAU;IACV,KAAK;IACL,KAAK;IACL,OAAO;IACP,KAAK;IACL,KAAK;IACL,YAAY;IACZ,OAAO;IACP,KAAK;IACL,SAAS;IACT,OAAO;IACP,UAAU;IACV,QAAQ;IACR,SAAS;IACT,cAAc;IACd,MAAM;IACN,OAAO;IACP,UAAU;IACV,OAAO;IACP,OAAO;IACP,WAAW;IACX,MAAM;IACN,WAAW;IACX,4BAA4B;IAC5B,KAAK;IACL,OAAO;IACP,YAAY;IACZ,YAAY;IACZ,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,WAAW;IACX,QAAQ;IACR,KAAK;IACL,SAAS;IACT,SAAS;IACT,MAAM;IACN,KAAK;IACL,SAAS;IACT,WAAW;IACX,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,UAAU;IACV,QAAQ;IACR,UAAU;IACV,KAAK;IACL,MAAM;IACN,KAAK;IACL,OAAO;IACP,MAAM;IACN,YAAY;IACZ,MAAM;IACN,OAAO;IACP,SAAS;IACT,WAAW;IACX,gBAAgB;IAChB,uBAAuB;IACvB,SAAS;IACT,MAAM;IACN,OAAO;IACP,OAAO;IACP,MAAM;IACN,iBAAiB;IACjB,SAAS;IACT,MAAM;IACN,KAAK;IACL,MAAM;IACN,OAAO;IACP,SAAS;IACT,UAAU;IACV,gBAAgB;IAChB,OAAO;IACP,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,SAAS;IACT,OAAO;IACP,MAAM;IACN,cAAc;IACd,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,MAAM;IACN,QAAQ;IACR,SAAS;IACT,OAAO;IACP,MAAM;IACN,WAAW;IACX,QAAQ;IACR,oBAAoB;IACpB,SAAS;IACT,OAAO;IACP,WAAW;CACZ,CAAC;AAEF,iBAAiB,CAAC,aAAa,EAAE,QAAQ,EAAE,GAAG,EAAE;IAC9C,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACpC,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE;YAChC,YAAY;YACZ,MAAM,CAAC,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC;iBACxB,IAAI,CAAC,UAAU,EAAE,GAAG,MAAM,uBAAuB,CAAC,CAAC;SACzD;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../../public/chained_ops/register_all_chained_ops';\n\nimport * as tf from '../../index';\nimport {ALL_ENVS, describeWithFlags} from '../../jasmine_util';\n\n// Testing for presence of chained op in this file will allow us to more easily\n// customize when we want this test to run. Currently it will run be default\n// (And karma will always load the chain augmentor files). But this gives us\n// flexibility to change in future.\n\nconst CHAINED_OPS = [\n  'abs',\n  'acos',\n  'acosh',\n  'add',\n  'all',\n  'any',\n  'argMax',\n  'argMin',\n  'as1D',\n  'as2D',\n  'as3D',\n  'as4D',\n  'as5D',\n  'asin',\n  'asinh',\n  'asScalar',\n  'asType',\n  'atan',\n  'atan2',\n  'atanh',\n  'avgPool',\n  'batchNorm',\n  'batchToSpaceND',\n  'broadcastTo',\n  'cast',\n  'ceil',\n  'clipByValue',\n  'concat',\n  'conv1d',\n  'conv2d',\n  'conv2dTranspose',\n  'cos',\n  'cosh',\n  'cumsum',\n  'depthToSpace',\n  'depthwiseConv2d',\n  'dilation2d',\n  'div',\n  'divNoNan',\n  'dot',\n  'elu',\n  'equal',\n  'erf',\n  'exp',\n  'expandDims',\n  'expm1',\n  'fft',\n  'flatten',\n  'floor',\n  'floorDiv',\n  'gather',\n  'greater',\n  'greaterEqual',\n  'ifft',\n  'irfft',\n  'isFinite',\n  'isInf',\n  'isNaN',\n  'leakyRelu',\n  'less',\n  'lessEqual',\n  'localResponseNormalization',\n  'log',\n  'log1p',\n  'logicalAnd',\n  'logicalNot',\n  'logicalOr',\n  'logicalXor',\n  'logSigmoid',\n  'logSoftmax',\n  'logSumExp',\n  'matMul',\n  'max',\n  'maximum',\n  'maxPool',\n  'mean',\n  'min',\n  'minimum',\n  'mirrorPad',\n  'mod',\n  'mul',\n  'neg',\n  'norm',\n  'notEqual',\n  'oneHot',\n  'onesLike',\n  'pad',\n  'pool',\n  'pow',\n  'prelu',\n  'prod',\n  'reciprocal',\n  'relu',\n  'relu6',\n  'reshape',\n  'reshapeAs',\n  'resizeBilinear',\n  'resizeNearestNeighbor',\n  'reverse',\n  'rfft',\n  'round',\n  'rsqrt',\n  'selu',\n  'separableConv2d',\n  'sigmoid',\n  'sign',\n  'sin',\n  'sinh',\n  'slice',\n  'softmax',\n  'softplus',\n  'spaceToBatchND',\n  'split',\n  'sqrt',\n  'square',\n  'square',\n  'squeeze',\n  'stack',\n  'step',\n  'stridedSlice',\n  'sub',\n  'sum',\n  'tan',\n  'tanh',\n  'tile',\n  'toBool',\n  'toFloat',\n  'toInt',\n  'topk',\n  'transpose',\n  'unique',\n  'unsortedSegmentSum',\n  'unstack',\n  'where',\n  'zerosLike'\n];\n\ndescribeWithFlags('chained ops', ALL_ENVS, () => {\n  it('all chained ops should exist on tensor ', async () => {\n    const tensor = tf.tensor([1, 2, 3]);\n    for (const opName of CHAINED_OPS) {\n      //@ts-ignore\n      expect(typeof tensor[opName])\n          .toBe('function', `${opName} chained op not found`);\n    }\n  });\n});\n"]}