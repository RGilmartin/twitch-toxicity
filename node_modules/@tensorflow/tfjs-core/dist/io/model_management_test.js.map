{"version":3,"file":"model_management_test.js","sourceRoot":"","sources":["../../src/io/model_management_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../index';\nimport {CHROME_ENVS, describeWithFlags} from '../jasmine_util';\nimport {deleteDatabase} from './indexed_db';\nimport {purgeLocalStorageArtifacts} from './local_storage';\n\n// Disabled for non-Chrome browsers due to:\n// https://github.com/tensorflow/tfjs/issues/427\ndescribeWithFlags('ModelManagement', CHROME_ENVS, () => {\n  // Test data.\n  const modelTopology1: {} = {\n    'class_name': 'Sequential',\n    'keras_version': '2.1.4',\n    'config': [{\n      'class_name': 'Dense',\n      'config': {\n        'kernel_initializer': {\n          'class_name': 'VarianceScaling',\n          'config': {\n            'distribution': 'uniform',\n            'scale': 1.0,\n            'seed': null,\n            'mode': 'fan_avg'\n          }\n        },\n        'name': 'dense',\n        'kernel_constraint': null,\n        'bias_regularizer': null,\n        'bias_constraint': null,\n        'dtype': 'float32',\n        'activation': 'linear',\n        'trainable': true,\n        'kernel_regularizer': null,\n        'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n        'units': 1,\n        'batch_input_shape': [null, 3],\n        'use_bias': true,\n        'activity_regularizer': null\n      }\n    }],\n    'backend': 'tensorflow'\n  };\n  const weightSpecs1: tf.io.WeightsManifestEntry[] = [\n    {\n      name: 'dense/kernel',\n      shape: [3, 1],\n      dtype: 'float32',\n    },\n    {\n      name: 'dense/bias',\n      shape: [1],\n      dtype: 'float32',\n    }\n  ];\n  const weightData1 = new ArrayBuffer(16);\n  const artifacts1: tf.io.ModelArtifacts = {\n    modelTopology: modelTopology1,\n    weightSpecs: weightSpecs1,\n    weightData: weightData1,\n  };\n\n  beforeEach(done => {\n    purgeLocalStorageArtifacts();\n    deleteDatabase().then(() => {\n      done();\n    });\n  });\n\n  afterEach(done => {\n    purgeLocalStorageArtifacts();\n    deleteDatabase().then(() => {\n      done();\n    });\n  });\n\n  // TODO(cais): Reenable this test once we fix\n  // https://github.com/tensorflow/tfjs/issues/1198\n  // tslint:disable-next-line:ban\n  xit('List models: 0 result', done => {\n    // Before any model is saved, listModels should return empty result.\n    tf.io.listModels()\n        .then(out => {\n          expect(out).toEqual({});\n          done();\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  // TODO(cais): Reenable this test once we fix\n  // https://github.com/tensorflow/tfjs/issues/1198\n  // tslint:disable-next-line:ban\n  xit('List models: 1 result', done => {\n    const url = 'localstorage://baz/QuxModel';\n    const handler = tf.io.getSaveHandlers(url)[0];\n    handler.save(artifacts1)\n        .then(saveResult => {\n          // After successful saving, there should be one model.\n          tf.io.listModels()\n              .then(out => {\n                expect(Object.keys(out).length).toEqual(1);\n                expect(out[url].modelTopologyType)\n                    .toEqual(saveResult.modelArtifactsInfo.modelTopologyType);\n                expect(out[url].modelTopologyBytes)\n                    .toEqual(saveResult.modelArtifactsInfo.modelTopologyBytes);\n                expect(out[url].weightSpecsBytes)\n                    .toEqual(saveResult.modelArtifactsInfo.weightSpecsBytes);\n                expect(out[url].weightDataBytes)\n                    .toEqual(saveResult.modelArtifactsInfo.weightDataBytes);\n                done();\n              })\n              .catch(err => done.fail(err.stack));\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  // TODO(cais): Reenable this test once we fix\n  // https://github.com/tensorflow/tfjs/issues/1198\n  // tslint:disable-next-line:ban\n  xit('Manager: List models: 2 results in 2 mediums', done => {\n    const url1 = 'localstorage://QuxModel';\n    const url2 = 'indexeddb://QuxModel';\n\n    // First, save a model in Local Storage.\n    const handler1 = tf.io.getSaveHandlers(url1)[0];\n    handler1.save(artifacts1)\n        .then(saveResult1 => {\n          // Then, save the model in IndexedDB.\n          const handler2 = tf.io.getSaveHandlers(url2)[0];\n          handler2.save(artifacts1)\n              .then(saveResult2 => {\n                // After successful saving, there should be two models.\n                tf.io.listModels()\n                    .then(out => {\n                      expect(Object.keys(out).length).toEqual(2);\n                      expect(out[url1].modelTopologyType)\n                          .toEqual(\n                              saveResult1.modelArtifactsInfo.modelTopologyType);\n                      expect(out[url1].modelTopologyBytes)\n                          .toEqual(saveResult1.modelArtifactsInfo\n                                       .modelTopologyBytes);\n                      expect(out[url1].weightSpecsBytes)\n                          .toEqual(\n                              saveResult1.modelArtifactsInfo.weightSpecsBytes);\n                      expect(out[url1].weightDataBytes)\n                          .toEqual(\n                              saveResult1.modelArtifactsInfo.weightDataBytes);\n                      expect(out[url2].modelTopologyType)\n                          .toEqual(\n                              saveResult2.modelArtifactsInfo.modelTopologyType);\n                      expect(out[url2].modelTopologyBytes)\n                          .toEqual(saveResult2.modelArtifactsInfo\n                                       .modelTopologyBytes);\n                      expect(out[url2].weightSpecsBytes)\n                          .toEqual(\n                              saveResult2.modelArtifactsInfo.weightSpecsBytes);\n                      expect(out[url2].weightDataBytes)\n                          .toEqual(\n                              saveResult2.modelArtifactsInfo.weightDataBytes);\n                      done();\n                    })\n                    .catch(err => done.fail(err.stack));\n              })\n              .catch(err => done.fail(err.stack));\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  // TODO(cais): Reenable this test once we fix\n  // https://github.com/tensorflow/tfjs/issues/1198\n  // tslint:disable-next-line:ban\n  xit('Successful removeModel', done => {\n    // First, save a model.\n    const handler1 = tf.io.getSaveHandlers('localstorage://QuxModel')[0];\n    handler1.save(artifacts1)\n        .then(saveResult1 => {\n          // Then, save the model under another path.\n          const handler2 =\n              tf.io.getSaveHandlers('indexeddb://repeat/QuxModel')[0];\n          handler2.save(artifacts1)\n              .then(saveResult2 => {\n                // After successful saving, delete the first save, and then\n                // `listModel` should give only one result.\n\n                // Delete a model specified with a path that includes the\n                // indexeddb:// scheme prefix should work.\n                tf.io.removeModel('indexeddb://repeat/QuxModel')\n                    .then(deletedInfo => {\n                      tf.io.listModels()\n                          .then(out => {\n                            expect(Object.keys(out)).toEqual([\n                              'localstorage://QuxModel'\n                            ]);\n\n                            tf.io.removeModel('localstorage://QuxModel')\n                                .then(out => {\n                                  // The delete the remaining model.\n                                  tf.io.listModels()\n                                      .then(out => {\n                                        expect(Object.keys(out)).toEqual([]);\n                                        done();\n                                      })\n                                      .catch(err => done.fail(err));\n                                })\n                                .catch(err => done.fail(err));\n                          })\n                          .catch(err => done.fail(err));\n                    })\n                    .catch(err => done.fail(err.stack));\n              })\n              .catch(err => done.fail(err.stack));\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  // TODO(cais): Reenable this test once we fix\n  // https://github.com/tensorflow/tfjs/issues/1198\n  // tslint:disable-next-line:ban\n  xit('Successful copyModel between mediums', done => {\n    const url1 = 'localstorage://a1/FooModel';\n    const url2 = 'indexeddb://a1/FooModel';\n    // First, save a model.\n    const handler1 = tf.io.getSaveHandlers(url1)[0];\n    handler1.save(artifacts1)\n        .then(saveResult => {\n          // Once model is saved, copy the model to another path.\n          tf.io.copyModel(url1, url2)\n              .then(modelInfo => {\n                tf.io.listModels().then(out => {\n                  expect(Object.keys(out).length).toEqual(2);\n                  expect(out[url1].modelTopologyType)\n                      .toEqual(saveResult.modelArtifactsInfo.modelTopologyType);\n                  expect(out[url1].modelTopologyBytes)\n                      .toEqual(\n                          saveResult.modelArtifactsInfo.modelTopologyBytes);\n                  expect(out[url1].weightSpecsBytes)\n                      .toEqual(saveResult.modelArtifactsInfo.weightSpecsBytes);\n                  expect(out[url1].weightDataBytes)\n                      .toEqual(saveResult.modelArtifactsInfo.weightDataBytes);\n                  expect(out[url2].modelTopologyType)\n                      .toEqual(saveResult.modelArtifactsInfo.modelTopologyType);\n                  expect(out[url2].modelTopologyBytes)\n                      .toEqual(\n                          saveResult.modelArtifactsInfo.modelTopologyBytes);\n                  expect(out[url2].weightSpecsBytes)\n                      .toEqual(saveResult.modelArtifactsInfo.weightSpecsBytes);\n                  expect(out[url2].weightDataBytes)\n                      .toEqual(saveResult.modelArtifactsInfo.weightDataBytes);\n\n                  // Load the copy and verify the content.\n                  const handler2 = tf.io.getLoadHandlers(url2)[0];\n                  handler2.load()\n                      .then(loaded => {\n                        expect(loaded.modelTopology).toEqual(modelTopology1);\n                        expect(loaded.weightSpecs).toEqual(weightSpecs1);\n                        expect(new Uint8Array(loaded.weightData))\n                            .toEqual(new Uint8Array(weightData1));\n                        done();\n                      })\n                      .catch(err => done.fail(err.stack));\n                });\n              })\n              .catch(err => done.fail(err.stack));\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  // TODO(cais): Reenable this test once we fix\n  // https://github.com/tensorflow/tfjs/issues/1198\n  // tslint:disable-next-line:ban\n  xit('Successful moveModel between mediums', done => {\n    const url1 = 'localstorage://a1/FooModel';\n    const url2 = 'indexeddb://a1/FooModel';\n    // First, save a model.\n    const handler1 = tf.io.getSaveHandlers(url1)[0];\n    handler1.save(artifacts1)\n        .then(saveResult => {\n          // Once model is saved, move the model to another path.\n          tf.io.moveModel(url1, url2)\n              .then(modelInfo => {\n                tf.io.listModels().then(out => {\n                  expect(Object.keys(out)).toEqual([url2]);\n                  expect(out[url2].modelTopologyType)\n                      .toEqual(saveResult.modelArtifactsInfo.modelTopologyType);\n                  expect(out[url2].modelTopologyBytes)\n                      .toEqual(\n                          saveResult.modelArtifactsInfo.modelTopologyBytes);\n                  expect(out[url2].weightSpecsBytes)\n                      .toEqual(saveResult.modelArtifactsInfo.weightSpecsBytes);\n                  expect(out[url2].weightDataBytes)\n                      .toEqual(saveResult.modelArtifactsInfo.weightDataBytes);\n\n                  // Load the copy and verify the content.\n                  const handler2 = tf.io.getLoadHandlers(url2)[0];\n                  handler2.load()\n                      .then(loaded => {\n                        expect(loaded.modelTopology).toEqual(modelTopology1);\n                        expect(loaded.weightSpecs).toEqual(weightSpecs1);\n                        expect(new Uint8Array(loaded.weightData))\n                            .toEqual(new Uint8Array(weightData1));\n                        done();\n                      })\n                      .catch(err => {\n                        done.fail(err.stack);\n                      });\n                });\n              })\n              .catch(err => done.fail(err.stack));\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  it('Failed copyModel to invalid source URL', done => {\n    const url1 = 'invalidurl';\n    const url2 = 'localstorage://a1/FooModel';\n    tf.io.copyModel(url1, url2)\n        .then(out => {\n          done.fail('Copying from invalid URL succeeded unexpectedly.');\n        })\n        .catch(err => {\n          expect(err.message)\n              .toEqual(\n                  'Copying failed because no load handler is found for ' +\n                  'source URL invalidurl.');\n          done();\n        });\n  });\n\n  it('Failed copyModel to invalid destination URL', done => {\n    const url1 = 'localstorage://a1/FooModel';\n    const url2 = 'invalidurl';\n    // First, save a model.\n    const handler1 = tf.io.getSaveHandlers(url1)[0];\n    handler1.save(artifacts1)\n        .then(saveResult => {\n          // Once model is saved, copy the model to another path.\n          tf.io.copyModel(url1, url2)\n              .then(out => {\n                done.fail('Copying to invalid URL succeeded unexpectedly.');\n              })\n              .catch(err => {\n                expect(err.message)\n                    .toEqual(\n                        'Copying failed because no save handler is found for ' +\n                        'destination URL invalidurl.');\n                done();\n              });\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  it('Failed moveModel to invalid destination URL', done => {\n    const url1 = 'localstorage://a1/FooModel';\n    const url2 = 'invalidurl';\n    // First, save a model.\n    const handler1 = tf.io.getSaveHandlers(url1)[0];\n    handler1.save(artifacts1)\n        .then(saveResult => {\n          // Once model is saved, copy the model to an invalid path, which\n          // should fail.\n          tf.io.moveModel(url1, url2)\n              .then(out => {\n                done.fail('Copying to invalid URL succeeded unexpectedly.');\n              })\n              .catch(err => {\n                expect(err.message)\n                    .toEqual(\n                        'Copying failed because no save handler is found for ' +\n                        'destination URL invalidurl.');\n\n                // Verify that the source has not been removed.\n                tf.io.listModels()\n                    .then(out => {\n                      expect(Object.keys(out)).toEqual([url1]);\n                      done();\n                    })\n                    .catch(err => done.fail(err.stack));\n              });\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  it('Failed deletedModel: Absent scheme', done => {\n    // Attempt to delete a nonexistent model is expected to fail.\n    tf.io.removeModel('foo')\n        .then(out => {\n          done.fail(\n              'Removing model with missing scheme succeeded unexpectedly.');\n        })\n        .catch(err => {\n          expect(err.message)\n              .toMatch(/The url string provided does not contain a scheme/);\n          expect(err.message.indexOf('localstorage')).toBeGreaterThan(0);\n          expect(err.message.indexOf('indexeddb')).toBeGreaterThan(0);\n          done();\n        });\n  });\n\n  it('Failed deletedModel: Invalid scheme', done => {\n    // Attempt to delete a nonexistent model is expected to fail.\n    tf.io.removeModel('invalidscheme://foo')\n        .then(out => {\n          done.fail('Removing nonexistent model succeeded unexpectedly.');\n        })\n        .catch(err => {\n          expect(err.message)\n              .toEqual(\n                  'Cannot find model manager for scheme \\'invalidscheme\\'');\n          done();\n        });\n  });\n\n  it('Failed deletedModel: Nonexistent model', done => {\n    // Attempt to delete a nonexistent model is expected to fail.\n    tf.io.removeModel('indexeddb://nonexistent')\n        .then(out => {\n          done.fail('Removing nonexistent model succeeded unexpectedly.');\n        })\n        .catch(err => {\n          expect(err.message)\n              .toEqual(\n                  'Cannot find model with path \\'nonexistent\\' in IndexedDB.');\n          done();\n        });\n  });\n\n  it('Failed copyModel', done => {\n    // Attempt to copy a nonexistent model should fail.\n    tf.io.copyModel('indexeddb://nonexistent', 'indexeddb://destination')\n        .then(out => {\n          done.fail('Copying nonexistent model succeeded unexpectedly.');\n        })\n        .catch(err => {\n          expect(err.message)\n              .toEqual(\n                  'Cannot find model with path \\'nonexistent\\' in IndexedDB.');\n          done();\n        });\n  });\n\n  it('copyModel: Identical oldPath and newPath leads to Error', done => {\n    tf.io.copyModel('a/1', 'a/1')\n        .then(out => {\n          done.fail(\n              'Copying with identical old & new paths succeeded unexpectedly.');\n        })\n        .catch(err => {\n          expect(err.message)\n              .toEqual('Old path and new path are the same: \\'a/1\\'');\n          done();\n        });\n  });\n\n  it('moveModel: Identical oldPath and newPath leads to Error', done => {\n    tf.io.moveModel('a/1', 'a/1')\n        .then(out => {\n          done.fail(\n              'Copying with identical old & new paths succeeded unexpectedly.');\n        })\n        .catch(err => {\n          expect(err.message)\n              .toEqual('Old path and new path are the same: \\'a/1\\'');\n          done();\n        });\n  });\n});\n"]}