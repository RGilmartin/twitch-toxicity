{"version":3,"file":"http_test.js","sourceRoot":"","sources":["../../src/io/http_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../index';\nimport {BROWSER_ENVS, CHROME_ENVS, describeWithFlags, NODE_ENVS} from '../jasmine_util';\nimport {HTTPRequest, httpRouter, parseUrl} from './http';\n\n// Test data.\nconst modelTopology1: {} = {\n  'class_name': 'Sequential',\n  'keras_version': '2.1.4',\n  'config': [{\n    'class_name': 'Dense',\n    'config': {\n      'kernel_initializer': {\n        'class_name': 'VarianceScaling',\n        'config': {\n          'distribution': 'uniform',\n          'scale': 1.0,\n          'seed': null,\n          'mode': 'fan_avg'\n        }\n      },\n      'name': 'dense',\n      'kernel_constraint': null,\n      'bias_regularizer': null,\n      'bias_constraint': null,\n      'dtype': 'float32',\n      'activation': 'linear',\n      'trainable': true,\n      'kernel_regularizer': null,\n      'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n      'units': 1,\n      'batch_input_shape': [null, 3],\n      'use_bias': true,\n      'activity_regularizer': null\n    }\n  }],\n  'backend': 'tensorflow'\n};\n\nlet fetchSpy: jasmine.Spy;\n\ntype TypedArrays = Float32Array|Int32Array|Uint8Array|Uint16Array;\nconst fakeResponse =\n    (body: string|TypedArrays|ArrayBuffer, contentType: string, path: string) =>\n        ({\n          ok: true,\n          json() {\n            return Promise.resolve(JSON.parse(body as string));\n          },\n          arrayBuffer() {\n            const buf: ArrayBuffer = (body as TypedArrays).buffer ?\n                (body as TypedArrays).buffer :\n                body as ArrayBuffer;\n            return Promise.resolve(buf);\n          },\n          headers: {get: (key: string) => contentType},\n          url: path\n        });\n\nconst setupFakeWeightFiles =\n    (fileBufferMap: {\n      [filename: string]: {\n        data: string|Float32Array|Int32Array|ArrayBuffer|Uint8Array|Uint16Array,\n        contentType: string\n      }\n    },\n     requestInits: {[key: string]: RequestInit}) => {\n      fetchSpy = spyOn(tf.env().platform, 'fetch')\n                     .and.callFake((path: string, init: RequestInit) => {\n                       if (fileBufferMap[path]) {\n                         requestInits[path] = init;\n                         return Promise.resolve(fakeResponse(\n                             fileBufferMap[path].data,\n                             fileBufferMap[path].contentType, path));\n                       } else {\n                         return Promise.reject('path not found');\n                       }\n                     });\n    };\n\ndescribeWithFlags('http-load fetch', NODE_ENVS, () => {\n  let requestInits: {[key: string]: {headers: {[key: string]: string}}};\n  // tslint:disable-next-line:no-any\n  let originalFetch: any;\n  // simulate a fetch polyfill, this needs to be non-null for spyOn to work\n  beforeEach(() => {\n    // tslint:disable-next-line:no-any\n    originalFetch = (global as any).fetch;\n    // tslint:disable-next-line:no-any\n    (global as any).fetch = () => {};\n    requestInits = {};\n  });\n\n  afterAll(() => {\n    // tslint:disable-next-line:no-any\n    (global as any).fetch = originalFetch;\n  });\n\n  it('1 group, 2 weights, 1 path', async () => {\n    const weightManifest1: tf.io.WeightsManifestConfig = [{\n      paths: ['weightfile0'],\n      weights: [\n        {\n          name: 'dense/kernel',\n          shape: [3, 1],\n          dtype: 'float32',\n        },\n        {\n          name: 'dense/bias',\n          shape: [2],\n          dtype: 'float32',\n        }\n      ]\n    }];\n    const floatData = new Float32Array([1, 3, 3, 7, 4]);\n    setupFakeWeightFiles(\n        {\n          './model.json': {\n            data: JSON.stringify({\n              modelTopology: modelTopology1,\n              weightsManifest: weightManifest1,\n              format: 'tfjs-layers',\n              generatedBy: '1.15',\n              convertedBy: '1.3.1',\n              signature: null,\n              userDefinedMetadata: {}\n            }),\n            contentType: 'application/json'\n          },\n          './weightfile0':\n              {data: floatData, contentType: 'application/octet-stream'},\n        },\n        requestInits);\n\n    const handler = tf.io.http('./model.json');\n    const modelArtifacts = await handler.load();\n    expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(modelArtifacts.weightSpecs).toEqual(weightManifest1[0].weights);\n    expect(modelArtifacts.format).toEqual('tfjs-layers');\n    expect(modelArtifacts.generatedBy).toEqual('1.15');\n    expect(modelArtifacts.convertedBy).toEqual('1.3.1');\n    expect(modelArtifacts.userDefinedMetadata).toEqual({});\n    expect(new Float32Array(modelArtifacts.weightData)).toEqual(floatData);\n  });\n\n  it('throw exception if no fetch polyfill', () => {\n    // tslint:disable-next-line:no-any\n    delete (global as any).fetch;\n    try {\n      tf.io.http('./model.json');\n    } catch (err) {\n      expect(err.message).toMatch(/Unable to find fetch polyfill./);\n    }\n  });\n});\n\n// Turned off for other browsers due to:\n// https://github.com/tensorflow/tfjs/issues/426\ndescribeWithFlags('http-save', CHROME_ENVS, () => {\n  // Test data.\n  const weightSpecs1: tf.io.WeightsManifestEntry[] = [\n    {\n      name: 'dense/kernel',\n      shape: [3, 1],\n      dtype: 'float32',\n    },\n    {\n      name: 'dense/bias',\n      shape: [1],\n      dtype: 'float32',\n    }\n  ];\n  const weightData1 = new ArrayBuffer(16);\n  const artifacts1: tf.io.ModelArtifacts = {\n    modelTopology: modelTopology1,\n    weightSpecs: weightSpecs1,\n    weightData: weightData1,\n    format: 'layers-model',\n    generatedBy: 'TensorFlow.js v0.0.0',\n    convertedBy: null,\n    signature: null,\n    userDefinedMetadata: {},\n    modelInitializer: {}\n  };\n\n  let requestInits: RequestInit[] = [];\n\n  beforeEach(() => {\n    requestInits = [];\n    spyOn(tf.env().platform, 'fetch')\n        .and.callFake((path: string, init: RequestInit) => {\n          if (path === 'model-upload-test' ||\n              path === 'http://model-upload-test') {\n            requestInits.push(init);\n            return Promise.resolve(new Response(null, {status: 200}));\n          } else {\n            return Promise.reject(new Response(null, {status: 404}));\n          }\n        });\n  });\n\n  it('Save topology and weights, default POST method', (done) => {\n    const testStartDate = new Date();\n    const handler = tf.io.getSaveHandlers('http://model-upload-test')[0];\n    handler.save(artifacts1)\n        .then(saveResult => {\n          expect(saveResult.modelArtifactsInfo.dateSaved.getTime())\n              .toBeGreaterThanOrEqual(testStartDate.getTime());\n          // Note: The following two assertions work only because there is no\n          //   non-ASCII characters in `modelTopology1` and `weightSpecs1`.\n          expect(saveResult.modelArtifactsInfo.modelTopologyBytes)\n              .toEqual(JSON.stringify(modelTopology1).length);\n          expect(saveResult.modelArtifactsInfo.weightSpecsBytes)\n              .toEqual(JSON.stringify(weightSpecs1).length);\n          expect(saveResult.modelArtifactsInfo.weightDataBytes)\n              .toEqual(weightData1.byteLength);\n\n          expect(requestInits.length).toEqual(1);\n          const init = requestInits[0];\n          expect(init.method).toEqual('POST');\n          const body = init.body as FormData;\n          const jsonFile = body.get('model.json') as File;\n          const jsonFileReader = new FileReader();\n          jsonFileReader.onload = (event: Event) => {\n            // tslint:disable-next-line:no-any\n            const modelJSON = JSON.parse((event.target as any).result);\n            expect(modelJSON.modelTopology).toEqual(modelTopology1);\n            expect(modelJSON.weightsManifest.length).toEqual(1);\n            expect(modelJSON.weightsManifest[0].weights).toEqual(weightSpecs1);\n\n            const weightsFile = body.get('model.weights.bin') as File;\n            const weightsFileReader = new FileReader();\n            weightsFileReader.onload = (event: Event) => {\n              // tslint:disable-next-line:no-any\n              const weightData = (event.target as any).result as ArrayBuffer;\n              expect(new Uint8Array(weightData))\n                  .toEqual(new Uint8Array(weightData1));\n              done();\n            };\n            weightsFileReader.onerror = ev => {\n              done.fail(weightsFileReader.error.message);\n            };\n            weightsFileReader.readAsArrayBuffer(weightsFile);\n          };\n          jsonFileReader.onerror = ev => {\n            done.fail(jsonFileReader.error.message);\n          };\n          jsonFileReader.readAsText(jsonFile);\n        })\n        .catch(err => {\n          done.fail(err.stack);\n        });\n  });\n\n  it('Save topology only, default POST method', (done) => {\n    const testStartDate = new Date();\n    const handler = tf.io.getSaveHandlers('http://model-upload-test')[0];\n    const topologyOnlyArtifacts = {modelTopology: modelTopology1};\n    handler.save(topologyOnlyArtifacts)\n        .then(saveResult => {\n          expect(saveResult.modelArtifactsInfo.dateSaved.getTime())\n              .toBeGreaterThanOrEqual(testStartDate.getTime());\n          // Note: The following two assertions work only because there is no\n          //   non-ASCII characters in `modelTopology1` and `weightSpecs1`.\n          expect(saveResult.modelArtifactsInfo.modelTopologyBytes)\n              .toEqual(JSON.stringify(modelTopology1).length);\n          expect(saveResult.modelArtifactsInfo.weightSpecsBytes).toEqual(0);\n          expect(saveResult.modelArtifactsInfo.weightDataBytes).toEqual(0);\n\n          expect(requestInits.length).toEqual(1);\n          const init = requestInits[0];\n          expect(init.method).toEqual('POST');\n          const body = init.body as FormData;\n          const jsonFile = body.get('model.json') as File;\n          const jsonFileReader = new FileReader();\n          jsonFileReader.onload = (event: Event) => {\n            // tslint:disable-next-line:no-any\n            const modelJSON = JSON.parse((event.target as any).result);\n            expect(modelJSON.modelTopology).toEqual(modelTopology1);\n            // No weights should have been sent to the server.\n            expect(body.get('model.weights.bin')).toEqual(null);\n            done();\n          };\n          jsonFileReader.onerror = event => {\n            done.fail(jsonFileReader.error.message);\n          };\n          jsonFileReader.readAsText(jsonFile);\n        })\n        .catch(err => {\n          done.fail(err.stack);\n        });\n  });\n\n  it('Save topology and weights, PUT method, extra headers', (done) => {\n    const testStartDate = new Date();\n    const handler = tf.io.http('model-upload-test', {\n      requestInit: {\n        method: 'PUT',\n        headers:\n            {'header_key_1': 'header_value_1', 'header_key_2': 'header_value_2'}\n      }\n    });\n    handler.save(artifacts1)\n        .then(saveResult => {\n          expect(saveResult.modelArtifactsInfo.dateSaved.getTime())\n              .toBeGreaterThanOrEqual(testStartDate.getTime());\n          // Note: The following two assertions work only because there is no\n          //   non-ASCII characters in `modelTopology1` and `weightSpecs1`.\n          expect(saveResult.modelArtifactsInfo.modelTopologyBytes)\n              .toEqual(JSON.stringify(modelTopology1).length);\n          expect(saveResult.modelArtifactsInfo.weightSpecsBytes)\n              .toEqual(JSON.stringify(weightSpecs1).length);\n          expect(saveResult.modelArtifactsInfo.weightDataBytes)\n              .toEqual(weightData1.byteLength);\n\n          expect(requestInits.length).toEqual(1);\n          const init = requestInits[0];\n          expect(init.method).toEqual('PUT');\n\n          // Check headers.\n          expect(init.headers).toEqual({\n            'header_key_1': 'header_value_1',\n            'header_key_2': 'header_value_2'\n          });\n\n          const body = init.body as FormData;\n          const jsonFile = body.get('model.json') as File;\n          const jsonFileReader = new FileReader();\n          jsonFileReader.onload = (event: Event) => {\n            // tslint:disable-next-line:no-any\n            const modelJSON = JSON.parse((event.target as any).result);\n            expect(modelJSON.format).toEqual('layers-model');\n            expect(modelJSON.generatedBy).toEqual('TensorFlow.js v0.0.0');\n            expect(modelJSON.convertedBy).toEqual(null);\n            expect(modelJSON.modelTopology).toEqual(modelTopology1);\n            expect(modelJSON.modelInitializer).toEqual({});\n            expect(modelJSON.weightsManifest.length).toEqual(1);\n            expect(modelJSON.weightsManifest[0].weights).toEqual(weightSpecs1);\n\n            const weightsFile = body.get('model.weights.bin') as File;\n            const weightsFileReader = new FileReader();\n            weightsFileReader.onload = (event: Event) => {\n              // tslint:disable-next-line:no-any\n              const weightData = (event.target as any).result as ArrayBuffer;\n              expect(new Uint8Array(weightData))\n                  .toEqual(new Uint8Array(weightData1));\n              done();\n            };\n            weightsFileReader.onerror = event => {\n              done.fail(weightsFileReader.error.message);\n            };\n            weightsFileReader.readAsArrayBuffer(weightsFile);\n          };\n          jsonFileReader.onerror = event => {\n            done.fail(jsonFileReader.error.message);\n          };\n          jsonFileReader.readAsText(jsonFile);\n        })\n        .catch(err => {\n          done.fail(err.stack);\n        });\n  });\n\n  it('404 response causes Error', (done) => {\n    const handler = tf.io.getSaveHandlers('http://invalid/path')[0];\n    handler.save(artifacts1)\n        .then(saveResult => {\n          done.fail(\n              'Calling http at invalid URL succeeded ' +\n              'unexpectedly');\n        })\n        .catch(err => {\n          done();\n        });\n  });\n\n  it('getLoadHandlers with one URL string', () => {\n    const handlers = tf.io.getLoadHandlers('http://foo/model.json');\n    expect(handlers.length).toEqual(1);\n    expect(handlers[0] instanceof HTTPRequest).toEqual(true);\n  });\n\n  it('Existing body leads to Error', () => {\n    expect(() => tf.io.http('model-upload-test', {\n      requestInit: {body: 'existing body'}\n    })).toThrowError(/requestInit is expected to have no pre-existing body/);\n  });\n\n  it('Empty, null or undefined URL paths lead to Error', () => {\n    expect(() => tf.io.http(null))\n        .toThrowError(/must not be null, undefined or empty/);\n    expect(() => tf.io.http(undefined))\n        .toThrowError(/must not be null, undefined or empty/);\n    expect(() => tf.io.http(''))\n        .toThrowError(/must not be null, undefined or empty/);\n  });\n\n  it('router', () => {\n    expect(httpRouter('http://bar/foo') instanceof HTTPRequest).toEqual(true);\n    expect(httpRouter('https://localhost:5000/upload') instanceof HTTPRequest)\n        .toEqual(true);\n    expect(httpRouter('localhost://foo')).toBeNull();\n    expect(httpRouter('foo:5000/bar')).toBeNull();\n  });\n});\n\ndescribeWithFlags('parseUrl', BROWSER_ENVS, () => {\n  it('should parse url with no suffix', () => {\n    const url = 'http://google.com/file';\n    const [prefix, suffix] = parseUrl(url);\n    expect(prefix).toEqual('http://google.com/');\n    expect(suffix).toEqual('');\n  });\n  it('should parse url with suffix', () => {\n    const url = 'http://google.com/file?param=1';\n    const [prefix, suffix] = parseUrl(url);\n    expect(prefix).toEqual('http://google.com/');\n    expect(suffix).toEqual('?param=1');\n  });\n  it('should parse url with multiple serach params', () => {\n    const url = 'http://google.com/a?x=1/file?param=1';\n    const [prefix, suffix] = parseUrl(url);\n    expect(prefix).toEqual('http://google.com/a?x=1/');\n    expect(suffix).toEqual('?param=1');\n  });\n});\n\ndescribeWithFlags('http-load', BROWSER_ENVS, () => {\n  describe('JSON model', () => {\n    let requestInits: {[key: string]: {headers: {[key: string]: string}}};\n\n    beforeEach(() => {\n      requestInits = {};\n    });\n\n    it('1 group, 2 weights, 1 path', async () => {\n      const weightManifest1: tf.io.WeightsManifestConfig = [{\n        paths: ['weightfile0'],\n        weights: [\n          {\n            name: 'dense/kernel',\n            shape: [3, 1],\n            dtype: 'float32',\n          },\n          {\n            name: 'dense/bias',\n            shape: [2],\n            dtype: 'float32',\n          }\n        ]\n      }];\n      const floatData = new Float32Array([1, 3, 3, 7, 4]);\n      setupFakeWeightFiles(\n          {\n            './model.json': {\n              data: JSON.stringify({\n                modelTopology: modelTopology1,\n                weightsManifest: weightManifest1,\n                format: 'tfjs-graph-model',\n                generatedBy: '1.15',\n                convertedBy: '1.3.1',\n                signature: null,\n                userDefinedMetadata: {},\n                modelInitializer: {}\n              }),\n              contentType: 'application/json'\n            },\n            './weightfile0':\n                {data: floatData, contentType: 'application/octet-stream'},\n          },\n          requestInits);\n\n      const handler = tf.io.http('./model.json');\n      const modelArtifacts = await handler.load();\n      expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n      expect(modelArtifacts.weightSpecs).toEqual(weightManifest1[0].weights);\n      expect(modelArtifacts.format).toEqual('tfjs-graph-model');\n      expect(modelArtifacts.generatedBy).toEqual('1.15');\n      expect(modelArtifacts.convertedBy).toEqual('1.3.1');\n      expect(modelArtifacts.userDefinedMetadata).toEqual({});\n      expect(modelArtifacts.modelInitializer).toEqual({});\n\n      expect(new Float32Array(modelArtifacts.weightData)).toEqual(floatData);\n      expect(Object.keys(requestInits).length).toEqual(2);\n      // Assert that fetch is invoked with `window` as the context.\n      expect(fetchSpy.calls.mostRecent().object).toEqual(window);\n    });\n\n    it('1 group, 2 weights, 1 path, with requestInit', async () => {\n      const weightManifest1: tf.io.WeightsManifestConfig = [{\n        paths: ['weightfile0'],\n        weights: [\n          {\n            name: 'dense/kernel',\n            shape: [3, 1],\n            dtype: 'float32',\n          },\n          {\n            name: 'dense/bias',\n            shape: [2],\n            dtype: 'float32',\n          }\n        ]\n      }];\n      const floatData = new Float32Array([1, 3, 3, 7, 4]);\n      setupFakeWeightFiles(\n          {\n            './model.json': {\n              data: JSON.stringify({\n                modelTopology: modelTopology1,\n                weightsManifest: weightManifest1\n              }),\n              contentType: 'application/json'\n            },\n            './weightfile0':\n                {data: floatData, contentType: 'application/octet-stream'},\n          },\n          requestInits);\n\n      const handler = tf.io.http(\n          './model.json',\n          {requestInit: {headers: {'header_key_1': 'header_value_1'}}});\n      const modelArtifacts = await handler.load();\n      expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n      expect(modelArtifacts.weightSpecs).toEqual(weightManifest1[0].weights);\n      expect(new Float32Array(modelArtifacts.weightData)).toEqual(floatData);\n      expect(Object.keys(requestInits).length).toEqual(2);\n      expect(Object.keys(requestInits).length).toEqual(2);\n      expect(requestInits['./model.json'].headers['header_key_1'])\n          .toEqual('header_value_1');\n      expect(requestInits['./weightfile0'].headers['header_key_1'])\n          .toEqual('header_value_1');\n\n      expect(fetchSpy.calls.mostRecent().object).toEqual(window);\n    });\n\n    it('1 group, 2 weight, 2 paths', async () => {\n      const weightManifest1: tf.io.WeightsManifestConfig = [{\n        paths: ['weightfile0', 'weightfile1'],\n        weights: [\n          {\n            name: 'dense/kernel',\n            shape: [3, 1],\n            dtype: 'float32',\n          },\n          {\n            name: 'dense/bias',\n            shape: [2],\n            dtype: 'float32',\n          }\n        ]\n      }];\n      const floatData1 = new Float32Array([1, 3, 3]);\n      const floatData2 = new Float32Array([7, 4]);\n      setupFakeWeightFiles(\n          {\n            './model.json': {\n              data: JSON.stringify({\n                modelTopology: modelTopology1,\n                weightsManifest: weightManifest1\n              }),\n              contentType: 'application/json'\n            },\n            './weightfile0':\n                {data: floatData1, contentType: 'application/octet-stream'},\n            './weightfile1':\n                {data: floatData2, contentType: 'application/octet-stream'}\n          },\n          requestInits);\n\n      const handler = tf.io.http('./model.json');\n      const modelArtifacts = await handler.load();\n      expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n      expect(modelArtifacts.weightSpecs).toEqual(weightManifest1[0].weights);\n      expect(new Float32Array(modelArtifacts.weightData))\n          .toEqual(new Float32Array([1, 3, 3, 7, 4]));\n    });\n\n    it('2 groups, 2 weight, 2 paths', async () => {\n      const weightsManifest: tf.io.WeightsManifestConfig = [\n        {\n          paths: ['weightfile0'],\n          weights: [{\n            name: 'dense/kernel',\n            shape: [3, 1],\n            dtype: 'float32',\n          }]\n        },\n        {\n          paths: ['weightfile1'],\n          weights: [{\n            name: 'dense/bias',\n            shape: [2],\n            dtype: 'float32',\n          }],\n        }\n      ];\n      const floatData1 = new Float32Array([1, 3, 3]);\n      const floatData2 = new Float32Array([7, 4]);\n      setupFakeWeightFiles(\n          {\n            './model.json': {\n              data: JSON.stringify(\n                  {modelTopology: modelTopology1, weightsManifest}),\n              contentType: 'application/json'\n            },\n            './weightfile0':\n                {data: floatData1, contentType: 'application/octet-stream'},\n            './weightfile1':\n                {data: floatData2, contentType: 'application/octet-stream'}\n          },\n          requestInits);\n\n      const handler = tf.io.http('./model.json');\n      const modelArtifacts = await handler.load();\n      expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n      expect(modelArtifacts.weightSpecs)\n          .toEqual(\n              weightsManifest[0].weights.concat(weightsManifest[1].weights));\n      expect(new Float32Array(modelArtifacts.weightData))\n          .toEqual(new Float32Array([1, 3, 3, 7, 4]));\n    });\n\n    it('2 groups, 2 weight, 2 paths, Int32 and Uint8 Data', async () => {\n      const weightsManifest: tf.io.WeightsManifestConfig = [\n        {\n          paths: ['weightfile0'],\n          weights: [{\n            name: 'fooWeight',\n            shape: [3, 1],\n            dtype: 'int32',\n          }]\n        },\n        {\n          paths: ['weightfile1'],\n          weights: [{\n            name: 'barWeight',\n            shape: [2],\n            dtype: 'bool',\n          }],\n        }\n      ];\n      const floatData1 = new Int32Array([1, 3, 3]);\n      const floatData2 = new Uint8Array([7, 4]);\n      setupFakeWeightFiles(\n          {\n            'path1/model.json': {\n              data: JSON.stringify(\n                  {modelTopology: modelTopology1, weightsManifest}),\n              contentType: 'application/json'\n            },\n            'path1/weightfile0':\n                {data: floatData1, contentType: 'application/octet-stream'},\n            'path1/weightfile1':\n                {data: floatData2, contentType: 'application/octet-stream'}\n          },\n          requestInits);\n\n      const handler = tf.io.http('path1/model.json');\n      const modelArtifacts = await handler.load();\n      expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n      expect(modelArtifacts.weightSpecs)\n          .toEqual(\n              weightsManifest[0].weights.concat(weightsManifest[1].weights));\n      expect(new Int32Array(modelArtifacts.weightData.slice(0, 12)))\n          .toEqual(new Int32Array([1, 3, 3]));\n      expect(new Uint8Array(modelArtifacts.weightData.slice(12, 14)))\n          .toEqual(new Uint8Array([7, 4]));\n    });\n\n    it('topology only', async () => {\n      setupFakeWeightFiles(\n          {\n            './model.json': {\n              data: JSON.stringify({modelTopology: modelTopology1}),\n              contentType: 'application/json'\n            },\n          },\n          requestInits);\n\n      const handler = tf.io.http('./model.json');\n      const modelArtifacts = await handler.load();\n      expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n      expect(modelArtifacts.weightSpecs).toBeUndefined();\n      expect(modelArtifacts.weightData).toBeUndefined();\n    });\n\n    it('weights only', async () => {\n      const weightsManifest: tf.io.WeightsManifestConfig = [\n        {\n          paths: ['weightfile0'],\n          weights: [{\n            name: 'fooWeight',\n            shape: [3, 1],\n            dtype: 'int32',\n          }]\n        },\n        {\n          paths: ['weightfile1'],\n          weights: [{\n            name: 'barWeight',\n            shape: [2],\n            dtype: 'float32',\n          }],\n        }\n      ];\n      const floatData1 = new Int32Array([1, 3, 3]);\n      const floatData2 = new Float32Array([-7, -4]);\n      setupFakeWeightFiles(\n          {\n            'path1/model.json': {\n              data: JSON.stringify({weightsManifest}),\n              contentType: 'application/json'\n            },\n            'path1/weightfile0':\n                {data: floatData1, contentType: 'application/octet-stream'},\n            'path1/weightfile1':\n                {data: floatData2, contentType: 'application/octet-stream'}\n          },\n          requestInits);\n\n      const handler = tf.io.http('path1/model.json');\n      const modelArtifacts = await handler.load();\n      expect(modelArtifacts.modelTopology).toBeUndefined();\n      expect(modelArtifacts.weightSpecs)\n          .toEqual(\n              weightsManifest[0].weights.concat(weightsManifest[1].weights));\n      expect(new Int32Array(modelArtifacts.weightData.slice(0, 12)))\n          .toEqual(new Int32Array([1, 3, 3]));\n      expect(new Float32Array(modelArtifacts.weightData.slice(12, 20)))\n          .toEqual(new Float32Array([-7, -4]));\n    });\n\n    it('Missing modelTopology and weightsManifest leads to error',\n       async () => {\n         setupFakeWeightFiles(\n             {\n               'path1/model.json':\n                   {data: JSON.stringify({}), contentType: 'application/json'}\n             },\n             requestInits);\n         const handler = tf.io.http('path1/model.json');\n         handler.load()\n             .then(modelTopology1 => {\n               fail(\n                   'Loading from missing modelTopology and weightsManifest ' +\n                   'succeeded unexpectedly.');\n             })\n             .catch(err => {\n               expect(err.message)\n                   .toMatch(/contains neither model topology or manifest/);\n             });\n       });\n\n    it('with fetch rejection leads to error', async () => {\n      setupFakeWeightFiles(\n          {\n            'path1/model.json':\n                {data: JSON.stringify({}), contentType: 'text/html'}\n          },\n          requestInits);\n      const handler = tf.io.http('path2/model.json');\n      try {\n        const data = await handler.load();\n        expect(data).toBeDefined();\n        fail('Loading with fetch rejection succeeded unexpectedly.');\n      } catch (err) {\n        // This error is mocked in beforeEach\n        expect(err).toEqual('path not found');\n      }\n    });\n    it('Provide WeightFileTranslateFunc', async () => {\n      const weightManifest1: tf.io.WeightsManifestConfig = [{\n        paths: ['weightfile0'],\n        weights: [\n          {\n            name: 'dense/kernel',\n            shape: [3, 1],\n            dtype: 'float32',\n          },\n          {\n            name: 'dense/bias',\n            shape: [2],\n            dtype: 'float32',\n          }\n        ]\n      }];\n      const floatData = new Float32Array([1, 3, 3, 7, 4]);\n      setupFakeWeightFiles(\n          {\n            './model.json': {\n              data: JSON.stringify({\n                modelTopology: modelTopology1,\n                weightsManifest: weightManifest1\n              }),\n              contentType: 'application/json'\n            },\n            'auth_weightfile0':\n                {data: floatData, contentType: 'application/octet-stream'},\n          },\n          requestInits);\n      async function prefixWeightUrlConverter(weightFile: string):\n          Promise<string> {\n        // Add 'auth_' prefix to the weight file url.\n        return new Promise(\n            resolve => setTimeout(resolve, 1, 'auth_' + weightFile));\n      }\n\n      const handler = tf.io.http('./model.json', {\n        requestInit: {headers: {'header_key_1': 'header_value_1'}},\n        weightUrlConverter: prefixWeightUrlConverter\n      });\n      const modelArtifacts = await handler.load();\n      expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n      expect(modelArtifacts.weightSpecs).toEqual(weightManifest1[0].weights);\n      expect(new Float32Array(modelArtifacts.weightData)).toEqual(floatData);\n      expect(Object.keys(requestInits).length).toEqual(2);\n      expect(Object.keys(requestInits).length).toEqual(2);\n      expect(requestInits['./model.json'].headers['header_key_1'])\n          .toEqual('header_value_1');\n      expect(requestInits['auth_weightfile0'].headers['header_key_1'])\n          .toEqual('header_value_1');\n\n      expect(fetchSpy.calls.mostRecent().object).toEqual(window);\n    });\n  });\n\n  it('Overriding BrowserHTTPRequest fetchFunc', async () => {\n    const weightManifest1: tf.io.WeightsManifestConfig = [{\n      paths: ['weightfile0'],\n      weights: [\n        {\n          name: 'dense/kernel',\n          shape: [3, 1],\n          dtype: 'float32',\n        },\n        {\n          name: 'dense/bias',\n          shape: [2],\n          dtype: 'float32',\n        }\n      ]\n    }];\n    const floatData = new Float32Array([1, 3, 3, 7, 4]);\n\n    const fetchInputs: RequestInfo[] = [];\n    const fetchInits: RequestInit[] = [];\n    async function customFetch(\n        input: RequestInfo, init?: RequestInit): Promise<Response> {\n      fetchInputs.push(input);\n      fetchInits.push(init);\n\n      if (input === './model.json') {\n        return new Response(\n            JSON.stringify({\n              modelTopology: modelTopology1,\n              weightsManifest: weightManifest1\n            }),\n            {status: 200, headers: {'content-type': 'application/json'}});\n      } else if (input === './weightfile0') {\n        return new Response(floatData, {\n          status: 200,\n          headers: {'content-type': 'application/octet-stream'}\n        });\n      } else {\n        return new Response(null, {status: 404});\n      }\n    }\n\n    const handler = tf.io.http(\n        './model.json',\n        {requestInit: {credentials: 'include'}, fetchFunc: customFetch});\n    const modelArtifacts = await handler.load();\n    expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(modelArtifacts.weightSpecs).toEqual(weightManifest1[0].weights);\n    expect(new Float32Array(modelArtifacts.weightData)).toEqual(floatData);\n\n    expect(fetchInputs).toEqual(['./model.json', './weightfile0']);\n    expect(fetchInits.length).toEqual(2);\n    expect(fetchInits[0].credentials).toEqual('include');\n    expect(fetchInits[1].credentials).toEqual('include');\n  });\n});\n"]}