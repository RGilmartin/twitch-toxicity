{"version":3,"file":"weights_loader_test.js","sourceRoot":"","sources":["../../src/io/weights_loader_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '../index';\nimport {BROWSER_ENVS, describeWithFlags} from '../jasmine_util';\nimport {expectArraysClose, expectArraysEqual} from '../test_util';\nimport {WeightsManifestConfig} from './types';\n\ndescribeWithFlags('loadWeights', BROWSER_ENVS, () => {\n  const setupFakeWeightFiles = (fileBufferMap: {\n    [filename: string]: Float32Array|Int32Array|ArrayBuffer|Uint8Array|\n    Uint16Array\n  }) => {\n    spyOn(tf.env().platform, 'fetch').and.callFake((path: string) => {\n      return new Response(\n          fileBufferMap[path],\n          {headers: {'Content-type': 'application/octet-stream'}});\n    });\n  };\n\n  it('1 group, 1 weight, 1 requested weight', async () => {\n    setupFakeWeightFiles({'./weightfile0': new Float32Array([1, 2, 3])});\n\n    const manifest: WeightsManifestConfig = [{\n      'paths': ['weightfile0'],\n      'weights': [{'name': 'weight0', 'dtype': 'float32', 'shape': [3]}]\n    }];\n\n    const weightsNamesToFetch = ['weight0'];\n    const weights =\n        await tf.io.loadWeights(manifest, './', weightsNamesToFetch);\n    expect((tf.env().platform.fetch as jasmine.Spy).calls.count()).toBe(1);\n\n    const weightNames = Object.keys(weights);\n    expect(weightNames.length).toEqual(weightsNamesToFetch.length);\n\n    const weight0 = weights['weight0'];\n    expectArraysClose(await weight0.data(), [1, 2, 3]);\n    expect(weight0.shape).toEqual([3]);\n    expect(weight0.dtype).toEqual('float32');\n  });\n\n  it('1 group, 2 weights, fetch 1st weight', async () => {\n    setupFakeWeightFiles({'./weightfile0': new Float32Array([1, 2, 3, 4, 5])});\n\n    const manifest: WeightsManifestConfig = [{\n      'paths': ['weightfile0'],\n      'weights': [\n        {'name': 'weight0', 'dtype': 'float32', 'shape': [2]},\n        {'name': 'weight1', 'dtype': 'float32', 'shape': [3]}\n      ]\n    }];\n\n    // Load the first weight.\n    const weights = await tf.io.loadWeights(manifest, './', ['weight0']);\n    expect((tf.env().platform.fetch as jasmine.Spy).calls.count()).toBe(1);\n\n    const weightNames = Object.keys(weights);\n    expect(weightNames.length).toEqual(1);\n\n    const weight0 = weights['weight0'];\n    expectArraysClose(await weight0.data(), [1, 2]);\n    expect(weight0.shape).toEqual([2]);\n    expect(weight0.dtype).toEqual('float32');\n  });\n\n  it('1 group, 2 weights, fetch 2nd weight', async () => {\n    setupFakeWeightFiles({'./weightfile0': new Float32Array([1, 2, 3, 4, 5])});\n\n    const manifest: WeightsManifestConfig = [{\n      'paths': ['weightfile0'],\n      'weights': [\n        {'name': 'weight0', 'dtype': 'float32', 'shape': [2]},\n        {'name': 'weight1', 'dtype': 'float32', 'shape': [3]}\n      ]\n    }];\n\n    // Load the second weight.\n    const weights = await tf.io.loadWeights(manifest, './', ['weight1']);\n    expect((tf.env().platform.fetch as jasmine.Spy).calls.count()).toBe(1);\n\n    const weightNames = Object.keys(weights);\n    expect(weightNames.length).toEqual(1);\n\n    const weight1 = weights['weight1'];\n    expectArraysClose(await weight1.data(), [3, 4, 5]);\n    expect(weight1.shape).toEqual([3]);\n    expect(weight1.dtype).toEqual('float32');\n  });\n\n  it('1 group, 2 weights, fetch all weights', async () => {\n    setupFakeWeightFiles({'./weightfile0': new Float32Array([1, 2, 3, 4, 5])});\n\n    const manifest: WeightsManifestConfig = [{\n      'paths': ['weightfile0'],\n      'weights': [\n        {'name': 'weight0', 'dtype': 'float32', 'shape': [2]},\n        {'name': 'weight1', 'dtype': 'float32', 'shape': [3]}\n      ]\n    }];\n\n    // Load all weights.\n    const weights =\n        await tf.io.loadWeights(manifest, './', ['weight0', 'weight1']);\n    expect((tf.env().platform.fetch as jasmine.Spy).calls.count()).toBe(1);\n\n    const weightNames = Object.keys(weights);\n    expect(weightNames.length).toEqual(2);\n\n    const weight0 = weights['weight0'];\n    expectArraysClose(await weight0.data(), [1, 2]);\n    expect(weight0.shape).toEqual([2]);\n    expect(weight0.dtype).toEqual('float32');\n\n    const weight1 = weights['weight1'];\n    expectArraysClose(await weight1.data(), [3, 4, 5]);\n    expect(weight1.shape).toEqual([3]);\n    expect(weight1.dtype).toEqual('float32');\n  });\n\n  it('1 group, multiple weights, different dtypes', async () => {\n    const buffer = new ArrayBuffer(5 * 4 + 1);\n    const view = new DataView(buffer);\n    view.setInt32(0, 1, true);\n    view.setInt32(4, 2, true);\n    view.setUint8(8, 1);\n    view.setFloat32(9, 3., true);\n    view.setFloat32(13, 4., true);\n    view.setFloat32(17, 5., true);\n    setupFakeWeightFiles({'./weightfile0': buffer});\n\n    const manifest: WeightsManifestConfig = [{\n      'paths': ['weightfile0'],\n      'weights': [\n        {'name': 'weight0', 'dtype': 'int32', 'shape': [2]},\n        {'name': 'weight1', 'dtype': 'bool', 'shape': []},\n        {'name': 'weight2', 'dtype': 'float32', 'shape': [3]},\n      ]\n    }];\n\n    // Load all weights.\n    const weights = await tf.io.loadWeights(\n        manifest, './', ['weight0', 'weight1', 'weight2']);\n    expect((tf.env().platform.fetch as jasmine.Spy).calls.count()).toBe(1);\n\n    const weightNames = Object.keys(weights);\n    expect(weightNames.length).toEqual(3);\n\n    const weight0 = weights['weight0'];\n    expectArraysClose(await weight0.data(), [1, 2]);\n    expect(weight0.shape).toEqual([2]);\n    expect(weight0.dtype).toEqual('int32');\n\n    const weight1 = weights['weight1'];\n    expectArraysClose(await weight1.data(), [1]);\n    expect(weight1.shape).toEqual([]);\n    expect(weight1.dtype).toEqual('bool');\n\n    const weight2 = weights['weight2'];\n    expectArraysClose(await weight2.data(), [3, 4, 5]);\n    expect(weight2.shape).toEqual([3]);\n    expect(weight2.dtype).toEqual('float32');\n  });\n\n  it('1 group, sharded 1 weight across multiple files', async () => {\n    const shard0 = new Float32Array([1, 2, 3, 4, 5]);\n    const shard1 = new Float32Array([1.1, 2.2]);\n    const shard2 = new Float32Array([10, 20, 30]);\n\n    setupFakeWeightFiles({\n      './weightfile0': shard0,\n      './weightsfile1': shard1,\n      './weightsfile2': shard2\n    });\n\n    const manifest: WeightsManifestConfig = [{\n      'paths': ['weightfile0', 'weightsfile1', 'weightsfile2'],\n      'weights': [{'name': 'weight0', 'dtype': 'float32', 'shape': [5, 2]}]\n    }];\n\n    const weights = await tf.io.loadWeights(manifest, './', ['weight0']);\n    expect((tf.env().platform.fetch as jasmine.Spy).calls.count()).toBe(3);\n\n    const weightNames = Object.keys(weights);\n    expect(weightNames.length).toEqual(1);\n\n    const weight0 = weights['weight0'];\n    expectArraysClose(\n        await weight0.data(), [1, 2, 3, 4, 5, 1.1, 2.2, 10, 20, 30]);\n    expect(weight0.shape).toEqual([5, 2]);\n    expect(weight0.dtype).toEqual('float32');\n  });\n\n  it('1 group, sharded 2 weights across multiple files', async () => {\n    const shard0 = new Int32Array([1, 2, 3, 4, 5]);\n\n    // shard1 contains part of the first weight and part of the second.\n    const shard1 = new ArrayBuffer(5 * 4);\n    const intBuffer = new Int32Array(shard1, 0, 2);\n    intBuffer.set([10, 20]);\n    const floatBuffer = new Float32Array(shard1, intBuffer.byteLength, 3);\n    floatBuffer.set([3.0, 4.0, 5.0]);\n\n    const shard2 = new Float32Array([10, 20, 30]);\n\n    setupFakeWeightFiles({\n      './weightfile0': shard0,\n      './weightsfile1': shard1,\n      './weightsfile2': shard2\n    });\n\n    const manifest: WeightsManifestConfig = [{\n      'paths': ['weightfile0', 'weightsfile1', 'weightsfile2'],\n      'weights': [\n        {'name': 'weight0', 'dtype': 'int32', 'shape': [7, 1]},\n        {'name': 'weight1', 'dtype': 'float32', 'shape': [3, 2]}\n      ]\n    }];\n\n    const weights =\n        await tf.io.loadWeights(manifest, './', ['weight0', 'weight1']);\n    expect((tf.env().platform.fetch as jasmine.Spy).calls.count()).toBe(3);\n\n    const weightNames = Object.keys(weights);\n    expect(weightNames.length).toEqual(2);\n\n    const weight0 = weights['weight0'];\n    expectArraysClose(await weight0.data(), [1, 2, 3, 4, 5, 10, 20]);\n    expect(weight0.shape).toEqual([7, 1]);\n    expect(weight0.dtype).toEqual('int32');\n\n    const weight1 = weights['weight1'];\n    expectArraysClose(await weight1.data(), [3.0, 4.0, 5.0, 10, 20, 30]);\n    expect(weight1.shape).toEqual([3, 2]);\n    expect(weight1.dtype).toEqual('float32');\n  });\n\n  it('2 group, 4 weights, fetches one group', async () => {\n    setupFakeWeightFiles({\n      './weightfile0': new Float32Array([1, 2, 3, 4, 5]),\n      './weightfile1': new Float32Array([6, 7, 8, 9])\n    });\n\n    const manifest: WeightsManifestConfig = [\n      {\n        'paths': ['weightfile0'],\n        'weights': [\n          {'name': 'weight0', 'dtype': 'float32', 'shape': [2]},\n          {'name': 'weight1', 'dtype': 'float32', 'shape': [3]}\n        ]\n      },\n      {\n        'paths': ['weightfile1'],\n        'weights': [\n          {'name': 'weight2', 'dtype': 'float32', 'shape': [3, 1]},\n          {'name': 'weight3', 'dtype': 'float32', 'shape': []}\n        ]\n      }\n    ];\n\n    const weights =\n        await tf.io.loadWeights(manifest, './', ['weight0', 'weight1']);\n    // Only the first group should be fetched.\n    expect((tf.env().platform.fetch as jasmine.Spy).calls.count()).toBe(1);\n\n    const weightNames = Object.keys(weights);\n    expect(weightNames.length).toEqual(2);\n\n    const weight0 = weights['weight0'];\n    expectArraysClose(await weight0.data(), [1, 2]);\n    expect(weight0.shape).toEqual([2]);\n    expect(weight0.dtype).toEqual('float32');\n\n    const weight1 = weights['weight1'];\n    expectArraysClose(await weight1.data(), [3, 4, 5]);\n    expect(weight1.shape).toEqual([3]);\n    expect(weight1.dtype).toEqual('float32');\n  });\n\n  it('2 group, 4 weights, one weight from each group', async () => {\n    setupFakeWeightFiles({\n      './weightfile0': new Float32Array([1, 2, 3, 4, 5]),\n      './weightfile1': new Float32Array([6, 7, 8, 9])\n    });\n\n    const manifest: WeightsManifestConfig = [\n      {\n        'paths': ['weightfile0'],\n        'weights': [\n          {'name': 'weight0', 'dtype': 'float32', 'shape': [2]},\n          {'name': 'weight1', 'dtype': 'float32', 'shape': [3]}\n        ]\n      },\n      {\n        'paths': ['weightfile1'],\n        'weights': [\n          {'name': 'weight2', 'dtype': 'float32', 'shape': [3, 1]},\n          {'name': 'weight3', 'dtype': 'float32', 'shape': []}\n        ]\n      }\n    ];\n\n    const weights =\n        await tf.io.loadWeights(manifest, './', ['weight0', 'weight2']);\n    // Both groups need to be fetched.\n    expect((tf.env().platform.fetch as jasmine.Spy).calls.count()).toBe(2);\n\n    const weightNames = Object.keys(weights);\n    expect(weightNames.length).toEqual(2);\n\n    const weight0 = weights['weight0'];\n    expectArraysClose(await weight0.data(), [1, 2]);\n    expect(weight0.shape).toEqual([2]);\n    expect(weight0.dtype).toEqual('float32');\n\n    const weight2 = weights['weight2'];\n    expectArraysClose(await weight2.data(), [6, 7, 8]);\n    expect(weight2.shape).toEqual([3, 1]);\n    expect(weight2.dtype).toEqual('float32');\n  });\n\n  it('2 group, 4 weights, dont specify weights fetchs all', async () => {\n    setupFakeWeightFiles({\n      './weightfile0': new Float32Array([1, 2, 3, 4, 5]),\n      './weightfile1': new Float32Array([6, 7, 8, 9])\n    });\n\n    const manifest: WeightsManifestConfig = [\n      {\n        'paths': ['weightfile0'],\n        'weights': [\n          {'name': 'weight0', 'dtype': 'float32', 'shape': [2]},\n          {'name': 'weight1', 'dtype': 'float32', 'shape': [3]}\n        ]\n      },\n      {\n        'paths': ['weightfile1'],\n        'weights': [\n          {'name': 'weight2', 'dtype': 'float32', 'shape': [3, 1]},\n          {'name': 'weight3', 'dtype': 'float32', 'shape': []}\n        ]\n      }\n    ];\n\n    // Don't pass a third argument to loadWeights to load all weights.\n    const weights = await tf.io.loadWeights(manifest, './');\n    // Both groups need to be fetched.\n    expect((tf.env().platform.fetch as jasmine.Spy).calls.count()).toBe(2);\n\n    const weightNames = Object.keys(weights);\n    expect(weightNames.length).toEqual(4);\n\n    const weight0 = weights['weight0'];\n    expectArraysClose(await weight0.data(), [1, 2]);\n    expect(weight0.shape).toEqual([2]);\n    expect(weight0.dtype).toEqual('float32');\n\n    const weight1 = weights['weight1'];\n    expectArraysClose(await weight1.data(), [3, 4, 5]);\n    expect(weight1.shape).toEqual([3]);\n    expect(weight1.dtype).toEqual('float32');\n\n    const weight2 = weights['weight2'];\n    expectArraysClose(await weight2.data(), [6, 7, 8]);\n    expect(weight2.shape).toEqual([3, 1]);\n    expect(weight2.dtype).toEqual('float32');\n\n    const weight3 = weights['weight3'];\n    expectArraysClose(await weight3.data(), [9]);\n    expect(weight3.shape).toEqual([]);\n    expect(weight3.dtype).toEqual('float32');\n  });\n\n  it('throws if requested weight not found', async () => {\n    setupFakeWeightFiles({'./weightfile0': new Float32Array([1, 2, 3])});\n\n    const manifest: WeightsManifestConfig = [{\n      'paths': ['weightfile0'],\n      'weights': [{'name': 'weight0', 'dtype': 'float32', 'shape': [3]}]\n    }];\n\n    const weightsNamesToFetch = ['doesntexist'];\n    try {\n      await tf.io.loadWeights(manifest, './', weightsNamesToFetch);\n      fail();\n    } catch (e) {\n      expect(e.message).toContain('Could not find weights');\n    }\n  });\n\n  it('throws if requested weight has unknown dtype', async () => {\n    setupFakeWeightFiles({'./weightfile0': new Float32Array([1, 2, 3])});\n\n    const manifest: WeightsManifestConfig = [{\n      'paths': ['weightfile0'],\n      'weights': [{\n        'name': 'weight0',\n        // tslint:disable-next-line:no-any\n        'dtype': 'null' as any,\n        'shape': [3]\n      }]\n    }];\n\n    const weightsNamesToFetch = ['weight0'];\n    try {\n      await tf.io.loadWeights(manifest, './', weightsNamesToFetch);\n      fail();\n    } catch (e) {\n      expect(e.message).toContain('Unsupported dtype');\n    }\n  });\n\n  it('should use request option', async () => {\n    setupFakeWeightFiles({'./weightfile0': new Float32Array([1, 2, 3])});\n\n    const manifest: WeightsManifestConfig = [{\n      'paths': ['weightfile0'],\n      'weights': [{'name': 'weight0', 'dtype': 'float32', 'shape': [3]}]\n    }];\n\n    const weightsNamesToFetch = ['weight0'];\n    await tf.io.loadWeights(\n        manifest, './', weightsNamesToFetch, {credentials: 'include'});\n    expect((tf.env().platform.fetch as jasmine.Spy).calls.count()).toBe(1);\n    expect(tf.env().platform.fetch)\n        .toHaveBeenCalledWith(\n            './weightfile0', {credentials: 'include'}, {isBinary: true});\n  });\n\n  const quantizationTest = async (quantizationDtype: 'uint8'|'uint16') => {\n    const arrayType = quantizationDtype === 'uint8' ? Uint8Array : Uint16Array;\n    setupFakeWeightFiles(\n        {'./weightfile0': new arrayType([0, 48, 255, 0, 48, 255])});\n\n    const manifest: WeightsManifestConfig = [{\n      'paths': ['weightfile0'],\n      'weights': [\n        {\n          'name': 'weight0',\n          'dtype': 'float32',\n          'shape': [3],\n          'quantization': {'min': -1, 'scale': 0.1, 'dtype': quantizationDtype}\n        },\n        {\n          'name': 'weight1',\n          'dtype': 'int32',\n          'shape': [3],\n          'quantization': {'min': -1, 'scale': 0.1, 'dtype': quantizationDtype}\n        }\n      ]\n    }];\n\n    const weightsNamesToFetch = ['weight0', 'weight1'];\n    const weights =\n        await tf.io.loadWeights(manifest, './', weightsNamesToFetch);\n    expect((tf.env().platform.fetch as jasmine.Spy).calls.count()).toBe(1);\n\n    const weightNames = Object.keys(weights);\n    expect(weightNames.length).toEqual(weightsNamesToFetch.length);\n\n    const weight0 = weights['weight0'];\n    expectArraysClose(await weight0.data(), [-1, 3.8, 24.5]);\n    expect(weight0.shape).toEqual([3]);\n    expect(weight0.dtype).toEqual('float32');\n\n    const weight1 = weights['weight1'];\n    expectArraysEqual(await weight1.data(), [-1, 4, 25]);\n    expect(weight1.shape).toEqual([3]);\n    expect(weight1.dtype).toEqual('int32');\n  };\n\n  it('quantized weights (uint8)', async () => {\n    await quantizationTest('uint8');\n  });\n\n  it('quantized weights (uint16)', async () => {\n    await quantizationTest('uint16');\n  });\n\n  it('2 groups, 1 quantized, 1 unquantized', async () => {\n    setupFakeWeightFiles({\n      './weightfile0': new Uint8Array([0, 48, 255, 0, 48, 255]),\n      './weightfile1': new Float32Array([6, 7, 8, 9])\n    });\n\n    const manifest: WeightsManifestConfig = [\n      {\n        'paths': ['weightfile0'],\n        'weights': [\n          {\n            'name': 'weight0',\n            'dtype': 'float32',\n            'shape': [3],\n            'quantization': {'min': -1, 'scale': 0.1, 'dtype': 'uint8'}\n          },\n          {\n            'name': 'weight1',\n            'dtype': 'int32',\n            'shape': [3],\n            'quantization': {'min': -1, 'scale': 0.1, 'dtype': 'uint8'}\n          }\n        ]\n      },\n      {\n        'paths': ['weightfile1'],\n        'weights': [\n          {'name': 'weight2', 'dtype': 'float32', 'shape': [3, 1]},\n          {'name': 'weight3', 'dtype': 'float32', 'shape': []}\n        ]\n      }\n    ];\n\n    const weights =\n        await tf.io.loadWeights(manifest, './', ['weight0', 'weight2']);\n    // Both groups need to be fetched.\n    expect((tf.env().platform.fetch as jasmine.Spy).calls.count()).toBe(2);\n\n    const weightNames = Object.keys(weights);\n    expect(weightNames.length).toEqual(2);\n\n    const weight0 = weights['weight0'];\n    expectArraysClose(await weight0.data(), [-1, 3.8, 24.5]);\n    expect(weight0.shape).toEqual([3]);\n    expect(weight0.dtype).toEqual('float32');\n\n    const weight2 = weights['weight2'];\n    expectArraysClose(await weight2.data(), [6, 7, 8]);\n    expect(weight2.shape).toEqual([3, 1]);\n    expect(weight2.dtype).toEqual('float32');\n  });\n});\n"]}