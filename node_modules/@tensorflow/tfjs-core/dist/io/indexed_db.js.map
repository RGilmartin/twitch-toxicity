{"version":3,"file":"indexed_db.js","sourceRoot":"","sources":["../../src/io/indexed_db.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\n\nimport {env} from '../environment';\n\nimport {getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelStoreManager, SaveResult} from './types';\n\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase(): Promise<void> {\n  const idbFactory = getIndexedDBFactory();\n\n  return new Promise<void>((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n    deleteRequest.onsuccess = () => resolve();\n    deleteRequest.onerror = error => reject(error);\n  });\n}\n\nfunction getIndexedDBFactory(): IDBFactory {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error(\n        'Failed to obtain IndexedDB factory because the current environment' +\n        'is not a web browser.');\n  }\n  // tslint:disable-next-line:no-any\n  const theWindow: any = typeof window === 'undefined' ? self : window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n      theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n      theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error(\n        'The current browser does not appear to support IndexedDB.');\n  }\n  return factory;\n}\n\nfunction setUpDatabase(openRequest: IDBRequest) {\n  const db = openRequest.result as IDBDatabase;\n  db.createObjectStore(MODEL_STORE_NAME, {keyPath: 'modelPath'});\n  db.createObjectStore(INFO_STORE_NAME, {keyPath: 'modelPath'});\n}\n\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB implements IOHandler {\n  protected readonly indexedDB: IDBFactory;\n  protected readonly modelPath: string;\n\n  static readonly URL_SCHEME = 'indexeddb://';\n\n  constructor(modelPath: string) {\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    return this.databaseAction(this.modelPath, modelArtifacts) as\n        Promise<SaveResult>;\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return this.databaseAction(this.modelPath) as Promise<ModelArtifacts>;\n  }\n\n  /**\n   * Perform database action to put model artifacts into or read model artifacts\n   * from IndexedDB object store.\n   *\n   * Whether the action is put or get depends on whether `modelArtifacts` is\n   * specified. If it is specified, the action will be put; otherwise the action\n   * will be get.\n   *\n   * @param modelPath A unique string path for the model.\n   * @param modelArtifacts If specified, it will be the model artifacts to be\n   *   stored in IndexedDB.\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n   *   of `ModelArtifacts`, if the action is get.\n   */\n  private databaseAction(modelPath: string, modelArtifacts?: ModelArtifacts):\n      Promise<ModelArtifacts|SaveResult> {\n    return new Promise<ModelArtifacts|SaveResult>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(\n                  `Cannot find model with path '${this.modelPath}' ` +\n                  `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n          const modelArtifactsInfo: ModelArtifactsInfo =\n              getModelArtifactsInfoForJSON(modelArtifacts);\n          // First, put ModelArtifactsInfo into info store.\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          const putInfoRequest =\n              infoStore.put({modelPath: this.modelPath, modelArtifactsInfo});\n          let modelTx: IDBTransaction;\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            const putModelRequest = modelStore.put({\n              modelPath: this.modelPath,\n              modelArtifacts,\n              modelArtifactsInfo\n            });\n            putModelRequest.onsuccess = () => resolve({modelArtifactsInfo});\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n\nexport const indexedDBRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath: string): IOHandler {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n      key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n      key;\n}\n\nexport class BrowserIndexedDBManager implements ModelStoreManager {\n  private indexedDB: IDBFactory;\n\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    return new Promise<{[path: string]: ModelArtifactsInfo}>(\n        (resolve, reject) => {\n          const openRequest =\n              this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n          openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n          openRequest.onsuccess = () => {\n            const db = openRequest.result;\n            const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n            const store = tx.objectStore(INFO_STORE_NAME);\n            // tslint:disable:max-line-length\n            // Need to cast `store` as `any` here because TypeScript's DOM\n            // library does not have the `getAll()` method even though the\n            // method is supported in the latest version of most mainstream\n            // browsers:\n            // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n            // tslint:enable:max-line-length\n            // tslint:disable-next-line:no-any\n            const getAllInfoRequest = (store as any).getAll() as IDBRequest;\n            getAllInfoRequest.onsuccess = () => {\n              const out: {[path: string]: ModelArtifactsInfo} = {};\n              for (const item of getAllInfoRequest.result) {\n                out[item.modelPath] = item.modelArtifactsInfo;\n              }\n              resolve(out);\n            };\n            getAllInfoRequest.onerror = error => {\n              db.close();\n              return reject(getAllInfoRequest.error);\n            };\n            tx.oncomplete = () => db.close();\n          };\n          openRequest.onerror = error => reject(openRequest.error);\n        });\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    return new Promise<ModelArtifactsInfo>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n\n        const getInfoRequest = infoStore.get(path);\n        let modelTx: IDBTransaction;\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(\n                `Cannot find model with path '${path}' ` +\n                `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n              deleteModelRequest.onsuccess = () =>\n                  resolve(getInfoRequest.result.modelArtifactsInfo);\n              deleteModelRequest.onerror = error =>\n                  reject(getInfoRequest.error);\n            };\n            // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n            deleteInfoRequest.onsuccess = deleteModelData;\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n"]}