{"version":3,"file":"indexed_db_test.js","sourceRoot":"","sources":["../../src/io/indexed_db_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Unit tests for indexed_db.ts.\n */\n\nimport * as tf from '../index';\nimport {BROWSER_ENVS, describeWithFlags} from '../jasmine_util';\nimport {expectArrayBuffersEqual} from '../test_util';\nimport {browserIndexedDB, BrowserIndexedDB, BrowserIndexedDBManager, deleteDatabase, indexedDBRouter} from './indexed_db';\n\ndescribeWithFlags('IndexedDB', BROWSER_ENVS, () => {\n  // Test data.\n  const modelTopology1: {} = {\n    'class_name': 'Sequential',\n    'keras_version': '2.1.4',\n    'config': [{\n      'class_name': 'Dense',\n      'config': {\n        'kernel_initializer': {\n          'class_name': 'VarianceScaling',\n          'config': {\n            'distribution': 'uniform',\n            'scale': 1.0,\n            'seed': null,\n            'mode': 'fan_avg'\n          }\n        },\n        'name': 'dense',\n        'kernel_constraint': null,\n        'bias_regularizer': null,\n        'bias_constraint': null,\n        'dtype': 'float32',\n        'activation': 'linear',\n        'trainable': true,\n        'kernel_regularizer': null,\n        'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n        'units': 1,\n        'batch_input_shape': [null, 3],\n        'use_bias': true,\n        'activity_regularizer': null\n      }\n    }],\n    'backend': 'tensorflow'\n  };\n  const weightSpecs1: tf.io.WeightsManifestEntry[] = [\n    {\n      name: 'dense/kernel',\n      shape: [3, 1],\n      dtype: 'float32',\n    },\n    {\n      name: 'dense/bias',\n      shape: [1],\n      dtype: 'float32',\n    }\n  ];\n  const weightData1 = new ArrayBuffer(16);\n  const artifacts1: tf.io.ModelArtifacts = {\n    modelTopology: modelTopology1,\n    weightSpecs: weightSpecs1,\n    weightData: weightData1,\n    format: 'layers-model',\n    generatedBy: 'TensorFlow.js v0.0.0',\n    convertedBy: null,\n    modelInitializer: {}\n  };\n\n  const weightSpecs2: tf.io.WeightsManifestEntry[] = [\n    {\n      name: 'dense/new_kernel',\n      shape: [5, 1],\n      dtype: 'float32',\n    },\n    {\n      name: 'dense/new_bias',\n      shape: [1],\n      dtype: 'float32',\n    }\n  ];\n\n  beforeEach(deleteDatabase);\n\n  afterEach(deleteDatabase);\n\n  it('Save-load round trip', async () => {\n    const testStartDate = new Date();\n    const handler = tf.io.getSaveHandlers('indexeddb://FooModel')[0];\n\n    const saveResult = await handler.save(artifacts1);\n    expect(saveResult.modelArtifactsInfo.dateSaved.getTime())\n        .toBeGreaterThanOrEqual(testStartDate.getTime());\n    // Note: The following two assertions work only because there is no\n    //   non-ASCII characters in `modelTopology1` and `weightSpecs1`.\n    expect(saveResult.modelArtifactsInfo.modelTopologyBytes)\n        .toEqual(JSON.stringify(modelTopology1).length);\n    expect(saveResult.modelArtifactsInfo.weightSpecsBytes)\n        .toEqual(JSON.stringify(weightSpecs1).length);\n    expect(saveResult.modelArtifactsInfo.weightDataBytes)\n        .toEqual(weightData1.byteLength);\n\n    const loadedArtifacts = await handler.load();\n    expect(loadedArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(loadedArtifacts.weightSpecs).toEqual(weightSpecs1);\n    expect(loadedArtifacts.format).toEqual('layers-model');\n    expect(loadedArtifacts.generatedBy).toEqual('TensorFlow.js v0.0.0');\n    expect(loadedArtifacts.convertedBy).toEqual(null);\n    expect(loadedArtifacts.modelInitializer).toEqual({});\n    expectArrayBuffersEqual(loadedArtifacts.weightData, weightData1);\n  });\n\n  it('Save two models and load one', async () => {\n    const weightData2 = new ArrayBuffer(24);\n    const artifacts2: tf.io.ModelArtifacts = {\n      modelTopology: modelTopology1,\n      weightSpecs: weightSpecs2,\n      weightData: weightData2,\n    };\n    const handler1 = tf.io.getSaveHandlers('indexeddb://Model/1')[0];\n    const saveResult1 = await handler1.save(artifacts1);\n    // Note: The following two assertions work only because there is no\n    // non-ASCII characters in `modelTopology1` and `weightSpecs1`.\n    expect(saveResult1.modelArtifactsInfo.modelTopologyBytes)\n        .toEqual(JSON.stringify(modelTopology1).length);\n    expect(saveResult1.modelArtifactsInfo.weightSpecsBytes)\n        .toEqual(JSON.stringify(weightSpecs1).length);\n    expect(saveResult1.modelArtifactsInfo.weightDataBytes)\n        .toEqual(weightData1.byteLength);\n\n    const handler2 = tf.io.getSaveHandlers('indexeddb://Model/2')[0];\n    const saveResult2 = await handler2.save(artifacts2);\n    expect(saveResult2.modelArtifactsInfo.dateSaved.getTime())\n        .toBeGreaterThanOrEqual(\n            saveResult1.modelArtifactsInfo.dateSaved.getTime());\n    // Note: The following two assertions work only because there is\n    // no non-ASCII characters in `modelTopology1` and\n    // `weightSpecs1`.\n    expect(saveResult2.modelArtifactsInfo.modelTopologyBytes)\n        .toEqual(JSON.stringify(modelTopology1).length);\n    expect(saveResult2.modelArtifactsInfo.weightSpecsBytes)\n        .toEqual(JSON.stringify(weightSpecs2).length);\n    expect(saveResult2.modelArtifactsInfo.weightDataBytes)\n        .toEqual(weightData2.byteLength);\n\n    const loadedArtifacts = await handler1.load();\n    expect(loadedArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(loadedArtifacts.weightSpecs).toEqual(weightSpecs1);\n    expectArrayBuffersEqual(loadedArtifacts.weightData, weightData1);\n  });\n\n  it('Loading nonexistent model fails', async () => {\n    const handler = tf.io.getSaveHandlers('indexeddb://NonexistentModel')[0];\n\n    try {\n      await handler.load();\n      fail('Loading nonexistent model from IndexedDB succeeded unexpectly');\n    } catch (err) {\n      expect(err.message)\n          .toEqual(\n              'Cannot find model with path \\'NonexistentModel\\' in IndexedDB.');\n    }\n  });\n\n  it('Null, undefined or empty modelPath throws Error', () => {\n    expect(() => browserIndexedDB(null))\n        .toThrowError(\n            /IndexedDB, modelPath must not be null, undefined or empty/);\n    expect(() => browserIndexedDB(undefined))\n        .toThrowError(\n            /IndexedDB, modelPath must not be null, undefined or empty/);\n    expect(() => browserIndexedDB(''))\n        .toThrowError(\n            /IndexedDB, modelPath must not be null, undefined or empty./);\n  });\n\n  it('router', () => {\n    expect(indexedDBRouter('indexeddb://bar') instanceof BrowserIndexedDB)\n        .toEqual(true);\n    expect(indexedDBRouter('localstorage://bar')).toBeNull();\n    expect(indexedDBRouter('qux')).toBeNull();\n  });\n\n  it('Manager: List models: 0 result', async () => {\n    // Before any model is saved, listModels should return empty result.\n    const models = await new BrowserIndexedDBManager().listModels();\n    expect(models).toEqual({});\n  });\n\n  it('Manager: List models: 1 result', async () => {\n    const handler = tf.io.getSaveHandlers('indexeddb://baz/QuxModel')[0];\n    const saveResult = await handler.save(artifacts1);\n\n    // After successful saving, there should be one model.\n    const models = await new BrowserIndexedDBManager().listModels();\n    expect(Object.keys(models).length).toEqual(1);\n    expect(models['baz/QuxModel'].modelTopologyType)\n        .toEqual(saveResult.modelArtifactsInfo.modelTopologyType);\n    expect(models['baz/QuxModel'].modelTopologyBytes)\n        .toEqual(saveResult.modelArtifactsInfo.modelTopologyBytes);\n    expect(models['baz/QuxModel'].weightSpecsBytes)\n        .toEqual(saveResult.modelArtifactsInfo.weightSpecsBytes);\n    expect(models['baz/QuxModel'].weightDataBytes)\n        .toEqual(saveResult.modelArtifactsInfo.weightDataBytes);\n  });\n\n  it('Manager: List models: 2 results', async () => {\n    // First, save a model.\n    const handler1 = tf.io.getSaveHandlers('indexeddb://QuxModel')[0];\n    const saveResult1 = await handler1.save(artifacts1);\n\n    // Then, save the model under another path.\n    const handler2 = tf.io.getSaveHandlers('indexeddb://repeat/QuxModel')[0];\n    const saveResult2 = await handler2.save(artifacts1);\n\n    // After successful saving, there should be two models.\n    const models = await new BrowserIndexedDBManager().listModels();\n    expect(Object.keys(models).length).toEqual(2);\n    expect(models['QuxModel'].modelTopologyType)\n        .toEqual(saveResult1.modelArtifactsInfo.modelTopologyType);\n    expect(models['QuxModel'].modelTopologyBytes)\n        .toEqual(saveResult1.modelArtifactsInfo.modelTopologyBytes);\n    expect(models['QuxModel'].weightSpecsBytes)\n        .toEqual(saveResult1.modelArtifactsInfo.weightSpecsBytes);\n    expect(models['QuxModel'].weightDataBytes)\n        .toEqual(saveResult1.modelArtifactsInfo.weightDataBytes);\n    expect(models['repeat/QuxModel'].modelTopologyType)\n        .toEqual(saveResult2.modelArtifactsInfo.modelTopologyType);\n    expect(models['repeat/QuxModel'].modelTopologyBytes)\n        .toEqual(saveResult2.modelArtifactsInfo.modelTopologyBytes);\n    expect(models['repeat/QuxModel'].weightSpecsBytes)\n        .toEqual(saveResult2.modelArtifactsInfo.weightSpecsBytes);\n    expect(models['repeat/QuxModel'].weightDataBytes)\n        .toEqual(saveResult2.modelArtifactsInfo.weightDataBytes);\n  });\n\n  it('Manager: Successful removeModel', async () => {\n    // First, save a model.\n    const handler1 = tf.io.getSaveHandlers('indexeddb://QuxModel')[0];\n    await handler1.save(artifacts1);\n\n    // Then, save the model under another path.\n    const handler2 = tf.io.getSaveHandlers('indexeddb://repeat/QuxModel')[0];\n    await handler2.save(artifacts1);\n\n    // After successful saving, delete the first save, and then\n    // `listModel` should give only one result.\n    const manager = new BrowserIndexedDBManager();\n    await manager.removeModel('QuxModel');\n\n    const models = await manager.listModels();\n    expect(Object.keys(models)).toEqual(['repeat/QuxModel']);\n  });\n\n  it('Manager: Successful removeModel with URL scheme', async () => {\n    // First, save a model.\n    const handler1 = tf.io.getSaveHandlers('indexeddb://QuxModel')[0];\n    await handler1.save(artifacts1);\n\n    // Then, save the model under another path.\n    const handler2 = tf.io.getSaveHandlers('indexeddb://repeat/QuxModel')[0];\n    await handler2.save(artifacts1);\n\n    // After successful saving, delete the first save, and then\n    // `listModel` should give only one result.\n    const manager = new BrowserIndexedDBManager();\n\n    // Delete a model specified with a path that includes the\n    // indexeddb:// scheme prefix should work.\n    manager.removeModel('indexeddb://QuxModel');\n\n    const models = await manager.listModels();\n    expect(Object.keys(models)).toEqual(['repeat/QuxModel']);\n  });\n\n  it('Manager: Failed removeModel', async () => {\n    try {\n      // Attempt to delete a nonexistent model is expected to fail.\n      await new BrowserIndexedDBManager().removeModel('nonexistent');\n      fail('Deleting nonexistent model succeeded unexpectedly.');\n    } catch (err) {\n      expect(err.message)\n          .toEqual('Cannot find model with path \\'nonexistent\\' in IndexedDB.');\n    }\n  });\n});\n"]}