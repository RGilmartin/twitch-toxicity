{"version":3,"file":"local_storage_test.js","sourceRoot":"","sources":["../../src/io/local_storage_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../index';\nimport {BROWSER_ENVS, describeWithFlags} from '../jasmine_util';\nimport {arrayBufferToBase64String, base64StringToArrayBuffer} from './io_utils';\nimport {browserLocalStorage, BrowserLocalStorage, BrowserLocalStorageManager, localStorageRouter, purgeLocalStorageArtifacts} from './local_storage';\n\ndescribeWithFlags('LocalStorage', BROWSER_ENVS, () => {\n  // Test data.\n  const modelTopology1: {} = {\n    'class_name': 'Sequential',\n    'keras_version': '2.1.4',\n    'config': [{\n      'class_name': 'Dense',\n      'config': {\n        'kernel_initializer': {\n          'class_name': 'VarianceScaling',\n          'config': {\n            'distribution': 'uniform',\n            'scale': 1.0,\n            'seed': null,\n            'mode': 'fan_avg'\n          }\n        },\n        'name': 'dense',\n        'kernel_constraint': null,\n        'bias_regularizer': null,\n        'bias_constraint': null,\n        'dtype': 'float32',\n        'activation': 'linear',\n        'trainable': true,\n        'kernel_regularizer': null,\n        'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n        'units': 1,\n        'batch_input_shape': [null, 3],\n        'use_bias': true,\n        'activity_regularizer': null\n      }\n    }],\n    'backend': 'tensorflow'\n  };\n  const weightSpecs1: tf.io.WeightsManifestEntry[] = [\n    {\n      name: 'dense/kernel',\n      shape: [3, 1],\n      dtype: 'float32',\n    },\n    {\n      name: 'dense/bias',\n      shape: [1],\n      dtype: 'float32',\n    }\n  ];\n  const weightData1 = new ArrayBuffer(16);\n\n  const artifacts1: tf.io.ModelArtifacts = {\n    modelTopology: modelTopology1,\n    weightSpecs: weightSpecs1,\n    weightData: weightData1,\n    format: 'layers-model',\n    generatedBy: 'TensorFlow.js v0.0.0',\n    convertedBy: '1.13.1',\n    signature: null,\n    userDefinedMetadata: {},\n    modelInitializer: {}\n  };\n\n  const artifactsV0: tf.io.ModelArtifacts = {\n    modelTopology: modelTopology1,\n    weightSpecs: weightSpecs1,\n    weightData: weightData1\n  };\n\n  function findOverflowingByteSize(): number {\n    const LS = window.localStorage;\n    const probeKey =\n        `tfjs_test_probe_values_${new Date().getTime()}_${Math.random()}`;\n    const minKilobytes = 200;\n    const stepKilobytes = 200;\n    const maxKilobytes = 40000;\n    for (let kilobytes = minKilobytes; kilobytes < maxKilobytes;\n         kilobytes += stepKilobytes) {\n      const bytes = kilobytes * 1024;\n      const data = new ArrayBuffer(bytes);\n      try {\n        const encoded = arrayBufferToBase64String(data);\n        LS.setItem(probeKey, encoded);\n      } catch (err) {\n        return bytes;\n      }\n      LS.removeItem(probeKey);\n    }\n    throw new Error(\n        `Unable to determined overflowing byte size up to ${maxKilobytes} kB.`);\n  }\n\n  beforeEach(() => {\n    purgeLocalStorageArtifacts();\n  });\n\n  afterEach(() => {\n    purgeLocalStorageArtifacts();\n  });\n\n  it('Save artifacts succeeds', done => {\n    const testStartDate = new Date();\n    const handler = tf.io.getSaveHandlers('localstorage://foo/FooModel')[0];\n    handler.save(artifacts1)\n        .then(saveResult => {\n          expect(saveResult.modelArtifactsInfo.dateSaved.getTime())\n              .toBeGreaterThanOrEqual(testStartDate.getTime());\n          // Note: The following two assertions work only because there is no\n          //   non-ASCII characters in `modelTopology1` and `weightSpecs1`.\n          expect(saveResult.modelArtifactsInfo.modelTopologyBytes)\n              .toEqual(JSON.stringify(modelTopology1).length);\n          expect(saveResult.modelArtifactsInfo.weightSpecsBytes)\n              .toEqual(JSON.stringify(weightSpecs1).length);\n          expect(saveResult.modelArtifactsInfo.weightDataBytes).toEqual(16);\n\n          // Check the content of the saved items in local storage.\n          const LS = window.localStorage;\n          const info =\n              JSON.parse(LS.getItem('tensorflowjs_models/foo/FooModel/info'));\n          expect(Date.parse(info.dateSaved))\n              .toEqual(saveResult.modelArtifactsInfo.dateSaved.getTime());\n          expect(info.modelTopologyBytes)\n              .toEqual(saveResult.modelArtifactsInfo.modelTopologyBytes);\n          expect(info.weightSpecsBytes)\n              .toEqual(saveResult.modelArtifactsInfo.weightSpecsBytes);\n          expect(info.weightDataBytes)\n              .toEqual(saveResult.modelArtifactsInfo.weightDataBytes);\n\n          const topologyString =\n              LS.getItem('tensorflowjs_models/foo/FooModel/model_topology');\n          expect(JSON.stringify(modelTopology1)).toEqual(topologyString);\n\n          const weightSpecsString =\n              LS.getItem('tensorflowjs_models/foo/FooModel/weight_specs');\n          expect(JSON.stringify(weightSpecs1)).toEqual(weightSpecsString);\n\n          const weightDataBase64String =\n              LS.getItem('tensorflowjs_models/foo/FooModel/weight_data');\n          expect(base64StringToArrayBuffer(weightDataBase64String))\n              .toEqual(weightData1);\n\n          done();\n        })\n        .catch(err => {\n          console.error(err.stack);\n        });\n  });\n\n  it('Save-load round trip succeeds', async () => {\n    const handler1 = tf.io.getSaveHandlers('localstorage://FooModel')[0];\n\n    await handler1.save(artifacts1);\n    const handler2 = tf.io.getLoadHandlers('localstorage://FooModel')[0];\n    const loaded = await handler2.load();\n    expect(loaded.modelTopology).toEqual(modelTopology1);\n    expect(loaded.weightSpecs).toEqual(weightSpecs1);\n    expect(loaded.weightData).toEqual(weightData1);\n    expect(loaded.format).toEqual('layers-model');\n    expect(loaded.generatedBy).toEqual('TensorFlow.js v0.0.0');\n    expect(loaded.convertedBy).toEqual('1.13.1');\n    expect(loaded.userDefinedMetadata).toEqual({});\n    expect(loaded.modelInitializer).toEqual({});\n  });\n\n  it('Save-load round trip succeeds: v0 format', async () => {\n    const handler1 = tf.io.getSaveHandlers('localstorage://FooModel')[0];\n\n    await handler1.save(artifactsV0);\n    const handler2 = tf.io.getLoadHandlers('localstorage://FooModel')[0];\n    const loaded = await handler2.load();\n    expect(loaded.modelTopology).toEqual(modelTopology1);\n    expect(loaded.weightSpecs).toEqual(weightSpecs1);\n    expect(loaded.weightData).toEqual(weightData1);\n    expect(loaded.format).toBeUndefined();\n    expect(loaded.generatedBy).toBeUndefined();\n    expect(loaded.convertedBy).toBeUndefined();\n    expect(loaded.userDefinedMetadata).toBeUndefined();\n  });\n\n  it('Loading nonexistent model fails.', done => {\n    const handler = tf.io.getSaveHandlers('localstorage://NonexistentModel')[0];\n    handler.load()\n        .then(artifacts => {\n          fail('Loading nonexistent model succeeded unexpectedly.');\n        })\n        .catch(err => {\n          expect(err.message)\n              .toEqual(\n                  'In local storage, there is no model with name ' +\n                  '\\'NonexistentModel\\'');\n          done();\n        });\n  });\n\n  it('Loading model with missing topology fails.', done => {\n    const handler1 = tf.io.getSaveHandlers('localstorage://FooModel')[0];\n    handler1.save(artifacts1)\n        .then(saveResult => {\n          // Manually remove the topology item from local storage.\n          window.localStorage.removeItem(\n              'tensorflowjs_models/FooModel/model_topology');\n\n          const handler2 = tf.io.getLoadHandlers('localstorage://FooModel')[0];\n          handler2.load()\n              .then(artifacts => {\n                fail(\n                    'Loading of model with missing topology succeeded ' +\n                    'unexpectedly.');\n              })\n              .catch(err => {\n                expect(err.message)\n                    .toEqual(\n                        'In local storage, the topology of model ' +\n                        '\\'FooModel\\' is missing.');\n                done();\n              });\n        })\n        .catch(err => {\n          console.error(err.stack);\n        });\n  });\n\n  it('Loading model with missing weight specs fails.', done => {\n    const handler1 = tf.io.getSaveHandlers('localstorage://FooModel')[0];\n    handler1.save(artifacts1)\n        .then(saveResult => {\n          // Manually remove the weight specs item from local storage.\n          window.localStorage.removeItem(\n              'tensorflowjs_models/FooModel/weight_specs');\n\n          const handler2 = tf.io.getLoadHandlers('localstorage://FooModel')[0];\n          handler2.load()\n              .then(artifacts => {\n                fail(\n                    'Loading of model with missing weight specs succeeded ' +\n                    'unexpectedly.');\n              })\n              .catch(err => {\n                expect(err.message)\n                    .toEqual(\n                        'In local storage, the weight specs of model ' +\n                        '\\'FooModel\\' are missing.');\n                done();\n              });\n        })\n        .catch(err => {\n          console.error(err.stack);\n        });\n  });\n\n  it('Loading model with missing weight data fails.', done => {\n    const handler1 = tf.io.getSaveHandlers('localstorage://FooModel')[0];\n    handler1.save(artifacts1)\n        .then(saveResult => {\n          // Manually remove the weight data item from local storage.\n          window.localStorage.removeItem(\n              'tensorflowjs_models/FooModel/weight_data');\n\n          const handler2 = tf.io.getLoadHandlers('localstorage://FooModel')[0];\n          handler2.load()\n              .then(artifacts => {\n                fail(\n                    'Loading of model with missing weight data succeeded ' +\n                    'unexpectedly.');\n              })\n              .catch(err => {\n                expect(err.message)\n                    .toEqual(\n                        'In local storage, the binary weight values of model ' +\n                        '\\'FooModel\\' are missing.');\n                done();\n              });\n        })\n        .catch(err => {\n          console.error(err.stack);\n        });\n  });\n\n  it('Data size too large leads to error thrown', done => {\n    const overflowByteSize = findOverflowingByteSize();\n    const overflowArtifacts: tf.io.ModelArtifacts = {\n      modelTopology: modelTopology1,\n      weightSpecs: weightSpecs1,\n      weightData: new ArrayBuffer(overflowByteSize),\n    };\n    const handler1 = tf.io.getSaveHandlers('localstorage://FooModel')[0];\n    handler1.save(overflowArtifacts)\n        .then(saveResult => {\n          fail(\n              'Saving of model of overflowing-size weight data succeeded ' +\n              'unexpectedly.');\n        })\n        .catch(err => {\n          expect((err.message as string)\n                     .indexOf(\n                         'Failed to save model \\'FooModel\\' to local storage'))\n              .toEqual(0);\n          done();\n        });\n  });\n\n  it('Null, undefined or empty modelPath throws Error', () => {\n    expect(() => browserLocalStorage(null))\n        .toThrowError(\n            /local storage, modelPath must not be null, undefined or empty/);\n    expect(() => browserLocalStorage(undefined))\n        .toThrowError(\n            /local storage, modelPath must not be null, undefined or empty/);\n    expect(() => browserLocalStorage(''))\n        .toThrowError(\n            /local storage, modelPath must not be null, undefined or empty./);\n  });\n\n  it('router', () => {\n    expect(\n        localStorageRouter('localstorage://bar') instanceof BrowserLocalStorage)\n        .toEqual(true);\n    expect(localStorageRouter('indexeddb://bar')).toBeNull();\n    expect(localStorageRouter('qux')).toBeNull();\n  });\n\n  it('Manager: List models: 0 result', done => {\n    // Before any model is saved, listModels should return empty result.\n    new BrowserLocalStorageManager()\n        .listModels()\n        .then(out => {\n          expect(out).toEqual({});\n          done();\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  it('Manager: List models: 1 result', done => {\n    const handler = tf.io.getSaveHandlers('localstorage://baz/QuxModel')[0];\n    handler.save(artifacts1)\n        .then(saveResult => {\n          // After successful saving, there should be one model.\n          new BrowserLocalStorageManager()\n              .listModels()\n              .then(out => {\n                expect(Object.keys(out).length).toEqual(1);\n                expect(out['baz/QuxModel'].modelTopologyType)\n                    .toEqual(saveResult.modelArtifactsInfo.modelTopologyType);\n                expect(out['baz/QuxModel'].modelTopologyBytes)\n                    .toEqual(saveResult.modelArtifactsInfo.modelTopologyBytes);\n                expect(out['baz/QuxModel'].weightSpecsBytes)\n                    .toEqual(saveResult.modelArtifactsInfo.weightSpecsBytes);\n                expect(out['baz/QuxModel'].weightDataBytes)\n                    .toEqual(saveResult.modelArtifactsInfo.weightDataBytes);\n                done();\n              })\n              .catch(err => done.fail(err.stack));\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  it('Manager: List models: 2 results', done => {\n    // First, save a model.\n    const handler1 = tf.io.getSaveHandlers('localstorage://QuxModel')[0];\n    handler1.save(artifacts1)\n        .then(saveResult1 => {\n          // Then, save the model under another path.\n          const handler2 =\n              tf.io.getSaveHandlers('localstorage://repeat/QuxModel')[0];\n          handler2.save(artifacts1)\n              .then(saveResult2 => {\n                // After successful saving, there should be two models.\n                new BrowserLocalStorageManager()\n                    .listModels()\n                    .then(out => {\n                      expect(Object.keys(out).length).toEqual(2);\n                      expect(out['QuxModel'].modelTopologyType)\n                          .toEqual(\n                              saveResult1.modelArtifactsInfo.modelTopologyType);\n                      expect(out['QuxModel'].modelTopologyBytes)\n                          .toEqual(saveResult1.modelArtifactsInfo\n                                       .modelTopologyBytes);\n                      expect(out['QuxModel'].weightSpecsBytes)\n                          .toEqual(\n                              saveResult1.modelArtifactsInfo.weightSpecsBytes);\n                      expect(out['QuxModel'].weightDataBytes)\n                          .toEqual(\n                              saveResult1.modelArtifactsInfo.weightDataBytes);\n                      expect(out['repeat/QuxModel'].modelTopologyType)\n                          .toEqual(\n                              saveResult2.modelArtifactsInfo.modelTopologyType);\n                      expect(out['repeat/QuxModel'].modelTopologyBytes)\n                          .toEqual(saveResult2.modelArtifactsInfo\n                                       .modelTopologyBytes);\n                      expect(out['repeat/QuxModel'].weightSpecsBytes)\n                          .toEqual(\n                              saveResult2.modelArtifactsInfo.weightSpecsBytes);\n                      expect(out['repeat/QuxModel'].weightDataBytes)\n                          .toEqual(\n                              saveResult2.modelArtifactsInfo.weightDataBytes);\n                      done();\n                    })\n                    .catch(err => done.fail(err.stack));\n              })\n              .catch(err => done.fail(err.stack));\n        })\n        .catch(err => done.fail(err.stack));\n  });\n\n  it('Manager: Successful deleteModel', done => {\n    // First, save a model.\n    const handler1 = tf.io.getSaveHandlers('localstorage://QuxModel')[0];\n    handler1.save(artifacts1)\n        .then(saveResult1 => {\n          // Then, save the model under another path.\n          const handler2 =\n              tf.io.getSaveHandlers('localstorage://repeat/QuxModel')[0];\n          handler2.save(artifacts1)\n              .then(saveResult2 => {\n                // After successful saving, delete the first save, and then\n                // `listModel` should give only one result.\n                const manager = new BrowserLocalStorageManager();\n\n                manager.removeModel('QuxModel')\n                    .then(deletedInfo => {\n                      manager.listModels().then(out => {\n                        expect(Object.keys(out)).toEqual(['repeat/QuxModel']);\n                      });\n                      done();\n                    })\n                    .catch(err => done.fail(err.stack));\n              })\n              .catch(err => done.fail(err.stack));\n        })\n        .catch(err => done.fail(err.stack));\n  });\n});\n"]}