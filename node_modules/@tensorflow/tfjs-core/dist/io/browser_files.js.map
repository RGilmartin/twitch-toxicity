{"version":3,"file":"browser_files.js","sourceRoot":"","sources":["../../src/io/browser_files.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelJSON, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer<T>(f: () => T): Promise<T> {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\n\nexport class BrowserDownloads implements IOHandler {\n  private readonly modelTopologyFileName: string;\n  private readonly weightDataFileName: string;\n  private readonly jsonAnchor: HTMLAnchorElement;\n  private readonly weightDataAnchor: HTMLAnchorElement;\n\n  static readonly URL_SCHEME = 'downloads://';\n\n  constructor(fileNamePrefix?: string) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error(\n          'browserDownloads() cannot proceed because the current environment ' +\n          'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName =\n        fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (typeof (document) === 'undefined') {\n      throw new Error(\n          'Browser downloads are not supported in ' +\n          'this environment since `document` is not present');\n    }\n    const weightsURL = window.URL.createObjectURL(new Blob(\n        [modelArtifacts.weightData], {type: 'application/octet-stream'}));\n\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserDownloads.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const weightsManifest: WeightsManifestConfig = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelTopologyAndWeightManifest: ModelJSON = {\n        modelTopology: modelArtifacts.modelTopology,\n        format: modelArtifacts.format,\n        generatedBy: modelArtifacts.generatedBy,\n        convertedBy: modelArtifacts.convertedBy,\n        weightsManifest\n      };\n      if (modelArtifacts.signature != null) {\n        modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n      }\n      if (modelArtifacts.userDefinedMetadata != null) {\n        modelTopologyAndWeightManifest.userDefinedMetadata =\n            modelArtifacts.userDefinedMetadata;\n      }\n      if (modelArtifacts.modelInitializer != null) {\n        modelTopologyAndWeightManifest.modelInitializer =\n            modelArtifacts.modelInitializer;\n      }\n      const modelTopologyAndWeightManifestURL =\n          window.URL.createObjectURL(new Blob(\n              [JSON.stringify(modelTopologyAndWeightManifest)],\n              {type: 'application/json'}));\n\n      // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n      const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') :\n                                                   this.jsonAnchor;\n      jsonAnchor.download = this.modelTopologyFileName;\n      jsonAnchor.href = modelTopologyAndWeightManifestURL;\n      // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ?\n            document.createElement('a') :\n            this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(\n            () => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n\n      return {modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)};\n    }\n  }\n}\n\nclass BrowserFiles implements IOHandler {\n  private readonly files: File[];\n\n  constructor(files: File[]) {\n    if (files == null || files.length < 1) {\n      throw new Error(\n          `When calling browserFiles, at least 1 file is required, ` +\n          `but received ${files}`);\n    }\n    this.files = files;\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    const jsonFile = this.files[0];\n    const weightFiles = this.files.slice(1);\n\n    return new Promise<ModelArtifacts>((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse((event.target as any).result) as ModelJSON;\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(\n              `modelTopology field is missing from file ${jsonFile.name}`));\n          return;\n        }\n\n        if (weightFiles.length === 0) {\n          resolve({modelTopology});\n        }\n\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(\n              `weightManifest field is missing from file ${jsonFile.name}`));\n          return;\n        }\n\n        let pathToFile: {[path: string]: File};\n        try {\n          pathToFile =\n              this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n        } catch (err) {\n          reject(err);\n          return;\n        }\n\n        const weightSpecs: WeightsManifestEntry[] = [];\n        const paths: string[] = [];\n        const perFileBuffers: ArrayBuffer[] = [];\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            paths.push(path);\n            perFileBuffers.push(null);\n          });\n          weightSpecs.push(...weightsGroup.weights);\n        });\n\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            const weightFileReader = new FileReader();\n            weightFileReader.onload = (event: Event) => {\n              // tslint:disable-next-line:no-any\n              const weightData = (event.target as any).result as ArrayBuffer;\n              const index = paths.indexOf(path);\n              perFileBuffers[index] = weightData;\n              if (perFileBuffers.indexOf(null) === -1) {\n                const result: ModelArtifacts = {\n                  modelTopology,\n                  weightSpecs,\n                  weightData: concatenateArrayBuffers(perFileBuffers),\n                  format: modelJSON.format,\n                  generatedBy: modelJSON.generatedBy,\n                  convertedBy: modelJSON.convertedBy\n                };\n                if (modelJSON.signature != null) {\n                  result.signature = modelJSON.signature;\n                }\n                if (modelJSON.userDefinedMetadata != null) {\n                  result.userDefinedMetadata = modelJSON.userDefinedMetadata;\n                }\n                if (modelJSON.modelInitializer != null) {\n                  result.modelInitializer = modelJSON.modelInitializer;\n                }\n                resolve(result);\n              }\n            };\n            weightFileReader.onerror = error =>\n                reject(`Failed to weights data from file of path '${path}'.`);\n            weightFileReader.readAsArrayBuffer(pathToFile[path]);\n          });\n        });\n      };\n      jsonReader.onerror = error => reject(\n          `Failed to read model topology and weights manifest JSON ` +\n          `from file '${jsonFile.name}'. BrowserFiles supports loading ` +\n          `Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(jsonFile);\n    });\n  }\n\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n  private checkManifestAndWeightFiles(\n      manifest: WeightsManifestConfig, files: File[]): {[path: string]: File} {\n    const basenames: string[] = [];\n    const fileNames = files.map(file => basename(file.name));\n    const pathToFile: {[path: string]: File} = {};\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(\n              `Duplicate file basename found in weights manifest: ` +\n              `'${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(\n              `Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== files.length) {\n      throw new Error(\n          `Mismatch in the number of files in weights manifest ` +\n          `(${basenames.length}) and the number of weight files provided ` +\n          `(${files.length}).`);\n    }\n    return pathToFile;\n  }\n}\n\nexport const browserDownloadsRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model'): IOHandler {\n  return new BrowserDownloads(fileNamePrefix);\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files: File[]): IOHandler {\n  return new BrowserFiles(files);\n}\n"]}