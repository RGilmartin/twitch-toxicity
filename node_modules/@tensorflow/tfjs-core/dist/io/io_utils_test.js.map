{"version":3,"file":"io_utils_test.js","sourceRoot":"","sources":["../../src/io/io_utils_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '../index';\nimport {ALL_ENVS, BROWSER_ENVS, describeWithFlags} from '../jasmine_util';\nimport {scalar, tensor1d, tensor2d} from '../ops/ops';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\nimport {expectArraysEqual} from '../test_util';\nimport {expectArraysClose} from '../test_util';\nimport {encodeString} from '../util';\n\nimport {arrayBufferToBase64String, base64StringToArrayBuffer, basename, concatenateArrayBuffers, concatenateTypedArrays, stringByteLength, getFloat16Decoder} from './io_utils';\nimport {WeightsManifestEntry} from './types';\n\ndescribe('concatenateTypedArrays', () => {\n  it('Single float arrays', () => {\n    const x = new Float32Array([1.1, 2.2, 3.3]);\n    const buffer = concatenateTypedArrays([x]);\n    expect(buffer.byteLength).toEqual(12);\n    expect(new Float32Array(buffer, 0, 3)).toEqual(x);\n  });\n\n  it('Float arrays', () => {\n    const x = new Float32Array([1.1, 2.2, 3.3]);\n    const y = new Float32Array([-1.1, -2.2, -3.3]);\n    const buffer = concatenateTypedArrays([x, y]);\n    expect(buffer.byteLength).toEqual(24);\n    expect(new Float32Array(buffer, 0, 3)).toEqual(x);\n    expect(new Float32Array(buffer, 12, 3)).toEqual(y);\n  });\n  it('Single int32 arrays', () => {\n    const x = new Int32Array([11, 22, 33]);\n    const buffer = concatenateTypedArrays([x]);\n    expect(buffer.byteLength).toEqual(12);\n    expect(new Int32Array(buffer, 0, 3)).toEqual(x);\n  });\n\n  it('Int32 arrays', () => {\n    const x = new Int32Array([11, 22, 33]);\n    const y = new Int32Array([-11, -22, -33]);\n    const buffer = concatenateTypedArrays([x, y]);\n    expect(buffer.byteLength).toEqual(24);\n    expect(new Int32Array(buffer, 0, 3)).toEqual(x);\n    expect(new Int32Array(buffer, 12, 3)).toEqual(y);\n  });\n\n  it('Single uint8 arrays', () => {\n    const x = new Uint8Array([11, 22, 33]);\n    const buffer = concatenateTypedArrays([x]);\n    expect(buffer.byteLength).toEqual(3);\n    expect(new Uint8Array(buffer, 0, 3)).toEqual(x);\n  });\n\n  it('Uint8 arrays', () => {\n    const x = new Uint8Array([11, 22, 33]);\n    const y = new Uint8Array([111, 122, 133]);\n    const buffer = concatenateTypedArrays([x, y]);\n    expect(buffer.byteLength).toEqual(6);\n    expect(new Uint8Array(buffer, 0, 3)).toEqual(x);\n    expect(new Uint8Array(buffer, 3, 3)).toEqual(y);\n  });\n\n  it('Mixed Uint8, Int32 and Float32 arrays', () => {\n    const x = new Uint8Array([0, 1, 1, 0]);\n    const y = new Int32Array([10, 20, 30, 40]);\n    const z = new Float32Array([-1.1, -2.2, -3.3, -4.4]);\n    const buffer = concatenateTypedArrays([x, y, z]);\n    expect(buffer.byteLength).toEqual(1 * 4 + 4 * 4 + 4 * 4);\n    expect(new Uint8Array(buffer, 0, 4)).toEqual(x);\n    expect(new Int32Array(buffer, 4, 4)).toEqual(y);\n    expect(new Float32Array(buffer, 20, 4)).toEqual(z);\n  });\n\n  it('Concatenate Float32Arrays from SubArrays', () => {\n    const x1 = new Float32Array([1.1, 2.2, 3.3]);\n    const x2 = new Float32Array([-1.1, -2.2, -3.3]);\n    const xConcatenated = concatenateTypedArrays([x1, x2]);\n    const y1 = new Float32Array(xConcatenated, 0, 3);\n    const y2 = new Float32Array(xConcatenated, 3 * 4, 3);\n    // At this point, the buffer of y1 is longer than than the actual byte\n    // length of y1, because of the way y1 is constructed. The same is true for\n    // y2.\n    expect(y1.buffer.byteLength).toEqual(6 * 4);\n    expect(y2.buffer.byteLength).toEqual(6 * 4);\n\n    const yConcatenated = concatenateTypedArrays([y1, y2]);\n    expect(yConcatenated.byteLength).toEqual(6 * 4);\n    expect(new Float32Array(yConcatenated, 0, 3)).toEqual(x1);\n    expect(new Float32Array(yConcatenated, 3 * 4, 3)).toEqual(x2);\n  });\n\n  it('Concatenate Int32Array from SubArrays', () => {\n    const x1 = new Int32Array([11, 22, 33]);\n    const x2 = new Int32Array([-11, -22, -33]);\n    const xConcatenated = concatenateTypedArrays([x1, x2]);\n    const y1 = new Int32Array(xConcatenated, 0, 3);\n    const y2 = new Int32Array(xConcatenated, 3 * 4, 3);\n    // At this point, the buffer of y1 is longer than than the actual byte\n    // length of y1, because of the way y1 is constructed. The same is true for\n    // y2.\n    expect(y1.buffer.byteLength).toEqual(6 * 4);\n    expect(y2.buffer.byteLength).toEqual(6 * 4);\n\n    const yConcatenated = concatenateTypedArrays([y1, y2]);\n    expect(yConcatenated.byteLength).toEqual(6 * 4);\n    expect(new Int32Array(yConcatenated, 0, 3)).toEqual(x1);\n    expect(new Int32Array(yConcatenated, 3 * 4, 3)).toEqual(x2);\n  });\n\n  it('Concatenate Uint8Array from SubArrays', () => {\n    const x1 = new Uint8Array([11, 22, 33]);\n    const x2 = new Uint8Array([44, 55, 66]);\n    const xConcatenated = concatenateTypedArrays([x1, x2]);\n    const y1 = new Uint8Array(xConcatenated, 0, 3);\n    const y2 = new Uint8Array(xConcatenated, 3, 3);\n    // At this point, the buffer of y1 is longer than than the actual byte\n    // length of y1, because of the way y1 is constructed. The same is true for\n    // y2.\n    expect(y1.buffer.byteLength).toEqual(6);\n    expect(y2.buffer.byteLength).toEqual(6);\n\n    const yConcatenated = concatenateTypedArrays([y1, y2]);\n    expect(yConcatenated.byteLength).toEqual(6);\n    expect(new Uint8Array(yConcatenated, 0, 3)).toEqual(x1);\n    expect(new Uint8Array(yConcatenated, 3, 3)).toEqual(x2);\n  });\n\n  it('Concatenate mixed TypedArrays from SubArrays', () => {\n    const x1 = new Uint8Array([11, 22, 33, 44]);\n    const x2 = new Int32Array([-44, -55, -66]);\n    const x3 = new Float32Array([1.1, 2.2, 3.3]);\n    const xConcatenated = concatenateTypedArrays([x1, x2, x3]);\n    const y1 = new Uint8Array(xConcatenated, 0, 4);\n    const y2 = new Int32Array(xConcatenated, 4, 3);\n    const y3 = new Float32Array(xConcatenated, 4 + 3 * 4, 3);\n    // At this point, the buffer of y1 is longer than than the actual byte\n    // length of y1, because of the way y1 is constructed. The same is true for\n    // y2 and y3.\n    expect(y1.buffer.byteLength).toEqual(4 + 3 * 4 + 3 * 4);\n    expect(y2.buffer.byteLength).toEqual(4 + 3 * 4 + 3 * 4);\n    expect(y3.buffer.byteLength).toEqual(4 + 3 * 4 + 3 * 4);\n\n    const yConcatenated = concatenateTypedArrays([y1, y2, y3]);\n    expect(yConcatenated.byteLength).toEqual(4 + 3 * 4 + 3 * 4);\n    expect(new Uint8Array(yConcatenated, 0, 4)).toEqual(x1);\n    expect(new Int32Array(yConcatenated, 4, 3)).toEqual(x2);\n    expect(new Float32Array(yConcatenated, 4 + 3 * 4, 3)).toEqual(x3);\n  });\n\n  it('null and undefined inputs', () => {\n    expect(() => concatenateTypedArrays(null)).toThrow();\n    expect(() => concatenateTypedArrays(undefined)).toThrow();\n  });\n\n  it('empty input array', () => {\n    expect(concatenateTypedArrays([]).byteLength).toEqual(0);\n  });\n\n  it('Unsupported dtype', () => {\n    const x = new Int16Array([0, 1, 1, 0]);\n    // tslint:disable-next-line:no-any\n    expect(() => concatenateTypedArrays([x as any]))\n        .toThrowError(/Unsupported TypedArray subtype: Int16Array/);\n  });\n});\n\ndescribeWithFlags('encodeWeights', ALL_ENVS, () => {\n  it('Float32 tensors as NamedTensorMap', async () => {\n    const tensors: NamedTensorMap = {\n      x1: tensor2d([[10, 20], [30, 40]]),\n      x2: scalar(42),\n      x3: tensor1d([-1.3, -3.7, 1.3, 3.7]),\n    };\n    const dataAndSpecs = await tf.io.encodeWeights(tensors);\n    const data = dataAndSpecs.data;\n    const specs = dataAndSpecs.specs;\n    expect(data.byteLength).toEqual(4 * (4 + 1 + 4));\n    expect(new Float32Array(data, 0, 4)).toEqual(new Float32Array([\n      10, 20, 30, 40\n    ]));\n    expect(new Float32Array(data, 16, 1)).toEqual(new Float32Array([42]));\n    expect(new Float32Array(data, 20, 4)).toEqual(new Float32Array([\n      -1.3, -3.7, 1.3, 3.7\n    ]));\n    expect(specs).toEqual([\n      {\n        name: 'x1',\n        dtype: 'float32',\n        shape: [2, 2],\n      },\n      {\n        name: 'x2',\n        dtype: 'float32',\n        shape: [],\n      },\n      {\n        name: 'x3',\n        dtype: 'float32',\n        shape: [4],\n      }\n    ]);\n  });\n\n  it('Float32 tensors as NamedTensor array', async () => {\n    const tensors: NamedTensor[] = [\n      {name: 'x1234', tensor: tensor2d([[10, 20], [30, 40]])}, {\n        name: 'a42',\n        tensor: scalar(42),\n      },\n      {name: 'b41', tensor: tensor1d([-1.3, -3.7, 1.3, 3.7])}\n    ];\n    const dataAndSpecs = await tf.io.encodeWeights(tensors);\n    const data = dataAndSpecs.data;\n    const specs = dataAndSpecs.specs;\n    expect(data.byteLength).toEqual(4 * (4 + 1 + 4));\n    expect(new Float32Array(data, 0, 4)).toEqual(new Float32Array([\n      10, 20, 30, 40\n    ]));\n    expect(new Float32Array(data, 16, 1)).toEqual(new Float32Array([42]));\n    expect(new Float32Array(data, 20, 4)).toEqual(new Float32Array([\n      -1.3, -3.7, 1.3, 3.7\n    ]));\n    expect(specs).toEqual([\n      {\n        name: 'x1234',\n        dtype: 'float32',\n        shape: [2, 2],\n      },\n      {\n        name: 'a42',\n        dtype: 'float32',\n        shape: [],\n      },\n      {\n        name: 'b41',\n        dtype: 'float32',\n        shape: [4],\n      }\n    ]);\n  });\n\n  it('Empty NamedTensor array', async () => {\n    const tensors: NamedTensor[] = [];\n    const dataAndSpecs = await tf.io.encodeWeights(tensors);\n    const data = dataAndSpecs.data;\n    const specs = dataAndSpecs.specs;\n    expect(data.byteLength).toEqual(0);\n    expect(specs).toEqual([]);\n  });\n\n  it('Int32 tensors', async () => {\n    const tensors: NamedTensorMap = {\n      x1: tensor2d([[10, 20], [30, 40]], [2, 2], 'int32'),\n      x2: scalar(42, 'int32'),\n      x3: tensor1d([-1, -3, -3, -7], 'int32'),\n    };\n    const dataAndSpecs = await tf.io.encodeWeights(tensors);\n    const data = dataAndSpecs.data;\n    const specs = dataAndSpecs.specs;\n    expect(data.byteLength).toEqual(4 * (4 + 1 + 4));\n    expect(new Int32Array(data, 0, 4)).toEqual(new Int32Array([\n      10, 20, 30, 40\n    ]));\n    expect(new Int32Array(data, 16, 1)).toEqual(new Int32Array([42]));\n    expect(new Int32Array(data, 20, 4)).toEqual(new Int32Array([\n      -1, -3, -3, -7\n    ]));\n    expect(specs).toEqual([\n      {\n        name: 'x1',\n        dtype: 'int32',\n        shape: [2, 2],\n      },\n      {\n        name: 'x2',\n        dtype: 'int32',\n        shape: [],\n      },\n      {\n        name: 'x3',\n        dtype: 'int32',\n        shape: [4],\n      }\n    ]);\n  });\n\n  it('Bool tensors', async () => {\n    const tensors: NamedTensorMap = {\n      x1: tensor2d([[true, false], [false, true]], [2, 2], 'bool'),\n      x2: scalar(false, 'bool'),\n      x3: tensor1d([false, true, true, false], 'bool'),\n    };\n    const dataAndSpecs = await tf.io.encodeWeights(tensors);\n    const data = dataAndSpecs.data;\n    const specs = dataAndSpecs.specs;\n    expect(data.byteLength).toEqual(4 + 1 + 4);\n    expect(new Uint8Array(data, 0, 4)).toEqual(new Uint8Array([1, 0, 0, 1]));\n    expect(new Uint8Array(data, 4, 1)).toEqual(new Uint8Array([0]));\n    expect(new Uint8Array(data, 5, 4)).toEqual(new Uint8Array([0, 1, 1, 0]));\n    expect(specs).toEqual([\n      {\n        name: 'x1',\n        dtype: 'bool',\n        shape: [2, 2],\n      },\n      {\n        name: 'x2',\n        dtype: 'bool',\n        shape: [],\n      },\n      {\n        name: 'x3',\n        dtype: 'bool',\n        shape: [4],\n      }\n    ]);\n  });\n\n  it('Complex64 tensors', async () => {\n    const tensors: NamedTensorMap = {\n      x1: tf.complex([1, 2], [1, 2]),\n      x2: tf.complex(1, 2),\n      x3: tf.complex([[1]], [[2]]),\n    };\n    const dataAndSpecs = await tf.io.encodeWeights(tensors);\n    const data = dataAndSpecs.data;\n    const specs = dataAndSpecs.specs;\n    expect(data.byteLength).toEqual(8 * 4);\n    expect(new Float32Array(data, 0, 4)).toEqual(new Float32Array([\n      1, 1, 2, 2\n    ]));\n    expect(new Float32Array(data, 16, 2)).toEqual(new Float32Array([1, 2]));\n    expect(new Float32Array(data, 24, 2)).toEqual(new Float32Array([1, 2]));\n    expect(specs).toEqual([\n      {\n        name: 'x1',\n        dtype: 'complex64',\n        shape: [2],\n      },\n      {\n        name: 'x2',\n        dtype: 'complex64',\n        shape: [],\n      },\n      {\n        name: 'x3',\n        dtype: 'complex64',\n        shape: [1, 1],\n      }\n    ]);\n  });\n  it('String tensors', async () => {\n    const tensors: NamedTensorMap = {\n      x1: tensor2d([['a', 'bc'], ['def', 'g']], [2, 2]),\n      x2: scalar(''),                       // Empty string.\n      x3: tensor1d(['здраво', 'поздрав']),  // Cyrillic.\n      x4: scalar('正常'),                   // East Asian.\n      x5: scalar('hello')                   // Single string.\n    };\n    const dataAndSpecs = await tf.io.encodeWeights(tensors);\n    const data = dataAndSpecs.data;\n    const specs = dataAndSpecs.specs;\n    const x1ByteLength = 7 + 4 * 4;       // 7 ascii chars + 4 ints.\n    const x2ByteLength = 4;               // No chars + 1 int.\n    const x3ByteLength = 13 * 2 + 2 * 4;  // 13 cyrillic letters + 2 ints.\n    const x4ByteLength = 6 + 1 * 4;       // 2 east asian letters + 1 int.\n    const x5ByteLength = 5 + 1 * 4;       // 5 ascii chars + 1 int.\n    expect(data.byteLength)\n        .toEqual(\n            x1ByteLength + x2ByteLength + x3ByteLength + x4ByteLength +\n            x5ByteLength);\n    // x1 'a'.\n    expect(new Uint32Array(data, 0, 1)[0]).toBe(1);\n    expect(new Uint8Array(data, 4, 1)).toEqual(encodeString('a'));\n    // x1 'bc'.\n    expect(new Uint32Array(data.slice(5, 9))[0]).toBe(2);\n    expect(new Uint8Array(data, 9, 2)).toEqual(encodeString('bc'));\n    // x1 'def'.\n    expect(new Uint32Array(data.slice(11, 15))[0]).toBe(3);\n    expect(new Uint8Array(data, 15, 3)).toEqual(encodeString('def'));\n    // x1 'g'.\n    expect(new Uint32Array(data.slice(18, 22))[0]).toBe(1);\n    expect(new Uint8Array(data, 22, 1)).toEqual(encodeString('g'));\n\n    // x2 is empty string.\n    expect(new Uint32Array(data.slice(23, 27))[0]).toBe(0);\n\n    // x3 'здраво'.\n    expect(new Uint32Array(data.slice(27, 31))[0]).toBe(12);\n    expect(new Uint8Array(data, 31, 12)).toEqual(encodeString('здраво'));\n\n    // x3 'поздрав'.\n    expect(new Uint32Array(data.slice(43, 47))[0]).toBe(14);\n    expect(new Uint8Array(data, 47, 14)).toEqual(encodeString('поздрав'));\n\n    // x4 '正常'.\n    expect(new Uint32Array(data.slice(61, 65))[0]).toBe(6);\n    expect(new Uint8Array(data, 65, 6)).toEqual(encodeString('正常'));\n\n    // x5 'hello'.\n    expect(new Uint32Array(data.slice(71, 75))[0]).toBe(5);\n    expect(new Uint8Array(data, 75, 5)).toEqual(encodeString('hello'));\n\n    expect(specs).toEqual([\n      {name: 'x1', dtype: 'string', shape: [2, 2]},\n      {name: 'x2', dtype: 'string', shape: []},\n      {name: 'x3', dtype: 'string', shape: [2]},\n      {name: 'x4', dtype: 'string', shape: []},\n      {name: 'x5', dtype: 'string', shape: []}\n    ]);\n  });\n\n  it('Mixed dtype tensors', async () => {\n    const tensors: NamedTensorMap = {\n      x1: tensor2d([[10, 20], [30, 40]], [2, 2], 'int32'),\n      x2: scalar(13.37, 'float32'),\n      x3: tensor1d([true, false, false, true], 'bool'),\n      x4: tf.complex([1, 1], [2, 2])\n    };\n    const dataAndSpecs = await tf.io.encodeWeights(tensors);\n    const data = dataAndSpecs.data;\n    const specs = dataAndSpecs.specs;\n    expect(data.byteLength).toEqual(4 * 4 + 4 * 1 + 1 * 4 + 4 * 4);\n    expect(new Int32Array(data, 0, 4)).toEqual(new Int32Array([\n      10, 20, 30, 40\n    ]));\n    expect(new Float32Array(data, 16, 1)).toEqual(new Float32Array([13.37]));\n    expect(new Uint8Array(data, 20, 4)).toEqual(new Uint8Array([1, 0, 0, 1]));\n    expect(new Float32Array(data, 24, 4)).toEqual(new Float32Array([\n      1, 2, 1, 2\n    ]));\n    expect(specs).toEqual([\n      {\n        name: 'x1',\n        dtype: 'int32',\n        shape: [2, 2],\n      },\n      {\n        name: 'x2',\n        dtype: 'float32',\n        shape: [],\n      },\n      {\n        name: 'x3',\n        dtype: 'bool',\n        shape: [4],\n      },\n      {\n        name: 'x4',\n        dtype: 'complex64',\n        shape: [2],\n      }\n    ]);\n  });\n});\n\ndescribeWithFlags('decodeWeights', {}, () => {\n  it('Mixed dtype tensors', async () => {\n    const tensors: NamedTensorMap = {\n      x1: tensor2d([[10, 20], [30, 40]], [2, 2], 'int32'),\n      x2: scalar(13.37, 'float32'),\n      x3: tensor1d([true, false, false], 'bool'),\n      x4: tensor2d([['здраво', 'a'], ['b', 'c']], [2, 2], 'string'),\n      x5: tensor1d([''], 'string'),  // Empty string.\n      x6: scalar('hello'),           // Single string.\n      y1: tensor2d([-10, -20, -30], [3, 1], 'float32'),\n      y2: tf.complex([1, 1], [2, 2])\n    };\n    const dataAndSpecs = await tf.io.encodeWeights(tensors);\n    const data = dataAndSpecs.data;\n    const specs = dataAndSpecs.specs;\n    const decoded = tf.io.decodeWeights(data, specs);\n    expect(Object.keys(decoded).length).toEqual(8);\n    expectArraysEqual(await decoded['x1'].data(), await tensors['x1'].data());\n    expectArraysEqual(await decoded['x2'].data(), await tensors['x2'].data());\n    expectArraysEqual(await decoded['x3'].data(), await tensors['x3'].data());\n    expectArraysEqual(await decoded['x4'].data(), await tensors['x4'].data());\n    expectArraysEqual(await decoded['x5'].data(), await tensors['x5'].data());\n    expectArraysEqual(await decoded['x6'].data(), await tensors['x6'].data());\n    expectArraysEqual(await decoded['y1'].data(), await tensors['y1'].data());\n    expectArraysEqual(await decoded['y2'].data(), await tensors['y2'].data());\n  });\n\n  it('Unsupported dtype raises Error', () => {\n    const buffer = new ArrayBuffer(4);\n    // tslint:disable-next-line:no-any\n    const specs: any = [\n      {\n        name: 'x',\n        dtype: 'int16',\n        shape: [],\n      },\n      {name: 'y', dtype: 'int16', shape: []}\n    ];\n    expect(() => tf.io.decodeWeights(buffer, specs))\n        .toThrowError(/Unsupported dtype in weight \\'x\\': int16/);\n  });\n\n  it('support quantization uint8 weights', async () => {\n    const manifestSpecs: WeightsManifestEntry[] = [\n      {\n        'name': 'weight0',\n        'dtype': 'float32',\n        'shape': [3],\n        'quantization': {'min': -1, 'scale': 0.1, 'dtype': 'uint8'}\n      },\n      {\n        'name': 'weight1',\n        'dtype': 'int32',\n        'shape': [3],\n        'quantization': {'min': -1, 'scale': 0.1, 'dtype': 'uint8'}\n      }\n    ];\n    const data = new Uint8Array([0, 48, 255, 0, 48, 255]);\n    const decoded = tf.io.decodeWeights(data.buffer, manifestSpecs);\n    const weight0 = decoded['weight0'];\n    expectArraysClose(await weight0.data(), [-1, 3.8, 24.5]);\n    expect(weight0.shape).toEqual([3]);\n    expect(weight0.dtype).toEqual('float32');\n\n    const weight1 = decoded['weight1'];\n    expectArraysEqual(await weight1.data(), [-1, 4, 25]);\n    expect(weight1.shape).toEqual([3]);\n    expect(weight1.dtype).toEqual('int32');\n  });\n\n  it('support quantization uint16 weights', async () => {\n    const manifestSpecs: WeightsManifestEntry[] = [\n      {\n        'name': 'weight0',\n        'dtype': 'float32',\n        'shape': [3],\n        'quantization': {'min': -1, 'scale': 0.1, 'dtype': 'uint16'}\n      },\n      {\n        'name': 'weight1',\n        'dtype': 'int32',\n        'shape': [3],\n        'quantization': {'min': -1, 'scale': 0.1, 'dtype': 'uint16'}\n      }\n    ];\n    const data = new Uint16Array([0, 48, 255, 0, 48, 255]);\n    const decoded = tf.io.decodeWeights(data.buffer, manifestSpecs);\n    const weight0 = decoded['weight0'];\n    expectArraysClose(await weight0.data(), [-1, 3.8, 24.5]);\n    expect(weight0.shape).toEqual([3]);\n    expect(weight0.dtype).toEqual('float32');\n\n    const weight1 = decoded['weight1'];\n    expectArraysEqual(await weight1.data(), [-1, 4, 25]);\n    expect(weight1.shape).toEqual([3]);\n    expect(weight1.dtype).toEqual('int32');\n  });\n  it('support quantization float16 weights', async () => {\n    const manifestSpecs: WeightsManifestEntry[] = [\n      {\n        name: 'weight0',\n        dtype: 'float32',\n        shape: [3],\n        quantization: { dtype: 'float16' },\n      },\n    ];\n    const data = new Uint16Array([13312, 14336, 14848]);\n    const decoded = tf.io.decodeWeights(data.buffer, manifestSpecs);\n    const weight0 = decoded['weight0'];\n    expectArraysClose(await weight0.data(), [0.25, 0.5, 0.75]);\n    expect(weight0.shape).toEqual([3]);\n    expect(weight0.dtype).toEqual('float32');\n  });\n});\n\ndescribe('stringByteLength', () => {\n  it('ASCII only', () => {\n    const str = '_Lorem ipsum 1337!';\n    expect(stringByteLength(str)).toEqual(str.length);\n  });\n\n  it('Mixed narrow and wide chars', () => {\n    const str = 'aЖ文1';\n    expect(stringByteLength(str.slice(0, 1))).toEqual(1);\n    expect(stringByteLength(str.slice(0, 2))).toEqual(3);\n    expect(stringByteLength(str.slice(0, 3))).toEqual(6);\n    expect(stringByteLength(str.slice(0, 4))).toEqual(7);\n  });\n});\n\ndescribeWithFlags(\n    'arrayBufferToBase64String-base64StringToArrayBuffer', BROWSER_ENVS, () => {\n      it('Round trip', () => {\n        // Generate some semi-random binary data.\n        const x = [];\n        for (let k = 0; k < 2; ++k) {\n          for (let i = 0; i < 254; ++i) {\n            x.push(i + k);\n          }\n          for (let i = 254; i >= 0; --i) {\n            x.push(i + k);\n          }\n        }\n        const buffer = Uint8Array.from(x).buffer;\n        const base64Str = arrayBufferToBase64String(buffer);\n        const decoded =\n            Array.from(new Uint8Array(base64StringToArrayBuffer(base64Str)));\n        expect(decoded).toEqual(x);\n      });\n    });\n\ndescribe('concatenateArrayBuffers', () => {\n  it('Concatenate 3 non-empty ArrayBuffers', () => {\n    const buffer1 = new Uint8Array([1, 2, 3]);\n    const buffer2 = new Uint8Array([11, 22, 33, 44]);\n    const buffer3 = new Uint8Array([111, 222, 100]);\n    const out = concatenateArrayBuffers(\n        [buffer1.buffer, buffer2.buffer, buffer3.buffer]);\n    expect(new Uint8Array(out)).toEqual(new Uint8Array([\n      1, 2, 3, 11, 22, 33, 44, 111, 222, 100\n    ]));\n  });\n\n  it('Concatenate non-empty and empty ArrayBuffers', () => {\n    const buffer1 = new Uint8Array([1, 2, 3]);\n    const buffer2 = new Uint8Array([11, 22, 33, 44]);\n    const buffer3 = new Uint8Array([]);\n    const buffer4 = new Uint8Array([150, 100, 50]);\n    const out = concatenateArrayBuffers(\n        [buffer1.buffer, buffer2.buffer, buffer3.buffer, buffer4.buffer]);\n    expect(new Uint8Array(out)).toEqual(new Uint8Array([\n      1, 2, 3, 11, 22, 33, 44, 150, 100, 50\n    ]));\n  });\n\n  it('A single ArrayBuffer', () => {\n    const buffer1 = new Uint8Array([1, 3, 3, 7]);\n    const out = concatenateArrayBuffers([buffer1.buffer]);\n    expect(new Uint8Array(out)).toEqual(buffer1);\n  });\n\n  it('Zero ArrayBuffers', () => {\n    expect(new Uint8Array(concatenateArrayBuffers([])))\n        .toEqual(new Uint8Array([]));\n  });\n});\n\ndescribe('basename', () => {\n  it('Paths without slashes', () => {\n    expect(basename('foo.txt')).toEqual('foo.txt');\n    expect(basename('bar')).toEqual('bar');\n  });\n\n  it('Paths with slashes', () => {\n    expect(basename('qux/foo.txt')).toEqual('foo.txt');\n    expect(basename('qux/My Model.json')).toEqual('My Model.json');\n    expect(basename('foo/bar/baz')).toEqual('baz');\n    expect(basename('/foo/bar/baz')).toEqual('baz');\n    expect(basename('foo/bar/baz/')).toEqual('baz');\n    expect(basename('foo/bar/baz//')).toEqual('baz');\n  });\n});\n\ndescribe('float16', () => {\n  it('decodes NaN to float32 NaN', () => {\n    const decoder = getFloat16Decoder();\n    const float16NaN = 0x00007e00;\n    const buffer = new Uint16Array([float16NaN]);\n    const f32 = decoder(buffer);\n    expect(f32).toEqual(new Float32Array([NaN]));\n  });\n\n  it('decodes ±Infinity to float32 ±Infinity', () => {\n    const decoder = getFloat16Decoder();\n    const positiveInfinity = 0x00007c00;\n    const negativeInfinity = 0xfffffc00;\n    const buffer = new Uint16Array([positiveInfinity, negativeInfinity]);\n    const f32 = decoder(buffer);\n    expect(f32).toEqual(new Float32Array([Infinity, -Infinity]));\n  });\n\n  it('decodes ±0 to float32 ±0', () => {\n    const decoder = getFloat16Decoder();\n    const positiveZero = 0x00000000;\n    const negativeZero = 0xffff8000;\n    const buffer = new Uint16Array([positiveZero, negativeZero]);\n    const f32 = decoder(buffer);\n    expect(f32).toEqual(new Float32Array([0.0, -0.0]));\n  });\n\n  it('decodes -Infinity on underflow', () => {\n    const decoder = getFloat16Decoder();\n    const minVal = 0xfffffbff;\n    const buffer = new Uint16Array([minVal + 1]);\n    const f32 = decoder(buffer);\n    expect(f32).toEqual(new Float32Array([-Infinity]));\n  });\n\n  it('decodes +Infinity on overflow', () => {\n    const decoder = getFloat16Decoder();\n    const maxVal = 0x00007bff;\n    const buffer = new Uint16Array([maxVal + 1]);\n    const f32 = decoder(buffer);\n    expect(f32).toEqual(new Float32Array([Infinity]));\n  });\n\n  it('decodes interpretable float16 to float32', () => {\n    const decoder = getFloat16Decoder();\n    const buffer = new Uint16Array([\n      0x00003400,\n      0x00003800,\n      0x00003A00,\n      0x00003555\n    ]);\n    const f32 = decoder(buffer);\n    expect(f32[0]).toBeCloseTo(0.25);\n    expect(f32[1]).toBeCloseTo(0.5);\n    expect(f32[2]).toBeCloseTo(0.75);\n    expect(f32[3]).toBeCloseTo(0.333);\n  });\n});\n"]}