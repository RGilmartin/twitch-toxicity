{"version":3,"file":"passthrough_test.js","sourceRoot":"","sources":["../../src/io/passthrough_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Unit tests for passthrough IOHandlers.\n */\n\nimport * as tf from '../index';\nimport {BROWSER_ENVS, describeWithFlags} from '../jasmine_util';\n\nconst modelTopology1: {} = {\n  'class_name': 'Sequential',\n  'keras_version': '2.1.4',\n  'config': [{\n    'class_name': 'Dense',\n    'config': {\n      'kernel_initializer': {\n        'class_name': 'VarianceScaling',\n        'config': {\n          'distribution': 'uniform',\n          'scale': 1.0,\n          'seed': null,\n          'mode': 'fan_avg'\n        }\n      },\n      'name': 'dense',\n      'kernel_constraint': null,\n      'bias_regularizer': null,\n      'bias_constraint': null,\n      'dtype': 'float32',\n      'activation': 'linear',\n      'trainable': true,\n      'kernel_regularizer': null,\n      'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n      'units': 1,\n      'batch_input_shape': [null, 3],\n      'use_bias': true,\n      'activity_regularizer': null\n    }\n  }],\n  'backend': 'tensorflow'\n};\n\nconst weightSpecs1: tf.io.WeightsManifestEntry[] = [\n  {\n    name: 'dense/kernel',\n    shape: [3, 1],\n    dtype: 'float32',\n  },\n  {\n    name: 'dense/bias',\n    shape: [1],\n    dtype: 'float32',\n  }\n];\n\nconst weightData1 = new ArrayBuffer(16);\nconst artifacts1: tf.io.ModelArtifacts = {\n  modelTopology: modelTopology1,\n  weightSpecs: weightSpecs1,\n  weightData: weightData1,\n};\n\ndescribeWithFlags('Passthrough Saver', BROWSER_ENVS, () => {\n  it('passes provided arguments through on save', async () => {\n    const testStartDate = new Date();\n    let savedArtifacts: tf.io.ModelArtifacts = null;\n\n    async function saveHandler(artifacts: tf.io.ModelArtifacts):\n        Promise<tf.io.SaveResult> {\n      savedArtifacts = artifacts;\n      return {\n        modelArtifactsInfo: {\n          dateSaved: testStartDate,\n          modelTopologyType: 'JSON',\n          modelTopologyBytes: JSON.stringify(modelTopology1).length,\n          weightSpecsBytes: JSON.stringify(weightSpecs1).length,\n          weightDataBytes: weightData1.byteLength,\n        }\n      };\n    }\n\n    const saveTrigger = tf.io.withSaveHandler(saveHandler);\n    const saveResult = await saveTrigger.save(artifacts1);\n\n    expect(saveResult.errors).toEqual(undefined);\n    const artifactsInfo = saveResult.modelArtifactsInfo;\n    expect(artifactsInfo.dateSaved.getTime())\n        .toBeGreaterThanOrEqual(testStartDate.getTime());\n    expect(saveResult.modelArtifactsInfo.modelTopologyBytes)\n        .toEqual(JSON.stringify(modelTopology1).length);\n    expect(saveResult.modelArtifactsInfo.weightSpecsBytes)\n        .toEqual(JSON.stringify(weightSpecs1).length);\n    expect(saveResult.modelArtifactsInfo.weightDataBytes).toEqual(16);\n\n    expect(savedArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(savedArtifacts.weightSpecs).toEqual(weightSpecs1);\n    expect(savedArtifacts.weightData).toEqual(weightData1);\n  });\n});\n\ndescribeWithFlags('Passthrough Loader', BROWSER_ENVS, () => {\n  it('load topology and weights: legacy signature', async () => {\n    const passthroughHandler =\n        tf.io.fromMemory(modelTopology1, weightSpecs1, weightData1);\n    const modelArtifacts = await passthroughHandler.load();\n    expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(modelArtifacts.weightSpecs).toEqual(weightSpecs1);\n    expect(modelArtifacts.weightData).toEqual(weightData1);\n    expect(modelArtifacts.userDefinedMetadata).toEqual(undefined);\n  });\n\n  it('load topology and weights', async () => {\n    const passthroughHandler = tf.io.fromMemory({\n      modelTopology: modelTopology1,\n      weightSpecs: weightSpecs1,\n      weightData: weightData1\n    });\n    const modelArtifacts = await passthroughHandler.load();\n    expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(modelArtifacts.weightSpecs).toEqual(weightSpecs1);\n    expect(modelArtifacts.weightData).toEqual(weightData1);\n    expect(modelArtifacts.userDefinedMetadata).toEqual(undefined);\n  });\n\n  it('load model topology only: legacy signature', async () => {\n    const passthroughHandler = tf.io.fromMemory(modelTopology1);\n    const modelArtifacts = await passthroughHandler.load();\n    expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(modelArtifacts.weightSpecs).toEqual(undefined);\n    expect(modelArtifacts.weightData).toEqual(undefined);\n    expect(modelArtifacts.userDefinedMetadata).toEqual(undefined);\n  });\n\n  it('load model topology only', async () => {\n    const passthroughHandler =\n        tf.io.fromMemory({modelTopology: modelTopology1});\n    const modelArtifacts = await passthroughHandler.load();\n    expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(modelArtifacts.weightSpecs).toEqual(undefined);\n    expect(modelArtifacts.weightData).toEqual(undefined);\n    expect(modelArtifacts.userDefinedMetadata).toEqual(undefined);\n  });\n\n  it('load topology, weights, and user-defined metadata', async () => {\n    const userDefinedMetadata: {} = {'fooField': 'fooValue'};\n    const passthroughHandler = tf.io.fromMemory({\n      modelTopology: modelTopology1,\n      weightSpecs: weightSpecs1,\n      weightData: weightData1,\n      userDefinedMetadata\n    });\n    const modelArtifacts = await passthroughHandler.load();\n    expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(modelArtifacts.weightSpecs).toEqual(weightSpecs1);\n    expect(modelArtifacts.weightData).toEqual(weightData1);\n    expect(modelArtifacts.userDefinedMetadata).toEqual(userDefinedMetadata);\n  });\n});\n"]}