{"version":3,"file":"browser_files_test.js","sourceRoot":"","sources":["../../src/io/browser_files_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Unit tests for file-related IOHandlers.\n */\n\nimport * as tf from '../index';\nimport {BROWSER_ENVS, describeWithFlags} from '../jasmine_util';\nimport {browserDownloads, BrowserDownloads, browserDownloadsRouter} from './browser_files';\nimport {WeightsManifestConfig, WeightsManifestEntry} from './types';\n\nconst modelTopology1: {} = {\n  'class_name': 'Sequential',\n  'keras_version': '2.1.4',\n  'config': [{\n    'class_name': 'Dense',\n    'config': {\n      'kernel_initializer': {\n        'class_name': 'VarianceScaling',\n        'config': {\n          'distribution': 'uniform',\n          'scale': 1.0,\n          'seed': null,\n          'mode': 'fan_avg'\n        }\n      },\n      'name': 'dense',\n      'kernel_constraint': null,\n      'bias_regularizer': null,\n      'bias_constraint': null,\n      'dtype': 'float32',\n      'activation': 'linear',\n      'trainable': true,\n      'kernel_regularizer': null,\n      'bias_initializer': {'class_name': 'Zeros', 'config': {}},\n      'units': 1,\n      'batch_input_shape': [null, 3],\n      'use_bias': true,\n      'activity_regularizer': null\n    }\n  }],\n  'backend': 'tensorflow'\n};\nconst weightSpecs1: tf.io.WeightsManifestEntry[] = [\n  {\n    name: 'dense/kernel',\n    shape: [3, 1],\n    dtype: 'float32',\n  },\n  {\n    name: 'dense/bias',\n    shape: [1],\n    dtype: 'float32',\n  }\n];\nconst weightData1 = new ArrayBuffer(16);\nconst artifacts1: tf.io.ModelArtifacts = {\n  modelTopology: modelTopology1,\n  weightSpecs: weightSpecs1,\n  weightData: weightData1,\n  format: 'layers-model',\n  generatedBy: 'TensorFlow.js v0.0.0',\n  convertedBy: null,\n  modelInitializer: {}\n};\n\ndescribeWithFlags('browserDownloads', BROWSER_ENVS, () => {\n  class FakeHTMLAnchorElement {\n    download: string;\n    href: string;\n    clicked: number;\n\n    constructor() {\n      this.clicked = 0;\n    }\n\n    dispatchEvent() {\n      this.clicked++;\n    }\n  }\n\n  let fakeAnchors: FakeHTMLAnchorElement[] = [];\n  let fakeAnchorCount = 0;\n\n  beforeEach(() => {\n    fakeAnchorCount = 0;\n    fakeAnchors = [new FakeHTMLAnchorElement(), new FakeHTMLAnchorElement()];\n    spyOn(document, 'createElement').and.callFake((tag: string) => {\n      return fakeAnchors[fakeAnchorCount++];\n    });\n  });\n\n  it('Explicit file name prefix, with existing anchors', async () => {\n    const testStartDate = new Date();\n    const downloadTrigger = tf.io.getSaveHandlers('downloads://test-model')[0];\n    const saveResult = await downloadTrigger.save(artifacts1);\n    expect(saveResult.errors).toEqual(undefined);\n    const artifactsInfo = saveResult.modelArtifactsInfo;\n    expect(artifactsInfo.dateSaved.getTime())\n        .toBeGreaterThanOrEqual(testStartDate.getTime());\n    expect(saveResult.modelArtifactsInfo.modelTopologyBytes)\n        .toEqual(JSON.stringify(modelTopology1).length);\n    expect(saveResult.modelArtifactsInfo.weightSpecsBytes)\n        .toEqual(JSON.stringify(weightSpecs1).length);\n    expect(saveResult.modelArtifactsInfo.weightDataBytes).toEqual(16);\n\n    const jsonAnchor = fakeAnchors[0];\n    const weightDataAnchor = fakeAnchors[1];\n    expect(jsonAnchor.download).toEqual('test-model.json');\n    expect(weightDataAnchor.download).toEqual('test-model.weights.bin');\n\n    // Verify the content of the JSON file.\n    const jsonContent = await fetch(jsonAnchor.href);\n    const modelTopologyAndWeightsManifest =\n        JSON.parse(await jsonContent.text());\n    expect(modelTopologyAndWeightsManifest.modelTopology)\n        .toEqual(modelTopology1);\n    expect(modelTopologyAndWeightsManifest.format).toEqual('layers-model');\n    expect(modelTopologyAndWeightsManifest.generatedBy)\n        .toEqual('TensorFlow.js v0.0.0');\n    expect(modelTopologyAndWeightsManifest.convertedBy).toEqual(null);\n    expect(modelTopologyAndWeightsManifest.modelInitializer).toEqual({});\n    const weightsManifest = modelTopologyAndWeightsManifest.weightsManifest as\n        WeightsManifestConfig;\n    expect(weightsManifest.length).toEqual(1);\n    expect(weightsManifest[0].paths).toEqual(['./test-model.weights.bin']);\n    expect(weightsManifest[0].weights).toEqual(weightSpecs1);\n\n    // Verify the content of the binary weights file.\n    const response = await fetch(weightDataAnchor.href);\n    const buffer = await response.arrayBuffer();\n    expect(buffer).toEqual(weightData1);\n\n    // Verify that the downloads are triggered through clicks.\n    expect(jsonAnchor.clicked).toEqual(1);\n    expect(weightDataAnchor.clicked).toEqual(1);\n  });\n\n  it('URL scheme in explicit name gets stripped', async () => {\n    const testStartDate = new Date();\n    const downloadTrigger = browserDownloads('downloads://test-model');\n    const saveResult = await downloadTrigger.save(artifacts1);\n    expect(saveResult.errors).toEqual(undefined);\n    const artifactsInfo = saveResult.modelArtifactsInfo;\n    expect(artifactsInfo.dateSaved.getTime())\n        .toBeGreaterThanOrEqual(testStartDate.getTime());\n    expect(saveResult.modelArtifactsInfo.modelTopologyBytes)\n        .toEqual(JSON.stringify(modelTopology1).length);\n    expect(saveResult.modelArtifactsInfo.weightSpecsBytes)\n        .toEqual(JSON.stringify(weightSpecs1).length);\n    expect(saveResult.modelArtifactsInfo.weightDataBytes).toEqual(16);\n\n    const jsonAnchor = fakeAnchors[0];\n    const weightDataAnchor = fakeAnchors[1];\n    expect(jsonAnchor.download).toEqual('test-model.json');\n    expect(weightDataAnchor.download).toEqual('test-model.weights.bin');\n\n    // Verify the content of the JSON file.\n    const jsonContent = await fetch(jsonAnchor.href);\n    const modelTopologyAndWeightsManifest =\n        JSON.parse(await jsonContent.text());\n    expect(modelTopologyAndWeightsManifest.modelTopology)\n        .toEqual(modelTopology1);\n    const weightsManifest = modelTopologyAndWeightsManifest.weightsManifest as\n        WeightsManifestConfig;\n    expect(weightsManifest.length).toEqual(1);\n    expect(weightsManifest[0].paths).toEqual(['./test-model.weights.bin']);\n    expect(weightsManifest[0].weights).toEqual(weightSpecs1);\n\n    // Verify the content of the binary weights file.\n    const response = await fetch(weightDataAnchor.href);\n    const buffer = await response.arrayBuffer();\n    expect(buffer).toEqual(weightData1);\n\n    // Verify that the downloads are triggered through clicks.\n    expect(jsonAnchor.clicked).toEqual(1);\n    expect(weightDataAnchor.clicked).toEqual(1);\n  });\n\n  it('No file name provided, with existing anchors', async () => {\n    const testStartDate = new Date();\n    const downloadTrigger = browserDownloads();\n    const saveResult = await downloadTrigger.save(artifacts1);\n    expect(saveResult.errors).toEqual(undefined);\n    const artifactsInfo = saveResult.modelArtifactsInfo;\n    expect(artifactsInfo.dateSaved.getTime())\n        .toBeGreaterThanOrEqual(testStartDate.getTime());\n    expect(saveResult.modelArtifactsInfo.modelTopologyBytes)\n        .toEqual(JSON.stringify(modelTopology1).length);\n    expect(saveResult.modelArtifactsInfo.weightSpecsBytes)\n        .toEqual(JSON.stringify(weightSpecs1).length);\n    expect(saveResult.modelArtifactsInfo.weightDataBytes).toEqual(16);\n\n    const jsonAnchor = fakeAnchors[0];\n    const weightDataAnchor = fakeAnchors[1];\n\n    // Verify that the default file names are used.\n    expect(jsonAnchor.download).toEqual('model.json');\n    expect(weightDataAnchor.download).toEqual('model.weights.bin');\n\n    // Verify the content of the JSON file.\n    const jsonContent = await fetch(jsonAnchor.href);\n    const modelTopologyAndWeightsManifest =\n        JSON.parse(await jsonContent.text());\n    expect(modelTopologyAndWeightsManifest.modelTopology)\n        .toEqual(modelTopology1);\n    const weightsManifest = modelTopologyAndWeightsManifest.weightsManifest as\n        WeightsManifestConfig;\n    expect(weightsManifest.length).toEqual(1);\n    expect(weightsManifest[0].paths).toEqual(['./model.weights.bin']);\n    expect(weightsManifest[0].weights).toEqual(weightSpecs1);\n\n    // Verify the content of the binary weights file.\n    const response = await fetch(weightDataAnchor.href);\n    const buffer = await response.arrayBuffer();\n    expect(buffer).toEqual(weightData1);\n  });\n\n  it('Download only model topology', async () => {\n    const testStartDate = new Date();\n    const downloadTrigger = browserDownloads();\n    const modelTopologyOnlyArtifacts: tf.io.ModelArtifacts = {\n      modelTopology: modelTopology1,\n    };\n    const saveResult = await downloadTrigger.save(modelTopologyOnlyArtifacts);\n    expect(saveResult.errors).toEqual(undefined);\n    const artifactsInfo = saveResult.modelArtifactsInfo;\n    expect(artifactsInfo.dateSaved.getTime())\n        .toBeGreaterThanOrEqual(testStartDate.getTime());\n    expect(saveResult.modelArtifactsInfo.modelTopologyBytes)\n        .toEqual(JSON.stringify(modelTopology1).length);\n    expect(saveResult.modelArtifactsInfo.weightSpecsBytes).toEqual(0);\n    expect(saveResult.modelArtifactsInfo.weightDataBytes).toEqual(0);\n\n    const jsonAnchor = fakeAnchors[0];\n    const weightDataAnchor = fakeAnchors[1];\n\n    // Verify that the default file names are used.\n    expect(jsonAnchor.download).toEqual('model.json');\n    expect(jsonAnchor.clicked).toEqual(1);\n    // The weight file should not have been downoaded.\n    expect(weightDataAnchor.download).toEqual(undefined);\n    expect(weightDataAnchor.clicked).toEqual(0);\n\n    // Verify the content of the JSON file.\n    const jsonContent = await fetch(jsonAnchor.href);\n    const modelTopologyAndWeightsManifest =\n        JSON.parse(await jsonContent.text());\n    expect(modelTopologyAndWeightsManifest.modelTopology)\n        .toEqual(modelTopology1);\n  });\n\n  it('browserDownloadsRouter', () => {\n    expect(\n        browserDownloadsRouter('downloads://foo') instanceof BrowserDownloads)\n        .toEqual(true);\n    expect(browserDownloadsRouter('invaliddownloads://foo')).toBeNull();\n    expect(browserDownloadsRouter('foo')).toBeNull();\n  });\n});\n\ndescribeWithFlags('browserFiles', BROWSER_ENVS, () => {\n  const weightsFile = new File(\n      [weightData1], 'model.weights.bin', {type: 'application/octet-stream'});\n\n  it('One group, one path', async () => {\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./model.weights.bin'],\n      weights: weightSpecs1,\n    }];\n    const weightsTopologyAndManifest = {\n      modelTopology: modelTopology1,\n      weightsManifest,\n      format: 'layers-model',\n      generatedBy: 'TensorFlow.js v0.0.0',\n      convertedBy: '1.13.1',\n      modelInitializer: {}\n    };\n    const jsonFile = new File(\n        [JSON.stringify(weightsTopologyAndManifest)], 'model.json',\n        {type: 'application/json'});\n\n    const filesHandler = tf.io.browserFiles([jsonFile, weightsFile]);\n    const modelArtifacts = await filesHandler.load();\n    expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(modelArtifacts.weightSpecs).toEqual(weightSpecs1);\n    expect(modelArtifacts.format).toEqual('layers-model');\n    expect(modelArtifacts.generatedBy).toEqual('TensorFlow.js v0.0.0');\n    expect(modelArtifacts.convertedBy).toEqual('1.13.1');\n    expect(modelArtifacts.modelInitializer).toEqual({});\n\n    expect(new Uint8Array(modelArtifacts.weightData))\n        .toEqual(new Uint8Array(weightData1));\n  });\n\n  it(`One group, two paths`, async () => {\n    const weightSpecs: WeightsManifestEntry[] = [\n      {\n        name: 'foo',\n        shape: [1, 1],\n        dtype: 'float32',\n      },\n      {\n        name: 'bar',\n        shape: [1, 1],\n        dtype: 'float32',\n      }\n    ];\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./dir1/model.weights.1.bin', './dir2/model.weights.2.bin'],\n      weights: weightSpecs,\n    }];\n    const weightsTopologyAndManifest = {\n      modelTopology: modelTopology1,\n      weightsManifest,\n    };\n    const weightsFile1 = new File(\n        [new Uint8Array([1, 2, 3, 4]).buffer], 'model.weights.1.bin',\n        {type: 'application/octet-stream'});\n    const weightsFile2 = new File(\n        [new Uint8Array([10, 20, 30, 40]).buffer], 'model.weights.2.bin',\n        {type: 'application/octet-stream'});\n\n    const jsonFile = new File(\n        [JSON.stringify(weightsTopologyAndManifest)], 'model.json',\n        {type: 'application/json'});\n\n    const filesHandler =\n        tf.io.browserFiles([jsonFile, weightsFile1, weightsFile2]);\n    const modelArtifacts = await filesHandler.load();\n    expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(modelArtifacts.weightSpecs).toEqual(weightSpecs);\n    expect(new Uint8Array(modelArtifacts.weightData)).toEqual(new Uint8Array([\n      1, 2, 3, 4, 10, 20, 30, 40\n    ]));\n  });\n\n  it(`Two groups, four paths, reverseOrder=false`, async () => {\n    const weightSpecs1: WeightsManifestEntry[] = [\n      {\n        name: 'foo',\n        shape: [1, 1],\n        dtype: 'float32',\n      },\n      {\n        name: 'bar',\n        shape: [1, 1],\n        dtype: 'float32',\n      }\n    ];\n    const weightSpecs2: WeightsManifestEntry[] = [\n      {\n        name: 'baz',\n        shape: [1, 1],\n        dtype: 'float32',\n      },\n      {\n        name: 'qux',\n        shape: [1, 1],\n        dtype: 'float32',\n      }\n    ];\n    const weightsManifest: WeightsManifestConfig = [\n      {\n        paths: ['./model.weights.1.bin', './model.weights.2.bin'],\n        weights: weightSpecs1,\n      },\n      {\n        paths: ['./model.weights.3.bin', './model.weights.4.bin'],\n        weights: weightSpecs2,\n      }\n    ];\n    const weightsTopologyAndManifest = {\n      modelTopology: modelTopology1,\n      weightsManifest,\n    };\n    const weightsFile1 = new File(\n        [new Uint8Array([1, 3, 5, 7]).buffer], 'model.weights.1.bin',\n        {type: 'application/octet-stream'});\n    const weightsFile2 = new File(\n        [new Uint8Array([10, 30, 50, 70]).buffer], 'model.weights.2.bin',\n        {type: 'application/octet-stream'});\n    const weightsFile3 = new File(\n        [new Uint8Array([2, 4, 6, 8]).buffer], 'model.weights.3.bin',\n        {type: 'application/octet-stream'});\n    const weightsFile4 = new File(\n        [new Uint8Array([20, 40, 60, 80]).buffer], 'model.weights.4.bin',\n        {type: 'application/octet-stream'});\n\n    const jsonFile = new File(\n        [JSON.stringify(weightsTopologyAndManifest)], 'model.json',\n        {type: 'application/json'});\n\n    const filesHandler = tf.io.browserFiles(\n        [jsonFile, weightsFile1, weightsFile2, weightsFile3, weightsFile4]);\n    const modelArtifacts = await filesHandler.load();\n    expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(modelArtifacts.weightSpecs)\n        .toEqual(weightSpecs1.concat(weightSpecs2));\n    expect(new Uint8Array(modelArtifacts.weightData)).toEqual(new Uint8Array([\n      1, 3, 5, 7, 10, 30, 50, 70, 2, 4, 6, 8, 20, 40, 60, 80\n    ]));\n  });\n\n  it(`Two groups, four paths, reverseOrder=true`, async () => {\n    const weightSpecs1: WeightsManifestEntry[] = [\n      {\n        name: 'foo',\n        shape: [1, 1],\n        dtype: 'float32',\n      },\n      {\n        name: 'bar',\n        shape: [1, 1],\n        dtype: 'float32',\n      }\n    ];\n    const weightSpecs2: WeightsManifestEntry[] = [\n      {\n        name: 'baz',\n        shape: [1, 1],\n        dtype: 'float32',\n      },\n      {\n        name: 'qux',\n        shape: [1, 1],\n        dtype: 'float32',\n      }\n    ];\n    const weightsManifest: WeightsManifestConfig = [\n      {\n        paths: ['./model.weights.1.bin', './model.weights.2.bin'],\n        weights: weightSpecs1,\n      },\n      {\n        paths: ['./model.weights.3.bin', './model.weights.4.bin'],\n        weights: weightSpecs2,\n      }\n    ];\n    const weightsTopologyAndManifest = {\n      modelTopology: modelTopology1,\n      weightsManifest,\n    };\n    const weightsFile1 = new File(\n        [new Uint8Array([1, 3, 5, 7]).buffer], 'model.weights.1.bin',\n        {type: 'application/octet-stream'});\n    const weightsFile2 = new File(\n        [new Uint8Array([10, 30, 50, 70]).buffer], 'model.weights.2.bin',\n        {type: 'application/octet-stream'});\n    const weightsFile3 = new File(\n        [new Uint8Array([2, 4, 6, 8]).buffer], 'model.weights.3.bin',\n        {type: 'application/octet-stream'});\n    const weightsFile4 = new File(\n        [new Uint8Array([20, 40, 60, 80]).buffer], 'model.weights.4.bin',\n        {type: 'application/octet-stream'});\n\n    const jsonFile = new File(\n        [JSON.stringify(weightsTopologyAndManifest)], 'model.json',\n        {type: 'application/json'});\n\n    const filesHandler = tf.io.browserFiles(\n        [jsonFile, weightsFile4, weightsFile3, weightsFile2, weightsFile1]);\n    const modelArtifacts = await filesHandler.load();\n    expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(modelArtifacts.weightSpecs)\n        .toEqual(weightSpecs1.concat(weightSpecs2));\n    expect(new Uint8Array(modelArtifacts.weightData)).toEqual(new Uint8Array([\n      1, 3, 5, 7, 10, 30, 50, 70, 2, 4, 6, 8, 20, 40, 60, 80\n    ]));\n  });\n\n  it('Upload model topology only', async () => {\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./model.weights.bin'],\n      weights: weightSpecs1,\n    }];\n    const weightsTopologyAndManifest = {\n      modelTopology: modelTopology1,\n      weightsManifest,\n    };\n    const jsonFile = new File(\n        [JSON.stringify(weightsTopologyAndManifest)], 'model.json',\n        {type: 'application/json'});\n\n    // Select only a JSON file.\n    const filesHandler = tf.io.browserFiles([jsonFile]);\n    const modelArtifacts = await filesHandler.load();\n    expect(modelArtifacts.modelTopology).toEqual(modelTopology1);\n    expect(modelArtifacts.weightSpecs).toEqual(undefined);\n  });\n\n  it('Mismatch in number of paths and number of files', async () => {\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./model.weights.1.bin'],\n      weights: weightSpecs1,\n    }];\n    const weightsTopologyAndManifest = {\n      modelTopology: weightSpecs1,\n      weightsManifest,\n    };\n    const weightsFile1 = new File(\n        [new Uint8Array([1, 2, 3, 4]).buffer], 'model.weights.1.bin',\n        {type: 'application/octet-stream'});\n    const weightsFile2 = new File(\n        [new Uint8Array([10, 20, 30, 40]).buffer], 'model.weights.2.bin',\n        {type: 'application/octet-stream'});\n\n    const jsonFile = new File(\n        [JSON.stringify(weightsTopologyAndManifest)], 'model.json',\n        {type: 'application/json'});\n\n    // Supply two weights files while the manifest has only one path. This is\n    // expected to fail.\n    const filesHandler =\n        tf.io.browserFiles([jsonFile, weightsFile2, weightsFile1]);\n    try {\n      await filesHandler.load();\n      fail(\n          'Loading with mismatch in number of paths and number of files ' +\n          'succeeded unexpectedly.');\n    } catch (err) {\n      expect(err.message)\n          .toEqual(\n              'Mismatch in the number of files in weights manifest (1) ' +\n              'and the number of weight files provided (2).');\n    }\n  });\n\n  it('Mismatch in manifest paths and file names', async () => {\n    const weightSpecs: WeightsManifestEntry[] = [\n      {\n        name: 'foo',\n        shape: [1, 1],\n        dtype: 'float32',\n      },\n      {\n        name: 'bar',\n        shape: [1, 1],\n        dtype: 'float32',\n      }\n    ];\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./model.weights.1.bin', './model.weights.2.bin'],\n      weights: weightSpecs,\n    }];\n    const weightsTopologyAndManifest = {\n      modelTopology: modelTopology1,\n      weightsManifest,\n    };\n    const weightsFile1 = new File(\n        [new Uint8Array([1, 2, 3, 4]).buffer], 'model.weights.1.bin',\n        {type: 'application/octet-stream'});\n    const weightsFile2 = new File(\n        [new Uint8Array([10, 20, 30, 40]).buffer], 'model.weights.3.bin',\n        {type: 'application/octet-stream'});\n    // Notice the wrong file name here. It is expected to cause load() to\n    // fail.\n\n    const jsonFile = new File(\n        [JSON.stringify(weightsTopologyAndManifest)], 'model.json',\n        {type: 'application/json'});\n\n    const filesHandler =\n        tf.io.browserFiles([jsonFile, weightsFile1, weightsFile2]);\n    try {\n      await filesHandler.load();\n      fail(\n          'Loading with mismatching paths and file names ' +\n          'succeeded unexpectedly.');\n    } catch (err) {\n      expect(err.message)\n          .toEqual(\n              'Weight file with basename \\'model.weights.2.bin\\' is not ' +\n              'provided.');\n    }\n  });\n\n  it('Duplicate basenames in paths fails', async () => {\n    const weightSpecs: WeightsManifestEntry[] = [\n      {\n        name: 'foo',\n        shape: [1, 1],\n        dtype: 'float32',\n      },\n      {\n        name: 'bar',\n        shape: [1, 1],\n        dtype: 'float32',\n      }\n    ];\n    // Notice the duplicate basenames here (albeit distinct full paths). This\n    // is expected to cause load() to fail.\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./dir1/model.weights.1.bin', './dir2/model.weights.1.bin'],\n      weights: weightSpecs,\n    }];\n    const weightsTopologyAndManifest = {\n      modelTopology: modelTopology1,\n      weightsManifest,\n    };\n    const weightsFile1 = new File(\n        [new Uint8Array([1, 2, 3, 4]).buffer], 'model.weights.1.bin',\n        {type: 'application/octet-stream'});\n    const weightsFile2 = new File(\n        [new Uint8Array([10, 20, 30, 40]).buffer], 'model.weights.2.bin',\n        {type: 'application/octet-stream'});\n    // Notice the wrong file name here. It is expected to cause load() to\n    // fail.\n\n    const jsonFile = new File(\n        [JSON.stringify(weightsTopologyAndManifest)], 'model.json',\n        {type: 'application/json'});\n\n    const filesHandler =\n        tf.io.browserFiles([jsonFile, weightsFile1, weightsFile2]);\n    try {\n      await filesHandler.load();\n      fail('Loading with duplicate basenames in paths succeeded unexpectedly.');\n    } catch (err) {\n      expect(err.message)\n          .toEqual(\n              'Duplicate file basename found in weights manifest: ' +\n              '\\'model.weights.1.bin\\'');\n    }\n  });\n\n  it('Missing modelTopology from JSON leads to Error', async () => {\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./model.weights.bin'],\n      weights: weightSpecs1,\n    }];\n    const weightsTopologyAndManifest = {\n      weightsManifest,\n    };\n    const jsonFile = new File(\n        [JSON.stringify(weightsTopologyAndManifest)], 'model.json',\n        {type: 'application/json'});\n\n    const filesHandler = tf.io.browserFiles([jsonFile, weightsFile]);\n    try {\n      await filesHandler.load();\n      fail(\n          'Loading with Files IOHandler with missing modelTopology ' +\n          'succeeded unexpectedly.');\n    } catch (err) {\n      expect(err.message)\n          .toMatch(/modelTopology field is missing from file model\\.json/);\n    }\n  });\n\n  it('Incorrect number of files leads to Error', () => {\n    expect(() => tf.io.browserFiles(null)).toThrowError(/at least 1 file/);\n    expect(() => tf.io.browserFiles([])).toThrowError(/at least 1 file/);\n  });\n});\n"]}