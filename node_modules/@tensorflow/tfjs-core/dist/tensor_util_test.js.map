{"version":3,"file":"tensor_util_test.js","sourceRoot":"","sources":["../src/tensor_util_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from './index';\nimport {ALL_ENVS, describeWithFlags} from './jasmine_util';\nimport {Tensor} from './tensor';\nimport {getTensorsInContainer, isTensorInList} from './tensor_util';\nimport {convertToTensor} from './tensor_util_env';\nimport {expectArraysClose, expectArraysEqual} from './test_util';\n\ndescribeWithFlags('tensor_util.isTensorInList', ALL_ENVS, () => {\n  it('not in list', () => {\n    const a = tf.scalar(1);\n    const list: Tensor[] = [tf.scalar(1), tf.tensor1d([1, 2, 3])];\n\n    expect(isTensorInList(a, list)).toBe(false);\n  });\n\n  it('in list', () => {\n    const a = tf.scalar(1);\n    const list: Tensor[] = [tf.scalar(2), tf.tensor1d([1, 2, 3]), a];\n\n    expect(isTensorInList(a, list)).toBe(true);\n  });\n});\n\ndescribeWithFlags('getTensorsInContainer', ALL_ENVS, () => {\n  it('null input returns empty tensor', () => {\n    const results = getTensorsInContainer(null);\n\n    expect(results).toEqual([]);\n  });\n\n  it('tensor input returns one element tensor', () => {\n    const x = tf.scalar(1);\n    const results = getTensorsInContainer(x);\n\n    expect(results).toEqual([x]);\n  });\n\n  it('name tensor map returns flattened tensor', () => {\n    const x1 = tf.scalar(1);\n    const x2 = tf.scalar(3);\n    const x3 = tf.scalar(4);\n    const results = getTensorsInContainer({x1, x2, x3});\n\n    expect(results).toEqual([x1, x2, x3]);\n  });\n\n  it('can extract from arbitrary depth', () => {\n    const container = [\n      {x: tf.scalar(1), y: tf.scalar(2)}, [[[tf.scalar(3)]], {z: tf.scalar(4)}]\n    ];\n    const results = getTensorsInContainer(container);\n    expect(results.length).toBe(4);\n  });\n\n  it('works with loops in container', () => {\n    const container = [tf.scalar(1), tf.scalar(2), [tf.scalar(3)]];\n    const innerContainer = [container];\n    // tslint:disable-next-line:no-any\n    container.push(innerContainer as any);\n    const results = getTensorsInContainer(container);\n    expect(results.length).toBe(3);\n  });\n});\n\ndescribeWithFlags('convertToTensor', ALL_ENVS, () => {\n  it('primitive integer, NaN converts to zero, no error thrown', async () => {\n    const a = () => convertToTensor(NaN, 'a', 'test', 'int32');\n    expect(a).not.toThrowError();\n\n    const b = convertToTensor(NaN, 'b', 'test', 'int32');\n    expect(b.rank).toBe(0);\n    expect(b.dtype).toBe('int32');\n    expectArraysClose(await b.data(), 0);\n  });\n\n  it('primitive number', async () => {\n    const a = convertToTensor(3, 'a', 'test');\n    expect(a.rank).toBe(0);\n    expect(a.dtype).toBe('float32');\n    expectArraysClose(await a.data(), 3);\n  });\n\n  it('primitive integer, NaN converts to zero', async () => {\n    const a = convertToTensor(NaN, 'a', 'test', 'int32');\n    expect(a.rank).toBe(0);\n    expect(a.dtype).toBe('int32');\n    expectArraysClose(await a.data(), 0);\n  });\n\n  it('primitive boolean, parsed as bool tensor', async () => {\n    const a = convertToTensor(true, 'a', 'test');\n    expect(a.rank).toBe(0);\n    expect(a.dtype).toBe('bool');\n    expectArraysClose(await a.data(), 1);\n  });\n\n  it('primitive boolean, forced to be parsed as bool tensor', async () => {\n    const a = convertToTensor(true, 'a', 'test', 'bool');\n    expect(a.rank).toBe(0);\n    expect(a.dtype).toBe('bool');\n    expectArraysEqual(await a.data(), 1);\n  });\n\n  it('array1d', async () => {\n    const a = convertToTensor([1, 2, 3], 'a', 'test');\n    expect(a.rank).toBe(1);\n    expect(a.dtype).toBe('float32');\n    expect(a.shape).toEqual([3]);\n    expectArraysClose(await a.data(), [1, 2, 3]);\n  });\n\n  it('array2d', async () => {\n    const a = convertToTensor([[1], [2], [3]], 'a', 'test');\n    expect(a.rank).toBe(2);\n    expect(a.shape).toEqual([3, 1]);\n    expect(a.dtype).toBe('float32');\n    expectArraysClose(await a.data(), [1, 2, 3]);\n  });\n\n  it('array3d', async () => {\n    const a = convertToTensor([[[1], [2]], [[3], [4]]], 'a', 'test');\n    expect(a.rank).toBe(3);\n    expect(a.shape).toEqual([2, 2, 1]);\n    expect(a.dtype).toBe('float32');\n    expectArraysClose(await a.data(), [1, 2, 3, 4]);\n  });\n\n  it('array4d', async () => {\n    const a = convertToTensor([[[[1]], [[2]]], [[[3]], [[4]]]], 'a', 'test');\n    expect(a.rank).toBe(4);\n    expect(a.shape).toEqual([2, 2, 1, 1]);\n    expect(a.dtype).toBe('float32');\n    expectArraysClose(await a.data(), [1, 2, 3, 4]);\n  });\n\n  it('passing a tensor returns the tensor itself', () => {\n    const s = tf.scalar(3);\n    const res = convertToTensor(s, 'a', 'test');\n    expect(res === s).toBe(true);\n  });\n\n  it('passing a tensor with wrong type errors', () => {\n    const s = tf.scalar(3);\n    expect(() => convertToTensor(s, 'p', 'f', 'bool'))\n        .toThrowError(\n            /Argument 'p' passed to 'f' must be bool tensor, but got float32/);\n  });\n\n  it('fails when passed a string and force numeric is true', () => {\n    const expectedDtype = 'numeric';\n    expect(() => convertToTensor('hello', 'p', 'test', expectedDtype))\n        .toThrowError();\n  });\n\n  it('force numeric is true by default', () => {\n    // Should fail to parse a string tensor since force numeric is true.\n    expect(() => convertToTensor('hello', 'p', 'test')).toThrowError();\n  });\n\n  it('primitive string, do not force numeric', () => {\n    const t = convertToTensor('hello', 'p', 'test', 'string_or_numeric');\n    expect(t.dtype).toBe('string');\n    expect(t.shape).toEqual([]);\n  });\n\n  it('string[], do not force numeric', () => {\n    const t =\n        convertToTensor(['a', 'b', 'c'], 'p', 'test', 'string_or_numeric');\n    expect(t.dtype).toBe('string');\n    expect(t.shape).toEqual([3]);\n  });\n\n  it('string, explicitly parse as bool', () => {\n    expect(() => convertToTensor('a', 'argName', 'func', 'bool'))\n        .toThrowError(\n            'Argument \\'argName\\' passed to \\'func\\' must be bool tensor' +\n            ', but got string tensor');\n  });\n\n  it('string, throw error if pass null.', () => {\n    expect(() => convertToTensor('a', 'argName', 'func', null))\n        .toThrowError('Expected dtype cannot be null.');\n  });\n\n  it('fails to convert a dict to tensor', () => {\n    expect(() => convertToTensor({} as number, 'a', 'test'))\n        .toThrowError(\n            'Argument \\'a\\' passed to \\'test\\' must be a Tensor ' +\n            'or TensorLike, but got \\'Object\\'');\n  });\n\n  it('fails to convert a string to tensor', () => {\n    expect(() => convertToTensor('asdf', 'a', 'test'))\n        .toThrowError(\n            'Argument \\'a\\' passed to \\'test\\' must be numeric tensor, ' +\n            'but got string tensor');\n  });\n});\n\ndescribeWithFlags('convertToTensor debug mode', ALL_ENVS, () => {\n  beforeAll(() => {\n    // Silence debug warnings.\n    spyOn(console, 'warn');\n    tf.enableDebugMode();\n  });\n\n  it('fails to convert a non-valid shape array to tensor', () => {\n    const a = [[1, 2], [3], [4, 5, 6]];  // 2nd element has only 1 entry.\n    expect(() => convertToTensor(a, 'a', 'test'))\n        .toThrowError(\n            'Element arr[1] should have 2 elements, but has 1 elements');\n  });\n});\n"]}