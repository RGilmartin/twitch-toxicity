{"version":3,"file":"variable_test.js","sourceRoot":"","sources":["../src/variable_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from './index';\nimport {ALL_ENVS, describeWithFlags} from './jasmine_util';\nimport {Scalar, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Variable} from './tensor';\nimport {expectArraysClose} from './test_util';\nimport {Rank} from './types';\n\ndescribeWithFlags('variable', ALL_ENVS, () => {\n  it('simple assign', async () => {\n    const v = tf.variable(tf.tensor1d([1, 2, 3]));\n    expectArraysClose(await v.data(), [1, 2, 3]);\n\n    v.assign(tf.tensor1d([4, 5, 6]));\n    expectArraysClose(await v.data(), [4, 5, 6]);\n  });\n\n  it('simple chain assign', async () => {\n    const v = tf.tensor1d([1, 2, 3]).variable();\n    expectArraysClose(await v.data(), [1, 2, 3]);\n\n    v.assign(tf.tensor1d([4, 5, 6]));\n    expectArraysClose(await v.data(), [4, 5, 6]);\n  });\n\n  it('default names are unique', () => {\n    const v = tf.variable(tf.tensor1d([1, 2, 3]));\n    expect(v.name).not.toBeNull();\n\n    const v2 = tf.variable(tf.tensor1d([1, 2, 3]));\n    expect(v2.name).not.toBeNull();\n    expect(v.name).not.toBe(v2.name);\n  });\n\n  it('user provided name', () => {\n    const v = tf.variable(tf.tensor1d([1, 2, 3]), true, 'myName');\n    expect(v.name).toBe('myName');\n  });\n\n  it('if name already used, throw error', () => {\n    tf.variable(tf.tensor1d([1, 2, 3]), true, 'myName');\n    expect(() => tf.variable(tf.tensor1d([1, 2, 3]), true, 'myName'))\n        .toThrowError();\n  });\n\n  it('ops can take variables', async () => {\n    const value = tf.tensor1d([1, 2, 3]);\n    const v = tf.variable(value);\n    const res = tf.sum(v);\n    expectArraysClose(await res.data(), [6]);\n  });\n\n  it('chained variables works', async () => {\n    const v = tf.tensor1d([1, 2, 3]).variable();\n    const res = tf.sum(v);\n    expectArraysClose(await res.data(), [6]);\n  });\n\n  it('variables are not affected by tidy', async () => {\n    let v: Variable<Rank.R1>;\n    expect(tf.memory().numTensors).toBe(0);\n\n    tf.tidy(() => {\n      const value = tf.tensor1d([1, 2, 3], 'float32');\n      expect(tf.memory().numTensors).toBe(1);\n\n      v = tf.variable(value);\n      expect(tf.memory().numTensors).toBe(2);\n    });\n\n    expect(tf.memory().numTensors).toBe(1);\n    expectArraysClose(await v.data(), [1, 2, 3]);\n\n    v.dispose();\n    expect(tf.memory().numTensors).toBe(0);\n  });\n\n  it('disposing a named variable allows creating new named variable', () => {\n    const numTensors = tf.memory().numTensors;\n    const t = tf.scalar(1);\n    const varName = 'var';\n    const v = tf.variable(t, true, varName);\n\n    expect(tf.memory().numTensors).toBe(numTensors + 2);\n\n    v.dispose();\n    t.dispose();\n\n    expect(tf.memory().numTensors).toBe(numTensors);\n\n    // Create another variable with the same name.\n    const t2 = tf.scalar(1);\n    const v2 = tf.variable(t2, true, varName);\n\n    expect(tf.memory().numTensors).toBe(numTensors + 2);\n\n    t2.dispose();\n    v2.dispose();\n\n    expect(tf.memory().numTensors).toBe(numTensors);\n  });\n\n  it('double disposing a variable works', () => {\n    const numTensors = tf.memory().numTensors;\n\n    const t = tf.scalar(1);\n    const v = tf.variable(t);\n\n    expect(tf.memory().numTensors).toBe(numTensors + 2);\n\n    t.dispose();\n    v.dispose();\n\n    expect(tf.memory().numTensors).toBe(numTensors);\n\n    // Double dispose the variable.\n    v.dispose();\n    expect(tf.memory().numTensors).toBe(numTensors);\n  });\n\n  it('constructor does not dispose', async () => {\n    const a = tf.scalar(2);\n    const v = tf.variable(a);\n\n    expect(tf.memory().numTensors).toBe(2);\n    expect(tf.memory().numDataBuffers).toBe(1);\n    expectArraysClose(await v.data(), [2]);\n    expectArraysClose(await a.data(), [2]);\n  });\n\n  it('variables are assignable to tensors', () => {\n    // This test asserts compilation, not doing any run-time assertion.\n    const x0: Variable<Rank.R0> = null;\n    const y0: Scalar = x0;\n    expect(y0).toBeNull();\n\n    const x1: Variable<Rank.R1> = null;\n    const y1: Tensor1D = x1;\n    expect(y1).toBeNull();\n\n    const x2: Variable<Rank.R2> = null;\n    const y2: Tensor2D = x2;\n    expect(y2).toBeNull();\n\n    const x3: Variable<Rank.R3> = null;\n    const y3: Tensor3D = x3;\n    expect(y3).toBeNull();\n\n    const x4: Variable<Rank.R4> = null;\n    const y4: Tensor4D = x4;\n    expect(y4).toBeNull();\n\n    const xh: Variable = null;\n    const yh: Tensor = xh;\n    expect(yh).toBeNull();\n  });\n\n  it('assign does not dispose old data', async () => {\n    let v: Variable<Rank.R1>;\n    v = tf.variable(tf.tensor1d([1, 2, 3]));\n\n    expect(tf.memory().numTensors).toBe(2);\n    expect(tf.memory().numDataBuffers).toBe(1);\n\n    expectArraysClose(await v.data(), [1, 2, 3]);\n\n    const secondArray = tf.tensor1d([4, 5, 6]);\n    expect(tf.memory().numTensors).toBe(3);\n    expect(tf.memory().numDataBuffers).toBe(2);\n\n    v.assign(secondArray);\n    expectArraysClose(await v.data(), [4, 5, 6]);\n    // Assign doesn't dispose the 1st array.\n    expect(tf.memory().numTensors).toBe(3);\n    expect(tf.memory().numDataBuffers).toBe(2);\n\n    v.dispose();\n    // Disposing the variable disposes itself. The input to variable and\n    // secondArray are the only remaining tensors.\n    expect(tf.memory().numTensors).toBe(2);\n    expect(tf.memory().numDataBuffers).toBe(2);\n  });\n\n  it('shape must match', () => {\n    const v = tf.variable(tf.tensor1d([1, 2, 3]));\n    expect(() => v.assign(tf.tensor1d([1, 2]))).toThrowError();\n    // tslint:disable-next-line:no-any\n    expect(() => v.assign(tf.tensor2d([3, 4], [1, 2]) as any)).toThrowError();\n  });\n\n  it('dtype must match', () => {\n    const v = tf.variable(tf.tensor1d([1, 2, 3]));\n    // tslint:disable-next-line:no-any\n    expect(() => v.assign(tf.tensor1d([1, 1, 1], 'int32') as any))\n        .toThrowError();\n    // tslint:disable-next-line:no-any\n    expect(() => v.assign(tf.tensor1d([true, false, true], 'bool') as any))\n        .toThrowError();\n  });\n});\n\ndescribeWithFlags('x instanceof Variable', ALL_ENVS, () => {\n  it('x: Variable', () => {\n    const t = tf.variable(tf.scalar(1));\n    expect(t instanceof Variable).toBe(true);\n  });\n\n  it('x: other object, fails', () => {\n    const t = {something: 'else'};\n    expect(t instanceof Variable).toBe(false);\n  });\n\n  it('x: Tensor, fails', () => {\n    const t = tf.scalar(1);\n    expect(t instanceof Variable).toBe(false);\n  });\n});\n"]}