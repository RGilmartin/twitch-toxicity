{"version":3,"file":"Complex_test.js","sourceRoot":"","sources":["../../src/kernels/Complex_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {test_util} from '@tensorflow/tfjs-core';\n\nconst {expectArraysClose} = test_util;\n// tslint:disable-next-line: no-imports-from-dist\nimport {describeWithFlags, ALL_ENVS} from '@tensorflow/tfjs-core/dist/jasmine_util';\nimport {WebGLMemoryInfo} from '../backend_webgl';\n\nconst BYTES_PER_COMPLEX_ELEMENT = 4 * 2;\ndescribeWithFlags('complex64 memory', ALL_ENVS, () => {\n  it('usage', async () => {\n    const webglSizeUploadUniformFlagSaved =\n        tf.env().get('WEBGL_SIZE_UPLOAD_UNIFORM');\n    tf.env().set('WEBGL_SIZE_UPLOAD_UNIFORM', 4);\n\n    let numTensors = tf.memory().numTensors;\n    let numBytes = tf.memory().numBytes;\n    let numDataIds = tf.engine().backend.numDataIds();\n\n    const startTensors = numTensors;\n    const startNumBytes = numBytes;\n    const startNumBytesInGPU = (tf.memory() as WebGLMemoryInfo).numBytesInGPU;\n    const startDataIds = numDataIds;\n\n    const real1 = tf.tensor1d([1]);\n    const imag1 = tf.tensor1d([2]);\n\n    // 2 new Tensors: real1, imag1, and two data buckets created.\n    expect(tf.memory().numTensors).toBe(numTensors + 2);\n    expect(tf.memory().numBytes).toBe(numBytes + BYTES_PER_COMPLEX_ELEMENT);\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIds + 2);\n    numTensors = tf.memory().numTensors;\n    numBytes = tf.memory().numBytes;\n    numDataIds = tf.engine().backend.numDataIds();\n\n    const complex1 = tf.complex(real1, imag1);\n\n    // 1 new complex Tensor and 1 new data bucket created. No new bytes\n    // allocated.\n    expect(tf.memory().numTensors).toBe(numTensors + 1);\n    expect(tf.memory().numBytes).toBe(numBytes);\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIds + 1);\n\n    numTensors = tf.memory().numTensors;\n    numBytes = tf.memory().numBytes;\n    numDataIds = tf.engine().backend.numDataIds();\n\n    const real2 = tf.tensor1d([3]);\n    const imag2 = tf.tensor1d([4]);\n\n    // 2 new Tensors: real2, imag2, and 2 new data buckets.\n    expect(tf.memory().numTensors).toBe(numTensors + 2);\n    expect(tf.memory().numBytes).toBe(numBytes + BYTES_PER_COMPLEX_ELEMENT);\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIds + 2);\n    numTensors = tf.memory().numTensors;\n    numBytes = tf.memory().numBytes;\n    numDataIds = tf.engine().backend.numDataIds();\n\n    const complex2 = tf.complex(real2, imag2);\n\n    // 1 new Tensor and 1 new data bucket.\n    expect(tf.memory().numTensors).toBe(numTensors + 1);\n    // numBytes stays the same because it is determined by tensor creation at\n    // the engine level, and we do not increment memory for complex tensors\n    // (complex tensors track their own memory).\n    expect(tf.memory().numBytes).toBe(numBytes);\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIds + 1);\n\n    numTensors = tf.memory().numTensors;\n    numBytes = tf.memory().numBytes;\n    numDataIds = tf.engine().backend.numDataIds();\n\n    const result = complex1.add(complex2);\n\n    // A complex tensor is created, which is composed of real and imag parts.\n    // They should not increase tensor count, only complex tensor does.\n    // 3 new data buckets created for complex, real and imag.\n    expect(tf.memory().numTensors).toBe(numTensors + 1);\n    expect(tf.memory().numBytes).toBe(numBytes);\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIds + 3);\n    // Two new 1x1 textures are created to compute the sum of real / imag\n    // components, respectively. No new textures are allocated for the inputs\n    // because they are beneath the uniform upload threshold.\n    expect((tf.memory() as WebGLMemoryInfo).numBytesInGPU)\n        .toBe(startNumBytesInGPU + BYTES_PER_COMPLEX_ELEMENT);\n    numTensors = tf.memory().numTensors;\n    numDataIds = tf.engine().backend.numDataIds();\n\n    expect(result.dtype).toBe('complex64');\n    expect(result.shape).toEqual([1]);\n    expectArraysClose(await result.data(), [4, 6]);\n\n    const real = tf.real(result);\n\n    // A new tensor is created. No new data buckets created.\n    expect(tf.memory().numTensors).toBe(numTensors + 1);\n    expect(tf.memory().numBytes).toBe(numBytes + 4);\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIds);\n    numTensors = tf.memory().numTensors;\n    numBytes = tf.memory().numBytes;\n    numDataIds = tf.engine().backend.numDataIds();\n\n    expectArraysClose(await real.data(), [4]);\n\n    const imag = tf.imag(result);\n\n    // A new tensor is created. No new data buckets created.\n    expect(tf.memory().numTensors).toBe(numTensors + 1);\n    expect(tf.memory().numBytes).toBe(numBytes + 4);\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIds);\n\n    expectArraysClose(await imag.data(), [6]);\n\n    // After disposing, there should be no tensors.\n    real1.dispose();\n    imag1.dispose();\n    real2.dispose();\n    imag2.dispose();\n    complex1.dispose();\n    complex2.dispose();\n    result.dispose();\n    real.dispose();\n    imag.dispose();\n    expect(tf.memory().numTensors).toBe(startTensors);\n    expect(tf.memory().numBytes).toBe(startNumBytes);\n    expect(tf.engine().backend.numDataIds()).toBe(startDataIds);\n    expect((tf.memory() as WebGLMemoryInfo).numBytesInGPU)\n        .toBe(startNumBytesInGPU);\n\n    tf.env().set('WEBGL_SIZE_UPLOAD_UNIFORM', webglSizeUploadUniformFlagSaved);\n  });\n\n  it('Creating tf.real, tf.imag from complex.', async () => {\n    let numTensors = tf.memory().numTensors;\n    let numDataIds = tf.engine().backend.numDataIds();\n\n    const startTensors = numTensors;\n    const startDataIds = numDataIds;\n\n    const complex = tf.complex([3, 30], [4, 40]);\n\n    // 1 new tensor, 3 new data buckets.\n    expect(tf.memory().numTensors).toBe(numTensors + 1);\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIds + 3);\n    numTensors = tf.memory().numTensors;\n    numDataIds = tf.engine().backend.numDataIds();\n\n    const real = tf.real(complex);\n    const imag = tf.imag(complex);\n\n    // 2 new tensors, no new data buckets.\n    expect(tf.memory().numTensors).toBe(numTensors + 2);\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIds);\n\n    numTensors = tf.memory().numTensors;\n    numDataIds = tf.engine().backend.numDataIds();\n\n    complex.dispose();\n\n    // 1 fewer tensor, 1 fewer data buckets.\n    expect(tf.memory().numTensors).toBe(numTensors - 1);\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIds - 1);\n    expectArraysClose(await real.data(), [3, 30]);\n    expectArraysClose(await imag.data(), [4, 40]);\n\n    numTensors = tf.memory().numTensors;\n    numDataIds = tf.engine().backend.numDataIds();\n\n    real.dispose();\n    imag.dispose();\n\n    // Zero net tensors / data buckets.\n    expect(tf.memory().numTensors).toBe(startTensors);\n    expect(tf.engine().backend.numDataIds()).toBe(startDataIds);\n  });\n\n  it('tf.complex disposing underlying tensors', async () => {\n    const numTensors = tf.memory().numTensors;\n    const numDataIds = tf.engine().backend.numDataIds();\n\n    const real = tf.tensor1d([3, 30]);\n    const imag = tf.tensor1d([4, 40]);\n    expect(tf.memory().numTensors).toEqual(numTensors + 2);\n    expect(tf.engine().backend.numDataIds()).toEqual(numDataIds + 2);\n\n    const complex = tf.complex(real, imag);\n\n    // 1 new tensor is created for complex. real and imag data buckets created.\n    expect(tf.memory().numTensors).toEqual(numTensors + 3);\n    expect(tf.engine().backend.numDataIds()).toEqual(numDataIds + 3);\n\n    real.dispose();\n    imag.dispose();\n\n    expect(tf.memory().numTensors).toEqual(numTensors + 1);\n    expect(tf.engine().backend.numDataIds()).toEqual(numDataIds + 3);\n\n    expect(complex.dtype).toBe('complex64');\n    expect(complex.shape).toEqual(real.shape);\n    expectArraysClose(await complex.data(), [3, 4, 30, 40]);\n\n    complex.dispose();\n\n    expect(tf.memory().numTensors).toEqual(numTensors);\n    expect(tf.engine().backend.numDataIds()).toEqual(numDataIds);\n  });\n\n  it('reshape', async () => {\n    const memoryBefore = tf.memory();\n    const numDataIdsBefore = tf.engine().backend.numDataIds();\n    let numTensors = memoryBefore.numTensors;\n    let numDataIds = numDataIdsBefore;\n\n    const a = tf.complex([[1, 3, 5], [7, 9, 11]], [[2, 4, 6], [8, 10, 12]]);\n\n    // 1 new tensor, the complex64 tensor\n    expect(tf.memory().numTensors).toBe(memoryBefore.numTensors + 1);\n    // 1 new tensor and 2 underlying data buckets for real and imag.\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIdsBefore + 3);\n    numTensors = tf.memory().numTensors;\n    numDataIds = tf.engine().backend.numDataIds();\n\n    const b = a.reshape([6]);\n    // 1 new tensor from the reshape.\n    expect(tf.memory().numTensors).toBe(numTensors + 1);\n    // No new data buckets.\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIds);\n\n    expect(b.dtype).toBe('complex64');\n    expect(b.shape).toEqual([6]);\n    expectArraysClose(await a.data(), await b.data());\n\n    b.dispose();\n    // 1 complex tensor should be disposed.\n    expect(tf.memory().numTensors).toBe(numTensors);\n    // Data buckets not deleted yet.\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIds);\n\n    a.dispose();\n    // All the tensors should now be disposed.\n    expect(tf.memory().numTensors).toBe(memoryBefore.numTensors);\n    // The underlying memory should now be released.\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIdsBefore);\n  });\n\n  it('clone', async () => {\n    const memoryBefore = tf.memory();\n    const numDataIdsBefore = tf.engine().backend.numDataIds();\n\n    const a = tf.complex([[1, 3, 5], [7, 9, 11]], [[2, 4, 6], [8, 10, 12]]);\n\n    // 1 new tensor, the complex64 tensor\n    expect(tf.memory().numTensors).toBe(memoryBefore.numTensors + 1);\n    // 1 new tensor and 2 underlying data buckets for real and imag.\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIdsBefore + 3);\n\n    const b = a.clone();\n\n    // 1 new tensor from the clone.\n    expect(tf.memory().numTensors).toBe(memoryBefore.numTensors + 2);\n    // No new data buckets.\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIdsBefore + 3);\n\n    expect(b.dtype).toBe('complex64');\n    expectArraysClose(await a.data(), await b.data());\n\n    b.dispose();\n\n    // 1 complex tensor should be disposed.\n    expect(tf.memory().numTensors).toBe(memoryBefore.numTensors + 1);\n    // Data bucket not deleted yet.\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIdsBefore + 3);\n\n    a.dispose();\n\n    // All the tensors should now be disposed.\n    expect(tf.memory().numTensors).toBe(memoryBefore.numTensors);\n    expect(tf.engine().backend.numDataIds()).toBe(numDataIdsBefore);\n  });\n\n  it('Multiple complex tensors sharing same underlying components works',\n     async () => {\n       const numTensors = tf.memory().numTensors;\n       const numDataIds = tf.engine().backend.numDataIds();\n\n       const real = tf.tensor1d([1]);\n       const imag = tf.tensor1d([2]);\n\n       expect(tf.memory().numTensors).toEqual(numTensors + 2);\n       expect(tf.engine().backend.numDataIds()).toEqual(numDataIds + 2);\n\n       const complex1 = tf.complex(real, imag);\n       const complex2 = tf.complex(real, imag);\n\n       expect(tf.memory().numTensors).toEqual(numTensors + 4);\n       expect(tf.engine().backend.numDataIds()).toEqual(numDataIds + 4);\n\n       real.dispose();\n       expect(tf.memory().numTensors).toEqual(numTensors + 3);\n       expect(tf.engine().backend.numDataIds()).toEqual(numDataIds + 4);\n\n       complex1.dispose();\n       expect(tf.memory().numTensors).toEqual(numTensors + 2);\n       expect(tf.engine().backend.numDataIds()).toEqual(numDataIds + 3);\n\n       expectArraysClose(await complex2.data(), [1, 2]);\n     });\n\n  it('tidy should not have mem leak', async () => {\n    const numTensors = tf.memory().numTensors;\n    const numDataIds = tf.engine().backend.numDataIds();\n    const complex = tf.tidy(() => {\n      const real = tf.tensor1d([3, 30]);\n      const realReshape = tf.reshape(real, [2]);\n      const imag = tf.tensor1d([4, 40]);\n      const imagReshape = tf.reshape(imag, [2]);\n      expect(tf.memory().numTensors).toEqual(numTensors + 4);\n      expect(tf.engine().backend.numDataIds()).toEqual(numDataIds + 2);\n\n      const complex = tf.complex(realReshape, imagReshape);\n\n      // 1 new tensor is created for complex. real and imag data buckets\n      // created.\n      expect(tf.memory().numTensors).toEqual(numTensors + 5);\n      expect(tf.engine().backend.numDataIds()).toEqual(numDataIds + 3);\n\n      return complex;\n    });\n\n    complex.dispose();\n\n    expect(tf.memory().numTensors).toEqual(numTensors);\n    expect(tf.engine().backend.numDataIds()).toEqual(numDataIds);\n  });\n});\n"]}