{"version":3,"file":"shader_compiler_util_test.js","sourceRoot":"","sources":["../src/shader_compiler_util_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,iDAAiD;AACjD,OAAO,EAAC,iBAAiB,EAAC,MAAM,yCAAyC,CAAC;AAC1E,OAAO,EAAC,UAAU,EAAC,MAAM,+BAA+B,CAAC;AACzD,OAAO,EAAC,MAAM,EAAE,kCAAkC,EAAC,MAAM,wBAAwB,CAAC;AAElF,iBAAiB,CAAC,iBAAiB,EAAE,UAAU,EAAE,GAAG,EAAE;IACpD,EAAE,CAAC,qDAAqD;QACjD,0DAA0D,EAC9D,GAAG,EAAE;QACH,MAAM,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAErC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;aAC3B,OAAO,CAAC,mCAAmC,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEN,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAChE,MAAM,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAEpD,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;aAC3B,OAAO,CACJ,iEAAiE,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D;QACzD,0DAA0D,EAC9D,GAAG,EAAE;QACH,MAAM,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC/B,MAAM,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAExB,MAAM,CAAC,kCAAkC,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aACpD,OAAO,CACJ,oCAAoC;YACpC,2CAA2C,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// tslint:disable-next-line: no-imports-from-dist\nimport {describeWithFlags} from '@tensorflow/tfjs-core/dist/jasmine_util';\nimport {WEBGL_ENVS} from './backend_webgl_test_registry';\nimport {dotify, getLogicalCoordinatesFromFlatIndex} from './shader_compiler_util';\n\ndescribeWithFlags('shader compiler', WEBGL_ENVS, () => {\n  it('dotify takes two arrays of coordinates and produces' +\n         'the glsl that finds the dot product of those coordinates',\n     () => {\n       const coords1 = ['r', 'g', 'b', 'a'];\n       const coords2 = ['x', 'y', 'z', 'w'];\n\n       expect(dotify(coords1, coords2))\n           .toEqual('dot(vec4(r,g,b,a), vec4(x,y,z,w))');\n     });\n\n  it('dotify should split up arrays into increments of vec4s', () => {\n    const coords1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n    const coords2 = ['h', 'i', 'j', 'k', 'l', 'm', 'n'];\n\n    expect(dotify(coords1, coords2))\n        .toEqual(\n            'dot(vec4(a,b,c,d), vec4(h,i,j,k))+dot(vec3(e,f,g), vec3(l,m,n))');\n  });\n\n  it('getLogicalCoordinatesFromFlatIndex produces glsl that takes' +\n         'a flat index and finds its coordinates within that shape',\n     () => {\n       const coords = ['r', 'c', 'd'];\n       const shape = [1, 2, 3];\n\n       expect(getLogicalCoordinatesFromFlatIndex(coords, shape))\n           .toEqual(\n               'int r = index / 6; index -= r * 6;' +\n               'int c = index / 3; int d = index - c * 3;');\n     });\n});\n"]}