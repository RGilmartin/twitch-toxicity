{"version":3,"file":"reshape.js","sourceRoot":"","sources":["../../src/kernel_utils/reshape.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAKH,OAAO,EAAC,oBAAoB,EAAC,MAAM,uBAAuB,CAAC;AAC3D,OAAO,EAAC,WAAW,EAAE,WAAW,EAAC,MAAM,eAAe,CAAC;AAEvD,MAAM,UAAU,aAAa,CACzB,KAAiB,EAAE,UAAoB,EACvC,OAAyB;IAC3B,MAAM,YAAY,GACd,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC;QACxB,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAA6B,CAAC;IAC9D,MAAM,OAAO,GAAe;QAC1B,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,KAAK,EAAE,YAAY;QACnB,MAAM,EAAE,KAAK,CAAC,MAAM;KACrB,CAAC;IACF,MAAM,cAAc,GAChB,CAAC,WAAW,CAAC,UAAU,CAAC;QACvB,GAAG,WAAW,CAAC,UAAU,CAAC,CAA6B,CAAC;IAE7D,MAAM,OAAO,GAAG,IAAI,oBAAoB,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IACvE,MAAM,6BAA6B,GAAG,IAAI,CAAC;IAC3C,MAAM,MAAM,GAAG,OAAO,CAAC,eAAe,CAClC,OAAO,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,iBAAiB,EACvD,6BAA6B,CAAC,CAAC;IACnC,OAAO,EAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAC,CAAC;AACzE,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, null /* customSetup */,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n"]}