{"version":3,"file":"webgl_batchnorm_test.js","sourceRoot":"","sources":["../src/webgl_batchnorm_test.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAC5C,OAAO,EAAC,SAAS,EAAC,MAAM,uBAAuB,CAAC;AAChD,MAAM,EAAC,iBAAiB,EAAC,GAAG,SAAS,CAAC;AACtC,iDAAiD;AACjD,OAAO,EAAC,iBAAiB,EAAC,MAAM,yCAAyC,CAAC;AAC1E,OAAO,EAAC,WAAW,EAAE,UAAU,EAAC,MAAM,+BAA+B,CAAC;AAEtE,iBAAiB,CAAC,WAAW,EAAE,UAAU,EAAE,GAAG,EAAE;IAC9C,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACnD,MAAM,IAAI,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,MAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAEhD,MAAM,MAAM,GAAG,EAAE,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QACjD,iBAAiB,CACb,MAAM,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,cAAc,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;QACpE,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC;QAE1C,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CACjB;YACE,UAAU,EAAE,UAAU,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,CAAC,UAAU;YAC5D,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,UAAU;YACrE,UAAU,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;YAC3D,UAAU,EAAE,UAAU;SACvB,EACD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACf,MAAM,IAAI,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;QAC/D,MAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;QACnE,MAAM,MAAM,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;QACjE,MAAM,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC;QAC/D,MAAM,eAAe,GAAG,IAAI,CAAC;QAE7B,MAAM,MAAM,GACR,EAAE,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;QAEtE,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,wBAAwB,EAAE,cAAc,CAAC,CAAC;QAEvD,iBAAiB,CAAC,MAAM,MAAM,CAAC,IAAI,EAAE,EAAE;YACrC,UAAU,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC,UAAU,EAAE,CAAC,UAAU,EAAE,UAAU;YACxE,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,UAAU,EAAE,CAAC,UAAU,EAAE,UAAU;YACzE,UAAU,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS;SACvE,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,iBAAiB,CAAC,kBAAkB,EAAE,WAAW,EAAE,GAAG,EAAE;IACtD,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACnD,MAAM,IAAI,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,eAAe,GAAG,IAAI,CAAC;QAE7B,MAAM,aAAa,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC;QAC3C,MAAM,eAAe,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC;QAC/C,EAAE,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,eAAe,CAAC,CAAC;QACzE,MAAM,WAAW,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC;QACzC,MAAM,aAAa,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC;QAE7C,MAAM,CAAC,WAAW,GAAG,aAAa,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAChD,MAAM,CAAC,aAAa,GAAG,eAAe,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {test_util} from '@tensorflow/tfjs-core';\nconst {expectArraysClose} = test_util;\n// tslint:disable-next-line: no-imports-from-dist\nimport {describeWithFlags} from '@tensorflow/tfjs-core/dist/jasmine_util';\nimport {PACKED_ENVS, WEBGL_ENVS} from './backend_webgl_test_registry';\n\ndescribeWithFlags('batchNorm', WEBGL_ENVS, () => {\n  it('should work for broadcasted inputs', async () => {\n    const x = tf.tensor4d([2, 4, 9, 23], [2, 1, 1, 2]);\n    const mean = tf.tensor4d([1], [1, 1, 1, 1]);\n    const variance = tf.tensor4d([1], [1, 1, 1, 1]);\n\n    const result = tf.batchNorm4d(x, mean, variance);\n    expectArraysClose(\n        await result.data(), [0.9995003, 2.9985011, 7.9960027, 21.9890079]);\n  });\n\n  it('should work when squarification results in zero padding', async () => {\n    const maxTextureSize = tf.env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n    tf.env().set('WEBGL_MAX_TEXTURE_SIZE', 5);\n\n    const x = tf.tensor3d(\n        [\n          0.49955603, 0.04158615, -1.09440524, 2.03854165, -0.61578344,\n          2.87533573, 1.18105987, 0.807462, 1.87888837, 2.26563962, -0.37040935,\n          1.35848753, -0.75347094, 0.15683117, 0.91925946, 0.34121279,\n          0.92717143, 1.89683965\n        ],\n        [2, 3, 3]);\n    const mean = tf.tensor1d([0.39745062, -0.48062894, 0.4847822]);\n    const variance = tf.tensor1d([0.32375343, 0.67117643, 1.08334653]);\n    const offset = tf.tensor1d([0.69398749, -1.29056387, 0.9429723]);\n    const scale = tf.tensor1d([-0.5607271, 0.9878457, 0.25181573]);\n    const varianceEpsilon = .001;\n\n    const result =\n        tf.batchNorm3d(x, mean, variance, offset, scale, varianceEpsilon);\n\n    tf.env().set('WEBGL_MAX_TEXTURE_SIZE', maxTextureSize);\n\n    expectArraysClose(await result.data(), [\n      0.59352049, -0.66135202, 0.5610874, -0.92077015, -1.45341019, 1.52106473,\n      -0.07704776, 0.26144429, 1.28010017, -1.14422404, -1.15776136, 1.15425493,\n      1.82644104, -0.52249442, 1.04803919, 0.74932291, 0.40568101, 1.2844412\n    ]);\n  });\n});\n\ndescribeWithFlags('batchnorm packed', PACKED_ENVS, () => {\n  it('should not leak memory', () => {\n    const x = tf.tensor4d([2, 4, 9, 23], [2, 1, 1, 2]);\n    const mean = tf.tensor1d([1, 2]);\n    const variance = tf.tensor1d([2, 3]);\n    const varianceEpsilon = .001;\n\n    const startNumBytes = tf.memory().numBytes;\n    const startNumTensors = tf.memory().numTensors;\n    tf.batchNorm4d(x, mean, variance, undefined, undefined, varianceEpsilon);\n    const endNumBytes = tf.memory().numBytes;\n    const endNumTensors = tf.memory().numTensors;\n\n    expect(endNumBytes - startNumBytes).toEqual(16);\n    expect(endNumTensors - startNumTensors).toEqual(1);\n  });\n});\n"]}