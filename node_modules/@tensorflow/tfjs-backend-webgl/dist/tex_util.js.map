{"version":3,"file":"tex_util.js","sourceRoot":"","sources":["../src/tex_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataId, DataType, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: WebGLTexture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensorInfos, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n  }\n  downloadTextureFormat = gl.RGBA;\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n"]}