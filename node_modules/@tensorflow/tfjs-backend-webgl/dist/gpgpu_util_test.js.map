{"version":3,"file":"gpgpu_util_test.js","sourceRoot":"","sources":["../src/gpgpu_util_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// tslint:disable-next-line: no-imports-from-dist\nimport {describeWithFlags} from '@tensorflow/tfjs-core/dist/jasmine_util';\nimport {WEBGL_ENVS} from './backend_webgl_test_registry';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\n\ndescribeWithFlags('gpgpu_util createWebGLContext', WEBGL_ENVS, () => {\n  let gpgpu: GPGPUContext;\n\n  beforeEach(() => {\n    gpgpu = new GPGPUContext();\n  });\n\n  afterEach(() => {\n    gpgpu.dispose();\n  });\n\n  it('disables DEPTH_TEST and STENCIL_TEST', () => {\n    expect(gpgpu.gl.getParameter(gpgpu.gl.DEPTH_TEST)).toEqual(false);\n    expect(gpgpu.gl.getParameter(gpgpu.gl.STENCIL_TEST)).toEqual(false);\n  });\n\n  it('disables BLEND', () => {\n    expect(gpgpu.gl.getParameter(gpgpu.gl.BLEND)).toEqual(false);\n  });\n\n  it('disables DITHER, POLYGON_OFFSET_FILL', () => {\n    expect(gpgpu.gl.getParameter(gpgpu.gl.DITHER)).toEqual(false);\n    expect(gpgpu.gl.getParameter(gpgpu.gl.POLYGON_OFFSET_FILL)).toEqual(false);\n  });\n\n  it('enables CULL_FACE with BACK', () => {\n    expect(gpgpu.gl.getParameter(gpgpu.gl.CULL_FACE)).toEqual(true);\n    expect(gpgpu.gl.getParameter(gpgpu.gl.CULL_FACE_MODE))\n        .toEqual(gpgpu.gl.BACK);\n  });\n\n  it('enables SCISSOR_TEST', () => {\n    expect(gpgpu.gl.getParameter(gpgpu.gl.SCISSOR_TEST)).toEqual(true);\n  });\n});\n\ndescribeWithFlags('gpgpu_util createFloat32MatrixTexture', WEBGL_ENVS, () => {\n  it('sets the TEXTURE_WRAP S+T parameters to CLAMP_TO_EDGE', () => {\n    const gpgpu = new GPGPUContext();\n    const textureConfig = tex_util.getTextureConfig(gpgpu.gl);\n    const tex =\n        gpgpu_util.createFloat32MatrixTexture(gpgpu.gl, 32, 32, textureConfig);\n    gpgpu.gl.bindTexture(gpgpu.gl.TEXTURE_2D, tex);\n    expect(\n        gpgpu.gl.getTexParameter(gpgpu.gl.TEXTURE_2D, gpgpu.gl.TEXTURE_WRAP_S))\n        .toEqual(gpgpu.gl.CLAMP_TO_EDGE);\n    expect(\n        gpgpu.gl.getTexParameter(gpgpu.gl.TEXTURE_2D, gpgpu.gl.TEXTURE_WRAP_T))\n        .toEqual(gpgpu.gl.CLAMP_TO_EDGE);\n    gpgpu.gl.bindTexture(gpgpu.gl.TEXTURE_2D, null);\n    gpgpu.deleteMatrixTexture(tex);\n    gpgpu.dispose();\n  });\n\n  it('sets the TEXTURE_[MIN|MAG]_FILTER parameters to NEAREST', () => {\n    const gpgpu = new GPGPUContext();\n    const textureConfig = tex_util.getTextureConfig(gpgpu.gl);\n    const tex =\n        gpgpu_util.createFloat32MatrixTexture(gpgpu.gl, 32, 32, textureConfig);\n    gpgpu.gl.bindTexture(gpgpu.gl.TEXTURE_2D, tex);\n    expect(gpgpu.gl.getTexParameter(\n               gpgpu.gl.TEXTURE_2D, gpgpu.gl.TEXTURE_MIN_FILTER))\n        .toEqual(gpgpu.gl.NEAREST);\n    expect(gpgpu.gl.getTexParameter(\n               gpgpu.gl.TEXTURE_2D, gpgpu.gl.TEXTURE_MAG_FILTER))\n        .toEqual(gpgpu.gl.NEAREST);\n    gpgpu.gl.bindTexture(gpgpu.gl.TEXTURE_2D, null);\n    gpgpu.deleteMatrixTexture(tex);\n    gpgpu.dispose();\n  });\n});\n\ndescribeWithFlags('gpgpu_util createPackedMatrixTexture', WEBGL_ENVS, () => {\n  it('sets the TEXTURE_WRAP S+T parameters to CLAMP_TO_EDGE', () => {\n    const gpgpu = new GPGPUContext();\n    const textureConfig = tex_util.getTextureConfig(gpgpu.gl);\n    const tex =\n        gpgpu_util.createPackedMatrixTexture(gpgpu.gl, 32, 32, textureConfig);\n    gpgpu.gl.bindTexture(gpgpu.gl.TEXTURE_2D, tex);\n    expect(\n        gpgpu.gl.getTexParameter(gpgpu.gl.TEXTURE_2D, gpgpu.gl.TEXTURE_WRAP_S))\n        .toEqual(gpgpu.gl.CLAMP_TO_EDGE);\n    expect(\n        gpgpu.gl.getTexParameter(gpgpu.gl.TEXTURE_2D, gpgpu.gl.TEXTURE_WRAP_T))\n        .toEqual(gpgpu.gl.CLAMP_TO_EDGE);\n    gpgpu.gl.bindTexture(gpgpu.gl.TEXTURE_2D, null);\n    gpgpu.deleteMatrixTexture(tex);\n    gpgpu.dispose();\n  });\n\n  it('sets the TEXTURE_[MIN|MAG]_FILTER parameters to NEAREST', () => {\n    const gpgpu = new GPGPUContext();\n    const textureConfig = tex_util.getTextureConfig(gpgpu.gl);\n    const tex =\n        gpgpu_util.createPackedMatrixTexture(gpgpu.gl, 32, 32, textureConfig);\n    gpgpu.gl.bindTexture(gpgpu.gl.TEXTURE_2D, tex);\n    expect(gpgpu.gl.getTexParameter(\n               gpgpu.gl.TEXTURE_2D, gpgpu.gl.TEXTURE_MIN_FILTER))\n        .toEqual(gpgpu.gl.NEAREST);\n    expect(gpgpu.gl.getTexParameter(\n               gpgpu.gl.TEXTURE_2D, gpgpu.gl.TEXTURE_MAG_FILTER))\n        .toEqual(gpgpu.gl.NEAREST);\n    gpgpu.gl.bindTexture(gpgpu.gl.TEXTURE_2D, null);\n    gpgpu.deleteMatrixTexture(tex);\n    gpgpu.dispose();\n  });\n});\n"]}